/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import bluetooth.CalibrationValues;
import bluetooth.PcClient;
import java.awt.CardLayout;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.microedition.io.StreamConnection;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.xmlpull.v1.XmlPullParserException;
import wocketXML.XMLWriter;

/**
 *
 * @author Aida
 */
public class BatteryLifeSummary extends javax.swing.JPanel {

    JPanel userProcessContainer;
    InputStream inStream = null;
    OutputStream outStream = null;
    CalibrationValues calibrationValues;
    int[] btCalValues;
    
    public BatteryLifeSummary(JPanel upc, InputStream is, OutputStream os, CalibrationValues cv) throws IOException {
        initComponents();
        userProcessContainer = upc;userProcessContainer = upc;
        outStream = os;
        inStream = is;
        calibrationValues = cv;        
        btCalValues = calibrationValues.getBattery_calibration();
        refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btCalibrateButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();

        btCalibrateButton.setText("Calibrate Battery");
        btCalibrateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCalibrateButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Put the Wockets in the charger for at least 10 minutes. ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Battery life summary");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("PC-Wocket Application");

        jLabel5.setText("After 10 minutes ditach Wockets from the charger and click \"Calibrate battery\"");

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "LifeTime", "Battery Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(resultTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btCalibrateButton))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(41, 41, 41))
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(btCalibrateButton)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refresh(){
        int rowCount = resultTable.getRowCount();
        for ( int i= rowCount-1; i>= 0; i--){
            ((DefaultTableModel)resultTable.getModel()).removeRow(i);   
        }        
        Object[]new_row = new Object[2];
        new_row[0] = "100%";
        new_row[1] = btCalValues[0];
        ((DefaultTableModel)resultTable.getModel()).addRow(new_row);        
        new_row[0] = "80%";
        new_row[1] = btCalValues[1];
        ((DefaultTableModel)resultTable.getModel()).addRow(new_row);
        new_row[0] = "60%";
        new_row[1] = btCalValues[2];
        ((DefaultTableModel)resultTable.getModel()).addRow(new_row);
        new_row[0] = "40%";
        new_row[1] = btCalValues[3];
        ((DefaultTableModel)resultTable.getModel()).addRow(new_row);
        new_row[0] = "20%";
        new_row[1] = btCalValues[4];
        ((DefaultTableModel)resultTable.getModel()).addRow(new_row);
        new_row[0] = "10%";
        new_row[1] = btCalValues[5];
        ((DefaultTableModel)resultTable.getModel()).addRow(new_row);
    }
    
    private void btCalibrateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCalibrateButtonActionPerformed
        try {
            XMLWriter.xmlWriter(calibrationValues);
        } catch (XmlPullParserException ex) {
            System.out.println("XmlPullParserException in BatteryLifeSummary jPanel");
        } catch (IOException ex) {
            Logger.getLogger(TestBattery.class.getName()).log(Level.SEVERE, null, ex);
        }
        JPanel donePanel= null;
        try {
            PcClient.CalibrateBattery(outStream, btCalValues);
            donePanel = new DoneCalibration(userProcessContainer, inStream, outStream);
        } catch (IOException ex) {
            Logger.getLogger(BatteryLifeSummary.class.getName()).log(Level.SEVERE, null, ex);
        }
        userProcessContainer.add("donePanel",donePanel);
        CardLayout c1 = (CardLayout)userProcessContainer.getLayout();
        c1.next(userProcessContainer);
    }//GEN-LAST:event_btCalibrateButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout c1 = (CardLayout)userProcessContainer.getLayout();
        c1.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton btCalibrateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable resultTable;
    // End of variables declaration//GEN-END:variables
}
