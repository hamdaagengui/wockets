/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import bluetooth.PcClient;
import java.awt.CardLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.bluetooth.RemoteDevice;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.microedition.io.StreamConnection;
import javax.swing.JOptionPane;

/**
 *
 * @author Aida
 */
public class ConnectPanel extends javax.swing.JPanel {

    JPanel userProcessContainer; 
    Vector btDevices;
    PcClient btConnect;
    
    public ConnectPanel(JPanel upc) {
        initComponents();
        
        userProcessContainer = upc;
        //btDevices = btD;  
        try {
            PcClient.findDevices();
        } catch (IOException ex) {
            Logger.getLogger(ConnectPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        btDevices = PcClient.vecDevices;
        
        refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        wocketsTable = new javax.swing.JTable();
        connect = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        wocketsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Index", "Wocket Name", "Wocket Address"
            }
        ));
        jScrollPane1.setViewportView(wocketsTable);

        connect.setText("Connect");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Select the Wocket you want to calibrate and click Conncet");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("PC-Wocket Application");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Connecting to Wocket");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Available Wockets");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE))
                .addGap(41, 41, 41))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(connect)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(connect)
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void refresh(){
        int rowCount = wocketsTable.getRowCount();
        int i;

        for ( i= rowCount-1; i>= 0; i--){
        ((DefaultTableModel)wocketsTable.getModel()).removeRow(i);   
        }

        ArrayList <String> itemList = new ArrayList <String>();
        int btSize = btDevices.size();
        int cnt = 0;
        for (int k=0; k<btSize; k++){
            RemoteDevice remoteDevice=(RemoteDevice)btDevices.elementAt(k);
            String adr= remoteDevice.getBluetoothAddress();            
            if (adr.contains("00066606")){
                cnt++;
                Object[]new_row = new Object[3];
                new_row[0] = cnt;
                new_row[1] = "Wocket-"+adr.substring(8);
                new_row[2] = remoteDevice.getBluetoothAddress();
                ((DefaultTableModel)wocketsTable.getModel()).addRow(new_row);            
            }else{
                btDevices.removeElementAt(k);
                k--;
                btSize--;
            }
        }
    }
    
    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        int index = (Integer) wocketsTable.getValueAt(wocketsTable.getSelectedRow(), 0);
        //System.out.println("index: "+index);
        StreamConnection streamConnection = null;
        JPanel calibrationPanel = null;
        try {
            streamConnection = btConnect.connect(index-1);
            //calibrationPanel = new CalibrationPanel(userProcessContainer, streamConnection, btConnect);
            System.out.println("Connection is done.");
            calibrationPanel = new CalibrationPanel(userProcessContainer, streamConnection);
        } catch (IOException ex) {
            System.out.println("Error in Connecting to Wocket! "+ex);
        }
       
        userProcessContainer.add("CalibrationPanel",calibrationPanel);
        CardLayout c1 = (CardLayout)userProcessContainer.getLayout();
        c1.next(userProcessContainer);
    }//GEN-LAST:event_connectActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable wocketsTable;
    // End of variables declaration//GEN-END:variables
}
