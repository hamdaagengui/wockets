
Wockets-Version3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000048b0  00004964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048b0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000350b  0080010a  0080010a  0000496e  2**0
                  ALLOC
  3 .eeprom       00000021  00810000  00810000  0000496e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000080  00000000  00000000  0000498f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000cf8  00000000  00000000  00004a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026e1  00000000  00000000  00005707  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00007de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002daa  00000000  00000000  000085b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  0000b360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b82  00000000  00000000  0000b790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f96  00000000  00000000  0000c312  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  0000d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
       4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
       8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
       c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      10:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      14:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      18:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      1c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      20:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      24:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      28:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_11>
      30:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      34:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      38:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      3c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      40:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      44:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      48:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      4c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      50:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      54:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      58:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      5c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      60:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      68:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      6c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      70:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      78:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      7c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      80:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      84:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      88:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      8c:	55 14       	cp	r5, r5
      8e:	55 14       	cp	r5, r5
      90:	55 14       	cp	r5, r5
      92:	55 14       	cp	r5, r5
      94:	55 14       	cp	r5, r5
      96:	53 14       	cp	r5, r3
      98:	55 14       	cp	r5, r5
      9a:	59 14       	cp	r5, r9
      9c:	55 14       	cp	r5, r5
      9e:	53 14       	cp	r5, r3
      a0:	55 14       	cp	r5, r5
      a2:	53 14       	cp	r5, r3
      a4:	55 14       	cp	r5, r5
      a6:	53 14       	cp	r5, r3
      a8:	55 14       	cp	r5, r5
      aa:	55 14       	cp	r5, r5
      ac:	55 14       	cp	r5, r5
      ae:	55 14       	cp	r5, r5
      b0:	55 14       	cp	r5, r5
      b2:	53 14       	cp	r5, r3
      b4:	55 14       	cp	r5, r5
      b6:	59 14       	cp	r5, r9
      b8:	55 14       	cp	r5, r5
      ba:	55 14       	cp	r5, r5
      bc:	55 14       	cp	r5, r5
      be:	57 14       	cp	r5, r7
      c0:	53 14       	cp	r5, r3
      c2:	55 14       	cp	r5, r5
      c4:	4b 15       	cp	r20, r11
      c6:	6e 15       	cp	r22, r14
      c8:	2f 16       	cp	r2, r31
      ca:	58 19       	sub	r21, r8
      cc:	68 15       	cp	r22, r8
      ce:	58 19       	sub	r21, r8
      d0:	62 17       	cp	r22, r18
      d2:	9e 16       	cp	r9, r30
      d4:	28 16       	cp	r2, r24
      d6:	73 16       	cp	r7, r19
      d8:	58 19       	sub	r21, r8
      da:	58 19       	sub	r21, r8
      dc:	1a 16       	cp	r1, r26
      de:	20 16       	cp	r2, r16
      e0:	58 19       	sub	r21, r8
      e2:	46 15       	cp	r20, r6
      e4:	3d 15       	cp	r19, r13
      e6:	41 15       	cp	r20, r1
      e8:	85 16       	cp	r8, r21
      ea:	8e 16       	cp	r8, r30
      ec:	d4 17       	cp	r29, r20
      ee:	4f 18       	sub	r4, r15
      f0:	15 19       	sub	r17, r5
      f2:	1a 19       	sub	r17, r10
      f4:	24 19       	sub	r18, r4
      f6:	06 15       	cp	r16, r6
      f8:	97 16       	cp	r9, r23
      fa:	90 14       	cp	r9, r0

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d0 e4       	ldi	r29, 0x40	; 64
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
     108:	11 e0       	ldi	r17, 0x01	; 1
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	e0 eb       	ldi	r30, 0xB0	; 176
     110:	f8 e4       	ldi	r31, 0x48	; 72
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	aa 30       	cpi	r26, 0x0A	; 10
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	16 e3       	ldi	r17, 0x36	; 54
     124:	aa e0       	ldi	r26, 0x0A	; 10
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a5 31       	cpi	r26, 0x15	; 21
     12e:	b1 07       	cpc	r27, r17
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 e7 02 	call	0x5ce	; 0x5ce <main>
     136:	0c 94 56 24 	jmp	0x48ac	; 0x48ac <_exit>

0000013a <__bad_interrupt>:
     13a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013e <Filter>:
unsigned int dockcounter=0;
unsigned int pseq=0;
unsigned int cc=0;

unsigned short Filter(unsigned short data,int axis)
{
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	ec 01       	movw	r28, r24
     148:	8b 01       	movw	r16, r22
     14a:	82 e5       	ldi	r24, 0x52	; 82
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	68 9f       	mul	r22, r24
     150:	f0 01       	movw	r30, r0
     152:	69 9f       	mul	r22, r25
     154:	f0 0d       	add	r31, r0
     156:	78 9f       	mul	r23, r24
     158:	f0 0d       	add	r31, r0
     15a:	11 24       	eor	r1, r1
     15c:	ec 51       	subi	r30, 0x1C	; 28
     15e:	f7 4f       	sbci	r31, 0xF7	; 247
     160:	40 e0       	ldi	r20, 0x00	; 0
     162:	50 e0       	ldi	r21, 0x00	; 0
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
	 unsigned short mean=0;
     int j=0;           
     for (; (j < 40); j++)
	 {
	 	  mean+=xv[axis][j];
     168:	80 81       	ld	r24, Z
     16a:	91 81       	ldd	r25, Z+1	; 0x01
     16c:	48 0f       	add	r20, r24
     16e:	59 1f       	adc	r21, r25
          xv[axis][j] = xv[axis][j + 1];		  		  
     170:	2f 5f       	subi	r18, 0xFF	; 255
     172:	3f 4f       	sbci	r19, 0xFF	; 255
     174:	82 81       	ldd	r24, Z+2	; 0x02
     176:	93 81       	ldd	r25, Z+3	; 0x03
     178:	81 93       	st	Z+, r24
     17a:	91 93       	st	Z+, r25

unsigned short Filter(unsigned short data,int axis)
{
	 unsigned short mean=0;
     int j=0;           
     for (; (j < 40); j++)
     17c:	28 32       	cpi	r18, 0x28	; 40
     17e:	31 05       	cpc	r19, r1
     180:	99 f7       	brne	.-26     	; 0x168 <Filter+0x2a>
	 {
	 	  mean+=xv[axis][j];
          xv[axis][j] = xv[axis][j + 1];		  		  
	 }
	 mean=mean/40;
     182:	ca 01       	movw	r24, r20
     184:	68 e2       	ldi	r22, 0x28	; 40
     186:	70 e0       	ldi	r23, 0x00	; 0
     188:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__udivmodhi4>
     18c:	9b 01       	movw	r18, r22
     xv[axis][j] = data;
     18e:	82 e5       	ldi	r24, 0x52	; 82
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	08 9f       	mul	r16, r24
     194:	f0 01       	movw	r30, r0
     196:	09 9f       	mul	r16, r25
     198:	f0 0d       	add	r31, r0
     19a:	18 9f       	mul	r17, r24
     19c:	f0 0d       	add	r31, r0
     19e:	11 24       	eor	r1, r1
     1a0:	ec 5c       	subi	r30, 0xCC	; 204
     1a2:	f6 4f       	sbci	r31, 0xF6	; 246
     1a4:	d1 83       	std	Z+1, r29	; 0x01
     1a6:	c0 83       	st	Z, r28
         
				 
	 if (data>mean)
     1a8:	6c 17       	cp	r22, r28
     1aa:	7d 07       	cpc	r23, r29
     1ac:	20 f4       	brcc	.+8      	; 0x1b6 <Filter+0x78>
	 	return (data-mean);
     1ae:	be 01       	movw	r22, r28
     1b0:	62 1b       	sub	r22, r18
     1b2:	73 0b       	sbc	r23, r19
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Filter+0x7c>
	 else
	 	return (mean-data);      
     1b6:	6c 1b       	sub	r22, r28
     1b8:	7d 0b       	sbc	r23, r29
}
     1ba:	cb 01       	movw	r24, r22
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	08 95       	ret

000001c6 <__vector_11>:




ISR(TIMER2_OVF_vect)
{
     1c6:	1f 92       	push	r1
     1c8:	0f 92       	push	r0
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	0f 92       	push	r0
     1ce:	0b b6       	in	r0, 0x3b	; 59
     1d0:	0f 92       	push	r0
     1d2:	11 24       	eor	r1, r1
     1d4:	1f 93       	push	r17
     1d6:	2f 93       	push	r18
     1d8:	3f 93       	push	r19
     1da:	4f 93       	push	r20
     1dc:	5f 93       	push	r21
     1de:	6f 93       	push	r22
     1e0:	7f 93       	push	r23
     1e2:	8f 93       	push	r24
     1e4:	9f 93       	push	r25
     1e6:	af 93       	push	r26
     1e8:	bf 93       	push	r27
     1ea:	ef 93       	push	r30
     1ec:	ff 93       	push	r31
		;
	}
	pseq=cseq;	
	*/

	if (_is_docked())
     1ee:	0e 94 58 23 	call	0x46b0	; 0x46b0 <_is_docked>
     1f2:	20 91 30 01 	lds	r18, 0x0130
     1f6:	88 23       	and	r24, r24
     1f8:	31 f1       	breq	.+76     	; 0x246 <__vector_11+0x80>
	{
		dockcounter++;		
     1fa:	80 91 31 01 	lds	r24, 0x0131
     1fe:	90 91 32 01 	lds	r25, 0x0132
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	90 93 32 01 	sts	0x0132, r25
     208:	80 93 31 01 	sts	0x0131, r24
		if ((!isdocked)&& (dockcounter>2400)){	
     20c:	22 23       	and	r18, r18
     20e:	09 f0       	breq	.+2      	; 0x212 <__vector_11+0x4c>
     210:	25 c1       	rjmp	.+586    	; 0x45c <__vector_11+0x296>
     212:	81 56       	subi	r24, 0x61	; 97
     214:	99 40       	sbci	r25, 0x09	; 9
     216:	08 f4       	brcc	.+2      	; 0x21a <__vector_11+0x54>
     218:	21 c1       	rjmp	.+578    	; 0x45c <__vector_11+0x296>
		
				
			ci=0;
     21a:	10 92 19 01 	sts	0x0119, r1
     21e:	10 92 18 01 	sts	0x0118, r1
			si=0;
     222:	10 92 1b 01 	sts	0x011B, r1
     226:	10 92 1a 01 	sts	0x011A, r1
			cseq=0; 
     22a:	10 92 11 01 	sts	0x0111, r1
     22e:	10 92 10 01 	sts	0x0110, r1
			sseq=0;		
     232:	10 92 13 01 	sts	0x0113, r1
     236:	10 92 12 01 	sts	0x0112, r1
			_bluetooth_turn_off();
     23a:	0e 94 3e 22 	call	0x447c	; 0x447c <_bluetooth_turn_off>
			isdocked=1;			
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 30 01 	sts	0x0130, r24
     244:	0b c1       	rjmp	.+534    	; 0x45c <__vector_11+0x296>
		}
		return;
	}else
	{
		dockcounter=0;
     246:	10 92 32 01 	sts	0x0132, r1
     24a:	10 92 31 01 	sts	0x0131, r1
		if (isdocked)
     24e:	22 23       	and	r18, r18
     250:	21 f0       	breq	.+8      	; 0x25a <__vector_11+0x94>
		{
			_bluetooth_turn_on();
     252:	0e 94 33 22 	call	0x4466	; 0x4466 <_bluetooth_turn_on>
			isdocked=0;			
     256:	10 92 30 01 	sts	0x0130, r1
		}
	}

	if (connected==0){
     25a:	80 91 28 01 	lds	r24, 0x0128
     25e:	88 23       	and	r24, r24
     260:	01 f5       	brne	.+64     	; 0x2a2 <__vector_11+0xdc>
		blink_counter++;
     262:	20 91 db 35 	lds	r18, 0x35DB
     266:	30 91 dc 35 	lds	r19, 0x35DC
     26a:	2f 5f       	subi	r18, 0xFF	; 255
     26c:	3f 4f       	sbci	r19, 0xFF	; 255
     26e:	30 93 dc 35 	sts	0x35DC, r19
     272:	20 93 db 35 	sts	0x35DB, r18
		if (blink_counter==(_SAMPLING_RATE*5))
     276:	90 91 06 01 	lds	r25, 0x0106
     27a:	85 e0       	ldi	r24, 0x05	; 5
     27c:	98 9f       	mul	r25, r24
     27e:	c0 01       	movw	r24, r0
     280:	11 24       	eor	r1, r1
     282:	28 17       	cp	r18, r24
     284:	39 07       	cpc	r19, r25
     286:	19 f4       	brne	.+6      	; 0x28e <__vector_11+0xc8>
			_greenled_turn_on();
     288:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_greenled_turn_on>
     28c:	0a c0       	rjmp	.+20     	; 0x2a2 <__vector_11+0xdc>
		else if (blink_counter==((_SAMPLING_RATE*5)+10))
     28e:	0a 96       	adiw	r24, 0x0a	; 10
     290:	28 17       	cp	r18, r24
     292:	39 07       	cpc	r19, r25
     294:	31 f4       	brne	.+12     	; 0x2a2 <__vector_11+0xdc>
		{
			_greenled_turn_off();
     296:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <_greenled_turn_off>
			blink_counter=0;
     29a:	10 92 dc 35 	sts	0x35DC, r1
     29e:	10 92 db 35 	sts	0x35DB, r1
	else if (docking_counter>0)
		docking_counter=0;

*/		
	/* Skip sampling depending on the sampling rate variables/timers */
 	if (interrupt_reps==0)
     2a2:	90 91 2c 01 	lds	r25, 0x012C
     2a6:	99 23       	and	r25, r25
     2a8:	89 f4       	brne	.+34     	; 0x2cc <__vector_11+0x106>
	{	
		interrupt_reps=_wTCNT2_reps;
     2aa:	80 91 07 01 	lds	r24, 0x0107
     2ae:	80 93 2c 01 	sts	0x012C, r24
		TCNT2=_wTCNT2;
     2b2:	80 91 50 01 	lds	r24, 0x0150
     2b6:	80 93 b2 00 	sts	0x00B2, r24
		return;
	}

	
	/* Sample data and transmt it if necessary */
	sampleFlag=1;
     2ba:	11 e0       	ldi	r17, 0x01	; 1
     2bc:	10 93 1e 01 	sts	0x011E, r17
	if (_wTM==_TM_Continuous)
     2c0:	80 91 52 01 	lds	r24, 0x0152
     2c4:	88 23       	and	r24, r24
     2c6:	09 f0       	breq	.+2      	; 0x2ca <__vector_11+0x104>
     2c8:	50 c0       	rjmp	.+160    	; 0x36a <__vector_11+0x1a4>
     2ca:	0d c0       	rjmp	.+26     	; 0x2e6 <__vector_11+0x120>
	{	
		interrupt_reps=_wTCNT2_reps;
		TCNT2=_wTCNT2;
	}
	else{ //otherwise wait
		if (interrupt_reps==1)	
     2cc:	91 30       	cpi	r25, 0x01	; 1
     2ce:	19 f4       	brne	.+6      	; 0x2d6 <__vector_11+0x110>
			TCNT2=_wTCNT2_last;	
     2d0:	80 91 51 01 	lds	r24, 0x0151
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <__vector_11+0x114>
		else		
			TCNT2=_wTCNT2;					
     2d6:	80 91 50 01 	lds	r24, 0x0150
     2da:	80 93 b2 00 	sts	0x00B2, r24
		interrupt_reps--;
     2de:	91 50       	subi	r25, 0x01	; 1
     2e0:	90 93 2c 01 	sts	0x012C, r25
     2e4:	bb c0       	rjmp	.+374    	; 0x45c <__vector_11+0x296>
	/* Sample data and transmt it if necessary */
	sampleFlag=1;
	if (_wTM==_TM_Continuous)
	{

		_wPC++;
     2e6:	80 91 53 01 	lds	r24, 0x0153
     2ea:	90 91 54 01 	lds	r25, 0x0154
     2ee:	a0 91 55 01 	lds	r26, 0x0155
     2f2:	b0 91 56 01 	lds	r27, 0x0156
     2f6:	01 96       	adiw	r24, 0x01	; 1
     2f8:	a1 1d       	adc	r26, r1
     2fa:	b1 1d       	adc	r27, r1
     2fc:	80 93 53 01 	sts	0x0153, r24
     300:	90 93 54 01 	sts	0x0154, r25
     304:	a0 93 55 01 	sts	0x0155, r26
     308:	b0 93 56 01 	sts	0x0156, r27

		if (!_bluetooth_is_connected())
     30c:	0e 94 59 22 	call	0x44b2	; 0x44b2 <_bluetooth_is_connected>
     310:	88 23       	and	r24, r24
     312:	29 f4       	brne	.+10     	; 0x31e <__vector_11+0x158>
		{
			justconnected=0;
     314:	10 92 2f 01 	sts	0x012F, r1
			compress=0; //false
     318:	10 92 1d 01 	sts	0x011D, r1
     31c:	9f c0       	rjmp	.+318    	; 0x45c <__vector_11+0x296>
			//	_wShutdownTimer--;
				//if (_wShutdownTimer==0)
				//	_atmega_finalize();
			//}
			return;		
		}else if (justconnected==0)
     31e:	80 91 2f 01 	lds	r24, 0x012F
     322:	88 23       	and	r24, r24
     324:	11 f4       	brne	.+4      	; 0x32a <__vector_11+0x164>
			justconnected=1;
     326:	10 93 2f 01 	sts	0x012F, r17

		if (_wShutdownTimer!=_DEFAULT_SHUTDOWN)
     32a:	20 91 5f 01 	lds	r18, 0x015F
     32e:	30 91 60 01 	lds	r19, 0x0160
     332:	40 91 61 01 	lds	r20, 0x0161
     336:	50 91 62 01 	lds	r21, 0x0162
     33a:	80 91 5b 01 	lds	r24, 0x015B
     33e:	90 91 5c 01 	lds	r25, 0x015C
     342:	a0 91 5d 01 	lds	r26, 0x015D
     346:	b0 91 5e 01 	lds	r27, 0x015E
     34a:	82 17       	cp	r24, r18
     34c:	93 07       	cpc	r25, r19
     34e:	a4 07       	cpc	r26, r20
     350:	b5 07       	cpc	r27, r21
     352:	41 f0       	breq	.+16     	; 0x364 <__vector_11+0x19e>
			_wShutdownTimer=_DEFAULT_SHUTDOWN;
     354:	20 93 5b 01 	sts	0x015B, r18
     358:	30 93 5c 01 	sts	0x015C, r19
     35c:	40 93 5d 01 	sts	0x015D, r20
     360:	50 93 5e 01 	sts	0x015E, r21


		_receive_data();
     364:	0e 94 19 14 	call	0x2832	; 0x2832 <_receive_data>
     368:	79 c0       	rjmp	.+242    	; 0x45c <__vector_11+0x296>
	}
	else if (_wTM==_TM_Burst_60)
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	09 f0       	breq	.+2      	; 0x370 <__vector_11+0x1aa>
     36e:	76 c0       	rjmp	.+236    	; 0x45c <__vector_11+0x296>
	{

		if (_wPDT!=0)
     370:	80 91 f9 35 	lds	r24, 0x35F9
     374:	88 23       	and	r24, r24
     376:	99 f0       	breq	.+38     	; 0x39e <__vector_11+0x1d8>
			_wShutdownTimer--;
     378:	80 91 5b 01 	lds	r24, 0x015B
     37c:	90 91 5c 01 	lds	r25, 0x015C
     380:	a0 91 5d 01 	lds	r26, 0x015D
     384:	b0 91 5e 01 	lds	r27, 0x015E
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	a1 09       	sbc	r26, r1
     38c:	b1 09       	sbc	r27, r1
     38e:	80 93 5b 01 	sts	0x015B, r24
     392:	90 93 5c 01 	sts	0x015C, r25
     396:	a0 93 5d 01 	sts	0x015D, r26
     39a:	b0 93 5e 01 	sts	0x015E, r27

		 _wPC++;
     39e:	80 91 53 01 	lds	r24, 0x0153
     3a2:	90 91 54 01 	lds	r25, 0x0154
     3a6:	a0 91 55 01 	lds	r26, 0x0155
     3aa:	b0 91 56 01 	lds	r27, 0x0156
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	a1 1d       	adc	r26, r1
     3b2:	b1 1d       	adc	r27, r1
     3b4:	80 93 53 01 	sts	0x0153, r24
     3b8:	90 93 54 01 	sts	0x0154, r25
     3bc:	a0 93 55 01 	sts	0x0155, r26
     3c0:	b0 93 56 01 	sts	0x0156, r27


		if (!_bluetooth_is_connected())
     3c4:	0e 94 59 22 	call	0x44b2	; 0x44b2 <_bluetooth_is_connected>
     3c8:	88 23       	and	r24, r24
     3ca:	11 f5       	brne	.+68     	; 0x410 <__vector_11+0x24a>
		{
			
			compress=0; 
     3cc:	10 92 1d 01 	sts	0x011D, r1

			if (seconds_disconnected<1800)
     3d0:	80 91 29 01 	lds	r24, 0x0129
     3d4:	90 91 2a 01 	lds	r25, 0x012A
     3d8:	27 e0       	ldi	r18, 0x07	; 7
     3da:	88 30       	cpi	r24, 0x08	; 8
     3dc:	92 07       	cpc	r25, r18
     3de:	30 f4       	brcc	.+12     	; 0x3ec <__vector_11+0x226>
				seconds_disconnected++;
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	90 93 2a 01 	sts	0x012A, r25
     3e6:	80 93 29 01 	sts	0x0129, r24
     3ea:	38 c0       	rjmp	.+112    	; 0x45c <__vector_11+0x296>
			else if (seconds_disconnected==1800)
     3ec:	88 50       	subi	r24, 0x08	; 8
     3ee:	97 40       	sbci	r25, 0x07	; 7
     3f0:	a9 f5       	brne	.+106    	; 0x45c <__vector_11+0x296>
			{
				//before turning on the bluetooth make sure you flush the receive buffer
				_receive_uart0_flush();
     3f2:	0e 94 63 22 	call	0x44c6	; 0x44c6 <_receive_uart0_flush>
				_bluetooth_turn_on();		
     3f6:	0e 94 33 22 	call	0x4466	; 0x4466 <_bluetooth_turn_on>
				seconds_disconnected=1801;			
     3fa:	89 e0       	ldi	r24, 0x09	; 9
     3fc:	97 e0       	ldi	r25, 0x07	; 7
     3fe:	90 93 2a 01 	sts	0x012A, r25
     402:	80 93 29 01 	sts	0x0129, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     406:	80 e2       	ldi	r24, 0x20	; 32
     408:	9e e4       	ldi	r25, 0x4E	; 78
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	f1 f7       	brne	.-4      	; 0x40a <__vector_11+0x244>
     40e:	26 c0       	rjmp	.+76     	; 0x45c <__vector_11+0x296>
		//_atmega_initialize_uart0(ATMEGA_BAUD_38400, TX_RX_UART_MODE);
//		_atmega_initialize_uart1(ATMEGA_BAUD_38400, TX_RX_UART_MODE);
	

		//reset shutdown timer if connected
		if ((_wPDT!=0) && (_wShutdownTimer!=_DEFAULT_SHUTDOWN))
     410:	80 91 f9 35 	lds	r24, 0x35F9
     414:	88 23       	and	r24, r24
     416:	e9 f0       	breq	.+58     	; 0x452 <__vector_11+0x28c>
     418:	20 91 5f 01 	lds	r18, 0x015F
     41c:	30 91 60 01 	lds	r19, 0x0160
     420:	40 91 61 01 	lds	r20, 0x0161
     424:	50 91 62 01 	lds	r21, 0x0162
     428:	80 91 5b 01 	lds	r24, 0x015B
     42c:	90 91 5c 01 	lds	r25, 0x015C
     430:	a0 91 5d 01 	lds	r26, 0x015D
     434:	b0 91 5e 01 	lds	r27, 0x015E
     438:	82 17       	cp	r24, r18
     43a:	93 07       	cpc	r25, r19
     43c:	a4 07       	cpc	r26, r20
     43e:	b5 07       	cpc	r27, r21
     440:	41 f0       	breq	.+16     	; 0x452 <__vector_11+0x28c>
			_wShutdownTimer=_DEFAULT_SHUTDOWN;
     442:	20 93 5b 01 	sts	0x015B, r18
     446:	30 93 5c 01 	sts	0x015C, r19
     44a:	40 93 5d 01 	sts	0x015D, r20
     44e:	50 93 5e 01 	sts	0x015E, r21



		_receive_data();		
     452:	0e 94 19 14 	call	0x2832	; 0x2832 <_receive_data>
		connected=1;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 28 01 	sts	0x0128, r24
	}




}
     45c:	ff 91       	pop	r31
     45e:	ef 91       	pop	r30
     460:	bf 91       	pop	r27
     462:	af 91       	pop	r26
     464:	9f 91       	pop	r25
     466:	8f 91       	pop	r24
     468:	7f 91       	pop	r23
     46a:	6f 91       	pop	r22
     46c:	5f 91       	pop	r21
     46e:	4f 91       	pop	r20
     470:	3f 91       	pop	r19
     472:	2f 91       	pop	r18
     474:	1f 91       	pop	r17
     476:	0f 90       	pop	r0
     478:	0b be       	out	0x3b, r0	; 59
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <_send_pdu>:
	 	return (mean-data);      
}



static __inline__ void _send_pdu(unsigned short x, unsigned short y, unsigned short z){	
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	ec 01       	movw	r28, r24
     492:	8b 01       	movw	r16, r22
     494:	7a 01       	movw	r14, r20
	if(compress)
     496:	80 91 1d 01 	lds	r24, 0x011D
     49a:	88 23       	and	r24, r24
     49c:	09 f4       	brne	.+2      	; 0x4a0 <_send_pdu+0x1c>
     49e:	7e c0       	rjmp	.+252    	; 0x59c <_send_pdu+0x118>
					{
						deltasign=0;
     4a0:	10 92 e5 35 	sts	0x35E5, r1
						if (x>prevx)
     4a4:	20 91 dc 09 	lds	r18, 0x09DC
     4a8:	30 91 dd 09 	lds	r19, 0x09DD
     4ac:	2c 17       	cp	r18, r28
     4ae:	3d 07       	cpc	r19, r29
     4b0:	58 f4       	brcc	.+22     	; 0x4c8 <_send_pdu+0x44>
						{
							deltasign |=0x01;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 e5 35 	sts	0x35E5, r24
							prevx=x-prevx;
     4b8:	ce 01       	movw	r24, r28
     4ba:	82 1b       	sub	r24, r18
     4bc:	93 0b       	sbc	r25, r19
     4be:	90 93 dd 09 	sts	0x09DD, r25
     4c2:	80 93 dc 09 	sts	0x09DC, r24
     4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <_send_pdu+0x50>
						}
						else
							prevx=prevx-x;
     4c8:	2c 1b       	sub	r18, r28
     4ca:	3d 0b       	sbc	r19, r29
     4cc:	30 93 dd 09 	sts	0x09DD, r19
     4d0:	20 93 dc 09 	sts	0x09DC, r18
						if (y>prevy)
     4d4:	20 91 e1 09 	lds	r18, 0x09E1
     4d8:	30 91 e2 09 	lds	r19, 0x09E2
     4dc:	20 17       	cp	r18, r16
     4de:	31 07       	cpc	r19, r17
     4e0:	68 f4       	brcc	.+26     	; 0x4fc <_send_pdu+0x78>
						{
							deltasign |=0x02;
     4e2:	80 91 e5 35 	lds	r24, 0x35E5
     4e6:	82 60       	ori	r24, 0x02	; 2
     4e8:	80 93 e5 35 	sts	0x35E5, r24
							prevy=y-prevy;
     4ec:	c8 01       	movw	r24, r16
     4ee:	82 1b       	sub	r24, r18
     4f0:	93 0b       	sbc	r25, r19
     4f2:	90 93 e2 09 	sts	0x09E2, r25
     4f6:	80 93 e1 09 	sts	0x09E1, r24
     4fa:	06 c0       	rjmp	.+12     	; 0x508 <_send_pdu+0x84>
						}
						else
							prevy=prevy-y;
     4fc:	20 1b       	sub	r18, r16
     4fe:	31 0b       	sbc	r19, r17
     500:	30 93 e2 09 	sts	0x09E2, r19
     504:	20 93 e1 09 	sts	0x09E1, r18
						if (z>prevz)
     508:	20 91 d5 35 	lds	r18, 0x35D5
     50c:	30 91 d6 35 	lds	r19, 0x35D6
     510:	2e 15       	cp	r18, r14
     512:	3f 05       	cpc	r19, r15
     514:	68 f4       	brcc	.+26     	; 0x530 <_send_pdu+0xac>
						{
							deltasign |=0x04;
     516:	80 91 e5 35 	lds	r24, 0x35E5
     51a:	84 60       	ori	r24, 0x04	; 4
     51c:	80 93 e5 35 	sts	0x35E5, r24
							prevz=z-prevz;
     520:	c7 01       	movw	r24, r14
     522:	82 1b       	sub	r24, r18
     524:	93 0b       	sbc	r25, r19
     526:	90 93 d6 35 	sts	0x35D6, r25
     52a:	80 93 d5 35 	sts	0x35D5, r24
     52e:	06 c0       	rjmp	.+12     	; 0x53c <_send_pdu+0xb8>
						}
						else
							prevz=prevz-z;
     530:	2e 19       	sub	r18, r14
     532:	3f 09       	sbc	r19, r15
     534:	30 93 d6 35 	sts	0x35D6, r19
     538:	20 93 d5 35 	sts	0x35D5, r18
						if ((prevx<32) && (prevy<32) && (prevz<32))
     53c:	a0 91 dc 09 	lds	r26, 0x09DC
     540:	b0 91 dd 09 	lds	r27, 0x09DD
     544:	a0 32       	cpi	r26, 0x20	; 32
     546:	b1 05       	cpc	r27, r1
     548:	18 f5       	brcc	.+70     	; 0x590 <_send_pdu+0x10c>
     54a:	e0 91 e1 09 	lds	r30, 0x09E1
     54e:	f0 91 e2 09 	lds	r31, 0x09E2
     552:	e0 32       	cpi	r30, 0x20	; 32
     554:	f1 05       	cpc	r31, r1
     556:	e0 f4       	brcc	.+56     	; 0x590 <_send_pdu+0x10c>
     558:	20 91 d5 35 	lds	r18, 0x35D5
     55c:	30 91 d6 35 	lds	r19, 0x35D6
     560:	20 32       	cpi	r18, 0x20	; 32
     562:	31 05       	cpc	r19, r1
     564:	a8 f4       	brcc	.+42     	; 0x590 <_send_pdu+0x10c>
							//_send_uncompressed_pdu(x,y,z);
							//_send_compressed_pdu(30,20,15);
							_send_compressed_pdu((prevx | ((deltasign &0x01)<<5)),(prevy | ((deltasign &0x02)<<4)),(prevz | ((deltasign &0x04)<<3)));
     566:	40 91 e5 35 	lds	r20, 0x35E5
     56a:	84 2f       	mov	r24, r20
     56c:	81 70       	andi	r24, 0x01	; 1
     56e:	82 95       	swap	r24
     570:	88 0f       	add	r24, r24
     572:	80 7e       	andi	r24, 0xE0	; 224
     574:	64 2f       	mov	r22, r20
     576:	62 70       	andi	r22, 0x02	; 2
     578:	62 95       	swap	r22
     57a:	60 7f       	andi	r22, 0xF0	; 240
     57c:	6e 2b       	or	r22, r30
     57e:	44 70       	andi	r20, 0x04	; 4
     580:	44 0f       	add	r20, r20
     582:	44 0f       	add	r20, r20
     584:	44 0f       	add	r20, r20
     586:	42 2b       	or	r20, r18
     588:	8a 2b       	or	r24, r26
     58a:	0e 94 b5 1a 	call	0x356a	; 0x356a <_send_compressed_pdu>
     58e:	0c c0       	rjmp	.+24     	; 0x5a8 <_send_pdu+0x124>
						else
							_send_uncompressed_pdu(x,y,z);
     590:	ce 01       	movw	r24, r28
     592:	b8 01       	movw	r22, r16
     594:	a7 01       	movw	r20, r14
     596:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_send_uncompressed_pdu>
     59a:	06 c0       	rjmp	.+12     	; 0x5a8 <_send_pdu+0x124>
					}
					else
					{
					 	_send_uncompressed_pdu(x,y,z);
     59c:	ce 01       	movw	r24, r28
     59e:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_send_uncompressed_pdu>
						compress=1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	80 93 1d 01 	sts	0x011D, r24
					}
					prevx=x;
     5a8:	d0 93 dd 09 	sts	0x09DD, r29
     5ac:	c0 93 dc 09 	sts	0x09DC, r28
					prevy=y;
     5b0:	10 93 e2 09 	sts	0x09E2, r17
     5b4:	00 93 e1 09 	sts	0x09E1, r16
					prevz=z;
     5b8:	f0 92 d6 35 	sts	0x35D6, r15
     5bc:	e0 92 d5 35 	sts	0x35D5, r14

}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ff 90       	pop	r15
     5ca:	ef 90       	pop	r14
     5cc:	08 95       	ret

000005ce <main>:

int main()
{
     5ce:	4f 92       	push	r4
     5d0:	5f 92       	push	r5
     5d2:	6f 92       	push	r6
     5d4:	7f 92       	push	r7
     5d6:	8f 92       	push	r8
     5d8:	9f 92       	push	r9
     5da:	af 92       	push	r10
     5dc:	bf 92       	push	r11
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29



	if (_is_docked()){
     5ee:	0e 94 58 23 	call	0x46b0	; 0x46b0 <_is_docked>
     5f2:	88 23       	and	r24, r24
     5f4:	a1 f0       	breq	.+40     	; 0x61e <main+0x50>
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e1       	ldi	r20, 0x10	; 16
     5fc:	57 e2       	ldi	r21, 0x27	; 39
     5fe:	0c c0       	rjmp	.+24     	; 0x618 <main+0x4a>
     600:	fa 01       	movw	r30, r20
     602:	31 97       	sbiw	r30, 0x01	; 1
     604:	f1 f7       	brne	.-4      	; 0x602 <main+0x34>
		for(int j=0;(j<10);j++)
			for(int i=0;(i<200);i++)
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	88 3c       	cpi	r24, 0xC8	; 200
     60a:	91 05       	cpc	r25, r1
     60c:	c9 f7       	brne	.-14     	; 0x600 <main+0x32>
{



	if (_is_docked()){
		for(int j=0;(j<10);j++)
     60e:	2f 5f       	subi	r18, 0xFF	; 255
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	2a 30       	cpi	r18, 0x0A	; 10
     614:	31 05       	cpc	r19, r1
     616:	19 f0       	breq	.+6      	; 0x61e <main+0x50>
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	f1 cf       	rjmp	.-30     	; 0x600 <main+0x32>
			for(int i=0;(i<200);i++)
				_delay_ms(5);
	}
				
	scounter=0;
     61e:	10 92 de 35 	sts	0x35DE, r1
     622:	10 92 dd 35 	sts	0x35DD, r1
	//Initialized data buffer
	dataIndex=0;
     626:	10 92 db 09 	sts	0x09DB, r1
     62a:	10 92 da 09 	sts	0x09DA, r1
	dataSubindex=0;
     62e:	10 92 de 09 	sts	0x09DE, r1
	// Blink green for 5 seconds	

	_wocket_initialize();
     632:	0e 94 80 1b 	call	0x3700	; 0x3700 <_wocket_initialize>
		

	AC_NUMS=_SAMPLING_RATE *60;
     636:	80 91 06 01 	lds	r24, 0x0106
     63a:	2c e3       	ldi	r18, 0x3C	; 60
     63c:	82 9f       	mul	r24, r18
     63e:	c0 01       	movw	r24, r0
     640:	11 24       	eor	r1, r1
     642:	90 93 0d 01 	sts	0x010D, r25
     646:	80 93 0c 01 	sts	0x010C, r24
	power_adc_disable();
     64a:	80 91 64 00 	lds	r24, 0x0064
     64e:	81 60       	ori	r24, 0x01	; 1
     650:	80 93 64 00 	sts	0x0064, r24
  	power_spi_disable();
     654:	80 91 64 00 	lds	r24, 0x0064
     658:	84 60       	ori	r24, 0x04	; 4
     65a:	80 93 64 00 	sts	0x0064, r24
  	power_timer0_disable();
     65e:	80 91 64 00 	lds	r24, 0x0064
     662:	80 62       	ori	r24, 0x20	; 32
     664:	80 93 64 00 	sts	0x0064, r24
  	power_timer1_disable();
     668:	80 91 64 00 	lds	r24, 0x0064
     66c:	88 60       	ori	r24, 0x08	; 8
     66e:	80 93 64 00 	sts	0x0064, r24
  	power_twi_disable();
     672:	80 91 64 00 	lds	r24, 0x0064
     676:	80 68       	ori	r24, 0x80	; 128
     678:	80 93 64 00 	sts	0x0064, r24
								if (_wPC>40){	//Skip the first samples						
									if (summary_count==0)
									{
										vmag=vmag/24;
										if (vmag>65535)
											acount[ci]=65535;
     67c:	66 24       	eor	r6, r6
     67e:	6a 94       	dec	r6
     680:	76 2c       	mov	r7, r6
     682:	40 e1       	ldi	r20, 0x10	; 16
     684:	44 2e       	mov	r4, r20
     686:	47 e2       	ldi	r20, 0x27	; 39
     688:	54 2e       	mov	r5, r20
			

			

		//Sample only in the main loop because of p
		if(sampleFlag){			
     68a:	80 91 1e 01 	lds	r24, 0x011E
     68e:	88 23       	and	r24, r24
     690:	11 f4       	brne	.+4      	; 0x696 <main+0xc8>
     692:	0c 94 be 13 	jmp	0x277c	; 0x277c <main+0x21ae>
			power_adc_enable();
     696:	80 91 64 00 	lds	r24, 0x0064
     69a:	8e 7f       	andi	r24, 0xFE	; 254
     69c:	80 93 64 00 	sts	0x0064, r24
			_atmega_adc_turn_on();
     6a0:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <_atmega_adc_turn_on>
			sampleFlag=0;
     6a4:	10 92 1e 01 	sts	0x011E, r1
#ifdef _VERSION ==3




			x=_atmega_a2dConvert10bit(ADC0);
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
     6ae:	90 93 47 01 	sts	0x0147, r25
     6b2:	80 93 46 01 	sts	0x0146, r24
		
			y=_atmega_a2dConvert10bit(ADC1);
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
     6bc:	90 93 49 01 	sts	0x0149, r25
     6c0:	80 93 48 01 	sts	0x0148, r24

			z=_atmega_a2dConvert10bit(ADC2);
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
     6ca:	90 93 4b 01 	sts	0x014B, r25
     6ce:	80 93 4a 01 	sts	0x014A, r24
			//x=y=z=cc++;
			//if (cc>=1024)
			//	cc=0;

				vmag+=Filter(x,0)+Filter(y,1)+Filter(z,2);
     6d2:	c0 90 e0 35 	lds	r12, 0x35E0
     6d6:	d0 90 e1 35 	lds	r13, 0x35E1
     6da:	e0 90 e2 35 	lds	r14, 0x35E2
     6de:	f0 90 e3 35 	lds	r15, 0x35E3
     6e2:	80 91 46 01 	lds	r24, 0x0146
     6e6:	90 91 47 01 	lds	r25, 0x0147
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
     6f2:	5c 01       	movw	r10, r24
     6f4:	80 91 48 01 	lds	r24, 0x0148
     6f8:	90 91 49 01 	lds	r25, 0x0149
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
     704:	8c 01       	movw	r16, r24
     706:	80 91 4a 01 	lds	r24, 0x014A
     70a:	90 91 4b 01 	lds	r25, 0x014B
     70e:	62 e0       	ldi	r22, 0x02	; 2
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
     716:	0a 0d       	add	r16, r10
     718:	1b 1d       	adc	r17, r11
     71a:	08 0f       	add	r16, r24
     71c:	19 1f       	adc	r17, r25
     71e:	b8 01       	movw	r22, r16
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	6c 0d       	add	r22, r12
     726:	7d 1d       	adc	r23, r13
     728:	8e 1d       	adc	r24, r14
     72a:	9f 1d       	adc	r25, r15
     72c:	60 93 e0 35 	sts	0x35E0, r22
     730:	70 93 e1 35 	sts	0x35E1, r23
     734:	80 93 e2 35 	sts	0x35E2, r24
     738:	90 93 e3 35 	sts	0x35E3, r25
			

				if (_wPC>40){	//Skip the first samples						
     73c:	20 91 53 01 	lds	r18, 0x0153
     740:	30 91 54 01 	lds	r19, 0x0154
     744:	40 91 55 01 	lds	r20, 0x0155
     748:	50 91 56 01 	lds	r21, 0x0156
     74c:	29 32       	cpi	r18, 0x29	; 41
     74e:	31 05       	cpc	r19, r1
     750:	41 05       	cpc	r20, r1
     752:	51 05       	cpc	r21, r1
     754:	08 f4       	brcc	.+2      	; 0x758 <main+0x18a>
     756:	85 c0       	rjmp	.+266    	; 0x862 <main+0x294>
					if (summary_count==0)
     758:	20 91 00 01 	lds	r18, 0x0100
     75c:	30 91 01 01 	lds	r19, 0x0101
     760:	21 15       	cp	r18, r1
     762:	31 05       	cpc	r19, r1
     764:	09 f0       	breq	.+2      	; 0x768 <main+0x19a>
     766:	76 c0       	rjmp	.+236    	; 0x854 <main+0x286>
					{
						vmag=vmag/24;
     768:	28 e1       	ldi	r18, 0x18	; 24
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__udivmodsi4>
     774:	c9 01       	movw	r24, r18
     776:	da 01       	movw	r26, r20
     778:	e0 91 18 01 	lds	r30, 0x0118
     77c:	f0 91 19 01 	lds	r31, 0x0119
						if (vmag>65535)
     780:	80 30       	cpi	r24, 0x00	; 0
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	92 07       	cpc	r25, r18
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	a2 07       	cpc	r26, r18
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	b2 07       	cpc	r27, r18
     78e:	38 f0       	brcs	.+14     	; 0x79e <main+0x1d0>
							acount[ci]=65535;
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	ed 59       	subi	r30, 0x9D	; 157
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	71 82       	std	Z+1, r7	; 0x01
     79a:	60 82       	st	Z, r6
     79c:	06 c0       	rjmp	.+12     	; 0x7aa <main+0x1dc>
						else
							acount[ci]=(unsigned short) vmag;
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	ed 59       	subi	r30, 0x9D	; 157
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	91 83       	std	Z+1, r25	; 0x01
     7a8:	80 83       	st	Z, r24
				 		vmag=0;
     7aa:	10 92 e0 35 	sts	0x35E0, r1
     7ae:	10 92 e1 35 	sts	0x35E1, r1
     7b2:	10 92 e2 35 	sts	0x35E2, r1
     7b6:	10 92 e3 35 	sts	0x35E3, r1
						++ci;
     7ba:	80 91 18 01 	lds	r24, 0x0118
     7be:	90 91 19 01 	lds	r25, 0x0119
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	90 93 19 01 	sts	0x0119, r25
     7c8:	80 93 18 01 	sts	0x0118, r24
						if (ci==AC_BUFFER_SIZE)
     7cc:	80 5c       	subi	r24, 0xC0	; 192
     7ce:	93 40       	sbci	r25, 0x03	; 3
     7d0:	21 f4       	brne	.+8      	; 0x7da <main+0x20c>
							ci=0;
     7d2:	10 92 19 01 	sts	0x0119, r1
     7d6:	10 92 18 01 	sts	0x0118, r1
						cseq++;
     7da:	80 91 10 01 	lds	r24, 0x0110
     7de:	90 91 11 01 	lds	r25, 0x0111
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	90 93 11 01 	sts	0x0111, r25
     7e8:	80 93 10 01 	sts	0x0110, r24
		
						if (ci==si)
     7ec:	20 91 18 01 	lds	r18, 0x0118
     7f0:	30 91 19 01 	lds	r19, 0x0119
     7f4:	80 91 1a 01 	lds	r24, 0x011A
     7f8:	90 91 1b 01 	lds	r25, 0x011B
     7fc:	28 17       	cp	r18, r24
     7fe:	39 07       	cpc	r19, r25
     800:	b1 f4       	brne	.+44     	; 0x82e <main+0x260>
						{
							si++;
     802:	c9 01       	movw	r24, r18
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	90 93 1b 01 	sts	0x011B, r25
     80a:	80 93 1a 01 	sts	0x011A, r24
							if (si==AC_BUFFER_SIZE)
     80e:	80 5c       	subi	r24, 0xC0	; 192
     810:	93 40       	sbci	r25, 0x03	; 3
     812:	21 f4       	brne	.+8      	; 0x81c <main+0x24e>
								si=0;
     814:	10 92 1b 01 	sts	0x011B, r1
     818:	10 92 1a 01 	sts	0x011A, r1
							sseq++;
     81c:	80 91 12 01 	lds	r24, 0x0112
     820:	90 91 13 01 	lds	r25, 0x0113
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	90 93 13 01 	sts	0x0113, r25
     82a:	80 93 12 01 	sts	0x0112, r24
						}
						acount[ci]=0;
     82e:	e0 91 18 01 	lds	r30, 0x0118
     832:	f0 91 19 01 	lds	r31, 0x0119
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	ed 59       	subi	r30, 0x9D	; 157
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	11 82       	std	Z+1, r1	; 0x01
     840:	10 82       	st	Z, r1
						summary_count=AC_NUMS;
     842:	80 91 0c 01 	lds	r24, 0x010C
     846:	90 91 0d 01 	lds	r25, 0x010D
     84a:	90 93 01 01 	sts	0x0101, r25
     84e:	80 93 00 01 	sts	0x0100, r24
     852:	14 c0       	rjmp	.+40     	; 0x87c <main+0x2ae>
					}else
						summary_count--;
     854:	21 50       	subi	r18, 0x01	; 1
     856:	30 40       	sbci	r19, 0x00	; 0
     858:	30 93 01 01 	sts	0x0101, r19
     85c:	20 93 00 01 	sts	0x0100, r18
     860:	0d c0       	rjmp	.+26     	; 0x87c <main+0x2ae>
				}
				else if (_wPC==40)
     862:	28 32       	cpi	r18, 0x28	; 40
     864:	31 05       	cpc	r19, r1
     866:	41 05       	cpc	r20, r1
     868:	51 05       	cpc	r21, r1
     86a:	41 f4       	brne	.+16     	; 0x87c <main+0x2ae>
					vmag=0;
     86c:	10 92 e0 35 	sts	0x35E0, r1
     870:	10 92 e1 35 	sts	0x35E1, r1
     874:	10 92 e2 35 	sts	0x35E2, r1
     878:	10 92 e3 35 	sts	0x35E3, r1
			//z=_atmega_a2dConvert10bit(ADC1);		
#endif
		

		
			 m_SET_X(data[dataIndex],x,dataSubindex);
     87c:	80 91 de 09 	lds	r24, 0x09DE
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	39 f1       	breq	.+78     	; 0x8d2 <main+0x304>
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	30 f0       	brcs	.+12     	; 0x894 <main+0x2c6>
     888:	82 30       	cpi	r24, 0x02	; 2
     88a:	d1 f1       	breq	.+116    	; 0x900 <main+0x332>
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	09 f0       	breq	.+2      	; 0x892 <main+0x2c4>
     890:	76 c0       	rjmp	.+236    	; 0x97e <main+0x3b0>
     892:	56 c0       	rjmp	.+172    	; 0x940 <main+0x372>
     894:	80 91 da 09 	lds	r24, 0x09DA
     898:	90 91 db 09 	lds	r25, 0x09DB
     89c:	fc 01       	movw	r30, r24
     89e:	14 e0       	ldi	r17, 0x04	; 4
     8a0:	ee 0f       	add	r30, r30
     8a2:	ff 1f       	adc	r31, r31
     8a4:	1a 95       	dec	r17
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <main+0x2d2>
     8a8:	e8 1b       	sub	r30, r24
     8aa:	f9 0b       	sbc	r31, r25
     8ac:	ed 51       	subi	r30, 0x1D	; 29
     8ae:	f6 4f       	sbci	r31, 0xF6	; 246
     8b0:	80 91 46 01 	lds	r24, 0x0146
     8b4:	90 91 47 01 	lds	r25, 0x0147
     8b8:	96 95       	lsr	r25
     8ba:	87 95       	ror	r24
     8bc:	96 95       	lsr	r25
     8be:	87 95       	ror	r24
     8c0:	80 83       	st	Z, r24
     8c2:	80 91 46 01 	lds	r24, 0x0146
     8c6:	82 95       	swap	r24
     8c8:	88 0f       	add	r24, r24
     8ca:	88 0f       	add	r24, r24
     8cc:	80 7c       	andi	r24, 0xC0	; 192
     8ce:	81 83       	std	Z+1, r24	; 0x01
     8d0:	56 c0       	rjmp	.+172    	; 0x97e <main+0x3b0>
     8d2:	80 91 da 09 	lds	r24, 0x09DA
     8d6:	90 91 db 09 	lds	r25, 0x09DB
     8da:	fc 01       	movw	r30, r24
     8dc:	a4 e0       	ldi	r26, 0x04	; 4
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	aa 95       	dec	r26
     8e4:	e1 f7       	brne	.-8      	; 0x8de <main+0x310>
     8e6:	e8 1b       	sub	r30, r24
     8e8:	f9 0b       	sbc	r31, r25
     8ea:	ed 51       	subi	r30, 0x1D	; 29
     8ec:	f6 4f       	sbci	r31, 0xF6	; 246
     8ee:	90 91 47 01 	lds	r25, 0x0147
     8f2:	83 81       	ldd	r24, Z+3	; 0x03
     8f4:	89 2b       	or	r24, r25
     8f6:	83 83       	std	Z+3, r24	; 0x03
     8f8:	80 91 46 01 	lds	r24, 0x0146
     8fc:	84 83       	std	Z+4, r24	; 0x04
     8fe:	3f c0       	rjmp	.+126    	; 0x97e <main+0x3b0>
     900:	80 91 da 09 	lds	r24, 0x09DA
     904:	90 91 db 09 	lds	r25, 0x09DB
     908:	fc 01       	movw	r30, r24
     90a:	74 e0       	ldi	r23, 0x04	; 4
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	7a 95       	dec	r23
     912:	e1 f7       	brne	.-8      	; 0x90c <main+0x33e>
     914:	e8 1b       	sub	r30, r24
     916:	f9 0b       	sbc	r31, r25
     918:	ed 51       	subi	r30, 0x1D	; 29
     91a:	f6 4f       	sbci	r31, 0xF6	; 246
     91c:	80 91 46 01 	lds	r24, 0x0146
     920:	90 91 47 01 	lds	r25, 0x0147
     924:	66 e0       	ldi	r22, 0x06	; 6
     926:	96 95       	lsr	r25
     928:	87 95       	ror	r24
     92a:	6a 95       	dec	r22
     92c:	e1 f7       	brne	.-8      	; 0x926 <main+0x358>
     92e:	27 81       	ldd	r18, Z+7	; 0x07
     930:	28 2b       	or	r18, r24
     932:	27 83       	std	Z+7, r18	; 0x07
     934:	80 91 46 01 	lds	r24, 0x0146
     938:	88 0f       	add	r24, r24
     93a:	88 0f       	add	r24, r24
     93c:	80 87       	std	Z+8, r24	; 0x08
     93e:	1f c0       	rjmp	.+62     	; 0x97e <main+0x3b0>
     940:	80 91 da 09 	lds	r24, 0x09DA
     944:	90 91 db 09 	lds	r25, 0x09DB
     948:	fc 01       	movw	r30, r24
     94a:	54 e0       	ldi	r21, 0x04	; 4
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	5a 95       	dec	r21
     952:	e1 f7       	brne	.-8      	; 0x94c <main+0x37e>
     954:	e8 1b       	sub	r30, r24
     956:	f9 0b       	sbc	r31, r25
     958:	ed 51       	subi	r30, 0x1D	; 29
     95a:	f6 4f       	sbci	r31, 0xF6	; 246
     95c:	80 91 46 01 	lds	r24, 0x0146
     960:	90 91 47 01 	lds	r25, 0x0147
     964:	44 e0       	ldi	r20, 0x04	; 4
     966:	96 95       	lsr	r25
     968:	87 95       	ror	r24
     96a:	4a 95       	dec	r20
     96c:	e1 f7       	brne	.-8      	; 0x966 <main+0x398>
     96e:	23 85       	ldd	r18, Z+11	; 0x0b
     970:	28 2b       	or	r18, r24
     972:	23 87       	std	Z+11, r18	; 0x0b
     974:	80 91 46 01 	lds	r24, 0x0146
     978:	82 95       	swap	r24
     97a:	80 7f       	andi	r24, 0xF0	; 240
     97c:	84 87       	std	Z+12, r24	; 0x0c
			 m_SET_Y(data[dataIndex],y,dataSubindex);
     97e:	80 91 de 09 	lds	r24, 0x09DE
     982:	81 30       	cpi	r24, 0x01	; 1
     984:	49 f1       	breq	.+82     	; 0x9d8 <main+0x40a>
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	38 f0       	brcs	.+14     	; 0x998 <main+0x3ca>
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	09 f4       	brne	.+2      	; 0x990 <main+0x3c2>
     98e:	43 c0       	rjmp	.+134    	; 0xa16 <main+0x448>
     990:	83 30       	cpi	r24, 0x03	; 3
     992:	09 f0       	breq	.+2      	; 0x996 <main+0x3c8>
     994:	76 c0       	rjmp	.+236    	; 0xa82 <main+0x4b4>
     996:	56 c0       	rjmp	.+172    	; 0xa44 <main+0x476>
     998:	80 91 da 09 	lds	r24, 0x09DA
     99c:	90 91 db 09 	lds	r25, 0x09DB
     9a0:	fc 01       	movw	r30, r24
     9a2:	34 e0       	ldi	r19, 0x04	; 4
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	3a 95       	dec	r19
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <main+0x3d6>
     9ac:	e8 1b       	sub	r30, r24
     9ae:	f9 0b       	sbc	r31, r25
     9b0:	ed 51       	subi	r30, 0x1D	; 29
     9b2:	f6 4f       	sbci	r31, 0xF6	; 246
     9b4:	80 91 48 01 	lds	r24, 0x0148
     9b8:	90 91 49 01 	lds	r25, 0x0149
     9bc:	24 e0       	ldi	r18, 0x04	; 4
     9be:	96 95       	lsr	r25
     9c0:	87 95       	ror	r24
     9c2:	2a 95       	dec	r18
     9c4:	e1 f7       	brne	.-8      	; 0x9be <main+0x3f0>
     9c6:	21 81       	ldd	r18, Z+1	; 0x01
     9c8:	28 2b       	or	r18, r24
     9ca:	21 83       	std	Z+1, r18	; 0x01
     9cc:	80 91 48 01 	lds	r24, 0x0148
     9d0:	82 95       	swap	r24
     9d2:	80 7f       	andi	r24, 0xF0	; 240
     9d4:	82 83       	std	Z+2, r24	; 0x02
     9d6:	55 c0       	rjmp	.+170    	; 0xa82 <main+0x4b4>
     9d8:	80 91 da 09 	lds	r24, 0x09DA
     9dc:	90 91 db 09 	lds	r25, 0x09DB
     9e0:	fc 01       	movw	r30, r24
     9e2:	04 e0       	ldi	r16, 0x04	; 4
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	0a 95       	dec	r16
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <main+0x416>
     9ec:	e8 1b       	sub	r30, r24
     9ee:	f9 0b       	sbc	r31, r25
     9f0:	ed 51       	subi	r30, 0x1D	; 29
     9f2:	f6 4f       	sbci	r31, 0xF6	; 246
     9f4:	80 91 48 01 	lds	r24, 0x0148
     9f8:	90 91 49 01 	lds	r25, 0x0149
     9fc:	96 95       	lsr	r25
     9fe:	87 95       	ror	r24
     a00:	96 95       	lsr	r25
     a02:	87 95       	ror	r24
     a04:	85 83       	std	Z+5, r24	; 0x05
     a06:	80 91 48 01 	lds	r24, 0x0148
     a0a:	82 95       	swap	r24
     a0c:	88 0f       	add	r24, r24
     a0e:	88 0f       	add	r24, r24
     a10:	80 7c       	andi	r24, 0xC0	; 192
     a12:	86 83       	std	Z+6, r24	; 0x06
     a14:	36 c0       	rjmp	.+108    	; 0xa82 <main+0x4b4>
     a16:	80 91 da 09 	lds	r24, 0x09DA
     a1a:	90 91 db 09 	lds	r25, 0x09DB
     a1e:	fc 01       	movw	r30, r24
     a20:	b4 e0       	ldi	r27, 0x04	; 4
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	ba 95       	dec	r27
     a28:	e1 f7       	brne	.-8      	; 0xa22 <main+0x454>
     a2a:	e8 1b       	sub	r30, r24
     a2c:	f9 0b       	sbc	r31, r25
     a2e:	ed 51       	subi	r30, 0x1D	; 29
     a30:	f6 4f       	sbci	r31, 0xF6	; 246
     a32:	90 91 49 01 	lds	r25, 0x0149
     a36:	80 85       	ldd	r24, Z+8	; 0x08
     a38:	89 2b       	or	r24, r25
     a3a:	80 87       	std	Z+8, r24	; 0x08
     a3c:	80 91 48 01 	lds	r24, 0x0148
     a40:	81 87       	std	Z+9, r24	; 0x09
     a42:	1f c0       	rjmp	.+62     	; 0xa82 <main+0x4b4>
     a44:	80 91 da 09 	lds	r24, 0x09DA
     a48:	90 91 db 09 	lds	r25, 0x09DB
     a4c:	fc 01       	movw	r30, r24
     a4e:	a4 e0       	ldi	r26, 0x04	; 4
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	aa 95       	dec	r26
     a56:	e1 f7       	brne	.-8      	; 0xa50 <main+0x482>
     a58:	e8 1b       	sub	r30, r24
     a5a:	f9 0b       	sbc	r31, r25
     a5c:	ed 51       	subi	r30, 0x1D	; 29
     a5e:	f6 4f       	sbci	r31, 0xF6	; 246
     a60:	80 91 48 01 	lds	r24, 0x0148
     a64:	90 91 49 01 	lds	r25, 0x0149
     a68:	76 e0       	ldi	r23, 0x06	; 6
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	7a 95       	dec	r23
     a70:	e1 f7       	brne	.-8      	; 0xa6a <main+0x49c>
     a72:	24 85       	ldd	r18, Z+12	; 0x0c
     a74:	28 2b       	or	r18, r24
     a76:	24 87       	std	Z+12, r18	; 0x0c
     a78:	80 91 48 01 	lds	r24, 0x0148
     a7c:	88 0f       	add	r24, r24
     a7e:	88 0f       	add	r24, r24
     a80:	85 87       	std	Z+13, r24	; 0x0d
			 m_SET_Z(data[dataIndex],z,dataSubindex);
     a82:	80 91 de 09 	lds	r24, 0x09DE
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	49 f1       	breq	.+82     	; 0xadc <main+0x50e>
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	38 f0       	brcs	.+14     	; 0xa9c <main+0x4ce>
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	09 f4       	brne	.+2      	; 0xa94 <main+0x4c6>
     a92:	44 c0       	rjmp	.+136    	; 0xb1c <main+0x54e>
     a94:	83 30       	cpi	r24, 0x03	; 3
     a96:	09 f0       	breq	.+2      	; 0xa9a <main+0x4cc>
     a98:	76 c0       	rjmp	.+236    	; 0xb86 <main+0x5b8>
     a9a:	5f c0       	rjmp	.+190    	; 0xb5a <main+0x58c>
     a9c:	80 91 da 09 	lds	r24, 0x09DA
     aa0:	90 91 db 09 	lds	r25, 0x09DB
     aa4:	fc 01       	movw	r30, r24
     aa6:	64 e0       	ldi	r22, 0x04	; 4
     aa8:	ee 0f       	add	r30, r30
     aaa:	ff 1f       	adc	r31, r31
     aac:	6a 95       	dec	r22
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <main+0x4da>
     ab0:	e8 1b       	sub	r30, r24
     ab2:	f9 0b       	sbc	r31, r25
     ab4:	ed 51       	subi	r30, 0x1D	; 29
     ab6:	f6 4f       	sbci	r31, 0xF6	; 246
     ab8:	80 91 4a 01 	lds	r24, 0x014A
     abc:	90 91 4b 01 	lds	r25, 0x014B
     ac0:	56 e0       	ldi	r21, 0x06	; 6
     ac2:	96 95       	lsr	r25
     ac4:	87 95       	ror	r24
     ac6:	5a 95       	dec	r21
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <main+0x4f4>
     aca:	22 81       	ldd	r18, Z+2	; 0x02
     acc:	28 2b       	or	r18, r24
     ace:	22 83       	std	Z+2, r18	; 0x02
     ad0:	80 91 4a 01 	lds	r24, 0x014A
     ad4:	88 0f       	add	r24, r24
     ad6:	88 0f       	add	r24, r24
     ad8:	83 83       	std	Z+3, r24	; 0x03
     ada:	55 c0       	rjmp	.+170    	; 0xb86 <main+0x5b8>
     adc:	80 91 da 09 	lds	r24, 0x09DA
     ae0:	90 91 db 09 	lds	r25, 0x09DB
     ae4:	fc 01       	movw	r30, r24
     ae6:	44 e0       	ldi	r20, 0x04	; 4
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	4a 95       	dec	r20
     aee:	e1 f7       	brne	.-8      	; 0xae8 <main+0x51a>
     af0:	e8 1b       	sub	r30, r24
     af2:	f9 0b       	sbc	r31, r25
     af4:	ed 51       	subi	r30, 0x1D	; 29
     af6:	f6 4f       	sbci	r31, 0xF6	; 246
     af8:	80 91 4a 01 	lds	r24, 0x014A
     afc:	90 91 4b 01 	lds	r25, 0x014B
     b00:	34 e0       	ldi	r19, 0x04	; 4
     b02:	96 95       	lsr	r25
     b04:	87 95       	ror	r24
     b06:	3a 95       	dec	r19
     b08:	e1 f7       	brne	.-8      	; 0xb02 <main+0x534>
     b0a:	26 81       	ldd	r18, Z+6	; 0x06
     b0c:	28 2b       	or	r18, r24
     b0e:	26 83       	std	Z+6, r18	; 0x06
     b10:	80 91 4a 01 	lds	r24, 0x014A
     b14:	82 95       	swap	r24
     b16:	80 7f       	andi	r24, 0xF0	; 240
     b18:	87 83       	std	Z+7, r24	; 0x07
     b1a:	35 c0       	rjmp	.+106    	; 0xb86 <main+0x5b8>
     b1c:	80 91 da 09 	lds	r24, 0x09DA
     b20:	90 91 db 09 	lds	r25, 0x09DB
     b24:	fc 01       	movw	r30, r24
     b26:	24 e0       	ldi	r18, 0x04	; 4
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	2a 95       	dec	r18
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <main+0x55a>
     b30:	e8 1b       	sub	r30, r24
     b32:	f9 0b       	sbc	r31, r25
     b34:	ed 51       	subi	r30, 0x1D	; 29
     b36:	f6 4f       	sbci	r31, 0xF6	; 246
     b38:	80 91 4a 01 	lds	r24, 0x014A
     b3c:	90 91 4b 01 	lds	r25, 0x014B
     b40:	96 95       	lsr	r25
     b42:	87 95       	ror	r24
     b44:	96 95       	lsr	r25
     b46:	87 95       	ror	r24
     b48:	82 87       	std	Z+10, r24	; 0x0a
     b4a:	80 91 4a 01 	lds	r24, 0x014A
     b4e:	82 95       	swap	r24
     b50:	88 0f       	add	r24, r24
     b52:	88 0f       	add	r24, r24
     b54:	80 7c       	andi	r24, 0xC0	; 192
     b56:	83 87       	std	Z+11, r24	; 0x0b
     b58:	16 c0       	rjmp	.+44     	; 0xb86 <main+0x5b8>
     b5a:	80 91 da 09 	lds	r24, 0x09DA
     b5e:	90 91 db 09 	lds	r25, 0x09DB
     b62:	fc 01       	movw	r30, r24
     b64:	14 e0       	ldi	r17, 0x04	; 4
     b66:	ee 0f       	add	r30, r30
     b68:	ff 1f       	adc	r31, r31
     b6a:	1a 95       	dec	r17
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <main+0x598>
     b6e:	e8 1b       	sub	r30, r24
     b70:	f9 0b       	sbc	r31, r25
     b72:	ed 51       	subi	r30, 0x1D	; 29
     b74:	f6 4f       	sbci	r31, 0xF6	; 246
     b76:	90 91 4b 01 	lds	r25, 0x014B
     b7a:	85 85       	ldd	r24, Z+13	; 0x0d
     b7c:	89 2b       	or	r24, r25
     b7e:	85 87       	std	Z+13, r24	; 0x0d
     b80:	80 91 4a 01 	lds	r24, 0x014A
     b84:	86 87       	std	Z+14, r24	; 0x0e

			 dataSubindex++;
     b86:	80 91 de 09 	lds	r24, 0x09DE
     b8a:	8f 5f       	subi	r24, 0xFF	; 255
     b8c:	80 93 de 09 	sts	0x09DE, r24
			 if (dataSubindex>=4)
     b90:	84 30       	cpi	r24, 0x04	; 4
     b92:	10 f0       	brcs	.+4      	; 0xb98 <main+0x5ca>
			 	dataSubindex=0;
     b94:	10 92 de 09 	sts	0x09DE, r1
			 
			 //Most of the time the data buffer with 750 will not overflow
			 //and will be enough to transmit the data, data will go from 0 up to a specific
			 //value

			if (_wTM==_TM_Continuous)
     b98:	80 91 52 01 	lds	r24, 0x0152
     b9c:	90 91 de 09 	lds	r25, 0x09DE
     ba0:	88 23       	and	r24, r24
     ba2:	09 f0       	breq	.+2      	; 0xba6 <main+0x5d8>
     ba4:	1e c1       	rjmp	.+572    	; 0xde2 <main+0x814>
			{
									
				switch(dataSubindex){
     ba6:	91 30       	cpi	r25, 0x01	; 1
     ba8:	51 f0       	breq	.+20     	; 0xbbe <main+0x5f0>
     baa:	91 30       	cpi	r25, 0x01	; 1
     bac:	08 f4       	brcc	.+2      	; 0xbb0 <main+0x5e2>
     bae:	be c0       	rjmp	.+380    	; 0xd2c <main+0x75e>
     bb0:	92 30       	cpi	r25, 0x02	; 2
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <main+0x5e8>
     bb4:	44 c0       	rjmp	.+136    	; 0xc3e <main+0x670>
     bb6:	93 30       	cpi	r25, 0x03	; 3
     bb8:	09 f0       	breq	.+2      	; 0xbbc <main+0x5ee>
     bba:	fa c0       	rjmp	.+500    	; 0xdb0 <main+0x7e2>
     bbc:	7b c0       	rjmp	.+246    	; 0xcb4 <main+0x6e6>
				case 1:
						m_GET_X(x,data[dataIndex].byte1,data[dataIndex].byte2,0);
     bbe:	80 91 da 09 	lds	r24, 0x09DA
     bc2:	90 91 db 09 	lds	r25, 0x09DB
     bc6:	fc 01       	movw	r30, r24
     bc8:	b4 e0       	ldi	r27, 0x04	; 4
     bca:	ee 0f       	add	r30, r30
     bcc:	ff 1f       	adc	r31, r31
     bce:	ba 95       	dec	r27
     bd0:	e1 f7       	brne	.-8      	; 0xbca <main+0x5fc>
     bd2:	e8 1b       	sub	r30, r24
     bd4:	f9 0b       	sbc	r31, r25
     bd6:	ed 51       	subi	r30, 0x1D	; 29
     bd8:	f6 4f       	sbci	r31, 0xF6	; 246
     bda:	41 81       	ldd	r20, Z+1	; 0x01
     bdc:	24 2f       	mov	r18, r20
     bde:	22 95       	swap	r18
     be0:	26 95       	lsr	r18
     be2:	26 95       	lsr	r18
     be4:	23 70       	andi	r18, 0x03	; 3
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	28 2b       	or	r18, r24
     bf6:	39 2b       	or	r19, r25
     bf8:	30 93 47 01 	sts	0x0147, r19
     bfc:	20 93 46 01 	sts	0x0146, r18
						m_GET_Y(y,data[dataIndex].byte2,data[dataIndex].byte3,0);
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	4f 73       	andi	r20, 0x3F	; 63
     c04:	50 70       	andi	r21, 0x00	; 0
     c06:	74 e0       	ldi	r23, 0x04	; 4
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	7a 95       	dec	r23
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <main+0x63a>
     c10:	22 81       	ldd	r18, Z+2	; 0x02
     c12:	82 2f       	mov	r24, r18
     c14:	82 95       	swap	r24
     c16:	8f 70       	andi	r24, 0x0F	; 15
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	48 2b       	or	r20, r24
     c1c:	59 2b       	or	r21, r25
     c1e:	50 93 49 01 	sts	0x0149, r21
     c22:	40 93 48 01 	sts	0x0148, r20
						m_GET_Z(z,data[dataIndex].byte3,data[dataIndex].byte4,0);
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	2f 70       	andi	r18, 0x0F	; 15
     c2a:	30 70       	andi	r19, 0x00	; 0
     c2c:	66 e0       	ldi	r22, 0x06	; 6
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	6a 95       	dec	r22
     c34:	e1 f7       	brne	.-8      	; 0xc2e <main+0x660>
     c36:	83 81       	ldd	r24, Z+3	; 0x03
     c38:	86 95       	lsr	r24
     c3a:	86 95       	lsr	r24
     c3c:	b2 c0       	rjmp	.+356    	; 0xda2 <main+0x7d4>
						break;
				case 2:
						m_GET_X(x,data[dataIndex].byte4,data[dataIndex].byte5,1);
     c3e:	80 91 da 09 	lds	r24, 0x09DA
     c42:	90 91 db 09 	lds	r25, 0x09DB
     c46:	fc 01       	movw	r30, r24
     c48:	54 e0       	ldi	r21, 0x04	; 4
     c4a:	ee 0f       	add	r30, r30
     c4c:	ff 1f       	adc	r31, r31
     c4e:	5a 95       	dec	r21
     c50:	e1 f7       	brne	.-8      	; 0xc4a <main+0x67c>
     c52:	e8 1b       	sub	r30, r24
     c54:	f9 0b       	sbc	r31, r25
     c56:	ed 51       	subi	r30, 0x1D	; 29
     c58:	f6 4f       	sbci	r31, 0xF6	; 246
     c5a:	83 81       	ldd	r24, Z+3	; 0x03
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	83 70       	andi	r24, 0x03	; 3
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	98 2f       	mov	r25, r24
     c64:	88 27       	eor	r24, r24
     c66:	24 81       	ldd	r18, Z+4	; 0x04
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	82 2b       	or	r24, r18
     c6c:	93 2b       	or	r25, r19
     c6e:	90 93 47 01 	sts	0x0147, r25
     c72:	80 93 46 01 	sts	0x0146, r24
						m_GET_Y(y,data[dataIndex].byte6,data[dataIndex].byte7,1);
     c76:	26 81       	ldd	r18, Z+6	; 0x06
     c78:	42 2f       	mov	r20, r18
     c7a:	42 95       	swap	r20
     c7c:	46 95       	lsr	r20
     c7e:	46 95       	lsr	r20
     c80:	43 70       	andi	r20, 0x03	; 3
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	85 81       	ldd	r24, Z+5	; 0x05
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	48 2b       	or	r20, r24
     c92:	59 2b       	or	r21, r25
     c94:	50 93 49 01 	sts	0x0149, r21
     c98:	40 93 48 01 	sts	0x0148, r20
						m_GET_Z(z,data[dataIndex].byte7,data[dataIndex].byte8,1);
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	2f 73       	andi	r18, 0x3F	; 63
     ca0:	30 70       	andi	r19, 0x00	; 0
     ca2:	04 e0       	ldi	r16, 0x04	; 4
     ca4:	22 0f       	add	r18, r18
     ca6:	33 1f       	adc	r19, r19
     ca8:	0a 95       	dec	r16
     caa:	e1 f7       	brne	.-8      	; 0xca4 <main+0x6d6>
     cac:	87 81       	ldd	r24, Z+7	; 0x07
     cae:	82 95       	swap	r24
     cb0:	8f 70       	andi	r24, 0x0F	; 15
     cb2:	77 c0       	rjmp	.+238    	; 0xda2 <main+0x7d4>
						break;
				case 3:
						m_GET_X(x,data[dataIndex].byte8,data[dataIndex].byte9,2);
     cb4:	80 91 da 09 	lds	r24, 0x09DA
     cb8:	90 91 db 09 	lds	r25, 0x09DB
     cbc:	fc 01       	movw	r30, r24
     cbe:	14 e0       	ldi	r17, 0x04	; 4
     cc0:	ee 0f       	add	r30, r30
     cc2:	ff 1f       	adc	r31, r31
     cc4:	1a 95       	dec	r17
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <main+0x6f2>
     cc8:	e8 1b       	sub	r30, r24
     cca:	f9 0b       	sbc	r31, r25
     ccc:	ed 51       	subi	r30, 0x1D	; 29
     cce:	f6 4f       	sbci	r31, 0xF6	; 246
     cd0:	20 85       	ldd	r18, Z+8	; 0x08
     cd2:	42 2f       	mov	r20, r18
     cd4:	46 95       	lsr	r20
     cd6:	46 95       	lsr	r20
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	87 81       	ldd	r24, Z+7	; 0x07
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	8f 70       	andi	r24, 0x0F	; 15
     ce0:	90 70       	andi	r25, 0x00	; 0
     ce2:	b6 e0       	ldi	r27, 0x06	; 6
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	ba 95       	dec	r27
     cea:	e1 f7       	brne	.-8      	; 0xce4 <main+0x716>
     cec:	48 2b       	or	r20, r24
     cee:	59 2b       	or	r21, r25
     cf0:	50 93 47 01 	sts	0x0147, r21
     cf4:	40 93 46 01 	sts	0x0146, r20
						m_GET_Y(y,data[dataIndex].byte9,data[dataIndex].byte10,2);
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	23 70       	andi	r18, 0x03	; 3
     cfc:	30 70       	andi	r19, 0x00	; 0
     cfe:	32 2f       	mov	r19, r18
     d00:	22 27       	eor	r18, r18
     d02:	81 85       	ldd	r24, Z+9	; 0x09
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	28 2b       	or	r18, r24
     d08:	39 2b       	or	r19, r25
     d0a:	30 93 49 01 	sts	0x0149, r19
     d0e:	20 93 48 01 	sts	0x0148, r18
						m_GET_Z(z,data[dataIndex].byte11,data[dataIndex].byte12,2);
     d12:	23 85       	ldd	r18, Z+11	; 0x0b
     d14:	22 95       	swap	r18
     d16:	26 95       	lsr	r18
     d18:	26 95       	lsr	r18
     d1a:	23 70       	andi	r18, 0x03	; 3
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	82 85       	ldd	r24, Z+10	; 0x0a
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	3c c0       	rjmp	.+120    	; 0xda4 <main+0x7d6>
						break;
				case 0:
						m_GET_X(x,data[dataIndex].byte12,data[dataIndex].byte13,3);
     d2c:	80 91 da 09 	lds	r24, 0x09DA
     d30:	90 91 db 09 	lds	r25, 0x09DB
     d34:	fc 01       	movw	r30, r24
     d36:	64 e0       	ldi	r22, 0x04	; 4
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	6a 95       	dec	r22
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <main+0x76a>
     d40:	e8 1b       	sub	r30, r24
     d42:	f9 0b       	sbc	r31, r25
     d44:	ed 51       	subi	r30, 0x1D	; 29
     d46:	f6 4f       	sbci	r31, 0xF6	; 246
     d48:	44 85       	ldd	r20, Z+12	; 0x0c
     d4a:	24 2f       	mov	r18, r20
     d4c:	22 95       	swap	r18
     d4e:	2f 70       	andi	r18, 0x0F	; 15
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	83 85       	ldd	r24, Z+11	; 0x0b
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	8f 73       	andi	r24, 0x3F	; 63
     d58:	90 70       	andi	r25, 0x00	; 0
     d5a:	54 e0       	ldi	r21, 0x04	; 4
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	5a 95       	dec	r21
     d62:	e1 f7       	brne	.-8      	; 0xd5c <main+0x78e>
     d64:	28 2b       	or	r18, r24
     d66:	39 2b       	or	r19, r25
     d68:	30 93 47 01 	sts	0x0147, r19
     d6c:	20 93 46 01 	sts	0x0146, r18
						m_GET_Y(y,data[dataIndex].byte13,data[dataIndex].byte14,3);
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	4f 70       	andi	r20, 0x0F	; 15
     d74:	50 70       	andi	r21, 0x00	; 0
     d76:	06 e0       	ldi	r16, 0x06	; 6
     d78:	44 0f       	add	r20, r20
     d7a:	55 1f       	adc	r21, r21
     d7c:	0a 95       	dec	r16
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <main+0x7aa>
     d80:	25 85       	ldd	r18, Z+13	; 0x0d
     d82:	82 2f       	mov	r24, r18
     d84:	86 95       	lsr	r24
     d86:	86 95       	lsr	r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	48 2b       	or	r20, r24
     d8c:	59 2b       	or	r21, r25
     d8e:	50 93 49 01 	sts	0x0149, r21
     d92:	40 93 48 01 	sts	0x0148, r20
						m_GET_Z(z,data[dataIndex].byte14,data[dataIndex].byte15,3);
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	23 70       	andi	r18, 0x03	; 3
     d9a:	30 70       	andi	r19, 0x00	; 0
     d9c:	32 2f       	mov	r19, r18
     d9e:	22 27       	eor	r18, r18
     da0:	86 85       	ldd	r24, Z+14	; 0x0e
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	28 2b       	or	r18, r24
     da6:	39 2b       	or	r19, r25
     da8:	30 93 4b 01 	sts	0x014B, r19
     dac:	20 93 4a 01 	sts	0x014A, r18
						break;
				}
											
		
				if (justconnected==1)
     db0:	80 91 2f 01 	lds	r24, 0x012F
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	29 f4       	brne	.+10     	; 0xdc2 <main+0x7f4>
				{
					_send_tm();
     db8:	0e 94 91 19 	call	0x3322	; 0x3322 <_send_tm>
					justconnected=2;
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	80 93 2f 01 	sts	0x012F, r24
				}		
				//_send_pdu(x,y,z);
				_send_uncompressed_pdu(x, y, z);
     dc2:	60 91 48 01 	lds	r22, 0x0148
     dc6:	70 91 49 01 	lds	r23, 0x0149
     dca:	40 91 4a 01 	lds	r20, 0x014A
     dce:	50 91 4b 01 	lds	r21, 0x014B
     dd2:	80 91 46 01 	lds	r24, 0x0146
     dd6:	90 91 47 01 	lds	r25, 0x0147
     dda:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_send_uncompressed_pdu>
     dde:	0c 94 99 13 	jmp	0x2732	; 0x2732 <main+0x2164>
					}*/

			}
			else 
			{
				if ((dataSubindex==0) && (batch_counter<750))
     de2:	99 23       	and	r25, r25
     de4:	69 f4       	brne	.+26     	; 0xe00 <main+0x832>
     de6:	80 91 1f 01 	lds	r24, 0x011F
     dea:	90 91 20 01 	lds	r25, 0x0120
     dee:	22 e0       	ldi	r18, 0x02	; 2
     df0:	8e 3e       	cpi	r24, 0xEE	; 238
     df2:	92 07       	cpc	r25, r18
     df4:	28 f4       	brcc	.+10     	; 0xe00 <main+0x832>
					batch_counter++;
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	90 93 20 01 	sts	0x0120, r25
     dfc:	80 93 1f 01 	sts	0x011F, r24
				if (connected){
     e00:	80 91 28 01 	lds	r24, 0x0128
     e04:	88 23       	and	r24, r24
     e06:	11 f4       	brne	.+4      	; 0xe0c <main+0x83e>
     e08:	0c 94 99 13 	jmp	0x2732	; 0x2732 <main+0x2164>
					_greenled_turn_on();
     e0c:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_greenled_turn_on>
						
					gotack=1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	80 93 1c 01 	sts	0x011C, r24
					tester=0;
     e16:	10 92 4d 01 	sts	0x014D, r1
     e1a:	10 92 4c 01 	sts	0x014C, r1

					if (_wTM==_TM_Continuous)
     e1e:	80 91 52 01 	lds	r24, 0x0152
     e22:	88 23       	and	r24, r24
     e24:	09 f4       	brne	.+2      	; 0xe28 <main+0x85a>
     e26:	31 cc       	rjmp	.-1950   	; 0x68a <main+0xbc>
						continue;
     e28:	c0 e0       	ldi	r28, 0x00	; 0
     e2a:	d0 e0       	ldi	r29, 0x00	; 0
						
					for (int ixz=0;(ixz<100);ixz++) {                                                                                      
       						_bluetooth_transmit_uart0_byte(0xff); 
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>

							
						if (sampleFlag)
     e32:	80 91 1e 01 	lds	r24, 0x011E
     e36:	88 23       	and	r24, r24
     e38:	09 f4       	brne	.+2      	; 0xe3c <main+0x86e>
     e3a:	7a c2       	rjmp	.+1268   	; 0x1330 <main+0xd62>
							{
								sampleFlag=0;
     e3c:	10 92 1e 01 	sts	0x011E, r1

								x=_atmega_a2dConvert10bit(ADC0);
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
     e46:	90 93 47 01 	sts	0x0147, r25
     e4a:	80 93 46 01 	sts	0x0146, r24
		
								y=_atmega_a2dConvert10bit(ADC1);
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
     e54:	90 93 49 01 	sts	0x0149, r25
     e58:	80 93 48 01 	sts	0x0148, r24

								z=_atmega_a2dConvert10bit(ADC2);
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
     e62:	90 93 4b 01 	sts	0x014B, r25
     e66:	80 93 4a 01 	sts	0x014A, r24


								vmag+=Filter(x,0)+Filter(y,1)+Filter(z,2);
     e6a:	e0 90 e0 35 	lds	r14, 0x35E0
     e6e:	f0 90 e1 35 	lds	r15, 0x35E1
     e72:	00 91 e2 35 	lds	r16, 0x35E2
     e76:	10 91 e3 35 	lds	r17, 0x35E3
     e7a:	80 91 46 01 	lds	r24, 0x0146
     e7e:	90 91 47 01 	lds	r25, 0x0147
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
     e8a:	5c 01       	movw	r10, r24
     e8c:	80 91 48 01 	lds	r24, 0x0148
     e90:	90 91 49 01 	lds	r25, 0x0149
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
     e9c:	6c 01       	movw	r12, r24
     e9e:	80 91 4a 01 	lds	r24, 0x014A
     ea2:	90 91 4b 01 	lds	r25, 0x014B
     ea6:	62 e0       	ldi	r22, 0x02	; 2
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
     eae:	ca 0c       	add	r12, r10
     eb0:	db 1c       	adc	r13, r11
     eb2:	c8 0e       	add	r12, r24
     eb4:	d9 1e       	adc	r13, r25
     eb6:	b6 01       	movw	r22, r12
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	6e 0d       	add	r22, r14
     ebe:	7f 1d       	adc	r23, r15
     ec0:	80 1f       	adc	r24, r16
     ec2:	91 1f       	adc	r25, r17
     ec4:	60 93 e0 35 	sts	0x35E0, r22
     ec8:	70 93 e1 35 	sts	0x35E1, r23
     ecc:	80 93 e2 35 	sts	0x35E2, r24
     ed0:	90 93 e3 35 	sts	0x35E3, r25
			

								if (_wPC>40){	//Skip the first samples						
     ed4:	20 91 53 01 	lds	r18, 0x0153
     ed8:	30 91 54 01 	lds	r19, 0x0154
     edc:	40 91 55 01 	lds	r20, 0x0155
     ee0:	50 91 56 01 	lds	r21, 0x0156
     ee4:	29 32       	cpi	r18, 0x29	; 41
     ee6:	31 05       	cpc	r19, r1
     ee8:	41 05       	cpc	r20, r1
     eea:	51 05       	cpc	r21, r1
     eec:	08 f4       	brcc	.+2      	; 0xef0 <main+0x922>
     eee:	85 c0       	rjmp	.+266    	; 0xffa <main+0xa2c>
									if (summary_count==0)
     ef0:	20 91 00 01 	lds	r18, 0x0100
     ef4:	30 91 01 01 	lds	r19, 0x0101
     ef8:	21 15       	cp	r18, r1
     efa:	31 05       	cpc	r19, r1
     efc:	09 f0       	breq	.+2      	; 0xf00 <main+0x932>
     efe:	76 c0       	rjmp	.+236    	; 0xfec <main+0xa1e>
									{
										vmag=vmag/24;
     f00:	28 e1       	ldi	r18, 0x18	; 24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__udivmodsi4>
     f0c:	c9 01       	movw	r24, r18
     f0e:	da 01       	movw	r26, r20
     f10:	e0 91 18 01 	lds	r30, 0x0118
     f14:	f0 91 19 01 	lds	r31, 0x0119
										if (vmag>65535)
     f18:	80 30       	cpi	r24, 0x00	; 0
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	92 07       	cpc	r25, r18
     f1e:	21 e0       	ldi	r18, 0x01	; 1
     f20:	a2 07       	cpc	r26, r18
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	b2 07       	cpc	r27, r18
     f26:	38 f0       	brcs	.+14     	; 0xf36 <main+0x968>
											acount[ci]=65535;
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	ed 59       	subi	r30, 0x9D	; 157
     f2e:	fe 4f       	sbci	r31, 0xFE	; 254
     f30:	71 82       	std	Z+1, r7	; 0x01
     f32:	60 82       	st	Z, r6
     f34:	06 c0       	rjmp	.+12     	; 0xf42 <main+0x974>
										else
											acount[ci]=(unsigned short) vmag;
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	ed 59       	subi	r30, 0x9D	; 157
     f3c:	fe 4f       	sbci	r31, 0xFE	; 254
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24
			 							vmag=0;
     f42:	10 92 e0 35 	sts	0x35E0, r1
     f46:	10 92 e1 35 	sts	0x35E1, r1
     f4a:	10 92 e2 35 	sts	0x35E2, r1
     f4e:	10 92 e3 35 	sts	0x35E3, r1
										++ci;
     f52:	80 91 18 01 	lds	r24, 0x0118
     f56:	90 91 19 01 	lds	r25, 0x0119
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	90 93 19 01 	sts	0x0119, r25
     f60:	80 93 18 01 	sts	0x0118, r24
										if (ci==AC_BUFFER_SIZE)
     f64:	80 5c       	subi	r24, 0xC0	; 192
     f66:	93 40       	sbci	r25, 0x03	; 3
     f68:	21 f4       	brne	.+8      	; 0xf72 <main+0x9a4>
											ci=0;
     f6a:	10 92 19 01 	sts	0x0119, r1
     f6e:	10 92 18 01 	sts	0x0118, r1
										cseq++;
     f72:	80 91 10 01 	lds	r24, 0x0110
     f76:	90 91 11 01 	lds	r25, 0x0111
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	90 93 11 01 	sts	0x0111, r25
     f80:	80 93 10 01 	sts	0x0110, r24
	
										if (ci==si)
     f84:	20 91 18 01 	lds	r18, 0x0118
     f88:	30 91 19 01 	lds	r19, 0x0119
     f8c:	80 91 1a 01 	lds	r24, 0x011A
     f90:	90 91 1b 01 	lds	r25, 0x011B
     f94:	28 17       	cp	r18, r24
     f96:	39 07       	cpc	r19, r25
     f98:	b1 f4       	brne	.+44     	; 0xfc6 <main+0x9f8>
										{
											si++;
     f9a:	c9 01       	movw	r24, r18
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	90 93 1b 01 	sts	0x011B, r25
     fa2:	80 93 1a 01 	sts	0x011A, r24
											if (si==AC_BUFFER_SIZE)
     fa6:	80 5c       	subi	r24, 0xC0	; 192
     fa8:	93 40       	sbci	r25, 0x03	; 3
     faa:	21 f4       	brne	.+8      	; 0xfb4 <main+0x9e6>
												si=0;
     fac:	10 92 1b 01 	sts	0x011B, r1
     fb0:	10 92 1a 01 	sts	0x011A, r1
											sseq++;
     fb4:	80 91 12 01 	lds	r24, 0x0112
     fb8:	90 91 13 01 	lds	r25, 0x0113
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	90 93 13 01 	sts	0x0113, r25
     fc2:	80 93 12 01 	sts	0x0112, r24
										}
										acount[ci]=0;
     fc6:	e0 91 18 01 	lds	r30, 0x0118
     fca:	f0 91 19 01 	lds	r31, 0x0119
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	ed 59       	subi	r30, 0x9D	; 157
     fd4:	fe 4f       	sbci	r31, 0xFE	; 254
     fd6:	11 82       	std	Z+1, r1	; 0x01
     fd8:	10 82       	st	Z, r1
										summary_count=AC_NUMS;
     fda:	80 91 0c 01 	lds	r24, 0x010C
     fde:	90 91 0d 01 	lds	r25, 0x010D
     fe2:	90 93 01 01 	sts	0x0101, r25
     fe6:	80 93 00 01 	sts	0x0100, r24
     fea:	14 c0       	rjmp	.+40     	; 0x1014 <main+0xa46>
									}else
										summary_count--;
     fec:	21 50       	subi	r18, 0x01	; 1
     fee:	30 40       	sbci	r19, 0x00	; 0
     ff0:	30 93 01 01 	sts	0x0101, r19
     ff4:	20 93 00 01 	sts	0x0100, r18
     ff8:	0d c0       	rjmp	.+26     	; 0x1014 <main+0xa46>
								}
								else if (_wPC==40)
     ffa:	28 32       	cpi	r18, 0x28	; 40
     ffc:	31 05       	cpc	r19, r1
     ffe:	41 05       	cpc	r20, r1
    1000:	51 05       	cpc	r21, r1
    1002:	41 f4       	brne	.+16     	; 0x1014 <main+0xa46>
									vmag=0;
    1004:	10 92 e0 35 	sts	0x35E0, r1
    1008:	10 92 e1 35 	sts	0x35E1, r1
    100c:	10 92 e2 35 	sts	0x35E2, r1
    1010:	10 92 e3 35 	sts	0x35E3, r1

			

		
			 					m_SET_X(data[dataIndex],x,dataSubindex);
    1014:	80 91 de 09 	lds	r24, 0x09DE
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	39 f1       	breq	.+78     	; 0x106a <main+0xa9c>
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	30 f0       	brcs	.+12     	; 0x102c <main+0xa5e>
    1020:	82 30       	cpi	r24, 0x02	; 2
    1022:	d1 f1       	breq	.+116    	; 0x1098 <main+0xaca>
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	09 f0       	breq	.+2      	; 0x102a <main+0xa5c>
    1028:	76 c0       	rjmp	.+236    	; 0x1116 <main+0xb48>
    102a:	56 c0       	rjmp	.+172    	; 0x10d8 <main+0xb0a>
    102c:	80 91 da 09 	lds	r24, 0x09DA
    1030:	90 91 db 09 	lds	r25, 0x09DB
    1034:	fc 01       	movw	r30, r24
    1036:	64 e0       	ldi	r22, 0x04	; 4
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	6a 95       	dec	r22
    103e:	e1 f7       	brne	.-8      	; 0x1038 <main+0xa6a>
    1040:	e8 1b       	sub	r30, r24
    1042:	f9 0b       	sbc	r31, r25
    1044:	ed 51       	subi	r30, 0x1D	; 29
    1046:	f6 4f       	sbci	r31, 0xF6	; 246
    1048:	80 91 46 01 	lds	r24, 0x0146
    104c:	90 91 47 01 	lds	r25, 0x0147
    1050:	96 95       	lsr	r25
    1052:	87 95       	ror	r24
    1054:	96 95       	lsr	r25
    1056:	87 95       	ror	r24
    1058:	80 83       	st	Z, r24
    105a:	80 91 46 01 	lds	r24, 0x0146
    105e:	82 95       	swap	r24
    1060:	88 0f       	add	r24, r24
    1062:	88 0f       	add	r24, r24
    1064:	80 7c       	andi	r24, 0xC0	; 192
    1066:	81 83       	std	Z+1, r24	; 0x01
    1068:	56 c0       	rjmp	.+172    	; 0x1116 <main+0xb48>
    106a:	80 91 da 09 	lds	r24, 0x09DA
    106e:	90 91 db 09 	lds	r25, 0x09DB
    1072:	fc 01       	movw	r30, r24
    1074:	44 e0       	ldi	r20, 0x04	; 4
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	4a 95       	dec	r20
    107c:	e1 f7       	brne	.-8      	; 0x1076 <main+0xaa8>
    107e:	e8 1b       	sub	r30, r24
    1080:	f9 0b       	sbc	r31, r25
    1082:	ed 51       	subi	r30, 0x1D	; 29
    1084:	f6 4f       	sbci	r31, 0xF6	; 246
    1086:	90 91 47 01 	lds	r25, 0x0147
    108a:	83 81       	ldd	r24, Z+3	; 0x03
    108c:	89 2b       	or	r24, r25
    108e:	83 83       	std	Z+3, r24	; 0x03
    1090:	80 91 46 01 	lds	r24, 0x0146
    1094:	84 83       	std	Z+4, r24	; 0x04
    1096:	3f c0       	rjmp	.+126    	; 0x1116 <main+0xb48>
    1098:	80 91 da 09 	lds	r24, 0x09DA
    109c:	90 91 db 09 	lds	r25, 0x09DB
    10a0:	fc 01       	movw	r30, r24
    10a2:	34 e0       	ldi	r19, 0x04	; 4
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	3a 95       	dec	r19
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <main+0xad6>
    10ac:	e8 1b       	sub	r30, r24
    10ae:	f9 0b       	sbc	r31, r25
    10b0:	ed 51       	subi	r30, 0x1D	; 29
    10b2:	f6 4f       	sbci	r31, 0xF6	; 246
    10b4:	80 91 46 01 	lds	r24, 0x0146
    10b8:	90 91 47 01 	lds	r25, 0x0147
    10bc:	26 e0       	ldi	r18, 0x06	; 6
    10be:	96 95       	lsr	r25
    10c0:	87 95       	ror	r24
    10c2:	2a 95       	dec	r18
    10c4:	e1 f7       	brne	.-8      	; 0x10be <main+0xaf0>
    10c6:	27 81       	ldd	r18, Z+7	; 0x07
    10c8:	28 2b       	or	r18, r24
    10ca:	27 83       	std	Z+7, r18	; 0x07
    10cc:	80 91 46 01 	lds	r24, 0x0146
    10d0:	88 0f       	add	r24, r24
    10d2:	88 0f       	add	r24, r24
    10d4:	80 87       	std	Z+8, r24	; 0x08
    10d6:	1f c0       	rjmp	.+62     	; 0x1116 <main+0xb48>
    10d8:	80 91 da 09 	lds	r24, 0x09DA
    10dc:	90 91 db 09 	lds	r25, 0x09DB
    10e0:	fc 01       	movw	r30, r24
    10e2:	04 e0       	ldi	r16, 0x04	; 4
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	0a 95       	dec	r16
    10ea:	e1 f7       	brne	.-8      	; 0x10e4 <main+0xb16>
    10ec:	e8 1b       	sub	r30, r24
    10ee:	f9 0b       	sbc	r31, r25
    10f0:	ed 51       	subi	r30, 0x1D	; 29
    10f2:	f6 4f       	sbci	r31, 0xF6	; 246
    10f4:	80 91 46 01 	lds	r24, 0x0146
    10f8:	90 91 47 01 	lds	r25, 0x0147
    10fc:	14 e0       	ldi	r17, 0x04	; 4
    10fe:	96 95       	lsr	r25
    1100:	87 95       	ror	r24
    1102:	1a 95       	dec	r17
    1104:	e1 f7       	brne	.-8      	; 0x10fe <main+0xb30>
    1106:	23 85       	ldd	r18, Z+11	; 0x0b
    1108:	28 2b       	or	r18, r24
    110a:	23 87       	std	Z+11, r18	; 0x0b
    110c:	80 91 46 01 	lds	r24, 0x0146
    1110:	82 95       	swap	r24
    1112:	80 7f       	andi	r24, 0xF0	; 240
    1114:	84 87       	std	Z+12, r24	; 0x0c
			 					m_SET_Y(data[dataIndex],y,dataSubindex);
    1116:	80 91 de 09 	lds	r24, 0x09DE
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	49 f1       	breq	.+82     	; 0x1170 <main+0xba2>
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	38 f0       	brcs	.+14     	; 0x1130 <main+0xb62>
    1122:	82 30       	cpi	r24, 0x02	; 2
    1124:	09 f4       	brne	.+2      	; 0x1128 <main+0xb5a>
    1126:	43 c0       	rjmp	.+134    	; 0x11ae <main+0xbe0>
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	09 f0       	breq	.+2      	; 0x112e <main+0xb60>
    112c:	76 c0       	rjmp	.+236    	; 0x121a <main+0xc4c>
    112e:	56 c0       	rjmp	.+172    	; 0x11dc <main+0xc0e>
    1130:	80 91 da 09 	lds	r24, 0x09DA
    1134:	90 91 db 09 	lds	r25, 0x09DB
    1138:	fc 01       	movw	r30, r24
    113a:	b4 e0       	ldi	r27, 0x04	; 4
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	ba 95       	dec	r27
    1142:	e1 f7       	brne	.-8      	; 0x113c <main+0xb6e>
    1144:	e8 1b       	sub	r30, r24
    1146:	f9 0b       	sbc	r31, r25
    1148:	ed 51       	subi	r30, 0x1D	; 29
    114a:	f6 4f       	sbci	r31, 0xF6	; 246
    114c:	80 91 48 01 	lds	r24, 0x0148
    1150:	90 91 49 01 	lds	r25, 0x0149
    1154:	a4 e0       	ldi	r26, 0x04	; 4
    1156:	96 95       	lsr	r25
    1158:	87 95       	ror	r24
    115a:	aa 95       	dec	r26
    115c:	e1 f7       	brne	.-8      	; 0x1156 <main+0xb88>
    115e:	21 81       	ldd	r18, Z+1	; 0x01
    1160:	28 2b       	or	r18, r24
    1162:	21 83       	std	Z+1, r18	; 0x01
    1164:	80 91 48 01 	lds	r24, 0x0148
    1168:	82 95       	swap	r24
    116a:	80 7f       	andi	r24, 0xF0	; 240
    116c:	82 83       	std	Z+2, r24	; 0x02
    116e:	55 c0       	rjmp	.+170    	; 0x121a <main+0xc4c>
    1170:	80 91 da 09 	lds	r24, 0x09DA
    1174:	90 91 db 09 	lds	r25, 0x09DB
    1178:	fc 01       	movw	r30, r24
    117a:	74 e0       	ldi	r23, 0x04	; 4
    117c:	ee 0f       	add	r30, r30
    117e:	ff 1f       	adc	r31, r31
    1180:	7a 95       	dec	r23
    1182:	e1 f7       	brne	.-8      	; 0x117c <main+0xbae>
    1184:	e8 1b       	sub	r30, r24
    1186:	f9 0b       	sbc	r31, r25
    1188:	ed 51       	subi	r30, 0x1D	; 29
    118a:	f6 4f       	sbci	r31, 0xF6	; 246
    118c:	80 91 48 01 	lds	r24, 0x0148
    1190:	90 91 49 01 	lds	r25, 0x0149
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	96 95       	lsr	r25
    119a:	87 95       	ror	r24
    119c:	85 83       	std	Z+5, r24	; 0x05
    119e:	80 91 48 01 	lds	r24, 0x0148
    11a2:	82 95       	swap	r24
    11a4:	88 0f       	add	r24, r24
    11a6:	88 0f       	add	r24, r24
    11a8:	80 7c       	andi	r24, 0xC0	; 192
    11aa:	86 83       	std	Z+6, r24	; 0x06
    11ac:	36 c0       	rjmp	.+108    	; 0x121a <main+0xc4c>
    11ae:	80 91 da 09 	lds	r24, 0x09DA
    11b2:	90 91 db 09 	lds	r25, 0x09DB
    11b6:	fc 01       	movw	r30, r24
    11b8:	54 e0       	ldi	r21, 0x04	; 4
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	5a 95       	dec	r21
    11c0:	e1 f7       	brne	.-8      	; 0x11ba <main+0xbec>
    11c2:	e8 1b       	sub	r30, r24
    11c4:	f9 0b       	sbc	r31, r25
    11c6:	ed 51       	subi	r30, 0x1D	; 29
    11c8:	f6 4f       	sbci	r31, 0xF6	; 246
    11ca:	90 91 49 01 	lds	r25, 0x0149
    11ce:	80 85       	ldd	r24, Z+8	; 0x08
    11d0:	89 2b       	or	r24, r25
    11d2:	80 87       	std	Z+8, r24	; 0x08
    11d4:	80 91 48 01 	lds	r24, 0x0148
    11d8:	81 87       	std	Z+9, r24	; 0x09
    11da:	1f c0       	rjmp	.+62     	; 0x121a <main+0xc4c>
    11dc:	80 91 da 09 	lds	r24, 0x09DA
    11e0:	90 91 db 09 	lds	r25, 0x09DB
    11e4:	fc 01       	movw	r30, r24
    11e6:	44 e0       	ldi	r20, 0x04	; 4
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	4a 95       	dec	r20
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <main+0xc1a>
    11f0:	e8 1b       	sub	r30, r24
    11f2:	f9 0b       	sbc	r31, r25
    11f4:	ed 51       	subi	r30, 0x1D	; 29
    11f6:	f6 4f       	sbci	r31, 0xF6	; 246
    11f8:	80 91 48 01 	lds	r24, 0x0148
    11fc:	90 91 49 01 	lds	r25, 0x0149
    1200:	36 e0       	ldi	r19, 0x06	; 6
    1202:	96 95       	lsr	r25
    1204:	87 95       	ror	r24
    1206:	3a 95       	dec	r19
    1208:	e1 f7       	brne	.-8      	; 0x1202 <main+0xc34>
    120a:	24 85       	ldd	r18, Z+12	; 0x0c
    120c:	28 2b       	or	r18, r24
    120e:	24 87       	std	Z+12, r18	; 0x0c
    1210:	80 91 48 01 	lds	r24, 0x0148
    1214:	88 0f       	add	r24, r24
    1216:	88 0f       	add	r24, r24
    1218:	85 87       	std	Z+13, r24	; 0x0d
			 					m_SET_Z(data[dataIndex],z,dataSubindex);
    121a:	80 91 de 09 	lds	r24, 0x09DE
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	49 f1       	breq	.+82     	; 0x1274 <main+0xca6>
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	38 f0       	brcs	.+14     	; 0x1234 <main+0xc66>
    1226:	82 30       	cpi	r24, 0x02	; 2
    1228:	09 f4       	brne	.+2      	; 0x122c <main+0xc5e>
    122a:	44 c0       	rjmp	.+136    	; 0x12b4 <main+0xce6>
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	09 f0       	breq	.+2      	; 0x1232 <main+0xc64>
    1230:	76 c0       	rjmp	.+236    	; 0x131e <main+0xd50>
    1232:	5f c0       	rjmp	.+190    	; 0x12f2 <main+0xd24>
    1234:	80 91 da 09 	lds	r24, 0x09DA
    1238:	90 91 db 09 	lds	r25, 0x09DB
    123c:	fc 01       	movw	r30, r24
    123e:	24 e0       	ldi	r18, 0x04	; 4
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	2a 95       	dec	r18
    1246:	e1 f7       	brne	.-8      	; 0x1240 <main+0xc72>
    1248:	e8 1b       	sub	r30, r24
    124a:	f9 0b       	sbc	r31, r25
    124c:	ed 51       	subi	r30, 0x1D	; 29
    124e:	f6 4f       	sbci	r31, 0xF6	; 246
    1250:	80 91 4a 01 	lds	r24, 0x014A
    1254:	90 91 4b 01 	lds	r25, 0x014B
    1258:	06 e0       	ldi	r16, 0x06	; 6
    125a:	96 95       	lsr	r25
    125c:	87 95       	ror	r24
    125e:	0a 95       	dec	r16
    1260:	e1 f7       	brne	.-8      	; 0x125a <main+0xc8c>
    1262:	22 81       	ldd	r18, Z+2	; 0x02
    1264:	28 2b       	or	r18, r24
    1266:	22 83       	std	Z+2, r18	; 0x02
    1268:	80 91 4a 01 	lds	r24, 0x014A
    126c:	88 0f       	add	r24, r24
    126e:	88 0f       	add	r24, r24
    1270:	83 83       	std	Z+3, r24	; 0x03
    1272:	55 c0       	rjmp	.+170    	; 0x131e <main+0xd50>
    1274:	80 91 da 09 	lds	r24, 0x09DA
    1278:	90 91 db 09 	lds	r25, 0x09DB
    127c:	fc 01       	movw	r30, r24
    127e:	14 e0       	ldi	r17, 0x04	; 4
    1280:	ee 0f       	add	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	1a 95       	dec	r17
    1286:	e1 f7       	brne	.-8      	; 0x1280 <main+0xcb2>
    1288:	e8 1b       	sub	r30, r24
    128a:	f9 0b       	sbc	r31, r25
    128c:	ed 51       	subi	r30, 0x1D	; 29
    128e:	f6 4f       	sbci	r31, 0xF6	; 246
    1290:	80 91 4a 01 	lds	r24, 0x014A
    1294:	90 91 4b 01 	lds	r25, 0x014B
    1298:	b4 e0       	ldi	r27, 0x04	; 4
    129a:	96 95       	lsr	r25
    129c:	87 95       	ror	r24
    129e:	ba 95       	dec	r27
    12a0:	e1 f7       	brne	.-8      	; 0x129a <main+0xccc>
    12a2:	26 81       	ldd	r18, Z+6	; 0x06
    12a4:	28 2b       	or	r18, r24
    12a6:	26 83       	std	Z+6, r18	; 0x06
    12a8:	80 91 4a 01 	lds	r24, 0x014A
    12ac:	82 95       	swap	r24
    12ae:	80 7f       	andi	r24, 0xF0	; 240
    12b0:	87 83       	std	Z+7, r24	; 0x07
    12b2:	35 c0       	rjmp	.+106    	; 0x131e <main+0xd50>
    12b4:	80 91 da 09 	lds	r24, 0x09DA
    12b8:	90 91 db 09 	lds	r25, 0x09DB
    12bc:	fc 01       	movw	r30, r24
    12be:	a4 e0       	ldi	r26, 0x04	; 4
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	aa 95       	dec	r26
    12c6:	e1 f7       	brne	.-8      	; 0x12c0 <main+0xcf2>
    12c8:	e8 1b       	sub	r30, r24
    12ca:	f9 0b       	sbc	r31, r25
    12cc:	ed 51       	subi	r30, 0x1D	; 29
    12ce:	f6 4f       	sbci	r31, 0xF6	; 246
    12d0:	80 91 4a 01 	lds	r24, 0x014A
    12d4:	90 91 4b 01 	lds	r25, 0x014B
    12d8:	96 95       	lsr	r25
    12da:	87 95       	ror	r24
    12dc:	96 95       	lsr	r25
    12de:	87 95       	ror	r24
    12e0:	82 87       	std	Z+10, r24	; 0x0a
    12e2:	80 91 4a 01 	lds	r24, 0x014A
    12e6:	82 95       	swap	r24
    12e8:	88 0f       	add	r24, r24
    12ea:	88 0f       	add	r24, r24
    12ec:	80 7c       	andi	r24, 0xC0	; 192
    12ee:	83 87       	std	Z+11, r24	; 0x0b
    12f0:	16 c0       	rjmp	.+44     	; 0x131e <main+0xd50>
    12f2:	80 91 da 09 	lds	r24, 0x09DA
    12f6:	90 91 db 09 	lds	r25, 0x09DB
    12fa:	fc 01       	movw	r30, r24
    12fc:	64 e0       	ldi	r22, 0x04	; 4
    12fe:	ee 0f       	add	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	6a 95       	dec	r22
    1304:	e1 f7       	brne	.-8      	; 0x12fe <main+0xd30>
    1306:	e8 1b       	sub	r30, r24
    1308:	f9 0b       	sbc	r31, r25
    130a:	ed 51       	subi	r30, 0x1D	; 29
    130c:	f6 4f       	sbci	r31, 0xF6	; 246
    130e:	90 91 4b 01 	lds	r25, 0x014B
    1312:	85 85       	ldd	r24, Z+13	; 0x0d
    1314:	89 2b       	or	r24, r25
    1316:	85 87       	std	Z+13, r24	; 0x0d
    1318:	80 91 4a 01 	lds	r24, 0x014A
    131c:	86 87       	std	Z+14, r24	; 0x0e

			 					dataSubindex++;
    131e:	80 91 de 09 	lds	r24, 0x09DE
    1322:	8f 5f       	subi	r24, 0xFF	; 255
    1324:	80 93 de 09 	sts	0x09DE, r24
			 					if (dataSubindex>=4)
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	10 f0       	brcs	.+4      	; 0x1330 <main+0xd62>
			 					dataSubindex=0;
    132c:	10 92 de 09 	sts	0x09DE, r1
					tester=0;

					if (_wTM==_TM_Continuous)
						continue;
						
					for (int ixz=0;(ixz<100);ixz++) {                                                                                      
    1330:	21 96       	adiw	r28, 0x01	; 1
    1332:	c4 36       	cpi	r28, 0x64	; 100
    1334:	d1 05       	cpc	r29, r1
    1336:	09 f0       	breq	.+2      	; 0x133a <main+0xd6c>
    1338:	79 cd       	rjmp	.-1294   	; 0xe2c <main+0x85e>
			 					if (dataSubindex>=4)
			 					dataSubindex=0;
							}						
					}

					_send_fv();
    133a:	0e 94 b3 19 	call	0x3366	; 0x3366 <_send_fv>
					_send_sr();					 
    133e:	0e 94 a3 19 	call	0x3346	; 0x3346 <_send_sr>
					_send_tm();
    1342:	0e 94 91 19 	call	0x3322	; 0x3322 <_send_tm>
					_send_batch_count((batch_counter-1)*4);																	
    1346:	80 91 1f 01 	lds	r24, 0x011F
    134a:	90 91 20 01 	lds	r25, 0x0120
    134e:	81 50       	subi	r24, 0x01	; 1
    1350:	90 4c       	sbci	r25, 0xC0	; 192
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_send_batch_count>
					_send_acs();
    135e:	0e 94 f7 19 	call	0x33ee	; 0x33ee <_send_acs>
						acount[0]=acount[summaryindex];
						summaryindex=0;
					}*/

					
					if ((batch_counter>0) && (batch_counter<750)) // Go from 0 up to batch_counter
    1362:	80 91 1f 01 	lds	r24, 0x011F
    1366:	90 91 20 01 	lds	r25, 0x0120
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	8d 5e       	subi	r24, 0xED	; 237
    136e:	92 40       	sbci	r25, 0x02	; 2
    1370:	08 f0       	brcs	.+2      	; 0x1374 <main+0xda6>
    1372:	7b c3       	rjmp	.+1782   	; 0x1a6a <main+0x149c>
    1374:	c3 ee       	ldi	r28, 0xE3	; 227
    1376:	d9 e0       	ldi	r29, 0x09	; 9
    1378:	88 24       	eor	r8, r8
    137a:	99 24       	eor	r9, r9
    137c:	5f c3       	rjmp	.+1726   	; 0x1a3c <main+0x146e>
					{						
						for (int i=0;(i<(batch_counter-1));i++)
						{
							m_GET_X(x,data[i].byte1,data[i].byte2,0);
    137e:	69 81       	ldd	r22, Y+1	; 0x01
    1380:	86 2f       	mov	r24, r22
    1382:	82 95       	swap	r24
    1384:	86 95       	lsr	r24
    1386:	86 95       	lsr	r24
    1388:	83 70       	andi	r24, 0x03	; 3
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	28 81       	ld	r18, Y
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	22 0f       	add	r18, r18
    1392:	33 1f       	adc	r19, r19
    1394:	22 0f       	add	r18, r18
    1396:	33 1f       	adc	r19, r19
    1398:	82 2b       	or	r24, r18
    139a:	93 2b       	or	r25, r19
    139c:	90 93 47 01 	sts	0x0147, r25
    13a0:	80 93 46 01 	sts	0x0146, r24
							m_GET_Y(y,data[i].byte2,data[i].byte3,0);
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	6f 73       	andi	r22, 0x3F	; 63
    13a8:	70 70       	andi	r23, 0x00	; 0
    13aa:	34 e0       	ldi	r19, 0x04	; 4
    13ac:	66 0f       	add	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	3a 95       	dec	r19
    13b2:	e1 f7       	brne	.-8      	; 0x13ac <main+0xdde>
    13b4:	4a 81       	ldd	r20, Y+2	; 0x02
    13b6:	24 2f       	mov	r18, r20
    13b8:	22 95       	swap	r18
    13ba:	2f 70       	andi	r18, 0x0F	; 15
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	62 2b       	or	r22, r18
    13c0:	73 2b       	or	r23, r19
    13c2:	70 93 49 01 	sts	0x0149, r23
    13c6:	60 93 48 01 	sts	0x0148, r22
							m_GET_Z(z,data[i].byte3,data[i].byte4,0);							
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	4f 70       	andi	r20, 0x0F	; 15
    13ce:	50 70       	andi	r21, 0x00	; 0
    13d0:	26 e0       	ldi	r18, 0x06	; 6
    13d2:	44 0f       	add	r20, r20
    13d4:	55 1f       	adc	r21, r21
    13d6:	2a 95       	dec	r18
    13d8:	e1 f7       	brne	.-8      	; 0x13d2 <main+0xe04>
    13da:	2b 81       	ldd	r18, Y+3	; 0x03
    13dc:	26 95       	lsr	r18
    13de:	26 95       	lsr	r18
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	42 2b       	or	r20, r18
    13e4:	53 2b       	or	r21, r19
    13e6:	50 93 4b 01 	sts	0x014B, r21
    13ea:	40 93 4a 01 	sts	0x014A, r20
							//_send_uncompressed_pdu(x, y, z);
							
							_send_pdu(x,y,z);
    13ee:	0e 94 42 02 	call	0x484	; 0x484 <_send_pdu>

							m_GET_X(x,data[i].byte4,data[i].byte5,1);
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	83 70       	andi	r24, 0x03	; 3
    13f8:	90 70       	andi	r25, 0x00	; 0
    13fa:	98 2f       	mov	r25, r24
    13fc:	88 27       	eor	r24, r24
    13fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	82 2b       	or	r24, r18
    1404:	93 2b       	or	r25, r19
    1406:	90 93 47 01 	sts	0x0147, r25
    140a:	80 93 46 01 	sts	0x0146, r24
							m_GET_Y(y,data[i].byte6,data[i].byte7,1);
    140e:	4e 81       	ldd	r20, Y+6	; 0x06
    1410:	64 2f       	mov	r22, r20
    1412:	62 95       	swap	r22
    1414:	66 95       	lsr	r22
    1416:	66 95       	lsr	r22
    1418:	63 70       	andi	r22, 0x03	; 3
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	2d 81       	ldd	r18, Y+5	; 0x05
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	22 0f       	add	r18, r18
    1422:	33 1f       	adc	r19, r19
    1424:	22 0f       	add	r18, r18
    1426:	33 1f       	adc	r19, r19
    1428:	62 2b       	or	r22, r18
    142a:	73 2b       	or	r23, r19
    142c:	70 93 49 01 	sts	0x0149, r23
    1430:	60 93 48 01 	sts	0x0148, r22
							m_GET_Z(z,data[i].byte7,data[i].byte8,1);							
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	4f 73       	andi	r20, 0x3F	; 63
    1438:	50 70       	andi	r21, 0x00	; 0
    143a:	b4 e0       	ldi	r27, 0x04	; 4
    143c:	44 0f       	add	r20, r20
    143e:	55 1f       	adc	r21, r21
    1440:	ba 95       	dec	r27
    1442:	e1 f7       	brne	.-8      	; 0x143c <main+0xe6e>
    1444:	2f 81       	ldd	r18, Y+7	; 0x07
    1446:	22 95       	swap	r18
    1448:	2f 70       	andi	r18, 0x0F	; 15
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	42 2b       	or	r20, r18
    144e:	53 2b       	or	r21, r19
    1450:	50 93 4b 01 	sts	0x014B, r21
    1454:	40 93 4a 01 	sts	0x014A, r20
							//_send_uncompressed_pdu(x,y, z);
							
							_send_pdu(x,y,z);
    1458:	0e 94 42 02 	call	0x484	; 0x484 <_send_pdu>

							m_GET_X(x,data[i].byte8,data[i].byte9,2);
    145c:	68 85       	ldd	r22, Y+8	; 0x08
    145e:	86 2f       	mov	r24, r22
    1460:	86 95       	lsr	r24
    1462:	86 95       	lsr	r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	2f 81       	ldd	r18, Y+7	; 0x07
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	2f 70       	andi	r18, 0x0F	; 15
    146c:	30 70       	andi	r19, 0x00	; 0
    146e:	a6 e0       	ldi	r26, 0x06	; 6
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	aa 95       	dec	r26
    1476:	e1 f7       	brne	.-8      	; 0x1470 <main+0xea2>
    1478:	82 2b       	or	r24, r18
    147a:	93 2b       	or	r25, r19
    147c:	90 93 47 01 	sts	0x0147, r25
    1480:	80 93 46 01 	sts	0x0146, r24
							m_GET_Y(y,data[i].byte9,data[i].byte10,2);
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	63 70       	andi	r22, 0x03	; 3
    1488:	70 70       	andi	r23, 0x00	; 0
    148a:	76 2f       	mov	r23, r22
    148c:	66 27       	eor	r22, r22
    148e:	29 85       	ldd	r18, Y+9	; 0x09
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	62 2b       	or	r22, r18
    1494:	73 2b       	or	r23, r19
    1496:	70 93 49 01 	sts	0x0149, r23
    149a:	60 93 48 01 	sts	0x0148, r22
							m_GET_Z(z,data[i].byte11,data[i].byte12,2);
    149e:	4b 85       	ldd	r20, Y+11	; 0x0b
    14a0:	42 95       	swap	r20
    14a2:	46 95       	lsr	r20
    14a4:	46 95       	lsr	r20
    14a6:	43 70       	andi	r20, 0x03	; 3
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	22 0f       	add	r18, r18
    14b4:	33 1f       	adc	r19, r19
    14b6:	42 2b       	or	r20, r18
    14b8:	53 2b       	or	r21, r19
    14ba:	50 93 4b 01 	sts	0x014B, r21
    14be:	40 93 4a 01 	sts	0x014A, r20
							//_send_uncompressed_pdu(x, y, z);
							
							_send_pdu(x,y,z);
    14c2:	0e 94 42 02 	call	0x484	; 0x484 <_send_pdu>

							m_GET_X(x,data[i].byte12,data[i].byte13,3);
    14c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    14c8:	86 2f       	mov	r24, r22
    14ca:	82 95       	swap	r24
    14cc:	8f 70       	andi	r24, 0x0F	; 15
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	2f 73       	andi	r18, 0x3F	; 63
    14d6:	30 70       	andi	r19, 0x00	; 0
    14d8:	44 e0       	ldi	r20, 0x04	; 4
    14da:	22 0f       	add	r18, r18
    14dc:	33 1f       	adc	r19, r19
    14de:	4a 95       	dec	r20
    14e0:	e1 f7       	brne	.-8      	; 0x14da <main+0xf0c>
    14e2:	82 2b       	or	r24, r18
    14e4:	93 2b       	or	r25, r19
    14e6:	90 93 47 01 	sts	0x0147, r25
    14ea:	80 93 46 01 	sts	0x0146, r24
							m_GET_Y(y,data[i].byte13,data[i].byte14,3);
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	6f 70       	andi	r22, 0x0F	; 15
    14f2:	70 70       	andi	r23, 0x00	; 0
    14f4:	06 e0       	ldi	r16, 0x06	; 6
    14f6:	66 0f       	add	r22, r22
    14f8:	77 1f       	adc	r23, r23
    14fa:	0a 95       	dec	r16
    14fc:	e1 f7       	brne	.-8      	; 0x14f6 <main+0xf28>
    14fe:	4d 85       	ldd	r20, Y+13	; 0x0d
    1500:	24 2f       	mov	r18, r20
    1502:	26 95       	lsr	r18
    1504:	26 95       	lsr	r18
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	62 2b       	or	r22, r18
    150a:	73 2b       	or	r23, r19
    150c:	70 93 49 01 	sts	0x0149, r23
    1510:	60 93 48 01 	sts	0x0148, r22
							m_GET_Z(z,data[i].byte14,data[i].byte15,3);							
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	43 70       	andi	r20, 0x03	; 3
    1518:	50 70       	andi	r21, 0x00	; 0
    151a:	54 2f       	mov	r21, r20
    151c:	44 27       	eor	r20, r20
    151e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	42 2b       	or	r20, r18
    1524:	53 2b       	or	r21, r19
    1526:	50 93 4b 01 	sts	0x014B, r21
    152a:	40 93 4a 01 	sts	0x014A, r20
							//_send_uncompressed_pdu(x, y, z);
							
							_send_pdu(x,y,z);
    152e:	0e 94 42 02 	call	0x484	; 0x484 <_send_pdu>

							_receive_data();
    1532:	0e 94 19 14 	call	0x2832	; 0x2832 <_receive_data>


							if (sampleFlag)
    1536:	80 91 1e 01 	lds	r24, 0x011E
    153a:	88 23       	and	r24, r24
    153c:	09 f4       	brne	.+2      	; 0x1540 <main+0xf72>
    153e:	7a c2       	rjmp	.+1268   	; 0x1a34 <main+0x1466>
							{
								sampleFlag=0;
    1540:	10 92 1e 01 	sts	0x011E, r1

								x=_atmega_a2dConvert10bit(ADC0);
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    154a:	90 93 47 01 	sts	0x0147, r25
    154e:	80 93 46 01 	sts	0x0146, r24
		
								y=_atmega_a2dConvert10bit(ADC1);
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    1558:	90 93 49 01 	sts	0x0149, r25
    155c:	80 93 48 01 	sts	0x0148, r24

								z=_atmega_a2dConvert10bit(ADC2);
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    1566:	90 93 4b 01 	sts	0x014B, r25
    156a:	80 93 4a 01 	sts	0x014A, r24


								vmag+=Filter(x,0)+Filter(y,1)+Filter(z,2);
    156e:	e0 90 e0 35 	lds	r14, 0x35E0
    1572:	f0 90 e1 35 	lds	r15, 0x35E1
    1576:	00 91 e2 35 	lds	r16, 0x35E2
    157a:	10 91 e3 35 	lds	r17, 0x35E3
    157e:	80 91 46 01 	lds	r24, 0x0146
    1582:	90 91 47 01 	lds	r25, 0x0147
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
    158e:	5c 01       	movw	r10, r24
    1590:	80 91 48 01 	lds	r24, 0x0148
    1594:	90 91 49 01 	lds	r25, 0x0149
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
    15a0:	6c 01       	movw	r12, r24
    15a2:	80 91 4a 01 	lds	r24, 0x014A
    15a6:	90 91 4b 01 	lds	r25, 0x014B
    15aa:	62 e0       	ldi	r22, 0x02	; 2
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
    15b2:	ca 0c       	add	r12, r10
    15b4:	db 1c       	adc	r13, r11
    15b6:	c8 0e       	add	r12, r24
    15b8:	d9 1e       	adc	r13, r25
    15ba:	b6 01       	movw	r22, r12
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	6e 0d       	add	r22, r14
    15c2:	7f 1d       	adc	r23, r15
    15c4:	80 1f       	adc	r24, r16
    15c6:	91 1f       	adc	r25, r17
    15c8:	60 93 e0 35 	sts	0x35E0, r22
    15cc:	70 93 e1 35 	sts	0x35E1, r23
    15d0:	80 93 e2 35 	sts	0x35E2, r24
    15d4:	90 93 e3 35 	sts	0x35E3, r25
			

								if (_wPC>40){	//Skip the first samples						
    15d8:	20 91 53 01 	lds	r18, 0x0153
    15dc:	30 91 54 01 	lds	r19, 0x0154
    15e0:	40 91 55 01 	lds	r20, 0x0155
    15e4:	50 91 56 01 	lds	r21, 0x0156
    15e8:	29 32       	cpi	r18, 0x29	; 41
    15ea:	31 05       	cpc	r19, r1
    15ec:	41 05       	cpc	r20, r1
    15ee:	51 05       	cpc	r21, r1
    15f0:	08 f4       	brcc	.+2      	; 0x15f4 <main+0x1026>
    15f2:	85 c0       	rjmp	.+266    	; 0x16fe <main+0x1130>
									if (summary_count==0)
    15f4:	20 91 00 01 	lds	r18, 0x0100
    15f8:	30 91 01 01 	lds	r19, 0x0101
    15fc:	21 15       	cp	r18, r1
    15fe:	31 05       	cpc	r19, r1
    1600:	09 f0       	breq	.+2      	; 0x1604 <main+0x1036>
    1602:	76 c0       	rjmp	.+236    	; 0x16f0 <main+0x1122>
									{
										vmag=vmag/24;
    1604:	28 e1       	ldi	r18, 0x18	; 24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__udivmodsi4>
    1610:	c9 01       	movw	r24, r18
    1612:	da 01       	movw	r26, r20
    1614:	e0 91 18 01 	lds	r30, 0x0118
    1618:	f0 91 19 01 	lds	r31, 0x0119
										if (vmag>65535)
    161c:	80 30       	cpi	r24, 0x00	; 0
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	92 07       	cpc	r25, r18
    1622:	21 e0       	ldi	r18, 0x01	; 1
    1624:	a2 07       	cpc	r26, r18
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	b2 07       	cpc	r27, r18
    162a:	38 f0       	brcs	.+14     	; 0x163a <main+0x106c>
											acount[ci]=65535;
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	ed 59       	subi	r30, 0x9D	; 157
    1632:	fe 4f       	sbci	r31, 0xFE	; 254
    1634:	71 82       	std	Z+1, r7	; 0x01
    1636:	60 82       	st	Z, r6
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <main+0x1078>
										else
											acount[ci]=(unsigned short) vmag;
    163a:	ee 0f       	add	r30, r30
    163c:	ff 1f       	adc	r31, r31
    163e:	ed 59       	subi	r30, 0x9D	; 157
    1640:	fe 4f       	sbci	r31, 0xFE	; 254
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
			 							vmag=0;
    1646:	10 92 e0 35 	sts	0x35E0, r1
    164a:	10 92 e1 35 	sts	0x35E1, r1
    164e:	10 92 e2 35 	sts	0x35E2, r1
    1652:	10 92 e3 35 	sts	0x35E3, r1
										++ci;
    1656:	80 91 18 01 	lds	r24, 0x0118
    165a:	90 91 19 01 	lds	r25, 0x0119
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	90 93 19 01 	sts	0x0119, r25
    1664:	80 93 18 01 	sts	0x0118, r24
										if (ci==AC_BUFFER_SIZE)
    1668:	80 5c       	subi	r24, 0xC0	; 192
    166a:	93 40       	sbci	r25, 0x03	; 3
    166c:	21 f4       	brne	.+8      	; 0x1676 <main+0x10a8>
											ci=0;
    166e:	10 92 19 01 	sts	0x0119, r1
    1672:	10 92 18 01 	sts	0x0118, r1
										cseq++;
    1676:	80 91 10 01 	lds	r24, 0x0110
    167a:	90 91 11 01 	lds	r25, 0x0111
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	90 93 11 01 	sts	0x0111, r25
    1684:	80 93 10 01 	sts	0x0110, r24
	
										if (ci==si)
    1688:	20 91 18 01 	lds	r18, 0x0118
    168c:	30 91 19 01 	lds	r19, 0x0119
    1690:	80 91 1a 01 	lds	r24, 0x011A
    1694:	90 91 1b 01 	lds	r25, 0x011B
    1698:	28 17       	cp	r18, r24
    169a:	39 07       	cpc	r19, r25
    169c:	b1 f4       	brne	.+44     	; 0x16ca <main+0x10fc>
										{
											si++;
    169e:	c9 01       	movw	r24, r18
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	90 93 1b 01 	sts	0x011B, r25
    16a6:	80 93 1a 01 	sts	0x011A, r24
											if (si==AC_BUFFER_SIZE)
    16aa:	80 5c       	subi	r24, 0xC0	; 192
    16ac:	93 40       	sbci	r25, 0x03	; 3
    16ae:	21 f4       	brne	.+8      	; 0x16b8 <main+0x10ea>
												si=0;
    16b0:	10 92 1b 01 	sts	0x011B, r1
    16b4:	10 92 1a 01 	sts	0x011A, r1
											sseq++;
    16b8:	80 91 12 01 	lds	r24, 0x0112
    16bc:	90 91 13 01 	lds	r25, 0x0113
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	90 93 13 01 	sts	0x0113, r25
    16c6:	80 93 12 01 	sts	0x0112, r24
										}
										acount[ci]=0;
    16ca:	e0 91 18 01 	lds	r30, 0x0118
    16ce:	f0 91 19 01 	lds	r31, 0x0119
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	ed 59       	subi	r30, 0x9D	; 157
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
    16da:	11 82       	std	Z+1, r1	; 0x01
    16dc:	10 82       	st	Z, r1
										summary_count=AC_NUMS;
    16de:	80 91 0c 01 	lds	r24, 0x010C
    16e2:	90 91 0d 01 	lds	r25, 0x010D
    16e6:	90 93 01 01 	sts	0x0101, r25
    16ea:	80 93 00 01 	sts	0x0100, r24
    16ee:	14 c0       	rjmp	.+40     	; 0x1718 <main+0x114a>
									}else
										summary_count--;
    16f0:	21 50       	subi	r18, 0x01	; 1
    16f2:	30 40       	sbci	r19, 0x00	; 0
    16f4:	30 93 01 01 	sts	0x0101, r19
    16f8:	20 93 00 01 	sts	0x0100, r18
    16fc:	0d c0       	rjmp	.+26     	; 0x1718 <main+0x114a>
								}
								else if (_wPC==40)
    16fe:	28 32       	cpi	r18, 0x28	; 40
    1700:	31 05       	cpc	r19, r1
    1702:	41 05       	cpc	r20, r1
    1704:	51 05       	cpc	r21, r1
    1706:	41 f4       	brne	.+16     	; 0x1718 <main+0x114a>
									vmag=0;
    1708:	10 92 e0 35 	sts	0x35E0, r1
    170c:	10 92 e1 35 	sts	0x35E1, r1
    1710:	10 92 e2 35 	sts	0x35E2, r1
    1714:	10 92 e3 35 	sts	0x35E3, r1

			

		
			 					m_SET_X(data[dataIndex],x,dataSubindex);
    1718:	80 91 de 09 	lds	r24, 0x09DE
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	39 f1       	breq	.+78     	; 0x176e <main+0x11a0>
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	30 f0       	brcs	.+12     	; 0x1730 <main+0x1162>
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	d1 f1       	breq	.+116    	; 0x179c <main+0x11ce>
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	09 f0       	breq	.+2      	; 0x172e <main+0x1160>
    172c:	76 c0       	rjmp	.+236    	; 0x181a <main+0x124c>
    172e:	56 c0       	rjmp	.+172    	; 0x17dc <main+0x120e>
    1730:	80 91 da 09 	lds	r24, 0x09DA
    1734:	90 91 db 09 	lds	r25, 0x09DB
    1738:	fc 01       	movw	r30, r24
    173a:	64 e0       	ldi	r22, 0x04	; 4
    173c:	ee 0f       	add	r30, r30
    173e:	ff 1f       	adc	r31, r31
    1740:	6a 95       	dec	r22
    1742:	e1 f7       	brne	.-8      	; 0x173c <main+0x116e>
    1744:	e8 1b       	sub	r30, r24
    1746:	f9 0b       	sbc	r31, r25
    1748:	ed 51       	subi	r30, 0x1D	; 29
    174a:	f6 4f       	sbci	r31, 0xF6	; 246
    174c:	80 91 46 01 	lds	r24, 0x0146
    1750:	90 91 47 01 	lds	r25, 0x0147
    1754:	96 95       	lsr	r25
    1756:	87 95       	ror	r24
    1758:	96 95       	lsr	r25
    175a:	87 95       	ror	r24
    175c:	80 83       	st	Z, r24
    175e:	80 91 46 01 	lds	r24, 0x0146
    1762:	82 95       	swap	r24
    1764:	88 0f       	add	r24, r24
    1766:	88 0f       	add	r24, r24
    1768:	80 7c       	andi	r24, 0xC0	; 192
    176a:	81 83       	std	Z+1, r24	; 0x01
    176c:	56 c0       	rjmp	.+172    	; 0x181a <main+0x124c>
    176e:	80 91 da 09 	lds	r24, 0x09DA
    1772:	90 91 db 09 	lds	r25, 0x09DB
    1776:	fc 01       	movw	r30, r24
    1778:	44 e0       	ldi	r20, 0x04	; 4
    177a:	ee 0f       	add	r30, r30
    177c:	ff 1f       	adc	r31, r31
    177e:	4a 95       	dec	r20
    1780:	e1 f7       	brne	.-8      	; 0x177a <main+0x11ac>
    1782:	e8 1b       	sub	r30, r24
    1784:	f9 0b       	sbc	r31, r25
    1786:	ed 51       	subi	r30, 0x1D	; 29
    1788:	f6 4f       	sbci	r31, 0xF6	; 246
    178a:	90 91 47 01 	lds	r25, 0x0147
    178e:	83 81       	ldd	r24, Z+3	; 0x03
    1790:	89 2b       	or	r24, r25
    1792:	83 83       	std	Z+3, r24	; 0x03
    1794:	80 91 46 01 	lds	r24, 0x0146
    1798:	84 83       	std	Z+4, r24	; 0x04
    179a:	3f c0       	rjmp	.+126    	; 0x181a <main+0x124c>
    179c:	80 91 da 09 	lds	r24, 0x09DA
    17a0:	90 91 db 09 	lds	r25, 0x09DB
    17a4:	fc 01       	movw	r30, r24
    17a6:	34 e0       	ldi	r19, 0x04	; 4
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	3a 95       	dec	r19
    17ae:	e1 f7       	brne	.-8      	; 0x17a8 <main+0x11da>
    17b0:	e8 1b       	sub	r30, r24
    17b2:	f9 0b       	sbc	r31, r25
    17b4:	ed 51       	subi	r30, 0x1D	; 29
    17b6:	f6 4f       	sbci	r31, 0xF6	; 246
    17b8:	80 91 46 01 	lds	r24, 0x0146
    17bc:	90 91 47 01 	lds	r25, 0x0147
    17c0:	26 e0       	ldi	r18, 0x06	; 6
    17c2:	96 95       	lsr	r25
    17c4:	87 95       	ror	r24
    17c6:	2a 95       	dec	r18
    17c8:	e1 f7       	brne	.-8      	; 0x17c2 <main+0x11f4>
    17ca:	27 81       	ldd	r18, Z+7	; 0x07
    17cc:	28 2b       	or	r18, r24
    17ce:	27 83       	std	Z+7, r18	; 0x07
    17d0:	80 91 46 01 	lds	r24, 0x0146
    17d4:	88 0f       	add	r24, r24
    17d6:	88 0f       	add	r24, r24
    17d8:	80 87       	std	Z+8, r24	; 0x08
    17da:	1f c0       	rjmp	.+62     	; 0x181a <main+0x124c>
    17dc:	80 91 da 09 	lds	r24, 0x09DA
    17e0:	90 91 db 09 	lds	r25, 0x09DB
    17e4:	fc 01       	movw	r30, r24
    17e6:	04 e0       	ldi	r16, 0x04	; 4
    17e8:	ee 0f       	add	r30, r30
    17ea:	ff 1f       	adc	r31, r31
    17ec:	0a 95       	dec	r16
    17ee:	e1 f7       	brne	.-8      	; 0x17e8 <main+0x121a>
    17f0:	e8 1b       	sub	r30, r24
    17f2:	f9 0b       	sbc	r31, r25
    17f4:	ed 51       	subi	r30, 0x1D	; 29
    17f6:	f6 4f       	sbci	r31, 0xF6	; 246
    17f8:	80 91 46 01 	lds	r24, 0x0146
    17fc:	90 91 47 01 	lds	r25, 0x0147
    1800:	14 e0       	ldi	r17, 0x04	; 4
    1802:	96 95       	lsr	r25
    1804:	87 95       	ror	r24
    1806:	1a 95       	dec	r17
    1808:	e1 f7       	brne	.-8      	; 0x1802 <main+0x1234>
    180a:	23 85       	ldd	r18, Z+11	; 0x0b
    180c:	28 2b       	or	r18, r24
    180e:	23 87       	std	Z+11, r18	; 0x0b
    1810:	80 91 46 01 	lds	r24, 0x0146
    1814:	82 95       	swap	r24
    1816:	80 7f       	andi	r24, 0xF0	; 240
    1818:	84 87       	std	Z+12, r24	; 0x0c
			 					m_SET_Y(data[dataIndex],y,dataSubindex);
    181a:	80 91 de 09 	lds	r24, 0x09DE
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	49 f1       	breq	.+82     	; 0x1874 <main+0x12a6>
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	38 f0       	brcs	.+14     	; 0x1834 <main+0x1266>
    1826:	82 30       	cpi	r24, 0x02	; 2
    1828:	09 f4       	brne	.+2      	; 0x182c <main+0x125e>
    182a:	43 c0       	rjmp	.+134    	; 0x18b2 <main+0x12e4>
    182c:	83 30       	cpi	r24, 0x03	; 3
    182e:	09 f0       	breq	.+2      	; 0x1832 <main+0x1264>
    1830:	76 c0       	rjmp	.+236    	; 0x191e <main+0x1350>
    1832:	56 c0       	rjmp	.+172    	; 0x18e0 <main+0x1312>
    1834:	80 91 da 09 	lds	r24, 0x09DA
    1838:	90 91 db 09 	lds	r25, 0x09DB
    183c:	fc 01       	movw	r30, r24
    183e:	b4 e0       	ldi	r27, 0x04	; 4
    1840:	ee 0f       	add	r30, r30
    1842:	ff 1f       	adc	r31, r31
    1844:	ba 95       	dec	r27
    1846:	e1 f7       	brne	.-8      	; 0x1840 <main+0x1272>
    1848:	e8 1b       	sub	r30, r24
    184a:	f9 0b       	sbc	r31, r25
    184c:	ed 51       	subi	r30, 0x1D	; 29
    184e:	f6 4f       	sbci	r31, 0xF6	; 246
    1850:	80 91 48 01 	lds	r24, 0x0148
    1854:	90 91 49 01 	lds	r25, 0x0149
    1858:	a4 e0       	ldi	r26, 0x04	; 4
    185a:	96 95       	lsr	r25
    185c:	87 95       	ror	r24
    185e:	aa 95       	dec	r26
    1860:	e1 f7       	brne	.-8      	; 0x185a <main+0x128c>
    1862:	21 81       	ldd	r18, Z+1	; 0x01
    1864:	28 2b       	or	r18, r24
    1866:	21 83       	std	Z+1, r18	; 0x01
    1868:	80 91 48 01 	lds	r24, 0x0148
    186c:	82 95       	swap	r24
    186e:	80 7f       	andi	r24, 0xF0	; 240
    1870:	82 83       	std	Z+2, r24	; 0x02
    1872:	55 c0       	rjmp	.+170    	; 0x191e <main+0x1350>
    1874:	80 91 da 09 	lds	r24, 0x09DA
    1878:	90 91 db 09 	lds	r25, 0x09DB
    187c:	fc 01       	movw	r30, r24
    187e:	74 e0       	ldi	r23, 0x04	; 4
    1880:	ee 0f       	add	r30, r30
    1882:	ff 1f       	adc	r31, r31
    1884:	7a 95       	dec	r23
    1886:	e1 f7       	brne	.-8      	; 0x1880 <main+0x12b2>
    1888:	e8 1b       	sub	r30, r24
    188a:	f9 0b       	sbc	r31, r25
    188c:	ed 51       	subi	r30, 0x1D	; 29
    188e:	f6 4f       	sbci	r31, 0xF6	; 246
    1890:	80 91 48 01 	lds	r24, 0x0148
    1894:	90 91 49 01 	lds	r25, 0x0149
    1898:	96 95       	lsr	r25
    189a:	87 95       	ror	r24
    189c:	96 95       	lsr	r25
    189e:	87 95       	ror	r24
    18a0:	85 83       	std	Z+5, r24	; 0x05
    18a2:	80 91 48 01 	lds	r24, 0x0148
    18a6:	82 95       	swap	r24
    18a8:	88 0f       	add	r24, r24
    18aa:	88 0f       	add	r24, r24
    18ac:	80 7c       	andi	r24, 0xC0	; 192
    18ae:	86 83       	std	Z+6, r24	; 0x06
    18b0:	36 c0       	rjmp	.+108    	; 0x191e <main+0x1350>
    18b2:	80 91 da 09 	lds	r24, 0x09DA
    18b6:	90 91 db 09 	lds	r25, 0x09DB
    18ba:	fc 01       	movw	r30, r24
    18bc:	54 e0       	ldi	r21, 0x04	; 4
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	5a 95       	dec	r21
    18c4:	e1 f7       	brne	.-8      	; 0x18be <main+0x12f0>
    18c6:	e8 1b       	sub	r30, r24
    18c8:	f9 0b       	sbc	r31, r25
    18ca:	ed 51       	subi	r30, 0x1D	; 29
    18cc:	f6 4f       	sbci	r31, 0xF6	; 246
    18ce:	90 91 49 01 	lds	r25, 0x0149
    18d2:	80 85       	ldd	r24, Z+8	; 0x08
    18d4:	89 2b       	or	r24, r25
    18d6:	80 87       	std	Z+8, r24	; 0x08
    18d8:	80 91 48 01 	lds	r24, 0x0148
    18dc:	81 87       	std	Z+9, r24	; 0x09
    18de:	1f c0       	rjmp	.+62     	; 0x191e <main+0x1350>
    18e0:	80 91 da 09 	lds	r24, 0x09DA
    18e4:	90 91 db 09 	lds	r25, 0x09DB
    18e8:	fc 01       	movw	r30, r24
    18ea:	44 e0       	ldi	r20, 0x04	; 4
    18ec:	ee 0f       	add	r30, r30
    18ee:	ff 1f       	adc	r31, r31
    18f0:	4a 95       	dec	r20
    18f2:	e1 f7       	brne	.-8      	; 0x18ec <main+0x131e>
    18f4:	e8 1b       	sub	r30, r24
    18f6:	f9 0b       	sbc	r31, r25
    18f8:	ed 51       	subi	r30, 0x1D	; 29
    18fa:	f6 4f       	sbci	r31, 0xF6	; 246
    18fc:	80 91 48 01 	lds	r24, 0x0148
    1900:	90 91 49 01 	lds	r25, 0x0149
    1904:	36 e0       	ldi	r19, 0x06	; 6
    1906:	96 95       	lsr	r25
    1908:	87 95       	ror	r24
    190a:	3a 95       	dec	r19
    190c:	e1 f7       	brne	.-8      	; 0x1906 <main+0x1338>
    190e:	24 85       	ldd	r18, Z+12	; 0x0c
    1910:	28 2b       	or	r18, r24
    1912:	24 87       	std	Z+12, r18	; 0x0c
    1914:	80 91 48 01 	lds	r24, 0x0148
    1918:	88 0f       	add	r24, r24
    191a:	88 0f       	add	r24, r24
    191c:	85 87       	std	Z+13, r24	; 0x0d
			 					m_SET_Z(data[dataIndex],z,dataSubindex);
    191e:	80 91 de 09 	lds	r24, 0x09DE
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	49 f1       	breq	.+82     	; 0x1978 <main+0x13aa>
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	38 f0       	brcs	.+14     	; 0x1938 <main+0x136a>
    192a:	82 30       	cpi	r24, 0x02	; 2
    192c:	09 f4       	brne	.+2      	; 0x1930 <main+0x1362>
    192e:	44 c0       	rjmp	.+136    	; 0x19b8 <main+0x13ea>
    1930:	83 30       	cpi	r24, 0x03	; 3
    1932:	09 f0       	breq	.+2      	; 0x1936 <main+0x1368>
    1934:	76 c0       	rjmp	.+236    	; 0x1a22 <main+0x1454>
    1936:	5f c0       	rjmp	.+190    	; 0x19f6 <main+0x1428>
    1938:	80 91 da 09 	lds	r24, 0x09DA
    193c:	90 91 db 09 	lds	r25, 0x09DB
    1940:	fc 01       	movw	r30, r24
    1942:	24 e0       	ldi	r18, 0x04	; 4
    1944:	ee 0f       	add	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	2a 95       	dec	r18
    194a:	e1 f7       	brne	.-8      	; 0x1944 <main+0x1376>
    194c:	e8 1b       	sub	r30, r24
    194e:	f9 0b       	sbc	r31, r25
    1950:	ed 51       	subi	r30, 0x1D	; 29
    1952:	f6 4f       	sbci	r31, 0xF6	; 246
    1954:	80 91 4a 01 	lds	r24, 0x014A
    1958:	90 91 4b 01 	lds	r25, 0x014B
    195c:	06 e0       	ldi	r16, 0x06	; 6
    195e:	96 95       	lsr	r25
    1960:	87 95       	ror	r24
    1962:	0a 95       	dec	r16
    1964:	e1 f7       	brne	.-8      	; 0x195e <main+0x1390>
    1966:	22 81       	ldd	r18, Z+2	; 0x02
    1968:	28 2b       	or	r18, r24
    196a:	22 83       	std	Z+2, r18	; 0x02
    196c:	80 91 4a 01 	lds	r24, 0x014A
    1970:	88 0f       	add	r24, r24
    1972:	88 0f       	add	r24, r24
    1974:	83 83       	std	Z+3, r24	; 0x03
    1976:	55 c0       	rjmp	.+170    	; 0x1a22 <main+0x1454>
    1978:	80 91 da 09 	lds	r24, 0x09DA
    197c:	90 91 db 09 	lds	r25, 0x09DB
    1980:	fc 01       	movw	r30, r24
    1982:	14 e0       	ldi	r17, 0x04	; 4
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	1a 95       	dec	r17
    198a:	e1 f7       	brne	.-8      	; 0x1984 <main+0x13b6>
    198c:	e8 1b       	sub	r30, r24
    198e:	f9 0b       	sbc	r31, r25
    1990:	ed 51       	subi	r30, 0x1D	; 29
    1992:	f6 4f       	sbci	r31, 0xF6	; 246
    1994:	80 91 4a 01 	lds	r24, 0x014A
    1998:	90 91 4b 01 	lds	r25, 0x014B
    199c:	b4 e0       	ldi	r27, 0x04	; 4
    199e:	96 95       	lsr	r25
    19a0:	87 95       	ror	r24
    19a2:	ba 95       	dec	r27
    19a4:	e1 f7       	brne	.-8      	; 0x199e <main+0x13d0>
    19a6:	26 81       	ldd	r18, Z+6	; 0x06
    19a8:	28 2b       	or	r18, r24
    19aa:	26 83       	std	Z+6, r18	; 0x06
    19ac:	80 91 4a 01 	lds	r24, 0x014A
    19b0:	82 95       	swap	r24
    19b2:	80 7f       	andi	r24, 0xF0	; 240
    19b4:	87 83       	std	Z+7, r24	; 0x07
    19b6:	35 c0       	rjmp	.+106    	; 0x1a22 <main+0x1454>
    19b8:	80 91 da 09 	lds	r24, 0x09DA
    19bc:	90 91 db 09 	lds	r25, 0x09DB
    19c0:	fc 01       	movw	r30, r24
    19c2:	a4 e0       	ldi	r26, 0x04	; 4
    19c4:	ee 0f       	add	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	aa 95       	dec	r26
    19ca:	e1 f7       	brne	.-8      	; 0x19c4 <main+0x13f6>
    19cc:	e8 1b       	sub	r30, r24
    19ce:	f9 0b       	sbc	r31, r25
    19d0:	ed 51       	subi	r30, 0x1D	; 29
    19d2:	f6 4f       	sbci	r31, 0xF6	; 246
    19d4:	80 91 4a 01 	lds	r24, 0x014A
    19d8:	90 91 4b 01 	lds	r25, 0x014B
    19dc:	96 95       	lsr	r25
    19de:	87 95       	ror	r24
    19e0:	96 95       	lsr	r25
    19e2:	87 95       	ror	r24
    19e4:	82 87       	std	Z+10, r24	; 0x0a
    19e6:	80 91 4a 01 	lds	r24, 0x014A
    19ea:	82 95       	swap	r24
    19ec:	88 0f       	add	r24, r24
    19ee:	88 0f       	add	r24, r24
    19f0:	80 7c       	andi	r24, 0xC0	; 192
    19f2:	83 87       	std	Z+11, r24	; 0x0b
    19f4:	16 c0       	rjmp	.+44     	; 0x1a22 <main+0x1454>
    19f6:	80 91 da 09 	lds	r24, 0x09DA
    19fa:	90 91 db 09 	lds	r25, 0x09DB
    19fe:	fc 01       	movw	r30, r24
    1a00:	64 e0       	ldi	r22, 0x04	; 4
    1a02:	ee 0f       	add	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	6a 95       	dec	r22
    1a08:	e1 f7       	brne	.-8      	; 0x1a02 <main+0x1434>
    1a0a:	e8 1b       	sub	r30, r24
    1a0c:	f9 0b       	sbc	r31, r25
    1a0e:	ed 51       	subi	r30, 0x1D	; 29
    1a10:	f6 4f       	sbci	r31, 0xF6	; 246
    1a12:	90 91 4b 01 	lds	r25, 0x014B
    1a16:	85 85       	ldd	r24, Z+13	; 0x0d
    1a18:	89 2b       	or	r24, r25
    1a1a:	85 87       	std	Z+13, r24	; 0x0d
    1a1c:	80 91 4a 01 	lds	r24, 0x014A
    1a20:	86 87       	std	Z+14, r24	; 0x0e

			 					dataSubindex++;
    1a22:	80 91 de 09 	lds	r24, 0x09DE
    1a26:	8f 5f       	subi	r24, 0xFF	; 255
    1a28:	80 93 de 09 	sts	0x09DE, r24
			 					if (dataSubindex>=4)
    1a2c:	84 30       	cpi	r24, 0x04	; 4
    1a2e:	10 f0       	brcs	.+4      	; 0x1a34 <main+0x1466>
			 					dataSubindex=0;
    1a30:	10 92 de 09 	sts	0x09DE, r1
					}*/

					
					if ((batch_counter>0) && (batch_counter<750)) // Go from 0 up to batch_counter
					{						
						for (int i=0;(i<(batch_counter-1));i++)
    1a34:	08 94       	sec
    1a36:	81 1c       	adc	r8, r1
    1a38:	91 1c       	adc	r9, r1
    1a3a:	2f 96       	adiw	r28, 0x0f	; 15
    1a3c:	20 91 1f 01 	lds	r18, 0x011F
    1a40:	30 91 20 01 	lds	r19, 0x0120
    1a44:	c9 01       	movw	r24, r18
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	88 16       	cp	r8, r24
    1a4a:	99 06       	cpc	r9, r25
    1a4c:	08 f4       	brcc	.+2      	; 0x1a50 <main+0x1482>
    1a4e:	97 cc       	rjmp	.-1746   	; 0x137e <main+0xdb0>
			 					dataSubindex=0;
							}
						}

						
						if (batch_counter>0){
    1a50:	21 15       	cp	r18, r1
    1a52:	31 05       	cpc	r19, r1
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <main+0x148a>
    1a56:	bd c3       	rjmp	.+1914   	; 0x21d2 <main+0x1c04>
						//copy end item into start
						data[0].byte1=data[batch_counter].byte1;
    1a58:	f9 01       	movw	r30, r18
    1a5a:	54 e0       	ldi	r21, 0x04	; 4
    1a5c:	ee 0f       	add	r30, r30
    1a5e:	ff 1f       	adc	r31, r31
    1a60:	5a 95       	dec	r21
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <main+0x148e>
    1a64:	e2 1b       	sub	r30, r18
    1a66:	f3 0b       	sbc	r31, r19
    1a68:	85 c3       	rjmp	.+1802   	; 0x2174 <main+0x1ba6>
						}


					}else{

						int current=dataIndex+1;
    1a6a:	80 90 da 09 	lds	r8, 0x09DA
    1a6e:	90 90 db 09 	lds	r9, 0x09DB
    1a72:	e4 01       	movw	r28, r8
    1a74:	21 96       	adiw	r28, 0x01	; 1
						int end =dataIndex;
						if (current>=750)
    1a76:	22 e0       	ldi	r18, 0x02	; 2
    1a78:	ce 3e       	cpi	r28, 0xEE	; 238
    1a7a:	d2 07       	cpc	r29, r18
    1a7c:	0c f4       	brge	.+2      	; 0x1a80 <main+0x14b2>
    1a7e:	6e c3       	rjmp	.+1756   	; 0x215c <main+0x1b8e>
    1a80:	c0 e0       	ldi	r28, 0x00	; 0
    1a82:	d0 e0       	ldi	r29, 0x00	; 0
    1a84:	6b c3       	rjmp	.+1750   	; 0x215c <main+0x1b8e>
							current=0;
						while(current!=end)
						{
							m_GET_X(x,data[current].byte1,data[current].byte2,0);
    1a86:	8f 01       	movw	r16, r30
    1a88:	0c 1b       	sub	r16, r28
    1a8a:	1d 0b       	sbc	r17, r29
    1a8c:	0d 51       	subi	r16, 0x1D	; 29
    1a8e:	16 4f       	sbci	r17, 0xF6	; 246
    1a90:	f8 01       	movw	r30, r16
    1a92:	61 81       	ldd	r22, Z+1	; 0x01
    1a94:	86 2f       	mov	r24, r22
    1a96:	82 95       	swap	r24
    1a98:	86 95       	lsr	r24
    1a9a:	86 95       	lsr	r24
    1a9c:	83 70       	andi	r24, 0x03	; 3
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	20 81       	ld	r18, Z
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	22 0f       	add	r18, r18
    1aa6:	33 1f       	adc	r19, r19
    1aa8:	22 0f       	add	r18, r18
    1aaa:	33 1f       	adc	r19, r19
    1aac:	82 2b       	or	r24, r18
    1aae:	93 2b       	or	r25, r19
    1ab0:	90 93 47 01 	sts	0x0147, r25
    1ab4:	80 93 46 01 	sts	0x0146, r24
							m_GET_Y(y,data[current].byte2,data[current].byte3,0);
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	6f 73       	andi	r22, 0x3F	; 63
    1abc:	70 70       	andi	r23, 0x00	; 0
    1abe:	b4 e0       	ldi	r27, 0x04	; 4
    1ac0:	66 0f       	add	r22, r22
    1ac2:	77 1f       	adc	r23, r23
    1ac4:	ba 95       	dec	r27
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <main+0x14f2>
    1ac8:	42 81       	ldd	r20, Z+2	; 0x02
    1aca:	24 2f       	mov	r18, r20
    1acc:	22 95       	swap	r18
    1ace:	2f 70       	andi	r18, 0x0F	; 15
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	62 2b       	or	r22, r18
    1ad4:	73 2b       	or	r23, r19
    1ad6:	70 93 49 01 	sts	0x0149, r23
    1ada:	60 93 48 01 	sts	0x0148, r22
							m_GET_Z(z,data[current].byte3,data[current].byte4,0);							
    1ade:	50 e0       	ldi	r21, 0x00	; 0
    1ae0:	4f 70       	andi	r20, 0x0F	; 15
    1ae2:	50 70       	andi	r21, 0x00	; 0
    1ae4:	a6 e0       	ldi	r26, 0x06	; 6
    1ae6:	44 0f       	add	r20, r20
    1ae8:	55 1f       	adc	r21, r21
    1aea:	aa 95       	dec	r26
    1aec:	e1 f7       	brne	.-8      	; 0x1ae6 <main+0x1518>
    1aee:	23 81       	ldd	r18, Z+3	; 0x03
    1af0:	26 95       	lsr	r18
    1af2:	26 95       	lsr	r18
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	42 2b       	or	r20, r18
    1af8:	53 2b       	or	r21, r19
    1afa:	50 93 4b 01 	sts	0x014B, r21
    1afe:	40 93 4a 01 	sts	0x014A, r20
							//_send_uncompressed_pdu(x, y, z);
							
							_send_pdu(x,y,z);
    1b02:	0e 94 42 02 	call	0x484	; 0x484 <_send_pdu>

							m_GET_X(x,data[current].byte4,data[current].byte5,1);
    1b06:	f8 01       	movw	r30, r16
    1b08:	83 81       	ldd	r24, Z+3	; 0x03
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	83 70       	andi	r24, 0x03	; 3
    1b0e:	90 70       	andi	r25, 0x00	; 0
    1b10:	98 2f       	mov	r25, r24
    1b12:	88 27       	eor	r24, r24
    1b14:	24 81       	ldd	r18, Z+4	; 0x04
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	82 2b       	or	r24, r18
    1b1a:	93 2b       	or	r25, r19
    1b1c:	90 93 47 01 	sts	0x0147, r25
    1b20:	80 93 46 01 	sts	0x0146, r24
							m_GET_Y(y,data[current].byte6,data[current].byte7,1);
    1b24:	46 81       	ldd	r20, Z+6	; 0x06
    1b26:	64 2f       	mov	r22, r20
    1b28:	62 95       	swap	r22
    1b2a:	66 95       	lsr	r22
    1b2c:	66 95       	lsr	r22
    1b2e:	63 70       	andi	r22, 0x03	; 3
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	25 81       	ldd	r18, Z+5	; 0x05
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	22 0f       	add	r18, r18
    1b38:	33 1f       	adc	r19, r19
    1b3a:	22 0f       	add	r18, r18
    1b3c:	33 1f       	adc	r19, r19
    1b3e:	62 2b       	or	r22, r18
    1b40:	73 2b       	or	r23, r19
    1b42:	70 93 49 01 	sts	0x0149, r23
    1b46:	60 93 48 01 	sts	0x0148, r22
							m_GET_Z(z,data[current].byte7,data[current].byte8,1);							
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	4f 73       	andi	r20, 0x3F	; 63
    1b4e:	50 70       	andi	r21, 0x00	; 0
    1b50:	24 e0       	ldi	r18, 0x04	; 4
    1b52:	44 0f       	add	r20, r20
    1b54:	55 1f       	adc	r21, r21
    1b56:	2a 95       	dec	r18
    1b58:	e1 f7       	brne	.-8      	; 0x1b52 <main+0x1584>
    1b5a:	27 81       	ldd	r18, Z+7	; 0x07
    1b5c:	22 95       	swap	r18
    1b5e:	2f 70       	andi	r18, 0x0F	; 15
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	42 2b       	or	r20, r18
    1b64:	53 2b       	or	r21, r19
    1b66:	50 93 4b 01 	sts	0x014B, r21
    1b6a:	40 93 4a 01 	sts	0x014A, r20
							//_send_uncompressed_pdu(x, y, z);
							
							_send_pdu(x,y,z);
    1b6e:	0e 94 42 02 	call	0x484	; 0x484 <_send_pdu>

							m_GET_X(x,data[current].byte8,data[current].byte9,2);
    1b72:	f8 01       	movw	r30, r16
    1b74:	60 85       	ldd	r22, Z+8	; 0x08
    1b76:	86 2f       	mov	r24, r22
    1b78:	86 95       	lsr	r24
    1b7a:	86 95       	lsr	r24
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	27 81       	ldd	r18, Z+7	; 0x07
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	2f 70       	andi	r18, 0x0F	; 15
    1b84:	30 70       	andi	r19, 0x00	; 0
    1b86:	b6 e0       	ldi	r27, 0x06	; 6
    1b88:	22 0f       	add	r18, r18
    1b8a:	33 1f       	adc	r19, r19
    1b8c:	ba 95       	dec	r27
    1b8e:	e1 f7       	brne	.-8      	; 0x1b88 <main+0x15ba>
    1b90:	82 2b       	or	r24, r18
    1b92:	93 2b       	or	r25, r19
    1b94:	90 93 47 01 	sts	0x0147, r25
    1b98:	80 93 46 01 	sts	0x0146, r24
							m_GET_Y(y,data[current].byte9,data[current].byte10,2);
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	63 70       	andi	r22, 0x03	; 3
    1ba0:	70 70       	andi	r23, 0x00	; 0
    1ba2:	76 2f       	mov	r23, r22
    1ba4:	66 27       	eor	r22, r22
    1ba6:	21 85       	ldd	r18, Z+9	; 0x09
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	62 2b       	or	r22, r18
    1bac:	73 2b       	or	r23, r19
    1bae:	70 93 49 01 	sts	0x0149, r23
    1bb2:	60 93 48 01 	sts	0x0148, r22
							m_GET_Z(z,data[current].byte11,data[current].byte12,2);
    1bb6:	43 85       	ldd	r20, Z+11	; 0x0b
    1bb8:	42 95       	swap	r20
    1bba:	46 95       	lsr	r20
    1bbc:	46 95       	lsr	r20
    1bbe:	43 70       	andi	r20, 0x03	; 3
    1bc0:	50 e0       	ldi	r21, 0x00	; 0
    1bc2:	22 85       	ldd	r18, Z+10	; 0x0a
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	22 0f       	add	r18, r18
    1bc8:	33 1f       	adc	r19, r19
    1bca:	22 0f       	add	r18, r18
    1bcc:	33 1f       	adc	r19, r19
    1bce:	42 2b       	or	r20, r18
    1bd0:	53 2b       	or	r21, r19
    1bd2:	50 93 4b 01 	sts	0x014B, r21
    1bd6:	40 93 4a 01 	sts	0x014A, r20
							//_send_uncompressed_pdu(x, y, z);
							
							_send_pdu(x,y,z);
    1bda:	0e 94 42 02 	call	0x484	; 0x484 <_send_pdu>

							m_GET_X(x,data[current].byte12,data[current].byte13,3);
    1bde:	f8 01       	movw	r30, r16
    1be0:	64 85       	ldd	r22, Z+12	; 0x0c
    1be2:	86 2f       	mov	r24, r22
    1be4:	82 95       	swap	r24
    1be6:	8f 70       	andi	r24, 0x0F	; 15
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	23 85       	ldd	r18, Z+11	; 0x0b
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	2f 73       	andi	r18, 0x3F	; 63
    1bf0:	30 70       	andi	r19, 0x00	; 0
    1bf2:	44 e0       	ldi	r20, 0x04	; 4
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	4a 95       	dec	r20
    1bfa:	e1 f7       	brne	.-8      	; 0x1bf4 <main+0x1626>
    1bfc:	82 2b       	or	r24, r18
    1bfe:	93 2b       	or	r25, r19
    1c00:	90 93 47 01 	sts	0x0147, r25
    1c04:	80 93 46 01 	sts	0x0146, r24
							m_GET_Y(y,data[current].byte13,data[current].byte14,3);
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	6f 70       	andi	r22, 0x0F	; 15
    1c0c:	70 70       	andi	r23, 0x00	; 0
    1c0e:	26 e0       	ldi	r18, 0x06	; 6
    1c10:	66 0f       	add	r22, r22
    1c12:	77 1f       	adc	r23, r23
    1c14:	2a 95       	dec	r18
    1c16:	e1 f7       	brne	.-8      	; 0x1c10 <main+0x1642>
    1c18:	45 85       	ldd	r20, Z+13	; 0x0d
    1c1a:	24 2f       	mov	r18, r20
    1c1c:	26 95       	lsr	r18
    1c1e:	26 95       	lsr	r18
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	62 2b       	or	r22, r18
    1c24:	73 2b       	or	r23, r19
    1c26:	70 93 49 01 	sts	0x0149, r23
    1c2a:	60 93 48 01 	sts	0x0148, r22
							m_GET_Z(z,data[current].byte14,data[current].byte15,3);							
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	43 70       	andi	r20, 0x03	; 3
    1c32:	50 70       	andi	r21, 0x00	; 0
    1c34:	54 2f       	mov	r21, r20
    1c36:	44 27       	eor	r20, r20
    1c38:	26 85       	ldd	r18, Z+14	; 0x0e
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	42 2b       	or	r20, r18
    1c3e:	53 2b       	or	r21, r19
    1c40:	50 93 4b 01 	sts	0x014B, r21
    1c44:	40 93 4a 01 	sts	0x014A, r20
							//_send_uncompressed_pdu(x,y, z);
							
							_send_pdu(x,y,z);
    1c48:	0e 94 42 02 	call	0x484	; 0x484 <_send_pdu>

							current++;
    1c4c:	21 96       	adiw	r28, 0x01	; 1
							if (current==750)
    1c4e:	f2 e0       	ldi	r31, 0x02	; 2
    1c50:	ce 3e       	cpi	r28, 0xEE	; 238
    1c52:	df 07       	cpc	r29, r31
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <main+0x168c>
    1c56:	c0 e0       	ldi	r28, 0x00	; 0
    1c58:	d0 e0       	ldi	r29, 0x00	; 0
								current=0;

							_receive_data();
    1c5a:	0e 94 19 14 	call	0x2832	; 0x2832 <_receive_data>


							if (sampleFlag)
    1c5e:	80 91 1e 01 	lds	r24, 0x011E
    1c62:	88 23       	and	r24, r24
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <main+0x169a>
    1c66:	7a c2       	rjmp	.+1268   	; 0x215c <main+0x1b8e>
							{
								sampleFlag=0;
    1c68:	10 92 1e 01 	sts	0x011E, r1

								x=_atmega_a2dConvert10bit(ADC0);
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    1c72:	90 93 47 01 	sts	0x0147, r25
    1c76:	80 93 46 01 	sts	0x0146, r24
		
								y=_atmega_a2dConvert10bit(ADC1);
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    1c80:	90 93 49 01 	sts	0x0149, r25
    1c84:	80 93 48 01 	sts	0x0148, r24

								z=_atmega_a2dConvert10bit(ADC2);
    1c88:	82 e0       	ldi	r24, 0x02	; 2
    1c8a:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    1c8e:	90 93 4b 01 	sts	0x014B, r25
    1c92:	80 93 4a 01 	sts	0x014A, r24


								vmag+=Filter(x,0)+Filter(y,1)+Filter(z,2);
    1c96:	e0 90 e0 35 	lds	r14, 0x35E0
    1c9a:	f0 90 e1 35 	lds	r15, 0x35E1
    1c9e:	00 91 e2 35 	lds	r16, 0x35E2
    1ca2:	10 91 e3 35 	lds	r17, 0x35E3
    1ca6:	80 91 46 01 	lds	r24, 0x0146
    1caa:	90 91 47 01 	lds	r25, 0x0147
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
    1cb6:	5c 01       	movw	r10, r24
    1cb8:	80 91 48 01 	lds	r24, 0x0148
    1cbc:	90 91 49 01 	lds	r25, 0x0149
    1cc0:	61 e0       	ldi	r22, 0x01	; 1
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
    1cc8:	6c 01       	movw	r12, r24
    1cca:	80 91 4a 01 	lds	r24, 0x014A
    1cce:	90 91 4b 01 	lds	r25, 0x014B
    1cd2:	62 e0       	ldi	r22, 0x02	; 2
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
    1cda:	ca 0c       	add	r12, r10
    1cdc:	db 1c       	adc	r13, r11
    1cde:	c8 0e       	add	r12, r24
    1ce0:	d9 1e       	adc	r13, r25
    1ce2:	b6 01       	movw	r22, r12
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	6e 0d       	add	r22, r14
    1cea:	7f 1d       	adc	r23, r15
    1cec:	80 1f       	adc	r24, r16
    1cee:	91 1f       	adc	r25, r17
    1cf0:	60 93 e0 35 	sts	0x35E0, r22
    1cf4:	70 93 e1 35 	sts	0x35E1, r23
    1cf8:	80 93 e2 35 	sts	0x35E2, r24
    1cfc:	90 93 e3 35 	sts	0x35E3, r25
			

								if (_wPC>40){	//Skip the first samples						
    1d00:	20 91 53 01 	lds	r18, 0x0153
    1d04:	30 91 54 01 	lds	r19, 0x0154
    1d08:	40 91 55 01 	lds	r20, 0x0155
    1d0c:	50 91 56 01 	lds	r21, 0x0156
    1d10:	29 32       	cpi	r18, 0x29	; 41
    1d12:	31 05       	cpc	r19, r1
    1d14:	41 05       	cpc	r20, r1
    1d16:	51 05       	cpc	r21, r1
    1d18:	08 f4       	brcc	.+2      	; 0x1d1c <main+0x174e>
    1d1a:	85 c0       	rjmp	.+266    	; 0x1e26 <main+0x1858>
									if (summary_count==0)
    1d1c:	20 91 00 01 	lds	r18, 0x0100
    1d20:	30 91 01 01 	lds	r19, 0x0101
    1d24:	21 15       	cp	r18, r1
    1d26:	31 05       	cpc	r19, r1
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <main+0x175e>
    1d2a:	76 c0       	rjmp	.+236    	; 0x1e18 <main+0x184a>
									{
										vmag=vmag/24;
    1d2c:	28 e1       	ldi	r18, 0x18	; 24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__udivmodsi4>
    1d38:	c9 01       	movw	r24, r18
    1d3a:	da 01       	movw	r26, r20
    1d3c:	e0 91 18 01 	lds	r30, 0x0118
    1d40:	f0 91 19 01 	lds	r31, 0x0119
										if (vmag>65535)
    1d44:	80 30       	cpi	r24, 0x00	; 0
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	92 07       	cpc	r25, r18
    1d4a:	21 e0       	ldi	r18, 0x01	; 1
    1d4c:	a2 07       	cpc	r26, r18
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	b2 07       	cpc	r27, r18
    1d52:	38 f0       	brcs	.+14     	; 0x1d62 <main+0x1794>
											acount[ci]=65535;
    1d54:	ee 0f       	add	r30, r30
    1d56:	ff 1f       	adc	r31, r31
    1d58:	ed 59       	subi	r30, 0x9D	; 157
    1d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5c:	71 82       	std	Z+1, r7	; 0x01
    1d5e:	60 82       	st	Z, r6
    1d60:	06 c0       	rjmp	.+12     	; 0x1d6e <main+0x17a0>
										else
											acount[ci]=(unsigned short) vmag;
    1d62:	ee 0f       	add	r30, r30
    1d64:	ff 1f       	adc	r31, r31
    1d66:	ed 59       	subi	r30, 0x9D	; 157
    1d68:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
			 							vmag=0;
    1d6e:	10 92 e0 35 	sts	0x35E0, r1
    1d72:	10 92 e1 35 	sts	0x35E1, r1
    1d76:	10 92 e2 35 	sts	0x35E2, r1
    1d7a:	10 92 e3 35 	sts	0x35E3, r1
										++ci;
    1d7e:	80 91 18 01 	lds	r24, 0x0118
    1d82:	90 91 19 01 	lds	r25, 0x0119
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	90 93 19 01 	sts	0x0119, r25
    1d8c:	80 93 18 01 	sts	0x0118, r24
										if (ci==AC_BUFFER_SIZE)
    1d90:	80 5c       	subi	r24, 0xC0	; 192
    1d92:	93 40       	sbci	r25, 0x03	; 3
    1d94:	21 f4       	brne	.+8      	; 0x1d9e <main+0x17d0>
											ci=0;
    1d96:	10 92 19 01 	sts	0x0119, r1
    1d9a:	10 92 18 01 	sts	0x0118, r1
										cseq++;
    1d9e:	80 91 10 01 	lds	r24, 0x0110
    1da2:	90 91 11 01 	lds	r25, 0x0111
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	90 93 11 01 	sts	0x0111, r25
    1dac:	80 93 10 01 	sts	0x0110, r24
	
										if (ci==si)
    1db0:	20 91 18 01 	lds	r18, 0x0118
    1db4:	30 91 19 01 	lds	r19, 0x0119
    1db8:	80 91 1a 01 	lds	r24, 0x011A
    1dbc:	90 91 1b 01 	lds	r25, 0x011B
    1dc0:	28 17       	cp	r18, r24
    1dc2:	39 07       	cpc	r19, r25
    1dc4:	b1 f4       	brne	.+44     	; 0x1df2 <main+0x1824>
										{
											si++;
    1dc6:	c9 01       	movw	r24, r18
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	90 93 1b 01 	sts	0x011B, r25
    1dce:	80 93 1a 01 	sts	0x011A, r24
											if (si==AC_BUFFER_SIZE)
    1dd2:	80 5c       	subi	r24, 0xC0	; 192
    1dd4:	93 40       	sbci	r25, 0x03	; 3
    1dd6:	21 f4       	brne	.+8      	; 0x1de0 <main+0x1812>
												si=0;
    1dd8:	10 92 1b 01 	sts	0x011B, r1
    1ddc:	10 92 1a 01 	sts	0x011A, r1
											sseq++;
    1de0:	80 91 12 01 	lds	r24, 0x0112
    1de4:	90 91 13 01 	lds	r25, 0x0113
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	90 93 13 01 	sts	0x0113, r25
    1dee:	80 93 12 01 	sts	0x0112, r24
										}
										acount[ci]=0;
    1df2:	e0 91 18 01 	lds	r30, 0x0118
    1df6:	f0 91 19 01 	lds	r31, 0x0119
    1dfa:	ee 0f       	add	r30, r30
    1dfc:	ff 1f       	adc	r31, r31
    1dfe:	ed 59       	subi	r30, 0x9D	; 157
    1e00:	fe 4f       	sbci	r31, 0xFE	; 254
    1e02:	11 82       	std	Z+1, r1	; 0x01
    1e04:	10 82       	st	Z, r1
										summary_count=AC_NUMS;
    1e06:	80 91 0c 01 	lds	r24, 0x010C
    1e0a:	90 91 0d 01 	lds	r25, 0x010D
    1e0e:	90 93 01 01 	sts	0x0101, r25
    1e12:	80 93 00 01 	sts	0x0100, r24
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <main+0x1872>
									}else
										summary_count--;
    1e18:	21 50       	subi	r18, 0x01	; 1
    1e1a:	30 40       	sbci	r19, 0x00	; 0
    1e1c:	30 93 01 01 	sts	0x0101, r19
    1e20:	20 93 00 01 	sts	0x0100, r18
    1e24:	0d c0       	rjmp	.+26     	; 0x1e40 <main+0x1872>
								}
								else if (_wPC==40)
    1e26:	28 32       	cpi	r18, 0x28	; 40
    1e28:	31 05       	cpc	r19, r1
    1e2a:	41 05       	cpc	r20, r1
    1e2c:	51 05       	cpc	r21, r1
    1e2e:	41 f4       	brne	.+16     	; 0x1e40 <main+0x1872>
									vmag=0;
    1e30:	10 92 e0 35 	sts	0x35E0, r1
    1e34:	10 92 e1 35 	sts	0x35E1, r1
    1e38:	10 92 e2 35 	sts	0x35E2, r1
    1e3c:	10 92 e3 35 	sts	0x35E3, r1

			

		
			 					m_SET_X(data[dataIndex],x,dataSubindex);
    1e40:	80 91 de 09 	lds	r24, 0x09DE
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	39 f1       	breq	.+78     	; 0x1e96 <main+0x18c8>
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	30 f0       	brcs	.+12     	; 0x1e58 <main+0x188a>
    1e4c:	82 30       	cpi	r24, 0x02	; 2
    1e4e:	d1 f1       	breq	.+116    	; 0x1ec4 <main+0x18f6>
    1e50:	83 30       	cpi	r24, 0x03	; 3
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <main+0x1888>
    1e54:	76 c0       	rjmp	.+236    	; 0x1f42 <main+0x1974>
    1e56:	56 c0       	rjmp	.+172    	; 0x1f04 <main+0x1936>
    1e58:	80 91 da 09 	lds	r24, 0x09DA
    1e5c:	90 91 db 09 	lds	r25, 0x09DB
    1e60:	fc 01       	movw	r30, r24
    1e62:	74 e0       	ldi	r23, 0x04	; 4
    1e64:	ee 0f       	add	r30, r30
    1e66:	ff 1f       	adc	r31, r31
    1e68:	7a 95       	dec	r23
    1e6a:	e1 f7       	brne	.-8      	; 0x1e64 <main+0x1896>
    1e6c:	e8 1b       	sub	r30, r24
    1e6e:	f9 0b       	sbc	r31, r25
    1e70:	ed 51       	subi	r30, 0x1D	; 29
    1e72:	f6 4f       	sbci	r31, 0xF6	; 246
    1e74:	80 91 46 01 	lds	r24, 0x0146
    1e78:	90 91 47 01 	lds	r25, 0x0147
    1e7c:	96 95       	lsr	r25
    1e7e:	87 95       	ror	r24
    1e80:	96 95       	lsr	r25
    1e82:	87 95       	ror	r24
    1e84:	80 83       	st	Z, r24
    1e86:	80 91 46 01 	lds	r24, 0x0146
    1e8a:	82 95       	swap	r24
    1e8c:	88 0f       	add	r24, r24
    1e8e:	88 0f       	add	r24, r24
    1e90:	80 7c       	andi	r24, 0xC0	; 192
    1e92:	81 83       	std	Z+1, r24	; 0x01
    1e94:	56 c0       	rjmp	.+172    	; 0x1f42 <main+0x1974>
    1e96:	80 91 da 09 	lds	r24, 0x09DA
    1e9a:	90 91 db 09 	lds	r25, 0x09DB
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	54 e0       	ldi	r21, 0x04	; 4
    1ea2:	ee 0f       	add	r30, r30
    1ea4:	ff 1f       	adc	r31, r31
    1ea6:	5a 95       	dec	r21
    1ea8:	e1 f7       	brne	.-8      	; 0x1ea2 <main+0x18d4>
    1eaa:	e8 1b       	sub	r30, r24
    1eac:	f9 0b       	sbc	r31, r25
    1eae:	ed 51       	subi	r30, 0x1D	; 29
    1eb0:	f6 4f       	sbci	r31, 0xF6	; 246
    1eb2:	90 91 47 01 	lds	r25, 0x0147
    1eb6:	83 81       	ldd	r24, Z+3	; 0x03
    1eb8:	89 2b       	or	r24, r25
    1eba:	83 83       	std	Z+3, r24	; 0x03
    1ebc:	80 91 46 01 	lds	r24, 0x0146
    1ec0:	84 83       	std	Z+4, r24	; 0x04
    1ec2:	3f c0       	rjmp	.+126    	; 0x1f42 <main+0x1974>
    1ec4:	80 91 da 09 	lds	r24, 0x09DA
    1ec8:	90 91 db 09 	lds	r25, 0x09DB
    1ecc:	fc 01       	movw	r30, r24
    1ece:	44 e0       	ldi	r20, 0x04	; 4
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	4a 95       	dec	r20
    1ed6:	e1 f7       	brne	.-8      	; 0x1ed0 <main+0x1902>
    1ed8:	e8 1b       	sub	r30, r24
    1eda:	f9 0b       	sbc	r31, r25
    1edc:	ed 51       	subi	r30, 0x1D	; 29
    1ede:	f6 4f       	sbci	r31, 0xF6	; 246
    1ee0:	80 91 46 01 	lds	r24, 0x0146
    1ee4:	90 91 47 01 	lds	r25, 0x0147
    1ee8:	36 e0       	ldi	r19, 0x06	; 6
    1eea:	96 95       	lsr	r25
    1eec:	87 95       	ror	r24
    1eee:	3a 95       	dec	r19
    1ef0:	e1 f7       	brne	.-8      	; 0x1eea <main+0x191c>
    1ef2:	27 81       	ldd	r18, Z+7	; 0x07
    1ef4:	28 2b       	or	r18, r24
    1ef6:	27 83       	std	Z+7, r18	; 0x07
    1ef8:	80 91 46 01 	lds	r24, 0x0146
    1efc:	88 0f       	add	r24, r24
    1efe:	88 0f       	add	r24, r24
    1f00:	80 87       	std	Z+8, r24	; 0x08
    1f02:	1f c0       	rjmp	.+62     	; 0x1f42 <main+0x1974>
    1f04:	80 91 da 09 	lds	r24, 0x09DA
    1f08:	90 91 db 09 	lds	r25, 0x09DB
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	24 e0       	ldi	r18, 0x04	; 4
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	2a 95       	dec	r18
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <main+0x1942>
    1f18:	e8 1b       	sub	r30, r24
    1f1a:	f9 0b       	sbc	r31, r25
    1f1c:	ed 51       	subi	r30, 0x1D	; 29
    1f1e:	f6 4f       	sbci	r31, 0xF6	; 246
    1f20:	80 91 46 01 	lds	r24, 0x0146
    1f24:	90 91 47 01 	lds	r25, 0x0147
    1f28:	04 e0       	ldi	r16, 0x04	; 4
    1f2a:	96 95       	lsr	r25
    1f2c:	87 95       	ror	r24
    1f2e:	0a 95       	dec	r16
    1f30:	e1 f7       	brne	.-8      	; 0x1f2a <main+0x195c>
    1f32:	23 85       	ldd	r18, Z+11	; 0x0b
    1f34:	28 2b       	or	r18, r24
    1f36:	23 87       	std	Z+11, r18	; 0x0b
    1f38:	80 91 46 01 	lds	r24, 0x0146
    1f3c:	82 95       	swap	r24
    1f3e:	80 7f       	andi	r24, 0xF0	; 240
    1f40:	84 87       	std	Z+12, r24	; 0x0c
			 					m_SET_Y(data[dataIndex],y,dataSubindex);
    1f42:	80 91 de 09 	lds	r24, 0x09DE
    1f46:	81 30       	cpi	r24, 0x01	; 1
    1f48:	49 f1       	breq	.+82     	; 0x1f9c <main+0x19ce>
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	38 f0       	brcs	.+14     	; 0x1f5c <main+0x198e>
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <main+0x1986>
    1f52:	43 c0       	rjmp	.+134    	; 0x1fda <main+0x1a0c>
    1f54:	83 30       	cpi	r24, 0x03	; 3
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <main+0x198c>
    1f58:	76 c0       	rjmp	.+236    	; 0x2046 <main+0x1a78>
    1f5a:	56 c0       	rjmp	.+172    	; 0x2008 <main+0x1a3a>
    1f5c:	80 91 da 09 	lds	r24, 0x09DA
    1f60:	90 91 db 09 	lds	r25, 0x09DB
    1f64:	fc 01       	movw	r30, r24
    1f66:	14 e0       	ldi	r17, 0x04	; 4
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	1a 95       	dec	r17
    1f6e:	e1 f7       	brne	.-8      	; 0x1f68 <main+0x199a>
    1f70:	e8 1b       	sub	r30, r24
    1f72:	f9 0b       	sbc	r31, r25
    1f74:	ed 51       	subi	r30, 0x1D	; 29
    1f76:	f6 4f       	sbci	r31, 0xF6	; 246
    1f78:	80 91 48 01 	lds	r24, 0x0148
    1f7c:	90 91 49 01 	lds	r25, 0x0149
    1f80:	b4 e0       	ldi	r27, 0x04	; 4
    1f82:	96 95       	lsr	r25
    1f84:	87 95       	ror	r24
    1f86:	ba 95       	dec	r27
    1f88:	e1 f7       	brne	.-8      	; 0x1f82 <main+0x19b4>
    1f8a:	21 81       	ldd	r18, Z+1	; 0x01
    1f8c:	28 2b       	or	r18, r24
    1f8e:	21 83       	std	Z+1, r18	; 0x01
    1f90:	80 91 48 01 	lds	r24, 0x0148
    1f94:	82 95       	swap	r24
    1f96:	80 7f       	andi	r24, 0xF0	; 240
    1f98:	82 83       	std	Z+2, r24	; 0x02
    1f9a:	55 c0       	rjmp	.+170    	; 0x2046 <main+0x1a78>
    1f9c:	80 91 da 09 	lds	r24, 0x09DA
    1fa0:	90 91 db 09 	lds	r25, 0x09DB
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	a4 e0       	ldi	r26, 0x04	; 4
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	aa 95       	dec	r26
    1fae:	e1 f7       	brne	.-8      	; 0x1fa8 <main+0x19da>
    1fb0:	e8 1b       	sub	r30, r24
    1fb2:	f9 0b       	sbc	r31, r25
    1fb4:	ed 51       	subi	r30, 0x1D	; 29
    1fb6:	f6 4f       	sbci	r31, 0xF6	; 246
    1fb8:	80 91 48 01 	lds	r24, 0x0148
    1fbc:	90 91 49 01 	lds	r25, 0x0149
    1fc0:	96 95       	lsr	r25
    1fc2:	87 95       	ror	r24
    1fc4:	96 95       	lsr	r25
    1fc6:	87 95       	ror	r24
    1fc8:	85 83       	std	Z+5, r24	; 0x05
    1fca:	80 91 48 01 	lds	r24, 0x0148
    1fce:	82 95       	swap	r24
    1fd0:	88 0f       	add	r24, r24
    1fd2:	88 0f       	add	r24, r24
    1fd4:	80 7c       	andi	r24, 0xC0	; 192
    1fd6:	86 83       	std	Z+6, r24	; 0x06
    1fd8:	36 c0       	rjmp	.+108    	; 0x2046 <main+0x1a78>
    1fda:	80 91 da 09 	lds	r24, 0x09DA
    1fde:	90 91 db 09 	lds	r25, 0x09DB
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	64 e0       	ldi	r22, 0x04	; 4
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	6a 95       	dec	r22
    1fec:	e1 f7       	brne	.-8      	; 0x1fe6 <main+0x1a18>
    1fee:	e8 1b       	sub	r30, r24
    1ff0:	f9 0b       	sbc	r31, r25
    1ff2:	ed 51       	subi	r30, 0x1D	; 29
    1ff4:	f6 4f       	sbci	r31, 0xF6	; 246
    1ff6:	90 91 49 01 	lds	r25, 0x0149
    1ffa:	80 85       	ldd	r24, Z+8	; 0x08
    1ffc:	89 2b       	or	r24, r25
    1ffe:	80 87       	std	Z+8, r24	; 0x08
    2000:	80 91 48 01 	lds	r24, 0x0148
    2004:	81 87       	std	Z+9, r24	; 0x09
    2006:	1f c0       	rjmp	.+62     	; 0x2046 <main+0x1a78>
    2008:	80 91 da 09 	lds	r24, 0x09DA
    200c:	90 91 db 09 	lds	r25, 0x09DB
    2010:	fc 01       	movw	r30, r24
    2012:	54 e0       	ldi	r21, 0x04	; 4
    2014:	ee 0f       	add	r30, r30
    2016:	ff 1f       	adc	r31, r31
    2018:	5a 95       	dec	r21
    201a:	e1 f7       	brne	.-8      	; 0x2014 <main+0x1a46>
    201c:	e8 1b       	sub	r30, r24
    201e:	f9 0b       	sbc	r31, r25
    2020:	ed 51       	subi	r30, 0x1D	; 29
    2022:	f6 4f       	sbci	r31, 0xF6	; 246
    2024:	80 91 48 01 	lds	r24, 0x0148
    2028:	90 91 49 01 	lds	r25, 0x0149
    202c:	46 e0       	ldi	r20, 0x06	; 6
    202e:	96 95       	lsr	r25
    2030:	87 95       	ror	r24
    2032:	4a 95       	dec	r20
    2034:	e1 f7       	brne	.-8      	; 0x202e <main+0x1a60>
    2036:	24 85       	ldd	r18, Z+12	; 0x0c
    2038:	28 2b       	or	r18, r24
    203a:	24 87       	std	Z+12, r18	; 0x0c
    203c:	80 91 48 01 	lds	r24, 0x0148
    2040:	88 0f       	add	r24, r24
    2042:	88 0f       	add	r24, r24
    2044:	85 87       	std	Z+13, r24	; 0x0d
			 					m_SET_Z(data[dataIndex],z,dataSubindex);
    2046:	80 91 de 09 	lds	r24, 0x09DE
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	49 f1       	breq	.+82     	; 0x20a0 <main+0x1ad2>
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	38 f0       	brcs	.+14     	; 0x2060 <main+0x1a92>
    2052:	82 30       	cpi	r24, 0x02	; 2
    2054:	09 f4       	brne	.+2      	; 0x2058 <main+0x1a8a>
    2056:	44 c0       	rjmp	.+136    	; 0x20e0 <main+0x1b12>
    2058:	83 30       	cpi	r24, 0x03	; 3
    205a:	09 f0       	breq	.+2      	; 0x205e <main+0x1a90>
    205c:	76 c0       	rjmp	.+236    	; 0x214a <main+0x1b7c>
    205e:	5f c0       	rjmp	.+190    	; 0x211e <main+0x1b50>
    2060:	80 91 da 09 	lds	r24, 0x09DA
    2064:	90 91 db 09 	lds	r25, 0x09DB
    2068:	fc 01       	movw	r30, r24
    206a:	34 e0       	ldi	r19, 0x04	; 4
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	3a 95       	dec	r19
    2072:	e1 f7       	brne	.-8      	; 0x206c <main+0x1a9e>
    2074:	e8 1b       	sub	r30, r24
    2076:	f9 0b       	sbc	r31, r25
    2078:	ed 51       	subi	r30, 0x1D	; 29
    207a:	f6 4f       	sbci	r31, 0xF6	; 246
    207c:	80 91 4a 01 	lds	r24, 0x014A
    2080:	90 91 4b 01 	lds	r25, 0x014B
    2084:	26 e0       	ldi	r18, 0x06	; 6
    2086:	96 95       	lsr	r25
    2088:	87 95       	ror	r24
    208a:	2a 95       	dec	r18
    208c:	e1 f7       	brne	.-8      	; 0x2086 <main+0x1ab8>
    208e:	22 81       	ldd	r18, Z+2	; 0x02
    2090:	28 2b       	or	r18, r24
    2092:	22 83       	std	Z+2, r18	; 0x02
    2094:	80 91 4a 01 	lds	r24, 0x014A
    2098:	88 0f       	add	r24, r24
    209a:	88 0f       	add	r24, r24
    209c:	83 83       	std	Z+3, r24	; 0x03
    209e:	55 c0       	rjmp	.+170    	; 0x214a <main+0x1b7c>
    20a0:	80 91 da 09 	lds	r24, 0x09DA
    20a4:	90 91 db 09 	lds	r25, 0x09DB
    20a8:	fc 01       	movw	r30, r24
    20aa:	04 e0       	ldi	r16, 0x04	; 4
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	0a 95       	dec	r16
    20b2:	e1 f7       	brne	.-8      	; 0x20ac <main+0x1ade>
    20b4:	e8 1b       	sub	r30, r24
    20b6:	f9 0b       	sbc	r31, r25
    20b8:	ed 51       	subi	r30, 0x1D	; 29
    20ba:	f6 4f       	sbci	r31, 0xF6	; 246
    20bc:	80 91 4a 01 	lds	r24, 0x014A
    20c0:	90 91 4b 01 	lds	r25, 0x014B
    20c4:	14 e0       	ldi	r17, 0x04	; 4
    20c6:	96 95       	lsr	r25
    20c8:	87 95       	ror	r24
    20ca:	1a 95       	dec	r17
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <main+0x1af8>
    20ce:	26 81       	ldd	r18, Z+6	; 0x06
    20d0:	28 2b       	or	r18, r24
    20d2:	26 83       	std	Z+6, r18	; 0x06
    20d4:	80 91 4a 01 	lds	r24, 0x014A
    20d8:	82 95       	swap	r24
    20da:	80 7f       	andi	r24, 0xF0	; 240
    20dc:	87 83       	std	Z+7, r24	; 0x07
    20de:	35 c0       	rjmp	.+106    	; 0x214a <main+0x1b7c>
    20e0:	80 91 da 09 	lds	r24, 0x09DA
    20e4:	90 91 db 09 	lds	r25, 0x09DB
    20e8:	fc 01       	movw	r30, r24
    20ea:	b4 e0       	ldi	r27, 0x04	; 4
    20ec:	ee 0f       	add	r30, r30
    20ee:	ff 1f       	adc	r31, r31
    20f0:	ba 95       	dec	r27
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <main+0x1b1e>
    20f4:	e8 1b       	sub	r30, r24
    20f6:	f9 0b       	sbc	r31, r25
    20f8:	ed 51       	subi	r30, 0x1D	; 29
    20fa:	f6 4f       	sbci	r31, 0xF6	; 246
    20fc:	80 91 4a 01 	lds	r24, 0x014A
    2100:	90 91 4b 01 	lds	r25, 0x014B
    2104:	96 95       	lsr	r25
    2106:	87 95       	ror	r24
    2108:	96 95       	lsr	r25
    210a:	87 95       	ror	r24
    210c:	82 87       	std	Z+10, r24	; 0x0a
    210e:	80 91 4a 01 	lds	r24, 0x014A
    2112:	82 95       	swap	r24
    2114:	88 0f       	add	r24, r24
    2116:	88 0f       	add	r24, r24
    2118:	80 7c       	andi	r24, 0xC0	; 192
    211a:	83 87       	std	Z+11, r24	; 0x0b
    211c:	16 c0       	rjmp	.+44     	; 0x214a <main+0x1b7c>
    211e:	80 91 da 09 	lds	r24, 0x09DA
    2122:	90 91 db 09 	lds	r25, 0x09DB
    2126:	fc 01       	movw	r30, r24
    2128:	74 e0       	ldi	r23, 0x04	; 4
    212a:	ee 0f       	add	r30, r30
    212c:	ff 1f       	adc	r31, r31
    212e:	7a 95       	dec	r23
    2130:	e1 f7       	brne	.-8      	; 0x212a <main+0x1b5c>
    2132:	e8 1b       	sub	r30, r24
    2134:	f9 0b       	sbc	r31, r25
    2136:	ed 51       	subi	r30, 0x1D	; 29
    2138:	f6 4f       	sbci	r31, 0xF6	; 246
    213a:	90 91 4b 01 	lds	r25, 0x014B
    213e:	85 85       	ldd	r24, Z+13	; 0x0d
    2140:	89 2b       	or	r24, r25
    2142:	85 87       	std	Z+13, r24	; 0x0d
    2144:	80 91 4a 01 	lds	r24, 0x014A
    2148:	86 87       	std	Z+14, r24	; 0x0e

			 					dataSubindex++;
    214a:	80 91 de 09 	lds	r24, 0x09DE
    214e:	8f 5f       	subi	r24, 0xFF	; 255
    2150:	80 93 de 09 	sts	0x09DE, r24
			 					if (dataSubindex>=4)
    2154:	84 30       	cpi	r24, 0x04	; 4
    2156:	10 f0       	brcs	.+4      	; 0x215c <main+0x1b8e>
			 					dataSubindex=0;
    2158:	10 92 de 09 	sts	0x09DE, r1
    215c:	fe 01       	movw	r30, r28
    215e:	64 e0       	ldi	r22, 0x04	; 4
    2160:	ee 0f       	add	r30, r30
    2162:	ff 1f       	adc	r31, r31
    2164:	6a 95       	dec	r22
    2166:	e1 f7       	brne	.-8      	; 0x2160 <main+0x1b92>

						int current=dataIndex+1;
						int end =dataIndex;
						if (current>=750)
							current=0;
						while(current!=end)
    2168:	c8 15       	cp	r28, r8
    216a:	d9 05       	cpc	r29, r9
    216c:	09 f0       	breq	.+2      	; 0x2170 <main+0x1ba2>
    216e:	8b cc       	rjmp	.-1770   	; 0x1a86 <main+0x14b8>
							}
							
						}

						//copy end item into start
						data[0].byte1=data[end].byte1;
    2170:	ec 1b       	sub	r30, r28
    2172:	fd 0b       	sbc	r31, r29
    2174:	ed 51       	subi	r30, 0x1D	; 29
    2176:	f6 4f       	sbci	r31, 0xF6	; 246
    2178:	80 81       	ld	r24, Z
    217a:	80 93 e3 09 	sts	0x09E3, r24
						data[0].byte2=data[end].byte2;
    217e:	81 81       	ldd	r24, Z+1	; 0x01
    2180:	80 93 e4 09 	sts	0x09E4, r24
						data[0].byte3=data[end].byte3;
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	80 93 e5 09 	sts	0x09E5, r24
						data[0].byte4=data[end].byte4;
    218a:	83 81       	ldd	r24, Z+3	; 0x03
    218c:	80 93 e6 09 	sts	0x09E6, r24
						data[0].byte5=data[end].byte5;
    2190:	84 81       	ldd	r24, Z+4	; 0x04
    2192:	80 93 e7 09 	sts	0x09E7, r24
						data[0].byte6=data[end].byte6;
    2196:	85 81       	ldd	r24, Z+5	; 0x05
    2198:	80 93 e8 09 	sts	0x09E8, r24
						data[0].byte7=data[end].byte7;
    219c:	86 81       	ldd	r24, Z+6	; 0x06
    219e:	80 93 e9 09 	sts	0x09E9, r24
						data[0].byte8=data[end].byte8;
    21a2:	87 81       	ldd	r24, Z+7	; 0x07
    21a4:	80 93 ea 09 	sts	0x09EA, r24
						data[0].byte9=data[end].byte9;
    21a8:	80 85       	ldd	r24, Z+8	; 0x08
    21aa:	80 93 eb 09 	sts	0x09EB, r24
						data[0].byte10=data[end].byte10;
    21ae:	81 85       	ldd	r24, Z+9	; 0x09
    21b0:	80 93 ec 09 	sts	0x09EC, r24
						data[0].byte11=data[end].byte11;
    21b4:	82 85       	ldd	r24, Z+10	; 0x0a
    21b6:	80 93 ed 09 	sts	0x09ED, r24
						data[0].byte12=data[end].byte12;
    21ba:	83 85       	ldd	r24, Z+11	; 0x0b
    21bc:	80 93 ee 09 	sts	0x09EE, r24
						data[0].byte13=data[end].byte13;
    21c0:	84 85       	ldd	r24, Z+12	; 0x0c
    21c2:	80 93 ef 09 	sts	0x09EF, r24
						data[0].byte14=data[end].byte14;
    21c6:	85 85       	ldd	r24, Z+13	; 0x0d
    21c8:	80 93 f0 09 	sts	0x09F0, r24
						data[0].byte15=data[end].byte15;
    21cc:	86 85       	ldd	r24, Z+14	; 0x0e
    21ce:	80 93 f1 09 	sts	0x09F1, r24


			

					
					batch_counter=0;
    21d2:	10 92 20 01 	sts	0x0120, r1
    21d6:	10 92 1f 01 	sts	0x011F, r1
					dataIndex=0;
    21da:	10 92 db 09 	sts	0x09DB, r1
    21de:	10 92 da 09 	sts	0x09DA, r1
					seconds_passed=0;
    21e2:	10 92 22 01 	sts	0x0122, r1
    21e6:	10 92 21 01 	sts	0x0121, r1
    21ea:	89 c2       	rjmp	.+1298   	; 0x26fe <main+0x2130>
    21ec:	f2 01       	movw	r30, r4
    21ee:	31 97       	sbiw	r30, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <main+0x1c20>
					while (seconds_passed<400)
					{
						_delay_ms(5);
						seconds_passed++;
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	90 93 22 01 	sts	0x0122, r25
    21f8:	80 93 21 01 	sts	0x0121, r24
						_receive_data();
    21fc:	0e 94 19 14 	call	0x2832	; 0x2832 <_receive_data>

						if (sampleFlag)
    2200:	80 91 1e 01 	lds	r24, 0x011E
    2204:	88 23       	and	r24, r24
    2206:	09 f4       	brne	.+2      	; 0x220a <main+0x1c3c>
    2208:	7a c2       	rjmp	.+1268   	; 0x26fe <main+0x2130>
							{
								sampleFlag=0;
    220a:	10 92 1e 01 	sts	0x011E, r1

								x=_atmega_a2dConvert10bit(ADC0);
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    2214:	90 93 47 01 	sts	0x0147, r25
    2218:	80 93 46 01 	sts	0x0146, r24
		
								y=_atmega_a2dConvert10bit(ADC1);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    2222:	90 93 49 01 	sts	0x0149, r25
    2226:	80 93 48 01 	sts	0x0148, r24

								z=_atmega_a2dConvert10bit(ADC2);
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    2230:	90 93 4b 01 	sts	0x014B, r25
    2234:	80 93 4a 01 	sts	0x014A, r24


								vmag+=Filter(x,0)+Filter(y,1)+Filter(z,2);
    2238:	e0 90 e0 35 	lds	r14, 0x35E0
    223c:	f0 90 e1 35 	lds	r15, 0x35E1
    2240:	00 91 e2 35 	lds	r16, 0x35E2
    2244:	10 91 e3 35 	lds	r17, 0x35E3
    2248:	80 91 46 01 	lds	r24, 0x0146
    224c:	90 91 47 01 	lds	r25, 0x0147
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
    2258:	5c 01       	movw	r10, r24
    225a:	80 91 48 01 	lds	r24, 0x0148
    225e:	90 91 49 01 	lds	r25, 0x0149
    2262:	61 e0       	ldi	r22, 0x01	; 1
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
    226a:	6c 01       	movw	r12, r24
    226c:	80 91 4a 01 	lds	r24, 0x014A
    2270:	90 91 4b 01 	lds	r25, 0x014B
    2274:	62 e0       	ldi	r22, 0x02	; 2
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	0e 94 9f 00 	call	0x13e	; 0x13e <Filter>
    227c:	ca 0c       	add	r12, r10
    227e:	db 1c       	adc	r13, r11
    2280:	c8 0e       	add	r12, r24
    2282:	d9 1e       	adc	r13, r25
    2284:	b6 01       	movw	r22, r12
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	6e 0d       	add	r22, r14
    228c:	7f 1d       	adc	r23, r15
    228e:	80 1f       	adc	r24, r16
    2290:	91 1f       	adc	r25, r17
    2292:	60 93 e0 35 	sts	0x35E0, r22
    2296:	70 93 e1 35 	sts	0x35E1, r23
    229a:	80 93 e2 35 	sts	0x35E2, r24
    229e:	90 93 e3 35 	sts	0x35E3, r25
			

								if (_wPC>40){	//Skip the first samples						
    22a2:	20 91 53 01 	lds	r18, 0x0153
    22a6:	30 91 54 01 	lds	r19, 0x0154
    22aa:	40 91 55 01 	lds	r20, 0x0155
    22ae:	50 91 56 01 	lds	r21, 0x0156
    22b2:	29 32       	cpi	r18, 0x29	; 41
    22b4:	31 05       	cpc	r19, r1
    22b6:	41 05       	cpc	r20, r1
    22b8:	51 05       	cpc	r21, r1
    22ba:	08 f4       	brcc	.+2      	; 0x22be <main+0x1cf0>
    22bc:	85 c0       	rjmp	.+266    	; 0x23c8 <main+0x1dfa>
									if (summary_count==0)
    22be:	20 91 00 01 	lds	r18, 0x0100
    22c2:	30 91 01 01 	lds	r19, 0x0101
    22c6:	21 15       	cp	r18, r1
    22c8:	31 05       	cpc	r19, r1
    22ca:	09 f0       	breq	.+2      	; 0x22ce <main+0x1d00>
    22cc:	76 c0       	rjmp	.+236    	; 0x23ba <main+0x1dec>
									{
										vmag=vmag/24;
    22ce:	28 e1       	ldi	r18, 0x18	; 24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__udivmodsi4>
    22da:	c9 01       	movw	r24, r18
    22dc:	da 01       	movw	r26, r20
    22de:	e0 91 18 01 	lds	r30, 0x0118
    22e2:	f0 91 19 01 	lds	r31, 0x0119
										if (vmag>65535)
    22e6:	80 30       	cpi	r24, 0x00	; 0
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	92 07       	cpc	r25, r18
    22ec:	21 e0       	ldi	r18, 0x01	; 1
    22ee:	a2 07       	cpc	r26, r18
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	b2 07       	cpc	r27, r18
    22f4:	38 f0       	brcs	.+14     	; 0x2304 <main+0x1d36>
											acount[ci]=65535;
    22f6:	ee 0f       	add	r30, r30
    22f8:	ff 1f       	adc	r31, r31
    22fa:	ed 59       	subi	r30, 0x9D	; 157
    22fc:	fe 4f       	sbci	r31, 0xFE	; 254
    22fe:	71 82       	std	Z+1, r7	; 0x01
    2300:	60 82       	st	Z, r6
    2302:	06 c0       	rjmp	.+12     	; 0x2310 <main+0x1d42>
										else
											acount[ci]=(unsigned short) vmag;
    2304:	ee 0f       	add	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	ed 59       	subi	r30, 0x9D	; 157
    230a:	fe 4f       	sbci	r31, 0xFE	; 254
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	80 83       	st	Z, r24
			 							vmag=0;
    2310:	10 92 e0 35 	sts	0x35E0, r1
    2314:	10 92 e1 35 	sts	0x35E1, r1
    2318:	10 92 e2 35 	sts	0x35E2, r1
    231c:	10 92 e3 35 	sts	0x35E3, r1
										++ci;
    2320:	80 91 18 01 	lds	r24, 0x0118
    2324:	90 91 19 01 	lds	r25, 0x0119
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	90 93 19 01 	sts	0x0119, r25
    232e:	80 93 18 01 	sts	0x0118, r24
										if (ci==AC_BUFFER_SIZE)
    2332:	80 5c       	subi	r24, 0xC0	; 192
    2334:	93 40       	sbci	r25, 0x03	; 3
    2336:	21 f4       	brne	.+8      	; 0x2340 <main+0x1d72>
											ci=0;
    2338:	10 92 19 01 	sts	0x0119, r1
    233c:	10 92 18 01 	sts	0x0118, r1
										cseq++;
    2340:	80 91 10 01 	lds	r24, 0x0110
    2344:	90 91 11 01 	lds	r25, 0x0111
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	90 93 11 01 	sts	0x0111, r25
    234e:	80 93 10 01 	sts	0x0110, r24
	
										if (ci==si)
    2352:	20 91 18 01 	lds	r18, 0x0118
    2356:	30 91 19 01 	lds	r19, 0x0119
    235a:	80 91 1a 01 	lds	r24, 0x011A
    235e:	90 91 1b 01 	lds	r25, 0x011B
    2362:	28 17       	cp	r18, r24
    2364:	39 07       	cpc	r19, r25
    2366:	b1 f4       	brne	.+44     	; 0x2394 <main+0x1dc6>
										{
											si++;
    2368:	c9 01       	movw	r24, r18
    236a:	01 96       	adiw	r24, 0x01	; 1
    236c:	90 93 1b 01 	sts	0x011B, r25
    2370:	80 93 1a 01 	sts	0x011A, r24
											if (si==AC_BUFFER_SIZE)
    2374:	80 5c       	subi	r24, 0xC0	; 192
    2376:	93 40       	sbci	r25, 0x03	; 3
    2378:	21 f4       	brne	.+8      	; 0x2382 <main+0x1db4>
												si=0;
    237a:	10 92 1b 01 	sts	0x011B, r1
    237e:	10 92 1a 01 	sts	0x011A, r1
											sseq++;
    2382:	80 91 12 01 	lds	r24, 0x0112
    2386:	90 91 13 01 	lds	r25, 0x0113
    238a:	01 96       	adiw	r24, 0x01	; 1
    238c:	90 93 13 01 	sts	0x0113, r25
    2390:	80 93 12 01 	sts	0x0112, r24
										}
										acount[ci]=0;
    2394:	e0 91 18 01 	lds	r30, 0x0118
    2398:	f0 91 19 01 	lds	r31, 0x0119
    239c:	ee 0f       	add	r30, r30
    239e:	ff 1f       	adc	r31, r31
    23a0:	ed 59       	subi	r30, 0x9D	; 157
    23a2:	fe 4f       	sbci	r31, 0xFE	; 254
    23a4:	11 82       	std	Z+1, r1	; 0x01
    23a6:	10 82       	st	Z, r1
										summary_count=AC_NUMS;
    23a8:	80 91 0c 01 	lds	r24, 0x010C
    23ac:	90 91 0d 01 	lds	r25, 0x010D
    23b0:	90 93 01 01 	sts	0x0101, r25
    23b4:	80 93 00 01 	sts	0x0100, r24
    23b8:	14 c0       	rjmp	.+40     	; 0x23e2 <main+0x1e14>
									}else
										summary_count--;
    23ba:	21 50       	subi	r18, 0x01	; 1
    23bc:	30 40       	sbci	r19, 0x00	; 0
    23be:	30 93 01 01 	sts	0x0101, r19
    23c2:	20 93 00 01 	sts	0x0100, r18
    23c6:	0d c0       	rjmp	.+26     	; 0x23e2 <main+0x1e14>
								}
								else if (_wPC==40)
    23c8:	28 32       	cpi	r18, 0x28	; 40
    23ca:	31 05       	cpc	r19, r1
    23cc:	41 05       	cpc	r20, r1
    23ce:	51 05       	cpc	r21, r1
    23d0:	41 f4       	brne	.+16     	; 0x23e2 <main+0x1e14>
									vmag=0;
    23d2:	10 92 e0 35 	sts	0x35E0, r1
    23d6:	10 92 e1 35 	sts	0x35E1, r1
    23da:	10 92 e2 35 	sts	0x35E2, r1
    23de:	10 92 e3 35 	sts	0x35E3, r1

			

		
			 					m_SET_X(data[dataIndex],x,dataSubindex);
    23e2:	80 91 de 09 	lds	r24, 0x09DE
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	39 f1       	breq	.+78     	; 0x2438 <main+0x1e6a>
    23ea:	81 30       	cpi	r24, 0x01	; 1
    23ec:	30 f0       	brcs	.+12     	; 0x23fa <main+0x1e2c>
    23ee:	82 30       	cpi	r24, 0x02	; 2
    23f0:	d1 f1       	breq	.+116    	; 0x2466 <main+0x1e98>
    23f2:	83 30       	cpi	r24, 0x03	; 3
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <main+0x1e2a>
    23f6:	76 c0       	rjmp	.+236    	; 0x24e4 <main+0x1f16>
    23f8:	56 c0       	rjmp	.+172    	; 0x24a6 <main+0x1ed8>
    23fa:	80 91 da 09 	lds	r24, 0x09DA
    23fe:	90 91 db 09 	lds	r25, 0x09DB
    2402:	fc 01       	movw	r30, r24
    2404:	24 e0       	ldi	r18, 0x04	; 4
    2406:	ee 0f       	add	r30, r30
    2408:	ff 1f       	adc	r31, r31
    240a:	2a 95       	dec	r18
    240c:	e1 f7       	brne	.-8      	; 0x2406 <main+0x1e38>
    240e:	e8 1b       	sub	r30, r24
    2410:	f9 0b       	sbc	r31, r25
    2412:	ed 51       	subi	r30, 0x1D	; 29
    2414:	f6 4f       	sbci	r31, 0xF6	; 246
    2416:	80 91 46 01 	lds	r24, 0x0146
    241a:	90 91 47 01 	lds	r25, 0x0147
    241e:	96 95       	lsr	r25
    2420:	87 95       	ror	r24
    2422:	96 95       	lsr	r25
    2424:	87 95       	ror	r24
    2426:	80 83       	st	Z, r24
    2428:	80 91 46 01 	lds	r24, 0x0146
    242c:	82 95       	swap	r24
    242e:	88 0f       	add	r24, r24
    2430:	88 0f       	add	r24, r24
    2432:	80 7c       	andi	r24, 0xC0	; 192
    2434:	81 83       	std	Z+1, r24	; 0x01
    2436:	56 c0       	rjmp	.+172    	; 0x24e4 <main+0x1f16>
    2438:	80 91 da 09 	lds	r24, 0x09DA
    243c:	90 91 db 09 	lds	r25, 0x09DB
    2440:	fc 01       	movw	r30, r24
    2442:	14 e0       	ldi	r17, 0x04	; 4
    2444:	ee 0f       	add	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	1a 95       	dec	r17
    244a:	e1 f7       	brne	.-8      	; 0x2444 <main+0x1e76>
    244c:	e8 1b       	sub	r30, r24
    244e:	f9 0b       	sbc	r31, r25
    2450:	ed 51       	subi	r30, 0x1D	; 29
    2452:	f6 4f       	sbci	r31, 0xF6	; 246
    2454:	90 91 47 01 	lds	r25, 0x0147
    2458:	83 81       	ldd	r24, Z+3	; 0x03
    245a:	89 2b       	or	r24, r25
    245c:	83 83       	std	Z+3, r24	; 0x03
    245e:	80 91 46 01 	lds	r24, 0x0146
    2462:	84 83       	std	Z+4, r24	; 0x04
    2464:	3f c0       	rjmp	.+126    	; 0x24e4 <main+0x1f16>
    2466:	80 91 da 09 	lds	r24, 0x09DA
    246a:	90 91 db 09 	lds	r25, 0x09DB
    246e:	fc 01       	movw	r30, r24
    2470:	b4 e0       	ldi	r27, 0x04	; 4
    2472:	ee 0f       	add	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	ba 95       	dec	r27
    2478:	e1 f7       	brne	.-8      	; 0x2472 <main+0x1ea4>
    247a:	e8 1b       	sub	r30, r24
    247c:	f9 0b       	sbc	r31, r25
    247e:	ed 51       	subi	r30, 0x1D	; 29
    2480:	f6 4f       	sbci	r31, 0xF6	; 246
    2482:	80 91 46 01 	lds	r24, 0x0146
    2486:	90 91 47 01 	lds	r25, 0x0147
    248a:	a6 e0       	ldi	r26, 0x06	; 6
    248c:	96 95       	lsr	r25
    248e:	87 95       	ror	r24
    2490:	aa 95       	dec	r26
    2492:	e1 f7       	brne	.-8      	; 0x248c <main+0x1ebe>
    2494:	27 81       	ldd	r18, Z+7	; 0x07
    2496:	28 2b       	or	r18, r24
    2498:	27 83       	std	Z+7, r18	; 0x07
    249a:	80 91 46 01 	lds	r24, 0x0146
    249e:	88 0f       	add	r24, r24
    24a0:	88 0f       	add	r24, r24
    24a2:	80 87       	std	Z+8, r24	; 0x08
    24a4:	1f c0       	rjmp	.+62     	; 0x24e4 <main+0x1f16>
    24a6:	80 91 da 09 	lds	r24, 0x09DA
    24aa:	90 91 db 09 	lds	r25, 0x09DB
    24ae:	fc 01       	movw	r30, r24
    24b0:	74 e0       	ldi	r23, 0x04	; 4
    24b2:	ee 0f       	add	r30, r30
    24b4:	ff 1f       	adc	r31, r31
    24b6:	7a 95       	dec	r23
    24b8:	e1 f7       	brne	.-8      	; 0x24b2 <main+0x1ee4>
    24ba:	e8 1b       	sub	r30, r24
    24bc:	f9 0b       	sbc	r31, r25
    24be:	ed 51       	subi	r30, 0x1D	; 29
    24c0:	f6 4f       	sbci	r31, 0xF6	; 246
    24c2:	80 91 46 01 	lds	r24, 0x0146
    24c6:	90 91 47 01 	lds	r25, 0x0147
    24ca:	64 e0       	ldi	r22, 0x04	; 4
    24cc:	96 95       	lsr	r25
    24ce:	87 95       	ror	r24
    24d0:	6a 95       	dec	r22
    24d2:	e1 f7       	brne	.-8      	; 0x24cc <main+0x1efe>
    24d4:	23 85       	ldd	r18, Z+11	; 0x0b
    24d6:	28 2b       	or	r18, r24
    24d8:	23 87       	std	Z+11, r18	; 0x0b
    24da:	80 91 46 01 	lds	r24, 0x0146
    24de:	82 95       	swap	r24
    24e0:	80 7f       	andi	r24, 0xF0	; 240
    24e2:	84 87       	std	Z+12, r24	; 0x0c
			 					m_SET_Y(data[dataIndex],y,dataSubindex);
    24e4:	80 91 de 09 	lds	r24, 0x09DE
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	49 f1       	breq	.+82     	; 0x253e <main+0x1f70>
    24ec:	81 30       	cpi	r24, 0x01	; 1
    24ee:	38 f0       	brcs	.+14     	; 0x24fe <main+0x1f30>
    24f0:	82 30       	cpi	r24, 0x02	; 2
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <main+0x1f28>
    24f4:	43 c0       	rjmp	.+134    	; 0x257c <main+0x1fae>
    24f6:	83 30       	cpi	r24, 0x03	; 3
    24f8:	09 f0       	breq	.+2      	; 0x24fc <main+0x1f2e>
    24fa:	76 c0       	rjmp	.+236    	; 0x25e8 <main+0x201a>
    24fc:	56 c0       	rjmp	.+172    	; 0x25aa <main+0x1fdc>
    24fe:	80 91 da 09 	lds	r24, 0x09DA
    2502:	90 91 db 09 	lds	r25, 0x09DB
    2506:	fc 01       	movw	r30, r24
    2508:	54 e0       	ldi	r21, 0x04	; 4
    250a:	ee 0f       	add	r30, r30
    250c:	ff 1f       	adc	r31, r31
    250e:	5a 95       	dec	r21
    2510:	e1 f7       	brne	.-8      	; 0x250a <main+0x1f3c>
    2512:	e8 1b       	sub	r30, r24
    2514:	f9 0b       	sbc	r31, r25
    2516:	ed 51       	subi	r30, 0x1D	; 29
    2518:	f6 4f       	sbci	r31, 0xF6	; 246
    251a:	80 91 48 01 	lds	r24, 0x0148
    251e:	90 91 49 01 	lds	r25, 0x0149
    2522:	44 e0       	ldi	r20, 0x04	; 4
    2524:	96 95       	lsr	r25
    2526:	87 95       	ror	r24
    2528:	4a 95       	dec	r20
    252a:	e1 f7       	brne	.-8      	; 0x2524 <main+0x1f56>
    252c:	21 81       	ldd	r18, Z+1	; 0x01
    252e:	28 2b       	or	r18, r24
    2530:	21 83       	std	Z+1, r18	; 0x01
    2532:	80 91 48 01 	lds	r24, 0x0148
    2536:	82 95       	swap	r24
    2538:	80 7f       	andi	r24, 0xF0	; 240
    253a:	82 83       	std	Z+2, r24	; 0x02
    253c:	55 c0       	rjmp	.+170    	; 0x25e8 <main+0x201a>
    253e:	80 91 da 09 	lds	r24, 0x09DA
    2542:	90 91 db 09 	lds	r25, 0x09DB
    2546:	fc 01       	movw	r30, r24
    2548:	34 e0       	ldi	r19, 0x04	; 4
    254a:	ee 0f       	add	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	3a 95       	dec	r19
    2550:	e1 f7       	brne	.-8      	; 0x254a <main+0x1f7c>
    2552:	e8 1b       	sub	r30, r24
    2554:	f9 0b       	sbc	r31, r25
    2556:	ed 51       	subi	r30, 0x1D	; 29
    2558:	f6 4f       	sbci	r31, 0xF6	; 246
    255a:	80 91 48 01 	lds	r24, 0x0148
    255e:	90 91 49 01 	lds	r25, 0x0149
    2562:	96 95       	lsr	r25
    2564:	87 95       	ror	r24
    2566:	96 95       	lsr	r25
    2568:	87 95       	ror	r24
    256a:	85 83       	std	Z+5, r24	; 0x05
    256c:	80 91 48 01 	lds	r24, 0x0148
    2570:	82 95       	swap	r24
    2572:	88 0f       	add	r24, r24
    2574:	88 0f       	add	r24, r24
    2576:	80 7c       	andi	r24, 0xC0	; 192
    2578:	86 83       	std	Z+6, r24	; 0x06
    257a:	36 c0       	rjmp	.+108    	; 0x25e8 <main+0x201a>
    257c:	80 91 da 09 	lds	r24, 0x09DA
    2580:	90 91 db 09 	lds	r25, 0x09DB
    2584:	fc 01       	movw	r30, r24
    2586:	04 e0       	ldi	r16, 0x04	; 4
    2588:	ee 0f       	add	r30, r30
    258a:	ff 1f       	adc	r31, r31
    258c:	0a 95       	dec	r16
    258e:	e1 f7       	brne	.-8      	; 0x2588 <main+0x1fba>
    2590:	e8 1b       	sub	r30, r24
    2592:	f9 0b       	sbc	r31, r25
    2594:	ed 51       	subi	r30, 0x1D	; 29
    2596:	f6 4f       	sbci	r31, 0xF6	; 246
    2598:	90 91 49 01 	lds	r25, 0x0149
    259c:	80 85       	ldd	r24, Z+8	; 0x08
    259e:	89 2b       	or	r24, r25
    25a0:	80 87       	std	Z+8, r24	; 0x08
    25a2:	80 91 48 01 	lds	r24, 0x0148
    25a6:	81 87       	std	Z+9, r24	; 0x09
    25a8:	1f c0       	rjmp	.+62     	; 0x25e8 <main+0x201a>
    25aa:	80 91 da 09 	lds	r24, 0x09DA
    25ae:	90 91 db 09 	lds	r25, 0x09DB
    25b2:	fc 01       	movw	r30, r24
    25b4:	14 e0       	ldi	r17, 0x04	; 4
    25b6:	ee 0f       	add	r30, r30
    25b8:	ff 1f       	adc	r31, r31
    25ba:	1a 95       	dec	r17
    25bc:	e1 f7       	brne	.-8      	; 0x25b6 <main+0x1fe8>
    25be:	e8 1b       	sub	r30, r24
    25c0:	f9 0b       	sbc	r31, r25
    25c2:	ed 51       	subi	r30, 0x1D	; 29
    25c4:	f6 4f       	sbci	r31, 0xF6	; 246
    25c6:	80 91 48 01 	lds	r24, 0x0148
    25ca:	90 91 49 01 	lds	r25, 0x0149
    25ce:	b6 e0       	ldi	r27, 0x06	; 6
    25d0:	96 95       	lsr	r25
    25d2:	87 95       	ror	r24
    25d4:	ba 95       	dec	r27
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <main+0x2002>
    25d8:	24 85       	ldd	r18, Z+12	; 0x0c
    25da:	28 2b       	or	r18, r24
    25dc:	24 87       	std	Z+12, r18	; 0x0c
    25de:	80 91 48 01 	lds	r24, 0x0148
    25e2:	88 0f       	add	r24, r24
    25e4:	88 0f       	add	r24, r24
    25e6:	85 87       	std	Z+13, r24	; 0x0d
			 					m_SET_Z(data[dataIndex],z,dataSubindex);
    25e8:	80 91 de 09 	lds	r24, 0x09DE
    25ec:	81 30       	cpi	r24, 0x01	; 1
    25ee:	49 f1       	breq	.+82     	; 0x2642 <main+0x2074>
    25f0:	81 30       	cpi	r24, 0x01	; 1
    25f2:	38 f0       	brcs	.+14     	; 0x2602 <main+0x2034>
    25f4:	82 30       	cpi	r24, 0x02	; 2
    25f6:	09 f4       	brne	.+2      	; 0x25fa <main+0x202c>
    25f8:	44 c0       	rjmp	.+136    	; 0x2682 <main+0x20b4>
    25fa:	83 30       	cpi	r24, 0x03	; 3
    25fc:	09 f0       	breq	.+2      	; 0x2600 <main+0x2032>
    25fe:	76 c0       	rjmp	.+236    	; 0x26ec <main+0x211e>
    2600:	5f c0       	rjmp	.+190    	; 0x26c0 <main+0x20f2>
    2602:	80 91 da 09 	lds	r24, 0x09DA
    2606:	90 91 db 09 	lds	r25, 0x09DB
    260a:	fc 01       	movw	r30, r24
    260c:	a4 e0       	ldi	r26, 0x04	; 4
    260e:	ee 0f       	add	r30, r30
    2610:	ff 1f       	adc	r31, r31
    2612:	aa 95       	dec	r26
    2614:	e1 f7       	brne	.-8      	; 0x260e <main+0x2040>
    2616:	e8 1b       	sub	r30, r24
    2618:	f9 0b       	sbc	r31, r25
    261a:	ed 51       	subi	r30, 0x1D	; 29
    261c:	f6 4f       	sbci	r31, 0xF6	; 246
    261e:	80 91 4a 01 	lds	r24, 0x014A
    2622:	90 91 4b 01 	lds	r25, 0x014B
    2626:	76 e0       	ldi	r23, 0x06	; 6
    2628:	96 95       	lsr	r25
    262a:	87 95       	ror	r24
    262c:	7a 95       	dec	r23
    262e:	e1 f7       	brne	.-8      	; 0x2628 <main+0x205a>
    2630:	22 81       	ldd	r18, Z+2	; 0x02
    2632:	28 2b       	or	r18, r24
    2634:	22 83       	std	Z+2, r18	; 0x02
    2636:	80 91 4a 01 	lds	r24, 0x014A
    263a:	88 0f       	add	r24, r24
    263c:	88 0f       	add	r24, r24
    263e:	83 83       	std	Z+3, r24	; 0x03
    2640:	55 c0       	rjmp	.+170    	; 0x26ec <main+0x211e>
    2642:	80 91 da 09 	lds	r24, 0x09DA
    2646:	90 91 db 09 	lds	r25, 0x09DB
    264a:	fc 01       	movw	r30, r24
    264c:	64 e0       	ldi	r22, 0x04	; 4
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	6a 95       	dec	r22
    2654:	e1 f7       	brne	.-8      	; 0x264e <main+0x2080>
    2656:	e8 1b       	sub	r30, r24
    2658:	f9 0b       	sbc	r31, r25
    265a:	ed 51       	subi	r30, 0x1D	; 29
    265c:	f6 4f       	sbci	r31, 0xF6	; 246
    265e:	80 91 4a 01 	lds	r24, 0x014A
    2662:	90 91 4b 01 	lds	r25, 0x014B
    2666:	54 e0       	ldi	r21, 0x04	; 4
    2668:	96 95       	lsr	r25
    266a:	87 95       	ror	r24
    266c:	5a 95       	dec	r21
    266e:	e1 f7       	brne	.-8      	; 0x2668 <main+0x209a>
    2670:	26 81       	ldd	r18, Z+6	; 0x06
    2672:	28 2b       	or	r18, r24
    2674:	26 83       	std	Z+6, r18	; 0x06
    2676:	80 91 4a 01 	lds	r24, 0x014A
    267a:	82 95       	swap	r24
    267c:	80 7f       	andi	r24, 0xF0	; 240
    267e:	87 83       	std	Z+7, r24	; 0x07
    2680:	35 c0       	rjmp	.+106    	; 0x26ec <main+0x211e>
    2682:	80 91 da 09 	lds	r24, 0x09DA
    2686:	90 91 db 09 	lds	r25, 0x09DB
    268a:	fc 01       	movw	r30, r24
    268c:	44 e0       	ldi	r20, 0x04	; 4
    268e:	ee 0f       	add	r30, r30
    2690:	ff 1f       	adc	r31, r31
    2692:	4a 95       	dec	r20
    2694:	e1 f7       	brne	.-8      	; 0x268e <main+0x20c0>
    2696:	e8 1b       	sub	r30, r24
    2698:	f9 0b       	sbc	r31, r25
    269a:	ed 51       	subi	r30, 0x1D	; 29
    269c:	f6 4f       	sbci	r31, 0xF6	; 246
    269e:	80 91 4a 01 	lds	r24, 0x014A
    26a2:	90 91 4b 01 	lds	r25, 0x014B
    26a6:	96 95       	lsr	r25
    26a8:	87 95       	ror	r24
    26aa:	96 95       	lsr	r25
    26ac:	87 95       	ror	r24
    26ae:	82 87       	std	Z+10, r24	; 0x0a
    26b0:	80 91 4a 01 	lds	r24, 0x014A
    26b4:	82 95       	swap	r24
    26b6:	88 0f       	add	r24, r24
    26b8:	88 0f       	add	r24, r24
    26ba:	80 7c       	andi	r24, 0xC0	; 192
    26bc:	83 87       	std	Z+11, r24	; 0x0b
    26be:	16 c0       	rjmp	.+44     	; 0x26ec <main+0x211e>
    26c0:	80 91 da 09 	lds	r24, 0x09DA
    26c4:	90 91 db 09 	lds	r25, 0x09DB
    26c8:	fc 01       	movw	r30, r24
    26ca:	24 e0       	ldi	r18, 0x04	; 4
    26cc:	ee 0f       	add	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	2a 95       	dec	r18
    26d2:	e1 f7       	brne	.-8      	; 0x26cc <main+0x20fe>
    26d4:	e8 1b       	sub	r30, r24
    26d6:	f9 0b       	sbc	r31, r25
    26d8:	ed 51       	subi	r30, 0x1D	; 29
    26da:	f6 4f       	sbci	r31, 0xF6	; 246
    26dc:	90 91 4b 01 	lds	r25, 0x014B
    26e0:	85 85       	ldd	r24, Z+13	; 0x0d
    26e2:	89 2b       	or	r24, r25
    26e4:	85 87       	std	Z+13, r24	; 0x0d
    26e6:	80 91 4a 01 	lds	r24, 0x014A
    26ea:	86 87       	std	Z+14, r24	; 0x0e

			 					dataSubindex++;
    26ec:	80 91 de 09 	lds	r24, 0x09DE
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	80 93 de 09 	sts	0x09DE, r24
			 					if (dataSubindex>=4)
    26f6:	84 30       	cpi	r24, 0x04	; 4
    26f8:	10 f0       	brcs	.+4      	; 0x26fe <main+0x2130>
			 					dataSubindex=0;
    26fa:	10 92 de 09 	sts	0x09DE, r1

					
					batch_counter=0;
					dataIndex=0;
					seconds_passed=0;
					while (seconds_passed<400)
    26fe:	80 91 21 01 	lds	r24, 0x0121
    2702:	90 91 22 01 	lds	r25, 0x0122
    2706:	21 e0       	ldi	r18, 0x01	; 1
    2708:	80 39       	cpi	r24, 0x90	; 144
    270a:	92 07       	cpc	r25, r18
    270c:	08 f4       	brcc	.+2      	; 0x2710 <main+0x2142>
    270e:	6e cd       	rjmp	.-1316   	; 0x21ec <main+0x1c1e>
							}						
					}						
					//connected=0;

					//Don't turn off the radio if a request to switch mode has been received
					if (_wTM==_TM_Continuous)
    2710:	80 91 52 01 	lds	r24, 0x0152
    2714:	88 23       	and	r24, r24
    2716:	19 f4       	brne	.+6      	; 0x271e <main+0x2150>
						_bluetooth_turn_on();	
    2718:	0e 94 33 22 	call	0x4466	; 0x4466 <_bluetooth_turn_on>
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <main+0x2154>
					else
						_bluetooth_turn_off();		
    271e:	0e 94 3e 22 	call	0x447c	; 0x447c <_bluetooth_turn_off>
					
					command_counter=0;
    2722:	10 92 3b 01 	sts	0x013B, r1
					seconds_disconnected=0;
    2726:	10 92 2a 01 	sts	0x012A, r1
    272a:	10 92 29 01 	sts	0x0129, r1
					_greenled_turn_off();
    272e:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <_greenled_turn_off>
				
				}
			}
			_atmega_adc_turn_off();
    2732:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <_atmega_adc_turn_off>
			power_adc_disable();
    2736:	80 91 64 00 	lds	r24, 0x0064
    273a:	81 60       	ori	r24, 0x01	; 1
    273c:	80 93 64 00 	sts	0x0064, r24

			if ((dataSubindex==0) && (!connected))
    2740:	80 91 de 09 	lds	r24, 0x09DE
    2744:	88 23       	and	r24, r24
    2746:	69 f4       	brne	.+26     	; 0x2762 <main+0x2194>
    2748:	80 91 28 01 	lds	r24, 0x0128
    274c:	88 23       	and	r24, r24
    274e:	49 f4       	brne	.+18     	; 0x2762 <main+0x2194>
				dataIndex++;			
    2750:	80 91 da 09 	lds	r24, 0x09DA
    2754:	90 91 db 09 	lds	r25, 0x09DB
    2758:	01 96       	adiw	r24, 0x01	; 1
    275a:	90 93 db 09 	sts	0x09DB, r25
    275e:	80 93 da 09 	sts	0x09DA, r24
			if (dataIndex==750)
    2762:	80 91 da 09 	lds	r24, 0x09DA
    2766:	90 91 db 09 	lds	r25, 0x09DB
    276a:	8e 5e       	subi	r24, 0xEE	; 238
    276c:	92 40       	sbci	r25, 0x02	; 2
    276e:	21 f4       	brne	.+8      	; 0x2778 <main+0x21aa>
				dataIndex=0;
    2770:	10 92 db 09 	sts	0x09DB, r1
    2774:	10 92 da 09 	sts	0x09DA, r1
			connected=0;			
    2778:	10 92 28 01 	sts	0x0128, r1
			
		}	
		
			cli();
    277c:	f8 94       	cli
			set_sleep_mode(SLEEP_MODE_IDLE);
    277e:	83 b7       	in	r24, 0x33	; 51
    2780:	81 7f       	andi	r24, 0xF1	; 241
    2782:	83 bf       	out	0x33, r24	; 51
			//set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    		sleep_enable();
    2784:	83 b7       	in	r24, 0x33	; 51
    2786:	81 60       	ori	r24, 0x01	; 1
    2788:	83 bf       	out	0x33, r24	; 51
    		sleep_bod_disable(); 	
    278a:	85 b7       	in	r24, 0x35	; 53
    278c:	80 66       	ori	r24, 0x60	; 96
    278e:	85 bf       	out	0x35, r24	; 53
    2790:	8f 7d       	andi	r24, 0xDF	; 223
    2792:	85 bf       	out	0x35, r24	; 53
    		sei();
    2794:	78 94       	sei
    		sleep_cpu();
    2796:	88 95       	sleep
    		sleep_disable();
    2798:	83 b7       	in	r24, 0x33	; 51
    279a:	8e 7f       	andi	r24, 0xFE	; 254
    279c:	83 bf       	out	0x33, r24	; 51
    279e:	0c 94 45 03 	jmp	0x68a	; 0x68a <main+0xbc>

000027a2 <_wocket_initialize_timer2_interrupt>:
*/


void _wocket_initialize_timer2_interrupt(void)
{
	unsigned short ticks=(unsigned short) ((F_CPU/1024)/_SAMPLING_RATE);
    27a2:	20 91 06 01 	lds	r18, 0x0106
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	64 e8       	ldi	r22, 0x84	; 132
    27ae:	7e e1       	ldi	r23, 0x1E	; 30
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	0e 94 0a 24 	call	0x4814	; 0x4814 <__divmodsi4>
    27b8:	92 2f       	mov	r25, r18
    27ba:	90 95       	com	r25
	if (ticks>256)
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	21 30       	cpi	r18, 0x01	; 1
    27c0:	38 07       	cpc	r19, r24
    27c2:	48 f0       	brcs	.+18     	; 0x27d6 <_wocket_initialize_timer2_interrupt+0x34>
	{
		_wTCNT2=0;
    27c4:	10 92 50 01 	sts	0x0150, r1
		_wTCNT2_reps=(ticks/256)+1;
    27c8:	83 2f       	mov	r24, r19
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	80 93 07 01 	sts	0x0107, r24
		_wTCNT2_last=255-(ticks%256);
    27d0:	90 93 51 01 	sts	0x0151, r25
    27d4:	08 95       	ret
	}else
	{
		_wTCNT2=255-ticks;
    27d6:	90 93 50 01 	sts	0x0150, r25
		_wTCNT2_reps=0;
    27da:	10 92 07 01 	sts	0x0107, r1
		_wTCNT2_last=255;
    27de:	8f ef       	ldi	r24, 0xFF	; 255
    27e0:	80 93 51 01 	sts	0x0151, r24
    27e4:	08 95       	ret

000027e6 <_wocket_set_flag>:

}

void _wocket_set_flag(unsigned char flag)
{
	sbi(_STATUS_BYTE, flag);
    27e6:	21 e0       	ldi	r18, 0x01	; 1
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <_wocket_set_flag+0xa>
    27ec:	22 0f       	add	r18, r18
    27ee:	33 1f       	adc	r19, r19
    27f0:	8a 95       	dec	r24
    27f2:	e2 f7       	brpl	.-8      	; 0x27ec <_wocket_set_flag+0x6>
    27f4:	80 91 4f 01 	lds	r24, 0x014F
    27f8:	82 2b       	or	r24, r18
    27fa:	80 93 4f 01 	sts	0x014F, r24
}
    27fe:	08 95       	ret

00002800 <_wocket_reset_flag>:


void _wocket_reset_flag(unsigned char flag)
{
		cbi(_STATUS_BYTE, flag);
    2800:	21 e0       	ldi	r18, 0x01	; 1
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	02 c0       	rjmp	.+4      	; 0x280a <_wocket_reset_flag+0xa>
    2806:	22 0f       	add	r18, r18
    2808:	33 1f       	adc	r19, r19
    280a:	8a 95       	dec	r24
    280c:	e2 f7       	brpl	.-8      	; 0x2806 <_wocket_reset_flag+0x6>
    280e:	20 95       	com	r18
    2810:	80 91 4f 01 	lds	r24, 0x014F
    2814:	82 23       	and	r24, r18
    2816:	80 93 4f 01 	sts	0x014F, r24
}
    281a:	08 95       	ret

0000281c <_wocket_is_flag_set>:



unsigned char _wocket_is_flag_set(unsigned char flag)
{	
    281c:	20 91 4f 01 	lds	r18, 0x014F
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <_wocket_is_flag_set+0xc>
    2824:	35 95       	asr	r19
    2826:	27 95       	ror	r18
    2828:	8a 95       	dec	r24
    282a:	e2 f7       	brpl	.-8      	; 0x2824 <_wocket_is_flag_set+0x8>
	return ((_STATUS_BYTE>>flag) & 0x01);
}
    282c:	82 2f       	mov	r24, r18
    282e:	81 70       	andi	r24, 0x01	; 1
    2830:	08 95       	ret

00002832 <_receive_data>:
	}
}


void _receive_data(void)
{
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	0f 92       	push	r0
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
	unsigned char aByte;

	// Attempt to receive a byte only if no command is being received or a partial comman has been received
	if ( ((command_counter==0)||(command_counter<command_length))  && (_bluetooth_receive_uart0_byte(&aByte)) )
    2844:	90 91 3b 01 	lds	r25, 0x013B
    2848:	99 23       	and	r25, r25
    284a:	29 f0       	breq	.+10     	; 0x2856 <_receive_data+0x24>
    284c:	80 91 3c 01 	lds	r24, 0x013C
    2850:	98 17       	cp	r25, r24
    2852:	08 f0       	brcs	.+2      	; 0x2856 <_receive_data+0x24>
    2854:	42 c0       	rjmp	.+132    	; 0x28da <_receive_data+0xa8>
    2856:	ce 01       	movw	r24, r28
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_bluetooth_receive_uart0_byte>
    285e:	88 23       	and	r24, r24
    2860:	e1 f1       	breq	.+120    	; 0x28da <_receive_data+0xa8>
    {
		rBuffer[command_counter++]=aByte;
    2862:	80 91 3b 01 	lds	r24, 0x013B
    2866:	e8 2f       	mov	r30, r24
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	ef 5f       	subi	r30, 0xFF	; 255
    286c:	f9 4c       	sbci	r31, 0xC9	; 201
    286e:	99 81       	ldd	r25, Y+1	; 0x01
    2870:	90 83       	st	Z, r25
    2872:	8f 5f       	subi	r24, 0xFF	; 255
    2874:	80 93 3b 01 	sts	0x013B, r24
		
		if ((aByte>>5)==COMMAND_PREFIX)
    2878:	89 2f       	mov	r24, r25
    287a:	82 95       	swap	r24
    287c:	86 95       	lsr	r24
    287e:	87 70       	andi	r24, 0x07	; 7
    2880:	85 30       	cpi	r24, 0x05	; 5
    2882:	59 f5       	brne	.+86     	; 0x28da <_receive_data+0xa8>
    	{
        	opcode=aByte&0x1f;                                              
    2884:	89 2f       	mov	r24, r25
    2886:	8f 71       	andi	r24, 0x1F	; 31
    2888:	80 93 fa 35 	sts	0x35FA, r24
        	switch (opcode)
    288c:	e8 2f       	mov	r30, r24
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	ec 31       	cpi	r30, 0x1C	; 28
    2892:	f1 05       	cpc	r31, r1
    2894:	88 f4       	brcc	.+34     	; 0x28b8 <_receive_data+0x86>
    2896:	ea 5b       	subi	r30, 0xBA	; 186
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	ee 0f       	add	r30, r30
    289c:	ff 1f       	adc	r31, r31
    289e:	05 90       	lpm	r0, Z+
    28a0:	f4 91       	lpm	r31, Z+
    28a2:	e0 2d       	mov	r30, r0
    28a4:	09 94       	ijmp
                case (unsigned char)SET_SR:            
                case (unsigned char)SET_ALT:
                case (unsigned char)SET_PDT:
                case (unsigned char)SET_TM:                
				case (unsigned char)SET_VTM:  
                     command_length=2;
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	05 c0       	rjmp	.+10     	; 0x28b4 <_receive_data+0x82>
                     break;
     			case (unsigned char)ACK:		
                     //command_length=7;
					 command_length=1;
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	03 c0       	rjmp	.+6      	; 0x28b4 <_receive_data+0x82>
                     break;
				case (unsigned char)SET_TCT:                
                     command_length=5;
    28ae:	85 e0       	ldi	r24, 0x05	; 5
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <_receive_data+0x82>
                     break;
                case (unsigned char)SET_CAL:
				case (unsigned char)SET_BTCAL:
                      command_length=10;                                                              
    28b2:	8a e0       	ldi	r24, 0x0A	; 10
    28b4:	80 93 3c 01 	sts	0x013C, r24
                      break;                                                          
    		}
    		command_counter=1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	80 93 3b 01 	sts	0x013B, r24
    		command_timer=0;
    28be:	10 92 3e 01 	sts	0x013E, r1
    28c2:	10 92 3d 01 	sts	0x013D, r1
    		processed_counter=0;                                            
    28c6:	10 92 3f 01 	sts	0x013F, r1
    		address=0xffff;
    28ca:	8f ef       	ldi	r24, 0xFF	; 255
    28cc:	9f ef       	ldi	r25, 0xFF	; 255
    28ce:	90 93 05 01 	sts	0x0105, r25
    28d2:	80 93 04 01 	sts	0x0104, r24
    		response_length=0;
    28d6:	10 92 40 01 	sts	0x0140, r1
		}

	}

	// increment timer as long as the command is still being received
    if (command_counter>0)
    28da:	20 91 3b 01 	lds	r18, 0x013B
    28de:	22 23       	and	r18, r18
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <_receive_data+0xb2>
    28e2:	fe c4       	rjmp	.+2556   	; 0x32e0 <_receive_data+0xaae>
		command_timer++;
    28e4:	80 91 3d 01 	lds	r24, 0x013D
    28e8:	90 91 3e 01 	lds	r25, 0x013E
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	90 93 3e 01 	sts	0x013E, r25
    28f2:	80 93 3d 01 	sts	0x013D, r24


 	//if all command is received, start processing it
    if ((command_counter>0) && (command_counter==command_length))
    28f6:	60 91 3c 01 	lds	r22, 0x013C
    28fa:	26 17       	cp	r18, r22
    28fc:	09 f0       	breq	.+2      	; 0x2900 <_receive_data+0xce>
    28fe:	f0 c4       	rjmp	.+2528   	; 0x32e0 <_receive_data+0xaae>
    {                                       
            switch (opcode)
    2900:	80 91 fa 35 	lds	r24, 0x35FA
    2904:	e8 2f       	mov	r30, r24
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	ec 31       	cpi	r30, 0x1C	; 28
    290a:	f1 05       	cpc	r31, r1
    290c:	08 f0       	brcs	.+2      	; 0x2910 <_receive_data+0xde>
    290e:	d0 c4       	rjmp	.+2464   	; 0x32b0 <_receive_data+0xa7e>
    2910:	ee 59       	subi	r30, 0x9E	; 158
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	ee 0f       	add	r30, r30
    2916:	ff 1f       	adc	r31, r31
    2918:	05 90       	lpm	r0, Z+
    291a:	f4 91       	lpm	r31, Z+
    291c:	e0 2d       	mov	r30, r0
    291e:	09 94       	ijmp
						}*/


						//if (gotack==1){

							if ((_wPC-_wLastPC)>1000){
    2920:	20 91 53 01 	lds	r18, 0x0153
    2924:	30 91 54 01 	lds	r19, 0x0154
    2928:	40 91 55 01 	lds	r20, 0x0155
    292c:	50 91 56 01 	lds	r21, 0x0156
    2930:	80 91 57 01 	lds	r24, 0x0157
    2934:	90 91 58 01 	lds	r25, 0x0158
    2938:	a0 91 59 01 	lds	r26, 0x0159
    293c:	b0 91 5a 01 	lds	r27, 0x015A
    2940:	79 01       	movw	r14, r18
    2942:	8a 01       	movw	r16, r20
    2944:	e8 1a       	sub	r14, r24
    2946:	f9 0a       	sbc	r15, r25
    2948:	0a 0b       	sbc	r16, r26
    294a:	1b 0b       	sbc	r17, r27
    294c:	d8 01       	movw	r26, r16
    294e:	c7 01       	movw	r24, r14
    2950:	89 5e       	subi	r24, 0xE9	; 233
    2952:	93 40       	sbci	r25, 0x03	; 3
    2954:	a0 40       	sbci	r26, 0x00	; 0
    2956:	b0 40       	sbci	r27, 0x00	; 0
    2958:	08 f4       	brcc	.+2      	; 0x295c <_receive_data+0x12a>
    295a:	8a c0       	rjmp	.+276    	; 0x2a70 <_receive_data+0x23e>
								_wLastPC=_wPC;						
    295c:	20 93 57 01 	sts	0x0157, r18
    2960:	30 93 58 01 	sts	0x0158, r19
    2964:	40 93 59 01 	sts	0x0159, r20
    2968:	50 93 5a 01 	sts	0x015A, r21
								kseq=sseq+10;
    296c:	40 91 12 01 	lds	r20, 0x0112
    2970:	50 91 13 01 	lds	r21, 0x0113
    2974:	ca 01       	movw	r24, r20
    2976:	0a 96       	adiw	r24, 0x0a	; 10
    2978:	90 93 15 01 	sts	0x0115, r25
    297c:	80 93 14 01 	sts	0x0114, r24
								if ( (kseq<=cseq) && ((kseq-sseq)<AC_BUFFER_SIZE) && ((kseq-sseq)>0) )						
    2980:	20 91 10 01 	lds	r18, 0x0110
    2984:	30 91 11 01 	lds	r19, 0x0111
    2988:	28 17       	cp	r18, r24
    298a:	39 07       	cpc	r19, r25
    298c:	08 f4       	brcc	.+2      	; 0x2990 <_receive_data+0x15e>
    298e:	70 c0       	rjmp	.+224    	; 0x2a70 <_receive_data+0x23e>
    2990:	84 17       	cp	r24, r20
    2992:	95 07       	cpc	r25, r21
    2994:	09 f4       	brne	.+2      	; 0x2998 <_receive_data+0x166>
    2996:	6c c0       	rjmp	.+216    	; 0x2a70 <_receive_data+0x23e>
								{
									dseq=cseq-kseq;							
    2998:	28 1b       	sub	r18, r24
    299a:	39 0b       	sbc	r19, r25
    299c:	30 93 17 01 	sts	0x0117, r19
    29a0:	20 93 16 01 	sts	0x0116, r18
									if (ci>=dseq) 
    29a4:	80 91 18 01 	lds	r24, 0x0118
    29a8:	90 91 19 01 	lds	r25, 0x0119
    29ac:	82 17       	cp	r24, r18
    29ae:	93 07       	cpc	r25, r19
    29b0:	10 f4       	brcc	.+4      	; 0x29b6 <_receive_data+0x184>
										si=ci-dseq;
									else
										si=AC_BUFFER_SIZE-(dseq-ci);
    29b2:	80 54       	subi	r24, 0x40	; 64
    29b4:	9c 4f       	sbci	r25, 0xFC	; 252
    29b6:	82 1b       	sub	r24, r18
    29b8:	93 0b       	sbc	r25, r19
    29ba:	90 93 1b 01 	sts	0x011B, r25
    29be:	80 93 1a 01 	sts	0x011A, r24
									sseq=kseq;							
    29c2:	80 91 14 01 	lds	r24, 0x0114
    29c6:	90 91 15 01 	lds	r25, 0x0115
    29ca:	90 93 13 01 	sts	0x0113, r25
    29ce:	80 93 12 01 	sts	0x0112, r24

									_yellowled_turn_on();
    29d2:	0e 94 03 23 	call	0x4606	; 0x4606 <_yellowled_turn_on>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	20 e2       	ldi	r18, 0x20	; 32
    29dc:	3e e4       	ldi	r19, 0x4E	; 78
    29de:	f9 01       	movw	r30, r18
    29e0:	31 97       	sbiw	r30, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <_receive_data+0x1ae>
									for (int xyz=0;(xyz<80);xyz++)
    29e4:	01 96       	adiw	r24, 0x01	; 1
    29e6:	80 35       	cpi	r24, 0x50	; 80
    29e8:	91 05       	cpc	r25, r1
    29ea:	c9 f7       	brne	.-14     	; 0x29de <_receive_data+0x1ac>
										_delay_ms(10);
									_yellowled_turn_off();
    29ec:	0e 94 0b 23 	call	0x4616	; 0x4616 <_yellowled_turn_off>
								//gotack=0;
								tester++;
    29f0:	80 91 4c 01 	lds	r24, 0x014C
    29f4:	90 91 4d 01 	lds	r25, 0x014D
    29f8:	01 96       	adiw	r24, 0x01	; 1
    29fa:	90 93 4d 01 	sts	0x014D, r25
    29fe:	80 93 4c 01 	sts	0x014C, r24

									if (tester>1)
    2a02:	02 97       	sbiw	r24, 0x02	; 2
    2a04:	a8 f1       	brcs	.+106    	; 0x2a70 <_receive_data+0x23e>
										_yellowled_turn_on();
    2a06:	0e 94 03 23 	call	0x4606	; 0x4606 <_yellowled_turn_on>
    2a0a:	32 c0       	rjmp	.+100    	; 0x2a70 <_receive_data+0x23e>
						
						processed_counter=command_counter;				
						break;	

			        case (unsigned char) SET_TCT:  
				   		_wTCNT2=m_SET_TCT(rBuffer[1],rBuffer[2]);
    2a0c:	20 91 03 36 	lds	r18, 0x3603
    2a10:	82 2f       	mov	r24, r18
    2a12:	82 95       	swap	r24
    2a14:	86 95       	lsr	r24
    2a16:	86 95       	lsr	r24
    2a18:	81 70       	andi	r24, 0x01	; 1
    2a1a:	60 91 02 36 	lds	r22, 0x3602
    2a1e:	66 0f       	add	r22, r22
    2a20:	68 2b       	or	r22, r24
    2a22:	60 93 50 01 	sts	0x0150, r22
						_wTCNT2_reps=m_SET_TCTREPS(rBuffer[2],rBuffer[3]);
    2a26:	90 91 04 36 	lds	r25, 0x3604
    2a2a:	89 2f       	mov	r24, r25
    2a2c:	82 95       	swap	r24
    2a2e:	86 95       	lsr	r24
    2a30:	83 70       	andi	r24, 0x03	; 3
    2a32:	22 0f       	add	r18, r18
    2a34:	22 0f       	add	r18, r18
    2a36:	28 2b       	or	r18, r24
    2a38:	20 93 07 01 	sts	0x0107, r18
						_wTCNT2_last=m_SET_TCTLAST(rBuffer[3],rBuffer[4]);
    2a3c:	80 91 05 36 	lds	r24, 0x3605
    2a40:	82 95       	swap	r24
    2a42:	87 70       	andi	r24, 0x07	; 7
    2a44:	99 0f       	add	r25, r25
    2a46:	99 0f       	add	r25, r25
    2a48:	99 0f       	add	r25, r25
    2a4a:	98 2b       	or	r25, r24
    2a4c:	90 93 51 01 	sts	0x0151, r25
						eeprom_write_byte(&_NV_TCT,_wTCNT2);
    2a50:	83 e0       	ldi	r24, 0x03	; 3
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>
						eeprom_write_byte(&_NV_TCTREPS,_wTCNT2_reps);
    2a58:	84 e0       	ldi	r24, 0x04	; 4
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	60 91 07 01 	lds	r22, 0x0107
    2a60:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>
						eeprom_write_byte(&_NV_TCTLAST,_wTCNT2_last);
    2a64:	85 e0       	ldi	r24, 0x05	; 5
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	60 91 51 01 	lds	r22, 0x0151
    2a6c:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>
						processed_counter=command_counter;
    2a70:	80 91 3b 01 	lds	r24, 0x013B
    2a74:	80 93 3f 01 	sts	0x013F, r24
    2a78:	1b c4       	rjmp	.+2102   	; 0x32b0 <_receive_data+0xa7e>
						break;
                    case (unsigned char)PAUSE:                                                      
                            paused=1;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	80 93 41 01 	sts	0x0141, r24
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <_receive_data+0x254>
                            processed_counter=command_counter;                                                      
                            break;
                    case (unsigned char)RESUME:                                                     
                            paused=0;
    2a82:	10 92 41 01 	sts	0x0141, r1
                            processed_counter=command_counter;                                                      
    2a86:	60 93 3f 01 	sts	0x013F, r22
    2a8a:	12 c4       	rjmp	.+2084   	; 0x32b0 <_receive_data+0xa7e>
                            break;
                    //reset alive timer if it is alive
                    case (unsigned char)ALIVE:                                                      
                            alive_timer=0;
    2a8c:	10 92 43 01 	sts	0x0143, r1
    2a90:	10 92 42 01 	sts	0x0142, r1
    2a94:	f8 cf       	rjmp	.-16     	; 0x2a86 <_receive_data+0x254>
				
                            break;
                    //setup battery buffer
                case (unsigned char) GET_BT:           
#ifdef _VERSION==3
                            word=_atmega_a2dConvert10bit(ADC7);
    2a96:	87 e0       	ldi	r24, 0x07	; 7
    2a98:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    2a9c:	90 93 45 01 	sts	0x0145, r25
    2aa0:	80 93 44 01 	sts	0x0144, r24
#else
                            word=_atmega_a2dConvert10bit(ADC4);
#endif				  

                            rBuffer[0]=m_BL_RSP_BYTE0;
    2aa4:	20 ec       	ldi	r18, 0xC0	; 192
    2aa6:	20 93 01 36 	sts	0x3601, r18
                            rBuffer[1]=m_BL_RSP_BYTE1(word);
    2aaa:	9c 01       	movw	r18, r24
    2aac:	13 e0       	ldi	r17, 0x03	; 3
    2aae:	36 95       	lsr	r19
    2ab0:	27 95       	ror	r18
    2ab2:	1a 95       	dec	r17
    2ab4:	e1 f7       	brne	.-8      	; 0x2aae <_receive_data+0x27c>
    2ab6:	20 93 02 36 	sts	0x3602, r18
                            rBuffer[2]=m_BL_RSP_BYTE2(word);
    2aba:	87 70       	andi	r24, 0x07	; 7
    2abc:	82 95       	swap	r24
    2abe:	80 7f       	andi	r24, 0xF0	; 240
    2ac0:	80 93 03 36 	sts	0x3603, r24
                            processed_counter=command_counter;
    2ac4:	80 91 3b 01 	lds	r24, 0x013B
    2ac8:	80 93 3f 01 	sts	0x013F, r24
                            response_length=3;		                                                                          
    2acc:	83 e0       	ldi	r24, 0x03	; 3
    2ace:	ee c3       	rjmp	.+2012   	; 0x32ac <_receive_data+0xa7a>
                            break;		
                case (unsigned char) GET_SEN:           			  
                            rBuffer[0]=m_SENS_RSP_BYTE0;
    2ad0:	83 ec       	ldi	r24, 0xC3	; 195
    2ad2:	80 93 01 36 	sts	0x3601, r24
                            rBuffer[1]=m_SENS_RSP_BYTE1(_wSENS);                       
    2ad6:	80 91 08 01 	lds	r24, 0x0108
    2ada:	1c c1       	rjmp	.+568    	; 0x2d14 <_receive_data+0x4e2>
                            processed_counter=command_counter;
                            response_length=2;		                                                                          
                            break;	
                case (unsigned char) GET_BP:           
#ifdef _VERSION==3
                            word=_atmega_a2dConvert10bit(ADC7);
    2adc:	87 e0       	ldi	r24, 0x07	; 7
    2ade:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    2ae2:	9c 01       	movw	r18, r24
#else
                            word=_atmega_a2dConvert10bit(ADC4);
						
#endif				  
							if (word>_wBTCAL100)
    2ae4:	40 91 ef 35 	lds	r20, 0x35EF
    2ae8:	50 91 f0 35 	lds	r21, 0x35F0
    2aec:	48 17       	cp	r20, r24
    2aee:	59 07       	cpc	r21, r25
    2af0:	38 f4       	brcc	.+14     	; 0x2b00 <_receive_data+0x2ce>
								word=100;
    2af2:	84 e6       	ldi	r24, 0x64	; 100
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	90 93 45 01 	sts	0x0145, r25
    2afa:	80 93 44 01 	sts	0x0144, r24
    2afe:	8d c0       	rjmp	.+282    	; 0x2c1a <_receive_data+0x3e8>
							else if (word>_wBTCAL80)
    2b00:	60 91 fd 35 	lds	r22, 0x35FD
    2b04:	70 91 fe 35 	lds	r23, 0x35FE
    2b08:	68 17       	cp	r22, r24
    2b0a:	79 07       	cpc	r23, r25
    2b0c:	a0 f4       	brcc	.+40     	; 0x2b36 <_receive_data+0x304>
								word=80 + ((word- _wBTCAL80)*20) / (_wBTCAL100-_wBTCAL80);
    2b0e:	26 1b       	sub	r18, r22
    2b10:	37 0b       	sbc	r19, r23
    2b12:	46 1b       	sub	r20, r22
    2b14:	57 0b       	sbc	r21, r23
    2b16:	84 e1       	ldi	r24, 0x14	; 20
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	26 9f       	mul	r18, r22
    2b1e:	c0 01       	movw	r24, r0
    2b20:	27 9f       	mul	r18, r23
    2b22:	90 0d       	add	r25, r0
    2b24:	36 9f       	mul	r19, r22
    2b26:	90 0d       	add	r25, r0
    2b28:	11 24       	eor	r1, r1
    2b2a:	ba 01       	movw	r22, r20
    2b2c:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__udivmodhi4>
    2b30:	60 5b       	subi	r22, 0xB0	; 176
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	19 c0       	rjmp	.+50     	; 0x2b68 <_receive_data+0x336>
							else if (word>_wBTCAL60)
    2b36:	40 91 f7 35 	lds	r20, 0x35F7
    2b3a:	50 91 f8 35 	lds	r21, 0x35F8
    2b3e:	48 17       	cp	r20, r24
    2b40:	59 07       	cpc	r21, r25
    2b42:	b8 f4       	brcc	.+46     	; 0x2b72 <_receive_data+0x340>
								word=60 + ((word- _wBTCAL60)*20) / (_wBTCAL80-_wBTCAL60);
    2b44:	24 1b       	sub	r18, r20
    2b46:	35 0b       	sbc	r19, r21
    2b48:	64 1b       	sub	r22, r20
    2b4a:	75 0b       	sbc	r23, r21
    2b4c:	84 e1       	ldi	r24, 0x14	; 20
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	7c 01       	movw	r14, r24
    2b52:	2e 9d       	mul	r18, r14
    2b54:	c0 01       	movw	r24, r0
    2b56:	2f 9d       	mul	r18, r15
    2b58:	90 0d       	add	r25, r0
    2b5a:	3e 9d       	mul	r19, r14
    2b5c:	90 0d       	add	r25, r0
    2b5e:	11 24       	eor	r1, r1
    2b60:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__udivmodhi4>
    2b64:	64 5c       	subi	r22, 0xC4	; 196
    2b66:	7f 4f       	sbci	r23, 0xFF	; 255
    2b68:	70 93 45 01 	sts	0x0145, r23
    2b6c:	60 93 44 01 	sts	0x0144, r22
    2b70:	54 c0       	rjmp	.+168    	; 0x2c1a <_receive_data+0x3e8>
							else if (word>_wBTCAL40)
    2b72:	60 91 f5 35 	lds	r22, 0x35F5
    2b76:	70 91 f6 35 	lds	r23, 0x35F6
    2b7a:	68 17       	cp	r22, r24
    2b7c:	79 07       	cpc	r23, r25
    2b7e:	a0 f4       	brcc	.+40     	; 0x2ba8 <_receive_data+0x376>
								word=40 + ((word- _wBTCAL40)*20) / (_wBTCAL60-_wBTCAL40);
    2b80:	26 1b       	sub	r18, r22
    2b82:	37 0b       	sbc	r19, r23
    2b84:	46 1b       	sub	r20, r22
    2b86:	57 0b       	sbc	r21, r23
    2b88:	84 e1       	ldi	r24, 0x14	; 20
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	8c 01       	movw	r16, r24
    2b8e:	20 9f       	mul	r18, r16
    2b90:	c0 01       	movw	r24, r0
    2b92:	21 9f       	mul	r18, r17
    2b94:	90 0d       	add	r25, r0
    2b96:	30 9f       	mul	r19, r16
    2b98:	90 0d       	add	r25, r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	ba 01       	movw	r22, r20
    2b9e:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__udivmodhi4>
    2ba2:	68 5d       	subi	r22, 0xD8	; 216
    2ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba6:	e0 cf       	rjmp	.-64     	; 0x2b68 <_receive_data+0x336>
							else if (word>_wBTCAL20)
    2ba8:	e0 91 eb 35 	lds	r30, 0x35EB
    2bac:	f0 91 ec 35 	lds	r31, 0x35EC
    2bb0:	e8 17       	cp	r30, r24
    2bb2:	f9 07       	cpc	r31, r25
    2bb4:	98 f4       	brcc	.+38     	; 0x2bdc <_receive_data+0x3aa>
								word=20 + ((word- _wBTCAL20)*20) / (_wBTCAL40-_wBTCAL20);
    2bb6:	2e 1b       	sub	r18, r30
    2bb8:	3f 0b       	sbc	r19, r31
    2bba:	6e 1b       	sub	r22, r30
    2bbc:	7f 0b       	sbc	r23, r31
    2bbe:	84 e1       	ldi	r24, 0x14	; 20
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	ac 01       	movw	r20, r24
    2bc4:	24 9f       	mul	r18, r20
    2bc6:	c0 01       	movw	r24, r0
    2bc8:	25 9f       	mul	r18, r21
    2bca:	90 0d       	add	r25, r0
    2bcc:	34 9f       	mul	r19, r20
    2bce:	90 0d       	add	r25, r0
    2bd0:	11 24       	eor	r1, r1
    2bd2:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__udivmodhi4>
    2bd6:	6c 5e       	subi	r22, 0xEC	; 236
    2bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bda:	c6 cf       	rjmp	.-116    	; 0x2b68 <_receive_data+0x336>
							else if (word>_wBTCAL10)
    2bdc:	40 91 fb 35 	lds	r20, 0x35FB
    2be0:	50 91 fc 35 	lds	r21, 0x35FC
    2be4:	48 17       	cp	r20, r24
    2be6:	59 07       	cpc	r21, r25
    2be8:	a0 f4       	brcc	.+40     	; 0x2c12 <_receive_data+0x3e0>
								word=10 + ((word- _wBTCAL10)*10) / (_wBTCAL20-_wBTCAL10);
    2bea:	84 1b       	sub	r24, r20
    2bec:	95 0b       	sbc	r25, r21
    2bee:	9c 01       	movw	r18, r24
    2bf0:	b3 e0       	ldi	r27, 0x03	; 3
    2bf2:	22 0f       	add	r18, r18
    2bf4:	33 1f       	adc	r19, r19
    2bf6:	ba 95       	dec	r27
    2bf8:	e1 f7       	brne	.-8      	; 0x2bf2 <_receive_data+0x3c0>
    2bfa:	e4 1b       	sub	r30, r20
    2bfc:	f5 0b       	sbc	r31, r21
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	82 0f       	add	r24, r18
    2c04:	93 1f       	adc	r25, r19
    2c06:	bf 01       	movw	r22, r30
    2c08:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__udivmodhi4>
    2c0c:	66 5f       	subi	r22, 0xF6	; 246
    2c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c10:	ab cf       	rjmp	.-170    	; 0x2b68 <_receive_data+0x336>
							else
								word=0;
    2c12:	10 92 45 01 	sts	0x0145, r1
    2c16:	10 92 44 01 	sts	0x0144, r1

                            rBuffer[0]=m_BP_RSP_BYTE0;
    2c1a:	81 ec       	ldi	r24, 0xC1	; 193
    2c1c:	80 93 01 36 	sts	0x3601, r24
                            rBuffer[1]=m_BP_RSP_BYTE1(word);      ;
    2c20:	80 91 44 01 	lds	r24, 0x0144
    2c24:	8f 77       	andi	r24, 0x7F	; 127
    2c26:	80 93 02 36 	sts	0x3602, r24
                            processed_counter=command_counter;
    2c2a:	80 91 3b 01 	lds	r24, 0x013B
    2c2e:	80 93 3f 01 	sts	0x013F, r24
    2c32:	08 c3       	rjmp	.+1552   	; 0x3244 <_receive_data+0xa12>
                            response_length=2;		                                                                          
                            break;
 				   case (unsigned char) GET_PDT:  
				   		rBuffer[0]=m_PDT_RSP_BYTE0;
    2c34:	87 ec       	ldi	r24, 0xC7	; 199
    2c36:	80 93 01 36 	sts	0x3601, r24
                        rBuffer[1]=m_PDT_RSP_BYTE1(_wPDT);
    2c3a:	80 91 f9 35 	lds	r24, 0x35F9
    2c3e:	0d c0       	rjmp	.+26     	; 0x2c5a <_receive_data+0x428>
						processed_counter=command_counter;
						response_length=2;
						break;			
                   case (unsigned char) SET_PDT:  
				   		_wPDT=m_SET_PDT(rBuffer[1]);
    2c40:	60 91 02 36 	lds	r22, 0x3602
    2c44:	6f 77       	andi	r22, 0x7F	; 127
    2c46:	60 93 f9 35 	sts	0x35F9, r22
						eeprom_write_byte(&_NV_PDT,_wPDT);
    2c4a:	80 e2       	ldi	r24, 0x20	; 32
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	0e cf       	rjmp	.-484    	; 0x2a6c <_receive_data+0x23a>
						processed_counter=command_counter;
						break;																				
                   case (unsigned char) GET_SR:  
				   		rBuffer[0]=m_SR_RSP_BYTE0;
    2c50:	85 ec       	ldi	r24, 0xC5	; 197
    2c52:	80 93 01 36 	sts	0x3601, r24
                        rBuffer[1]=m_SR_RSP_BYTE1(_SAMPLING_RATE);
    2c56:	80 91 06 01 	lds	r24, 0x0106
    2c5a:	8f 77       	andi	r24, 0x7F	; 127
    2c5c:	ef c2       	rjmp	.+1502   	; 0x323c <_receive_data+0xa0a>
						processed_counter=command_counter;
						response_length=2;
						break;
                case (unsigned char) GET_PC:  
				   		rBuffer[0]=m_PC_RSP_BYTE0;
    2c5e:	82 ec       	ldi	r24, 0xC2	; 194
    2c60:	80 93 01 36 	sts	0x3601, r24
                        rBuffer[1]=m_PC_RSP_BYTE1(_wPC);
    2c64:	20 91 53 01 	lds	r18, 0x0153
    2c68:	30 91 54 01 	lds	r19, 0x0154
    2c6c:	40 91 55 01 	lds	r20, 0x0155
    2c70:	50 91 56 01 	lds	r21, 0x0156
    2c74:	da 01       	movw	r26, r20
    2c76:	c9 01       	movw	r24, r18
    2c78:	79 e1       	ldi	r23, 0x19	; 25
    2c7a:	b6 95       	lsr	r27
    2c7c:	a7 95       	ror	r26
    2c7e:	97 95       	ror	r25
    2c80:	87 95       	ror	r24
    2c82:	7a 95       	dec	r23
    2c84:	d1 f7       	brne	.-12     	; 0x2c7a <_receive_data+0x448>
    2c86:	80 93 02 36 	sts	0x3602, r24
						rBuffer[2]=m_PC_RSP_BYTE2(_wPC);
    2c8a:	da 01       	movw	r26, r20
    2c8c:	c9 01       	movw	r24, r18
    2c8e:	02 e1       	ldi	r16, 0x12	; 18
    2c90:	b6 95       	lsr	r27
    2c92:	a7 95       	ror	r26
    2c94:	97 95       	ror	r25
    2c96:	87 95       	ror	r24
    2c98:	0a 95       	dec	r16
    2c9a:	d1 f7       	brne	.-12     	; 0x2c90 <_receive_data+0x45e>
    2c9c:	8f 77       	andi	r24, 0x7F	; 127
    2c9e:	80 93 03 36 	sts	0x3603, r24
                        rBuffer[3]=m_PC_RSP_BYTE3(_wPC);
    2ca2:	da 01       	movw	r26, r20
    2ca4:	c9 01       	movw	r24, r18
    2ca6:	1b e0       	ldi	r17, 0x0B	; 11
    2ca8:	b6 95       	lsr	r27
    2caa:	a7 95       	ror	r26
    2cac:	97 95       	ror	r25
    2cae:	87 95       	ror	r24
    2cb0:	1a 95       	dec	r17
    2cb2:	d1 f7       	brne	.-12     	; 0x2ca8 <_receive_data+0x476>
    2cb4:	8f 77       	andi	r24, 0x7F	; 127
    2cb6:	80 93 04 36 	sts	0x3604, r24
						rBuffer[4]=m_PC_RSP_BYTE4(_wPC);
    2cba:	b4 e0       	ldi	r27, 0x04	; 4
    2cbc:	56 95       	lsr	r21
    2cbe:	47 95       	ror	r20
    2cc0:	37 95       	ror	r19
    2cc2:	27 95       	ror	r18
    2cc4:	ba 95       	dec	r27
    2cc6:	d1 f7       	brne	.-12     	; 0x2cbc <_receive_data+0x48a>
    2cc8:	2f 77       	andi	r18, 0x7F	; 127
    2cca:	20 93 05 36 	sts	0x3605, r18
                        rBuffer[5]=m_PC_RSP_BYTE5(_wPC);
    2cce:	80 91 53 01 	lds	r24, 0x0153
    2cd2:	8f 70       	andi	r24, 0x0F	; 15
    2cd4:	88 0f       	add	r24, r24
    2cd6:	88 0f       	add	r24, r24
    2cd8:	88 0f       	add	r24, r24
    2cda:	80 93 06 36 	sts	0x3606, r24
						processed_counter=command_counter;
    2cde:	60 93 3f 01 	sts	0x013F, r22
						response_length=6;
    2ce2:	86 e0       	ldi	r24, 0x06	; 6
    2ce4:	e3 c2       	rjmp	.+1478   	; 0x32ac <_receive_data+0xa7a>
						break;
                   case (unsigned char) SET_SR:  
				   		_SAMPLING_RATE=m_SET_SR(rBuffer[1]);
    2ce6:	80 91 02 36 	lds	r24, 0x3602
    2cea:	8f 77       	andi	r24, 0x7F	; 127
    2cec:	80 93 06 01 	sts	0x0106, r24
						_wocket_initialize_timer2_interrupt();
    2cf0:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_wocket_initialize_timer2_interrupt>
						eeprom_write_byte(&_NV_SAMPLING_RATE,_SAMPLING_RATE);
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	60 91 06 01 	lds	r22, 0x0106
    2cfc:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>
						eeprom_write_byte(&_NV_TCT,_wTCNT2);
    2d00:	83 e0       	ldi	r24, 0x03	; 3
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	60 91 50 01 	lds	r22, 0x0150
    2d08:	a5 ce       	rjmp	.-694    	; 0x2a54 <_receive_data+0x222>
						eeprom_write_byte(&_NV_TCTLAST,_wTCNT2_last);
						processed_counter=command_counter;
						break;

     			 case (unsigned char) GET_TM:  
				   		rBuffer[0]=m_TM_RSP_BYTE0;
    2d0a:	88 ec       	ldi	r24, 0xC8	; 200
    2d0c:	80 93 01 36 	sts	0x3601, r24
                        rBuffer[1]=m_TM_RSP_BYTE1(_wTM);
    2d10:	80 91 52 01 	lds	r24, 0x0152
    2d14:	87 70       	andi	r24, 0x07	; 7
    2d16:	82 95       	swap	r24
    2d18:	80 7f       	andi	r24, 0xF0	; 240
    2d1a:	90 c2       	rjmp	.+1312   	; 0x323c <_receive_data+0xa0a>
						processed_counter=command_counter;
						response_length=2;
						break;
                   case (unsigned char) SET_TM:  
				   		_wTM=m_SET_TM(rBuffer[1]);
    2d1c:	60 91 02 36 	lds	r22, 0x3602
    2d20:	62 95       	swap	r22
    2d22:	67 70       	andi	r22, 0x07	; 7
    2d24:	60 93 52 01 	sts	0x0152, r22
						eeprom_write_byte(&_NV_TM,_wTM);
    2d28:	86 e0       	ldi	r24, 0x06	; 6
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9f ce       	rjmp	.-706    	; 0x2a6c <_receive_data+0x23a>
						processed_counter=command_counter;
						break;
                   case (unsigned char) SET_VTM:  
				   		_wTM=m_SET_TM(rBuffer[1]);						
    2d2e:	80 91 02 36 	lds	r24, 0x3602
    2d32:	82 95       	swap	r24
    2d34:	87 70       	andi	r24, 0x07	; 7
    2d36:	80 93 52 01 	sts	0x0152, r24
    2d3a:	a5 ce       	rjmp	.-694    	; 0x2a86 <_receive_data+0x254>
						processed_counter=command_counter;
						break;
                    case (unsigned char) SET_CAL:                                                                    
                            if (eeprom_is_ready())
    2d3c:	f9 99       	sbic	0x1f, 1	; 31
    2d3e:	b8 c2       	rjmp	.+1392   	; 0x32b0 <_receive_data+0xa7e>
                            {
                                    //do nothing if battery is low
#ifdef _VERSION==3
                                    if (_atmega_a2dConvert10bit(ADC7)<600)
    2d40:	87 e0       	ldi	r24, 0x07	; 7
    2d42:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    2d46:	88 55       	subi	r24, 0x58	; 88
    2d48:	92 40       	sbci	r25, 0x02	; 2
    2d4a:	08 f4       	brcc	.+2      	; 0x2d4e <_receive_data+0x51c>
    2d4c:	b1 c2       	rjmp	.+1378   	; 0x32b0 <_receive_data+0xa7e>
                                    if (_atmega_a2dConvert10bit(ADC4)<600)
#endif
                                            break;
                                    else
                                    {   
										_wX1G_CAL=m_SET_CAL_x1g(rBuffer[1],rBuffer[2]);
    2d4e:	60 91 03 36 	lds	r22, 0x3603
    2d52:	70 e0       	ldi	r23, 0x00	; 0
    2d54:	60 77       	andi	r22, 0x70	; 112
    2d56:	70 70       	andi	r23, 0x00	; 0
    2d58:	a4 e0       	ldi	r26, 0x04	; 4
    2d5a:	76 95       	lsr	r23
    2d5c:	67 95       	ror	r22
    2d5e:	aa 95       	dec	r26
    2d60:	e1 f7       	brne	.-8      	; 0x2d5a <_receive_data+0x528>
    2d62:	80 91 02 36 	lds	r24, 0x3602
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	8f 77       	andi	r24, 0x7F	; 127
    2d6a:	90 70       	andi	r25, 0x00	; 0
    2d6c:	f3 e0       	ldi	r31, 0x03	; 3
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	fa 95       	dec	r31
    2d74:	e1 f7       	brne	.-8      	; 0x2d6e <_receive_data+0x53c>
    2d76:	68 2b       	or	r22, r24
    2d78:	79 2b       	or	r23, r25
    2d7a:	70 93 e8 35 	sts	0x35E8, r23
    2d7e:	60 93 e7 35 	sts	0x35E7, r22
										eeprom_write_word(&_NV_X1G_CAL,_wX1G_CAL);
    2d82:	84 e1       	ldi	r24, 0x14	; 20
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
										_wXN1G_CAL=m_SET_CAL_xn1g(rBuffer[2],rBuffer[3]);
    2d8a:	60 91 04 36 	lds	r22, 0x3604
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	6e 77       	andi	r22, 0x7E	; 126
    2d92:	70 70       	andi	r23, 0x00	; 0
    2d94:	76 95       	lsr	r23
    2d96:	67 95       	ror	r22
    2d98:	80 91 03 36 	lds	r24, 0x3603
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	8f 70       	andi	r24, 0x0F	; 15
    2da0:	90 70       	andi	r25, 0x00	; 0
    2da2:	56 e0       	ldi	r21, 0x06	; 6
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	5a 95       	dec	r21
    2daa:	e1 f7       	brne	.-8      	; 0x2da4 <_receive_data+0x572>
    2dac:	68 2b       	or	r22, r24
    2dae:	79 2b       	or	r23, r25
    2db0:	70 93 ea 35 	sts	0x35EA, r23
    2db4:	60 93 e9 35 	sts	0x35E9, r22
										eeprom_write_word(&_NV_XN1G_CAL,_wXN1G_CAL);
    2db8:	86 e1       	ldi	r24, 0x16	; 22
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
										_wY1G_CAL=m_SET_CAL_y1g(rBuffer[3],rBuffer[4],rBuffer[5]);
    2dc0:	60 91 05 36 	lds	r22, 0x3605
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	6f 77       	andi	r22, 0x7F	; 127
    2dc8:	70 70       	andi	r23, 0x00	; 0
    2dca:	66 0f       	add	r22, r22
    2dcc:	77 1f       	adc	r23, r23
    2dce:	66 0f       	add	r22, r22
    2dd0:	77 1f       	adc	r23, r23
    2dd2:	80 91 04 36 	lds	r24, 0x3604
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	81 70       	andi	r24, 0x01	; 1
    2dda:	90 70       	andi	r25, 0x00	; 0
    2ddc:	98 2f       	mov	r25, r24
    2dde:	88 27       	eor	r24, r24
    2de0:	99 0f       	add	r25, r25
    2de2:	68 2b       	or	r22, r24
    2de4:	79 2b       	or	r23, r25
    2de6:	80 91 06 36 	lds	r24, 0x3606
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	80 76       	andi	r24, 0x60	; 96
    2dee:	90 70       	andi	r25, 0x00	; 0
    2df0:	25 e0       	ldi	r18, 0x05	; 5
    2df2:	96 95       	lsr	r25
    2df4:	87 95       	ror	r24
    2df6:	2a 95       	dec	r18
    2df8:	e1 f7       	brne	.-8      	; 0x2df2 <_receive_data+0x5c0>
    2dfa:	68 2b       	or	r22, r24
    2dfc:	79 2b       	or	r23, r25
    2dfe:	70 93 00 36 	sts	0x3600, r23
    2e02:	60 93 ff 35 	sts	0x35FF, r22
										eeprom_write_word(&_NV_Y1G_CAL,_wY1G_CAL);
    2e06:	88 e1       	ldi	r24, 0x18	; 24
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
										_wYN1G_CAL= m_SET_CAL_yn1g(rBuffer[5],rBuffer[6]);
    2e0e:	60 91 07 36 	lds	r22, 0x3607
    2e12:	70 e0       	ldi	r23, 0x00	; 0
    2e14:	6c 77       	andi	r22, 0x7C	; 124
    2e16:	70 70       	andi	r23, 0x00	; 0
    2e18:	76 95       	lsr	r23
    2e1a:	67 95       	ror	r22
    2e1c:	76 95       	lsr	r23
    2e1e:	67 95       	ror	r22
    2e20:	80 91 06 36 	lds	r24, 0x3606
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	8f 71       	andi	r24, 0x1F	; 31
    2e28:	90 70       	andi	r25, 0x00	; 0
    2e2a:	05 e0       	ldi	r16, 0x05	; 5
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	0a 95       	dec	r16
    2e32:	e1 f7       	brne	.-8      	; 0x2e2c <_receive_data+0x5fa>
    2e34:	68 2b       	or	r22, r24
    2e36:	79 2b       	or	r23, r25
    2e38:	70 93 ee 35 	sts	0x35EE, r23
    2e3c:	60 93 ed 35 	sts	0x35ED, r22
										eeprom_write_word(&_NV_YN1G_CAL,_wYN1G_CAL);
    2e40:	8a e1       	ldi	r24, 0x1A	; 26
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
										_wZ1G_CAL= m_SET_CAL_z1g(rBuffer[6],rBuffer[7],rBuffer[8]);
    2e48:	60 91 08 36 	lds	r22, 0x3608
    2e4c:	70 e0       	ldi	r23, 0x00	; 0
    2e4e:	66 0f       	add	r22, r22
    2e50:	77 1f       	adc	r23, r23
    2e52:	70 70       	andi	r23, 0x00	; 0
    2e54:	80 91 07 36 	lds	r24, 0x3607
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	83 70       	andi	r24, 0x03	; 3
    2e5c:	90 70       	andi	r25, 0x00	; 0
    2e5e:	98 2f       	mov	r25, r24
    2e60:	88 27       	eor	r24, r24
    2e62:	68 2b       	or	r22, r24
    2e64:	79 2b       	or	r23, r25
    2e66:	80 91 09 36 	lds	r24, 0x3609
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	80 74       	andi	r24, 0x40	; 64
    2e6e:	90 70       	andi	r25, 0x00	; 0
    2e70:	a6 e0       	ldi	r26, 0x06	; 6
    2e72:	96 95       	lsr	r25
    2e74:	87 95       	ror	r24
    2e76:	aa 95       	dec	r26
    2e78:	e1 f7       	brne	.-8      	; 0x2e72 <_receive_data+0x640>
    2e7a:	68 2b       	or	r22, r24
    2e7c:	79 2b       	or	r23, r25
    2e7e:	70 93 f4 35 	sts	0x35F4, r23
    2e82:	60 93 f3 35 	sts	0x35F3, r22
										eeprom_write_word(&_NV_Z1G_CAL,_wZ1G_CAL);
    2e86:	8c e1       	ldi	r24, 0x1C	; 28
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
										_wZN1G_CAL=m_SET_CAL_zn1g(rBuffer[8],rBuffer[8]);
    2e8e:	80 91 09 36 	lds	r24, 0x3609
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	bc 01       	movw	r22, r24
    2e96:	68 77       	andi	r22, 0x78	; 120
    2e98:	70 70       	andi	r23, 0x00	; 0
    2e9a:	f3 e0       	ldi	r31, 0x03	; 3
    2e9c:	76 95       	lsr	r23
    2e9e:	67 95       	ror	r22
    2ea0:	fa 95       	dec	r31
    2ea2:	e1 f7       	brne	.-8      	; 0x2e9c <_receive_data+0x66a>
    2ea4:	8f 73       	andi	r24, 0x3F	; 63
    2ea6:	90 70       	andi	r25, 0x00	; 0
    2ea8:	e4 e0       	ldi	r30, 0x04	; 4
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	ea 95       	dec	r30
    2eb0:	e1 f7       	brne	.-8      	; 0x2eaa <_receive_data+0x678>
    2eb2:	68 2b       	or	r22, r24
    2eb4:	79 2b       	or	r23, r25
    2eb6:	70 93 f2 35 	sts	0x35F2, r23
    2eba:	60 93 f1 35 	sts	0x35F1, r22
										eeprom_write_word(&_NV_ZN1G_CAL,_wZN1G_CAL);
    2ebe:	8e e1       	ldi	r24, 0x1E	; 30
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	b0 c1       	rjmp	.+864    	; 0x3224 <_receive_data+0x9f2>
                            }                                                                                                                       
                            //enable global interrupts
                            break;
                    case (unsigned char) GET_CAL:    
							                                                              
							rBuffer[0]= m_CAL_RSP_BYTE0;
    2ec4:	84 ec       	ldi	r24, 0xC4	; 196
    2ec6:	80 93 01 36 	sts	0x3601, r24
                            rBuffer[1]= m_CAL_RSP_BYTE1_x1g(_wX1G_CAL);                                                                   
    2eca:	80 91 e7 35 	lds	r24, 0x35E7
    2ece:	90 91 e8 35 	lds	r25, 0x35E8
    2ed2:	73 e0       	ldi	r23, 0x03	; 3
    2ed4:	96 95       	lsr	r25
    2ed6:	87 95       	ror	r24
    2ed8:	7a 95       	dec	r23
    2eda:	e1 f7       	brne	.-8      	; 0x2ed4 <_receive_data+0x6a2>
    2edc:	8f 77       	andi	r24, 0x7F	; 127
    2ede:	80 93 02 36 	sts	0x3602, r24
                            rBuffer[2]= m_CAL_RSP_BYTE2_x1g(_wX1G_CAL);
    2ee2:	20 91 e7 35 	lds	r18, 0x35E7
    2ee6:	22 95       	swap	r18
    2ee8:	20 77       	andi	r18, 0x70	; 112
							rBuffer[2]|= m_CAL_RSP_BYTE2_xn1g(_wXN1G_CAL);
    2eea:	80 91 e9 35 	lds	r24, 0x35E9
    2eee:	90 91 ea 35 	lds	r25, 0x35EA
    2ef2:	56 e0       	ldi	r21, 0x06	; 6
    2ef4:	96 95       	lsr	r25
    2ef6:	87 95       	ror	r24
    2ef8:	5a 95       	dec	r21
    2efa:	e1 f7       	brne	.-8      	; 0x2ef4 <_receive_data+0x6c2>
    2efc:	8f 70       	andi	r24, 0x0F	; 15
    2efe:	82 2b       	or	r24, r18
    2f00:	80 93 03 36 	sts	0x3603, r24
                            rBuffer[3] = m_CAL_RSP_BYTE3_xn1g(_wXN1G_CAL);
    2f04:	90 91 e9 35 	lds	r25, 0x35E9
    2f08:	99 0f       	add	r25, r25
    2f0a:	9e 77       	andi	r25, 0x7E	; 126
							rBuffer[3]|= m_CAL_RSP_BYTE3_y1g(_wY1G_CAL);
    2f0c:	80 91 00 36 	lds	r24, 0x3600
    2f10:	86 95       	lsr	r24
    2f12:	81 70       	andi	r24, 0x01	; 1
    2f14:	89 2b       	or	r24, r25
    2f16:	80 93 04 36 	sts	0x3604, r24
                            rBuffer[4] = m_CAL_RSP_BYTE4_y1g(_wY1G_CAL);
    2f1a:	80 91 ff 35 	lds	r24, 0x35FF
    2f1e:	90 91 00 36 	lds	r25, 0x3600
    2f22:	96 95       	lsr	r25
    2f24:	87 95       	ror	r24
    2f26:	96 95       	lsr	r25
    2f28:	87 95       	ror	r24
    2f2a:	8f 77       	andi	r24, 0x7F	; 127
    2f2c:	80 93 05 36 	sts	0x3605, r24
                            rBuffer[5] = m_CAL_RSP_BYTE5_y1g(_wY1G_CAL);
    2f30:	20 91 ff 35 	lds	r18, 0x35FF
    2f34:	22 95       	swap	r18
    2f36:	22 0f       	add	r18, r18
    2f38:	20 76       	andi	r18, 0x60	; 96
                            rBuffer[5]|= m_CAL_RSP_BYTE5_yn1g(_wYN1G_CAL);
    2f3a:	80 91 ed 35 	lds	r24, 0x35ED
    2f3e:	90 91 ee 35 	lds	r25, 0x35EE
    2f42:	35 e0       	ldi	r19, 0x05	; 5
    2f44:	96 95       	lsr	r25
    2f46:	87 95       	ror	r24
    2f48:	3a 95       	dec	r19
    2f4a:	e1 f7       	brne	.-8      	; 0x2f44 <_receive_data+0x712>
    2f4c:	8f 71       	andi	r24, 0x1F	; 31
    2f4e:	82 2b       	or	r24, r18
    2f50:	80 93 06 36 	sts	0x3606, r24
                            rBuffer[6] = m_CAL_RSP_BYTE6_yn1g(_wYN1G_CAL);
    2f54:	90 91 ed 35 	lds	r25, 0x35ED
    2f58:	99 0f       	add	r25, r25
    2f5a:	99 0f       	add	r25, r25
    2f5c:	9c 77       	andi	r25, 0x7C	; 124
							rBuffer[6] |= m_CAL_RSP_BYTE6_z1g(_wZ1G_CAL);
    2f5e:	80 91 f4 35 	lds	r24, 0x35F4
    2f62:	83 70       	andi	r24, 0x03	; 3
    2f64:	89 2b       	or	r24, r25
    2f66:	80 93 07 36 	sts	0x3607, r24
                            rBuffer[7] =  m_CAL_RSP_BYTE7_z1g(_wZ1G_CAL);
    2f6a:	80 91 f3 35 	lds	r24, 0x35F3
    2f6e:	90 91 f4 35 	lds	r25, 0x35F4
    2f72:	96 95       	lsr	r25
    2f74:	87 95       	ror	r24
    2f76:	8f 77       	andi	r24, 0x7F	; 127
    2f78:	80 93 08 36 	sts	0x3608, r24
                            rBuffer[8] =  m_CAL_RSP_BYTE8_z1g(_wZ1G_CAL);
    2f7c:	20 91 f3 35 	lds	r18, 0x35F3
    2f80:	22 95       	swap	r18
    2f82:	22 0f       	add	r18, r18
    2f84:	22 0f       	add	r18, r18
    2f86:	20 74       	andi	r18, 0x40	; 64
							rBuffer[8] |= m_CAL_RSP_BYTE8_zn1g(_wZN1G_CAL);
    2f88:	80 91 f1 35 	lds	r24, 0x35F1
    2f8c:	90 91 f2 35 	lds	r25, 0x35F2
    2f90:	04 e0       	ldi	r16, 0x04	; 4
    2f92:	96 95       	lsr	r25
    2f94:	87 95       	ror	r24
    2f96:	0a 95       	dec	r16
    2f98:	e1 f7       	brne	.-8      	; 0x2f92 <_receive_data+0x760>
    2f9a:	8f 73       	andi	r24, 0x3F	; 63
    2f9c:	82 2b       	or	r24, r18
    2f9e:	80 93 09 36 	sts	0x3609, r24
                            rBuffer[9] =  m_CAL_RSP_BYTE9_zn1g(_wZN1G_CAL);
    2fa2:	80 91 f1 35 	lds	r24, 0x35F1
    2fa6:	71 c0       	rjmp	.+226    	; 0x308a <_receive_data+0x858>
							processed_counter=command_counter;
                            response_length=10;                                                                               
                            break;    
                    case (unsigned char) GET_BTCAL:    
							                                                              
							rBuffer[0]= m_BTCAL_RSP_BYTE0;
    2fa8:	89 ec       	ldi	r24, 0xC9	; 201
    2faa:	80 93 01 36 	sts	0x3601, r24
                            rBuffer[1]= m_BTCAL_RSP_BYTE1_100(_wBTCAL100);                                                                   
    2fae:	80 91 ef 35 	lds	r24, 0x35EF
    2fb2:	90 91 f0 35 	lds	r25, 0x35F0
    2fb6:	13 e0       	ldi	r17, 0x03	; 3
    2fb8:	96 95       	lsr	r25
    2fba:	87 95       	ror	r24
    2fbc:	1a 95       	dec	r17
    2fbe:	e1 f7       	brne	.-8      	; 0x2fb8 <_receive_data+0x786>
    2fc0:	8f 77       	andi	r24, 0x7F	; 127
    2fc2:	80 93 02 36 	sts	0x3602, r24
                            rBuffer[2]= m_BTCAL_RSP_BYTE2_100(_wBTCAL100);
    2fc6:	20 91 ef 35 	lds	r18, 0x35EF
    2fca:	22 95       	swap	r18
    2fcc:	20 77       	andi	r18, 0x70	; 112
							rBuffer[2]|= m_BTCAL_RSP_BYTE2_80(_wBTCAL80);
    2fce:	80 91 fd 35 	lds	r24, 0x35FD
    2fd2:	90 91 fe 35 	lds	r25, 0x35FE
    2fd6:	b6 e0       	ldi	r27, 0x06	; 6
    2fd8:	96 95       	lsr	r25
    2fda:	87 95       	ror	r24
    2fdc:	ba 95       	dec	r27
    2fde:	e1 f7       	brne	.-8      	; 0x2fd8 <_receive_data+0x7a6>
    2fe0:	8f 70       	andi	r24, 0x0F	; 15
    2fe2:	82 2b       	or	r24, r18
    2fe4:	80 93 03 36 	sts	0x3603, r24
                            rBuffer[3] = m_BTCAL_RSP_BYTE3_80(_wBTCAL80);
    2fe8:	90 91 fd 35 	lds	r25, 0x35FD
    2fec:	99 0f       	add	r25, r25
    2fee:	9e 77       	andi	r25, 0x7E	; 126
							rBuffer[3]|= m_BTCAL_RSP_BYTE3_60(_wBTCAL60);
    2ff0:	80 91 f8 35 	lds	r24, 0x35F8
    2ff4:	86 95       	lsr	r24
    2ff6:	81 70       	andi	r24, 0x01	; 1
    2ff8:	89 2b       	or	r24, r25
    2ffa:	80 93 04 36 	sts	0x3604, r24
                            rBuffer[4] = m_BTCAL_RSP_BYTE4_60(_wBTCAL60);
    2ffe:	80 91 f7 35 	lds	r24, 0x35F7
    3002:	90 91 f8 35 	lds	r25, 0x35F8
    3006:	96 95       	lsr	r25
    3008:	87 95       	ror	r24
    300a:	96 95       	lsr	r25
    300c:	87 95       	ror	r24
    300e:	8f 77       	andi	r24, 0x7F	; 127
    3010:	80 93 05 36 	sts	0x3605, r24
                            rBuffer[5] = m_BTCAL_RSP_BYTE5_60(_wBTCAL60);
    3014:	20 91 f7 35 	lds	r18, 0x35F7
    3018:	22 95       	swap	r18
    301a:	22 0f       	add	r18, r18
    301c:	20 76       	andi	r18, 0x60	; 96
                            rBuffer[5]|= m_BTCAL_RSP_BYTE5_40(_wBTCAL40);
    301e:	80 91 f5 35 	lds	r24, 0x35F5
    3022:	90 91 f6 35 	lds	r25, 0x35F6
    3026:	f5 e0       	ldi	r31, 0x05	; 5
    3028:	96 95       	lsr	r25
    302a:	87 95       	ror	r24
    302c:	fa 95       	dec	r31
    302e:	e1 f7       	brne	.-8      	; 0x3028 <_receive_data+0x7f6>
    3030:	8f 71       	andi	r24, 0x1F	; 31
    3032:	82 2b       	or	r24, r18
    3034:	80 93 06 36 	sts	0x3606, r24
                            rBuffer[6] = m_BTCAL_RSP_BYTE6_40(_wBTCAL40);
    3038:	90 91 f5 35 	lds	r25, 0x35F5
    303c:	99 0f       	add	r25, r25
    303e:	99 0f       	add	r25, r25
    3040:	9c 77       	andi	r25, 0x7C	; 124
							rBuffer[6] |= m_BTCAL_RSP_BYTE6_20(_wBTCAL20);
    3042:	80 91 ec 35 	lds	r24, 0x35EC
    3046:	83 70       	andi	r24, 0x03	; 3
    3048:	89 2b       	or	r24, r25
    304a:	80 93 07 36 	sts	0x3607, r24
                            rBuffer[7] =  m_BTCAL_RSP_BYTE7_20(_wBTCAL20);
    304e:	80 91 eb 35 	lds	r24, 0x35EB
    3052:	90 91 ec 35 	lds	r25, 0x35EC
    3056:	96 95       	lsr	r25
    3058:	87 95       	ror	r24
    305a:	8f 77       	andi	r24, 0x7F	; 127
    305c:	80 93 08 36 	sts	0x3608, r24
                            rBuffer[8] =  m_BTCAL_RSP_BYTE8_20(_wBTCAL20);
    3060:	20 91 eb 35 	lds	r18, 0x35EB
    3064:	22 95       	swap	r18
    3066:	22 0f       	add	r18, r18
    3068:	22 0f       	add	r18, r18
    306a:	20 74       	andi	r18, 0x40	; 64
							rBuffer[8] |= m_BTCAL_RSP_BYTE8_10(_wBTCAL10);
    306c:	80 91 fb 35 	lds	r24, 0x35FB
    3070:	90 91 fc 35 	lds	r25, 0x35FC
    3074:	74 e0       	ldi	r23, 0x04	; 4
    3076:	96 95       	lsr	r25
    3078:	87 95       	ror	r24
    307a:	7a 95       	dec	r23
    307c:	e1 f7       	brne	.-8      	; 0x3076 <_receive_data+0x844>
    307e:	8f 73       	andi	r24, 0x3F	; 63
    3080:	82 2b       	or	r24, r18
    3082:	80 93 09 36 	sts	0x3609, r24
                            rBuffer[9] =  m_BTCAL_RSP_BYTE9_10(_wBTCAL10);
    3086:	80 91 fb 35 	lds	r24, 0x35FB
    308a:	88 0f       	add	r24, r24
    308c:	88 0f       	add	r24, r24
    308e:	88 0f       	add	r24, r24
    3090:	88 77       	andi	r24, 0x78	; 120
    3092:	80 93 0a 36 	sts	0x360A, r24
							processed_counter=command_counter;
    3096:	60 93 3f 01 	sts	0x013F, r22
                            response_length=10;                                                                               
    309a:	8a e0       	ldi	r24, 0x0A	; 10
    309c:	07 c1       	rjmp	.+526    	; 0x32ac <_receive_data+0xa7a>
                            break;  
 					case (unsigned char) SET_BTCAL:
                            if (eeprom_is_ready())
    309e:	f9 99       	sbic	0x1f, 1	; 31
    30a0:	07 c1       	rjmp	.+526    	; 0x32b0 <_receive_data+0xa7e>
                            {
                                    //do nothing if battery is low
#ifdef _VERSION==3
                                    if (_atmega_a2dConvert10bit(ADC7)<600)
    30a2:	87 e0       	ldi	r24, 0x07	; 7
    30a4:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    30a8:	88 55       	subi	r24, 0x58	; 88
    30aa:	92 40       	sbci	r25, 0x02	; 2
    30ac:	08 f4       	brcc	.+2      	; 0x30b0 <_receive_data+0x87e>
    30ae:	00 c1       	rjmp	.+512    	; 0x32b0 <_receive_data+0xa7e>
                                    if (_atmega_a2dConvert10bit(ADC4)<600)
#endif
                                            break;
                                    else
                                    {   
										_wBTCAL100=m_SET_BTCAL_100(rBuffer[1],rBuffer[2]);
    30b0:	60 91 03 36 	lds	r22, 0x3603
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	60 77       	andi	r22, 0x70	; 112
    30b8:	70 70       	andi	r23, 0x00	; 0
    30ba:	54 e0       	ldi	r21, 0x04	; 4
    30bc:	76 95       	lsr	r23
    30be:	67 95       	ror	r22
    30c0:	5a 95       	dec	r21
    30c2:	e1 f7       	brne	.-8      	; 0x30bc <_receive_data+0x88a>
    30c4:	80 91 02 36 	lds	r24, 0x3602
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	8f 77       	andi	r24, 0x7F	; 127
    30cc:	90 70       	andi	r25, 0x00	; 0
    30ce:	43 e0       	ldi	r20, 0x03	; 3
    30d0:	88 0f       	add	r24, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	4a 95       	dec	r20
    30d6:	e1 f7       	brne	.-8      	; 0x30d0 <_receive_data+0x89e>
    30d8:	68 2b       	or	r22, r24
    30da:	79 2b       	or	r23, r25
    30dc:	70 93 f0 35 	sts	0x35F0, r23
    30e0:	60 93 ef 35 	sts	0x35EF, r22
										eeprom_write_word(&_NV_BTCAL100,_wBTCAL100);
    30e4:	88 e0       	ldi	r24, 0x08	; 8
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
										_wBTCAL80=m_SET_BTCAL_80(rBuffer[2],rBuffer[3]);
    30ec:	60 91 04 36 	lds	r22, 0x3604
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	6e 77       	andi	r22, 0x7E	; 126
    30f4:	70 70       	andi	r23, 0x00	; 0
    30f6:	76 95       	lsr	r23
    30f8:	67 95       	ror	r22
    30fa:	80 91 03 36 	lds	r24, 0x3603
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	8f 70       	andi	r24, 0x0F	; 15
    3102:	90 70       	andi	r25, 0x00	; 0
    3104:	26 e0       	ldi	r18, 0x06	; 6
    3106:	88 0f       	add	r24, r24
    3108:	99 1f       	adc	r25, r25
    310a:	2a 95       	dec	r18
    310c:	e1 f7       	brne	.-8      	; 0x3106 <_receive_data+0x8d4>
    310e:	68 2b       	or	r22, r24
    3110:	79 2b       	or	r23, r25
    3112:	70 93 fe 35 	sts	0x35FE, r23
    3116:	60 93 fd 35 	sts	0x35FD, r22
										eeprom_write_word(&_NV_BTCAL80,_wBTCAL80);
    311a:	8a e0       	ldi	r24, 0x0A	; 10
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
										_wBTCAL60=m_SET_BTCAL_60(rBuffer[3],rBuffer[4],rBuffer[5]);
    3122:	60 91 05 36 	lds	r22, 0x3605
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	6f 77       	andi	r22, 0x7F	; 127
    312a:	70 70       	andi	r23, 0x00	; 0
    312c:	66 0f       	add	r22, r22
    312e:	77 1f       	adc	r23, r23
    3130:	66 0f       	add	r22, r22
    3132:	77 1f       	adc	r23, r23
    3134:	80 91 04 36 	lds	r24, 0x3604
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	81 70       	andi	r24, 0x01	; 1
    313c:	90 70       	andi	r25, 0x00	; 0
    313e:	98 2f       	mov	r25, r24
    3140:	88 27       	eor	r24, r24
    3142:	99 0f       	add	r25, r25
    3144:	68 2b       	or	r22, r24
    3146:	79 2b       	or	r23, r25
    3148:	80 91 06 36 	lds	r24, 0x3606
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	80 76       	andi	r24, 0x60	; 96
    3150:	90 70       	andi	r25, 0x00	; 0
    3152:	15 e0       	ldi	r17, 0x05	; 5
    3154:	96 95       	lsr	r25
    3156:	87 95       	ror	r24
    3158:	1a 95       	dec	r17
    315a:	e1 f7       	brne	.-8      	; 0x3154 <_receive_data+0x922>
    315c:	68 2b       	or	r22, r24
    315e:	79 2b       	or	r23, r25
    3160:	70 93 f8 35 	sts	0x35F8, r23
    3164:	60 93 f7 35 	sts	0x35F7, r22
										eeprom_write_word(&_NV_BTCAL60,_wBTCAL60);
    3168:	8c e0       	ldi	r24, 0x0C	; 12
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
										_wBTCAL40= m_SET_BTCAL_40(rBuffer[5],rBuffer[6]);
    3170:	60 91 07 36 	lds	r22, 0x3607
    3174:	70 e0       	ldi	r23, 0x00	; 0
    3176:	6c 77       	andi	r22, 0x7C	; 124
    3178:	70 70       	andi	r23, 0x00	; 0
    317a:	76 95       	lsr	r23
    317c:	67 95       	ror	r22
    317e:	76 95       	lsr	r23
    3180:	67 95       	ror	r22
    3182:	80 91 06 36 	lds	r24, 0x3606
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	8f 71       	andi	r24, 0x1F	; 31
    318a:	90 70       	andi	r25, 0x00	; 0
    318c:	a5 e0       	ldi	r26, 0x05	; 5
    318e:	88 0f       	add	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	aa 95       	dec	r26
    3194:	e1 f7       	brne	.-8      	; 0x318e <_receive_data+0x95c>
    3196:	68 2b       	or	r22, r24
    3198:	79 2b       	or	r23, r25
    319a:	70 93 f6 35 	sts	0x35F6, r23
    319e:	60 93 f5 35 	sts	0x35F5, r22
										eeprom_write_word(&_NV_BTCAL40,_wBTCAL40);
    31a2:	8e e0       	ldi	r24, 0x0E	; 14
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
										_wBTCAL20= m_SET_BTCAL_20(rBuffer[6],rBuffer[7],rBuffer[8]);
    31aa:	60 91 08 36 	lds	r22, 0x3608
    31ae:	70 e0       	ldi	r23, 0x00	; 0
    31b0:	66 0f       	add	r22, r22
    31b2:	77 1f       	adc	r23, r23
    31b4:	70 70       	andi	r23, 0x00	; 0
    31b6:	80 91 07 36 	lds	r24, 0x3607
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	83 70       	andi	r24, 0x03	; 3
    31be:	90 70       	andi	r25, 0x00	; 0
    31c0:	98 2f       	mov	r25, r24
    31c2:	88 27       	eor	r24, r24
    31c4:	68 2b       	or	r22, r24
    31c6:	79 2b       	or	r23, r25
    31c8:	80 91 09 36 	lds	r24, 0x3609
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	80 74       	andi	r24, 0x40	; 64
    31d0:	90 70       	andi	r25, 0x00	; 0
    31d2:	56 e0       	ldi	r21, 0x06	; 6
    31d4:	96 95       	lsr	r25
    31d6:	87 95       	ror	r24
    31d8:	5a 95       	dec	r21
    31da:	e1 f7       	brne	.-8      	; 0x31d4 <_receive_data+0x9a2>
    31dc:	68 2b       	or	r22, r24
    31de:	79 2b       	or	r23, r25
    31e0:	70 93 ec 35 	sts	0x35EC, r23
    31e4:	60 93 eb 35 	sts	0x35EB, r22
										eeprom_write_word(&_NV_BTCAL20,_wBTCAL20);
    31e8:	80 e1       	ldi	r24, 0x10	; 16
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
										_wBTCAL10=m_SET_BTCAL_10(rBuffer[8],rBuffer[8]);
    31f0:	80 91 09 36 	lds	r24, 0x3609
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	bc 01       	movw	r22, r24
    31f8:	68 77       	andi	r22, 0x78	; 120
    31fa:	70 70       	andi	r23, 0x00	; 0
    31fc:	43 e0       	ldi	r20, 0x03	; 3
    31fe:	76 95       	lsr	r23
    3200:	67 95       	ror	r22
    3202:	4a 95       	dec	r20
    3204:	e1 f7       	brne	.-8      	; 0x31fe <_receive_data+0x9cc>
    3206:	8f 73       	andi	r24, 0x3F	; 63
    3208:	90 70       	andi	r25, 0x00	; 0
    320a:	34 e0       	ldi	r19, 0x04	; 4
    320c:	88 0f       	add	r24, r24
    320e:	99 1f       	adc	r25, r25
    3210:	3a 95       	dec	r19
    3212:	e1 f7       	brne	.-8      	; 0x320c <_receive_data+0x9da>
    3214:	68 2b       	or	r22, r24
    3216:	79 2b       	or	r23, r25
    3218:	70 93 fc 35 	sts	0x35FC, r23
    321c:	60 93 fb 35 	sts	0x35FB, r22
										eeprom_write_word(&_NV_BTCAL10,_wBTCAL10);
    3220:	82 e1       	ldi	r24, 0x12	; 18
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
    3228:	23 cc       	rjmp	.-1978   	; 0x2a70 <_receive_data+0x23e>
                                                                                                                                    
                            }                                                                                                                       
                            //enable global interrupts
                            break;	
	   				case (unsigned char) GET_HV:  
				   		rBuffer[0]=m_HV_RSP_BYTE0;
    322a:	8a ec       	ldi	r24, 0xCA	; 202
    322c:	80 93 01 36 	sts	0x3601, r24
                        rBuffer[1]=m_HV_RSP_BYTE1(_VERSION);
    3230:	83 e0       	ldi	r24, 0x03	; 3
    3232:	04 c0       	rjmp	.+8      	; 0x323c <_receive_data+0xa0a>
						processed_counter=command_counter;		
						response_length=2;
						break;				
					case (unsigned char) GET_FV:  
				   		rBuffer[0]=m_FV_RSP_BYTE0;
    3234:	8b ec       	ldi	r24, 0xCB	; 203
    3236:	80 93 01 36 	sts	0x3601, r24
                        rBuffer[1]=m_FV_RSP_BYTE1(_FVERSION);
    323a:	89 e0       	ldi	r24, 0x09	; 9
    323c:	80 93 02 36 	sts	0x3602, r24
						processed_counter=command_counter;
    3240:	60 93 3f 01 	sts	0x013F, r22
						response_length=2;
    3244:	82 e0       	ldi	r24, 0x02	; 2
    3246:	32 c0       	rjmp	.+100    	; 0x32ac <_receive_data+0xa7a>
						break;	
					case (unsigned char) GET_TCT:  
				      	rBuffer[0]=m_TCT_RSP_BYTE0;
    3248:	8e ec       	ldi	r24, 0xCE	; 206
    324a:	80 93 01 36 	sts	0x3601, r24
    					rBuffer[1]=m_TCT_RSP_BYTE1(_wTCNT2);
    324e:	80 91 50 01 	lds	r24, 0x0150
    3252:	28 2f       	mov	r18, r24
    3254:	26 95       	lsr	r18
    3256:	20 93 02 36 	sts	0x3602, r18
    					rBuffer[2]=m_TCT_RSP_BYTE2(_wTCNT2,_wTCNT2_reps);
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	81 70       	andi	r24, 0x01	; 1
    325e:	90 70       	andi	r25, 0x00	; 0
    3260:	26 e0       	ldi	r18, 0x06	; 6
    3262:	88 0f       	add	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	2a 95       	dec	r18
    3268:	e1 f7       	brne	.-8      	; 0x3262 <_receive_data+0xa30>
    326a:	20 91 07 01 	lds	r18, 0x0107
    326e:	42 2f       	mov	r20, r18
    3270:	46 95       	lsr	r20
    3272:	46 95       	lsr	r20
    3274:	48 2b       	or	r20, r24
    3276:	40 93 03 36 	sts	0x3603, r20
						rBuffer[3]=m_TCT_RSP_BYTE3(_wTCNT2_reps,_wTCNT2_last);
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	23 70       	andi	r18, 0x03	; 3
    327e:	30 70       	andi	r19, 0x00	; 0
    3280:	85 e0       	ldi	r24, 0x05	; 5
    3282:	22 0f       	add	r18, r18
    3284:	33 1f       	adc	r19, r19
    3286:	8a 95       	dec	r24
    3288:	e1 f7       	brne	.-8      	; 0x3282 <_receive_data+0xa50>
    328a:	90 91 51 01 	lds	r25, 0x0151
    328e:	89 2f       	mov	r24, r25
    3290:	86 95       	lsr	r24
    3292:	86 95       	lsr	r24
    3294:	86 95       	lsr	r24
    3296:	82 2b       	or	r24, r18
    3298:	80 93 04 36 	sts	0x3604, r24
						rBuffer[4]=m_TCT_RSP_BYTE4(_wTCNT2_last);
    329c:	97 70       	andi	r25, 0x07	; 7
    329e:	92 95       	swap	r25
    32a0:	90 7f       	andi	r25, 0xF0	; 240
    32a2:	90 93 05 36 	sts	0x3605, r25
						processed_counter=command_counter;				
    32a6:	60 93 3f 01 	sts	0x013F, r22
						response_length=5;
    32aa:	85 e0       	ldi	r24, 0x05	; 5
    32ac:	80 93 40 01 	sts	0x0140, r24
                    default:        
                            break;

            }

            if (processed_counter==command_counter)
    32b0:	90 91 3f 01 	lds	r25, 0x013F
    32b4:	80 91 3b 01 	lds	r24, 0x013B
    32b8:	98 17       	cp	r25, r24
    32ba:	59 f5       	brne	.+86     	; 0x3312 <_receive_data+0xae0>
    32bc:	00 e0       	ldi	r16, 0x00	; 0
    32be:	10 e0       	ldi	r17, 0x00	; 0
    32c0:	08 c0       	rjmp	.+16     	; 0x32d2 <_receive_data+0xaa0>
			{                                        
                            
                    for (int i=0;(i<response_length);i++)                                                                                       
                     	_bluetooth_transmit_uart0_byte(rBuffer[i]);                                                                                                                                                   
    32c2:	f8 01       	movw	r30, r16
    32c4:	ef 5f       	subi	r30, 0xFF	; 255
    32c6:	f9 4c       	sbci	r31, 0xC9	; 201
    32c8:	80 81       	ld	r24, Z
    32ca:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
            }

            if (processed_counter==command_counter)
			{                                        
                            
                    for (int i=0;(i<response_length);i++)                                                                                       
    32ce:	0f 5f       	subi	r16, 0xFF	; 255
    32d0:	1f 4f       	sbci	r17, 0xFF	; 255
    32d2:	80 91 40 01 	lds	r24, 0x0140
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	08 17       	cp	r16, r24
    32da:	19 07       	cpc	r17, r25
    32dc:	94 f3       	brlt	.-28     	; 0x32c2 <_receive_data+0xa90>
    32de:	07 c0       	rjmp	.+14     	; 0x32ee <_receive_data+0xabc>
                    address=0xffff;
                    response_length=0;
                    
            }
    } //if command timed out
    else if ((command_timer>=MAX_COMMAND_TIMER))
    32e0:	80 91 3d 01 	lds	r24, 0x013D
    32e4:	90 91 3e 01 	lds	r25, 0x013E
    32e8:	8f 3f       	cpi	r24, 0xFF	; 255
    32ea:	91 05       	cpc	r25, r1
    32ec:	90 f0       	brcs	.+36     	; 0x3312 <_receive_data+0xae0>
    {                            
            command_length=0;
    32ee:	10 92 3c 01 	sts	0x013C, r1
            command_counter=0;
    32f2:	10 92 3b 01 	sts	0x013B, r1
            command_timer=0;
    32f6:	10 92 3e 01 	sts	0x013E, r1
    32fa:	10 92 3d 01 	sts	0x013D, r1
            processed_counter=0;                            
    32fe:	10 92 3f 01 	sts	0x013F, r1
            address=0xffff;
    3302:	8f ef       	ldi	r24, 0xFF	; 255
    3304:	9f ef       	ldi	r25, 0xFF	; 255
    3306:	90 93 05 01 	sts	0x0105, r25
    330a:	80 93 04 01 	sts	0x0104, r24
            response_length=0;
    330e:	10 92 40 01 	sts	0x0140, r1

    }

}
    3312:	0f 90       	pop	r0
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	08 95       	ret

00003322 <_send_tm>:
}

void _send_tm()
{
 
	aBuffer[0]=m_TM_RSP_BYTE0;
    3322:	88 ec       	ldi	r24, 0xC8	; 200
    3324:	80 93 0b 36 	sts	0x360B, r24
    aBuffer[1]=m_TM_RSP_BYTE1(_wTM);
    3328:	80 91 52 01 	lds	r24, 0x0152
    332c:	87 70       	andi	r24, 0x07	; 7
    332e:	82 95       	swap	r24
    3330:	80 7f       	andi	r24, 0xF0	; 240
    3332:	80 93 0c 36 	sts	0x360C, r24
	for (int i=0;(i<2);i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
    3336:	88 ec       	ldi	r24, 0xC8	; 200
    3338:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    333c:	80 91 0c 36 	lds	r24, 0x360C
    3340:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
 
}
    3344:	08 95       	ret

00003346 <_send_sr>:
}*/

void _send_sr()
{
 
	aBuffer[0]=m_SR_RSP_BYTE0;
    3346:	85 ec       	ldi	r24, 0xC5	; 197
    3348:	80 93 0b 36 	sts	0x360B, r24
    aBuffer[1]=m_SR_RSP_BYTE1(_SAMPLING_RATE);
    334c:	80 91 06 01 	lds	r24, 0x0106
    3350:	8f 77       	andi	r24, 0x7F	; 127
    3352:	80 93 0c 36 	sts	0x360C, r24
	for (int i=0;(i<2);i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
    3356:	85 ec       	ldi	r24, 0xC5	; 197
    3358:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    335c:	80 91 0c 36 	lds	r24, 0x360C
    3360:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
 
}
    3364:	08 95       	ret

00003366 <_send_fv>:
}

void _send_fv()
{

    aBuffer[0]=m_FV_RSP_BYTE0;
    3366:	8b ec       	ldi	r24, 0xCB	; 203
    3368:	80 93 0b 36 	sts	0x360B, r24
    aBuffer[1]= m_FV_RSP_BYTE1(_VERSION);    
    336c:	83 e0       	ldi	r24, 0x03	; 3
    336e:	80 93 0c 36 	sts	0x360C, r24
	for (int i=0;(i<2);i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
    3372:	8b ec       	ldi	r24, 0xCB	; 203
    3374:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    3378:	80 91 0c 36 	lds	r24, 0x360C
    337c:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
}
    3380:	08 95       	ret

00003382 <_send_ac_offset>:


void _send_ac_offset(unsigned short offset)
{
 
    aBuffer[0]=m_OFT_RSP_BYTE0;
    3382:	20 ed       	ldi	r18, 0xD0	; 208
    3384:	20 93 0b 36 	sts	0x360B, r18
    aBuffer[1]=m_OFT_RSP_BYTE1(offset);
    3388:	9c 01       	movw	r18, r24
    338a:	22 0f       	add	r18, r18
    338c:	23 2f       	mov	r18, r19
    338e:	22 1f       	adc	r18, r18
    3390:	33 0b       	sbc	r19, r19
    3392:	31 95       	neg	r19
    3394:	2f 77       	andi	r18, 0x7F	; 127
    3396:	20 93 0c 36 	sts	0x360C, r18
    aBuffer[2]=m_OFT_RSP_BYTE2(offset);
    339a:	8f 77       	andi	r24, 0x7F	; 127
    339c:	80 93 0d 36 	sts	0x360D, r24
	for (int i=0;(i<3);i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
    33a0:	80 ed       	ldi	r24, 0xD0	; 208
    33a2:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    33a6:	80 91 0c 36 	lds	r24, 0x360C
    33aa:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    33ae:	80 91 0d 36 	lds	r24, 0x360D
    33b2:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
 
}
    33b6:	08 95       	ret

000033b8 <_send_ac_count>:
}

void _send_ac_count(unsigned short count)
{
 
    aBuffer[0]=m_ACC_RSP_BYTE0;
    33b8:	2f ec       	ldi	r18, 0xCF	; 207
    33ba:	20 93 0b 36 	sts	0x360B, r18
    aBuffer[1]=m_ACC_RSP_BYTE1(count);
    33be:	9c 01       	movw	r18, r24
    33c0:	22 0f       	add	r18, r18
    33c2:	23 2f       	mov	r18, r19
    33c4:	22 1f       	adc	r18, r18
    33c6:	33 0b       	sbc	r19, r19
    33c8:	31 95       	neg	r19
    33ca:	2f 77       	andi	r18, 0x7F	; 127
    33cc:	20 93 0c 36 	sts	0x360C, r18
    aBuffer[2]=m_ACC_RSP_BYTE2(count);
    33d0:	8f 77       	andi	r24, 0x7F	; 127
    33d2:	80 93 0d 36 	sts	0x360D, r24
	for (int i=0;(i<3);i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
    33d6:	8f ec       	ldi	r24, 0xCF	; 207
    33d8:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    33dc:	80 91 0c 36 	lds	r24, 0x360C
    33e0:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    33e4:	80 91 0d 36 	lds	r24, 0x360D
    33e8:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
 
}
    33ec:	08 95       	ret

000033ee <_send_acs>:
    aBuffer[1]= m_FV_RSP_BYTE1(_VERSION);    
	for (int i=0;(i<2);i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
}
void _send_acs()
{
    33ee:	cf 92       	push	r12
    33f0:	df 92       	push	r13
    33f2:	ef 92       	push	r14
    33f4:	ff 92       	push	r15
    33f6:	0f 93       	push	r16
    33f8:	1f 93       	push	r17
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
	unsigned short count=0;
	unsigned short seq_num=sseq;
    33fe:	00 91 12 01 	lds	r16, 0x0112
    3402:	10 91 13 01 	lds	r17, 0x0113
	unsigned short num_acs=0;
	unsigned char counter=0;


	if (ci>si)
    3406:	20 91 18 01 	lds	r18, 0x0118
    340a:	30 91 19 01 	lds	r19, 0x0119
    340e:	80 91 1a 01 	lds	r24, 0x011A
    3412:	90 91 1b 01 	lds	r25, 0x011B
    3416:	82 17       	cp	r24, r18
    3418:	93 07       	cpc	r25, r19
    341a:	10 f4       	brcc	.+4      	; 0x3420 <_send_acs+0x32>
		num_acs=ci-si;
    341c:	79 01       	movw	r14, r18
    341e:	06 c0       	rjmp	.+12     	; 0x342c <_send_acs+0x3e>
	else
		num_acs=ci+(AC_BUFFER_SIZE-si);
    3420:	f0 ec       	ldi	r31, 0xC0	; 192
    3422:	ef 2e       	mov	r14, r31
    3424:	f3 e0       	ldi	r31, 0x03	; 3
    3426:	ff 2e       	mov	r15, r31
    3428:	e2 0e       	add	r14, r18
    342a:	f3 1e       	adc	r15, r19
    342c:	e8 1a       	sub	r14, r24
    342e:	f9 0a       	sbc	r15, r25

	//if (num_acs>10)
	//	num_acs=10;

//	_send_ac_count(num_acs);
	_send_ac_offset(AC_NUMS-summary_count); //send offset of the last activity count
    3430:	80 91 0c 01 	lds	r24, 0x010C
    3434:	90 91 0d 01 	lds	r25, 0x010D
    3438:	20 91 00 01 	lds	r18, 0x0100
    343c:	30 91 01 01 	lds	r19, 0x0101
    3440:	82 1b       	sub	r24, r18
    3442:	93 0b       	sbc	r25, r19
    3444:	0e 94 c1 19 	call	0x3382	; 0x3382 <_send_ac_offset>
	_send_ac_count(cseq);	
    3448:	80 91 10 01 	lds	r24, 0x0110
    344c:	90 91 11 01 	lds	r25, 0x0111
    3450:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <_send_ac_count>
	for (int i=si;(i!=ci);)
    3454:	c0 91 1a 01 	lds	r28, 0x011A
    3458:	d0 91 1b 01 	lds	r29, 0x011B
    345c:	dd 24       	eor	r13, r13
	{		
		count=acount[i];
		aBuffer[0]=m_AC_RSP_BYTE0;
    345e:	ed ec       	ldi	r30, 0xCD	; 205
    3460:	ce 2e       	mov	r12, r30
    3462:	57 c0       	rjmp	.+174    	; 0x3512 <_send_acs+0x124>
//	_send_ac_count(num_acs);
	_send_ac_offset(AC_NUMS-summary_count); //send offset of the last activity count
	_send_ac_count(cseq);	
	for (int i=si;(i!=ci);)
	{		
		count=acount[i];
    3464:	fe 01       	movw	r30, r28
    3466:	ee 0f       	add	r30, r30
    3468:	ff 1f       	adc	r31, r31
    346a:	ed 59       	subi	r30, 0x9D	; 157
    346c:	fe 4f       	sbci	r31, 0xFE	; 254
    346e:	20 81       	ld	r18, Z
    3470:	31 81       	ldd	r19, Z+1	; 0x01
		aBuffer[0]=m_AC_RSP_BYTE0;
    3472:	c0 92 0b 36 	sts	0x360B, r12
    	aBuffer[1]=m_AC_RSP_BYTE1(seq_num);
    3476:	81 2f       	mov	r24, r17
    3478:	86 95       	lsr	r24
    347a:	80 93 0c 36 	sts	0x360C, r24
    	aBuffer[2]=m_AC_RSP_BYTE2(seq_num);
    347e:	c8 01       	movw	r24, r16
    3480:	96 95       	lsr	r25
    3482:	87 95       	ror	r24
    3484:	96 95       	lsr	r25
    3486:	87 95       	ror	r24
    3488:	8f 77       	andi	r24, 0x7F	; 127
    348a:	80 93 0d 36 	sts	0x360D, r24
		aBuffer[3]=m_AC_RSP_BYTE3(seq_num,count);
    348e:	80 2f       	mov	r24, r16
    3490:	83 70       	andi	r24, 0x03	; 3
    3492:	82 95       	swap	r24
    3494:	88 0f       	add	r24, r24
    3496:	80 7e       	andi	r24, 0xE0	; 224
    3498:	93 2f       	mov	r25, r19
    349a:	96 95       	lsr	r25
    349c:	96 95       	lsr	r25
    349e:	96 95       	lsr	r25
    34a0:	89 2b       	or	r24, r25
    34a2:	80 93 0e 36 	sts	0x360E, r24
		aBuffer[4]=m_AC_RSP_BYTE4(count);
    34a6:	c9 01       	movw	r24, r18
    34a8:	54 e0       	ldi	r21, 0x04	; 4
    34aa:	96 95       	lsr	r25
    34ac:	87 95       	ror	r24
    34ae:	5a 95       	dec	r21
    34b0:	e1 f7       	brne	.-8      	; 0x34aa <_send_acs+0xbc>
    34b2:	8f 77       	andi	r24, 0x7F	; 127
    34b4:	80 93 0f 36 	sts	0x360F, r24
		aBuffer[5]=m_AC_RSP_BYTE5(count);
    34b8:	2f 70       	andi	r18, 0x0F	; 15
    34ba:	22 0f       	add	r18, r18
    34bc:	22 0f       	add	r18, r18
    34be:	20 93 10 36 	sts	0x3610, r18
		for (int j=0;(j<6);j++)                                                                                       
       		_bluetooth_transmit_uart0_byte(aBuffer[j]); 
    34c2:	8d ec       	ldi	r24, 0xCD	; 205
    34c4:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    34c8:	80 91 0c 36 	lds	r24, 0x360C
    34cc:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    34d0:	80 91 0d 36 	lds	r24, 0x360D
    34d4:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    34d8:	80 91 0e 36 	lds	r24, 0x360E
    34dc:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    34e0:	80 91 0f 36 	lds	r24, 0x360F
    34e4:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    34e8:	80 91 10 36 	lds	r24, 0x3610
    34ec:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
		i++;
    34f0:	21 96       	adiw	r28, 0x01	; 1
		if (i==AC_BUFFER_SIZE)
    34f2:	83 e0       	ldi	r24, 0x03	; 3
    34f4:	c0 3c       	cpi	r28, 0xC0	; 192
    34f6:	d8 07       	cpc	r29, r24
    34f8:	11 f4       	brne	.+4      	; 0x34fe <_send_acs+0x110>
    34fa:	c0 e0       	ldi	r28, 0x00	; 0
    34fc:	d0 e0       	ldi	r29, 0x00	; 0
			i=0;
		seq_num++;

		if (num_acs<60){
    34fe:	8c e3       	ldi	r24, 0x3C	; 60
    3500:	e8 16       	cp	r14, r24
    3502:	f1 04       	cpc	r15, r1
    3504:	20 f4       	brcc	.+8      	; 0x350e <_send_acs+0x120>
			counter++;
    3506:	d3 94       	inc	r13
			if (counter==10)
    3508:	8a e0       	ldi	r24, 0x0A	; 10
    350a:	d8 16       	cp	r13, r24
    350c:	51 f0       	breq	.+20     	; 0x3522 <_send_acs+0x134>
		for (int j=0;(j<6);j++)                                                                                       
       		_bluetooth_transmit_uart0_byte(aBuffer[j]); 
		i++;
		if (i==AC_BUFFER_SIZE)
			i=0;
		seq_num++;
    350e:	0f 5f       	subi	r16, 0xFF	; 255
    3510:	1f 4f       	sbci	r17, 0xFF	; 255
	//	num_acs=10;

//	_send_ac_count(num_acs);
	_send_ac_offset(AC_NUMS-summary_count); //send offset of the last activity count
	_send_ac_count(cseq);	
	for (int i=si;(i!=ci);)
    3512:	80 91 18 01 	lds	r24, 0x0118
    3516:	90 91 19 01 	lds	r25, 0x0119
    351a:	c8 17       	cp	r28, r24
    351c:	d9 07       	cpc	r29, r25
    351e:	09 f0       	breq	.+2      	; 0x3522 <_send_acs+0x134>
    3520:	a1 cf       	rjmp	.-190    	; 0x3464 <_send_acs+0x76>
			counter++;
			if (counter==10)
				return;
		}
	}
}
    3522:	df 91       	pop	r29
    3524:	cf 91       	pop	r28
    3526:	1f 91       	pop	r17
    3528:	0f 91       	pop	r16
    352a:	ff 90       	pop	r15
    352c:	ef 90       	pop	r14
    352e:	df 90       	pop	r13
    3530:	cf 90       	pop	r12
    3532:	08 95       	ret

00003534 <_send_batch_count>:
}

void _send_batch_count(unsigned short count)
{
 
    aBuffer[0]=m_BC_RSP_BYTE0;
    3534:	2c ec       	ldi	r18, 0xCC	; 204
    3536:	20 93 0b 36 	sts	0x360B, r18
    aBuffer[1]=m_BC_RSP_BYTE1(count);
    353a:	9c 01       	movw	r18, r24
    353c:	22 0f       	add	r18, r18
    353e:	23 2f       	mov	r18, r19
    3540:	22 1f       	adc	r18, r18
    3542:	33 0b       	sbc	r19, r19
    3544:	31 95       	neg	r19
    3546:	2f 77       	andi	r18, 0x7F	; 127
    3548:	20 93 0c 36 	sts	0x360C, r18
    aBuffer[2]=m_BC_RSP_BYTE2(count);
    354c:	8f 77       	andi	r24, 0x7F	; 127
    354e:	80 93 0d 36 	sts	0x360D, r24
	for (int i=0;(i<3);i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
    3552:	8c ec       	ldi	r24, 0xCC	; 204
    3554:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    3558:	80 91 0c 36 	lds	r24, 0x360C
    355c:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
    3560:	80 91 0d 36 	lds	r24, 0x360D
    3564:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
 
}
    3568:	08 95       	ret

0000356a <_send_compressed_pdu>:
	_bluetooth_transmit_uart0_byte(aBuffer[4]);
}


void _send_compressed_pdu(unsigned char x, unsigned char y, unsigned char z)
{
    356a:	ff 92       	push	r15
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	df 93       	push	r29
    3572:	cf 93       	push	r28
    3574:	0f 92       	push	r0
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
    357a:	08 2f       	mov	r16, r24
    357c:	f4 2e       	mov	r15, r20
	aBuffer[0] =0xe0| ((x>>1)& 0x1f);
    357e:	86 95       	lsr	r24
    3580:	80 6e       	ori	r24, 0xE0	; 224
    3582:	80 93 0b 36 	sts	0x360B, r24
	_bluetooth_transmit_uart0_byte(aBuffer[0]);
    3586:	69 83       	std	Y+1, r22	; 0x01
    3588:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
	aBuffer[1] = ((x & 0x01)<<6) | (y & 0x3f);
    358c:	10 e0       	ldi	r17, 0x00	; 0
    358e:	01 70       	andi	r16, 0x01	; 1
    3590:	10 70       	andi	r17, 0x00	; 0
    3592:	b6 e0       	ldi	r27, 0x06	; 6
    3594:	00 0f       	add	r16, r16
    3596:	11 1f       	adc	r17, r17
    3598:	ba 95       	dec	r27
    359a:	e1 f7       	brne	.-8      	; 0x3594 <_send_compressed_pdu+0x2a>
    359c:	99 81       	ldd	r25, Y+1	; 0x01
    359e:	9f 73       	andi	r25, 0x3F	; 63
    35a0:	90 2b       	or	r25, r16
    35a2:	90 93 0c 36 	sts	0x360C, r25
	_bluetooth_transmit_uart0_byte(aBuffer[1]);
    35a6:	89 2f       	mov	r24, r25
    35a8:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
	aBuffer[2] =  (z<<1);
    35ac:	ff 0c       	add	r15, r15
    35ae:	f0 92 0d 36 	sts	0x360D, r15
	_bluetooth_transmit_uart0_byte(aBuffer[2]);	
    35b2:	8f 2d       	mov	r24, r15
    35b4:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
}
    35b8:	0f 90       	pop	r0
    35ba:	cf 91       	pop	r28
    35bc:	df 91       	pop	r29
    35be:	1f 91       	pop	r17
    35c0:	0f 91       	pop	r16
    35c2:	ff 90       	pop	r15
    35c4:	08 95       	ret

000035c6 <_send_uncompressed_pdu>:
	_bluetooth_transmit_uart0_byte(packet.byte5);
	
}
*/
void _send_uncompressed_pdu(unsigned short x, unsigned short y, unsigned short z)
{
    35c6:	cf 92       	push	r12
    35c8:	df 92       	push	r13
    35ca:	ef 92       	push	r14
    35cc:	ff 92       	push	r15
    35ce:	0f 93       	push	r16
    35d0:	1f 93       	push	r17
    35d2:	8c 01       	movw	r16, r24
    35d4:	7b 01       	movw	r14, r22
    35d6:	6a 01       	movw	r12, r20
	aBuffer[0] =0x80| ((x>>8)& 0x03);
    35d8:	81 2f       	mov	r24, r17
    35da:	83 70       	andi	r24, 0x03	; 3
    35dc:	80 68       	ori	r24, 0x80	; 128
    35de:	80 93 0b 36 	sts	0x360B, r24
	_bluetooth_transmit_uart0_byte(aBuffer[0]);
    35e2:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
	aBuffer[1] = ((unsigned char) ((x>>1)&0x7f));
    35e6:	c8 01       	movw	r24, r16
    35e8:	96 95       	lsr	r25
    35ea:	87 95       	ror	r24
    35ec:	8f 77       	andi	r24, 0x7F	; 127
    35ee:	80 93 0c 36 	sts	0x360C, r24
	_bluetooth_transmit_uart0_byte(aBuffer[1]);
    35f2:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
	aBuffer[2] = ((unsigned char) ((x<<6) &0x40)) | ((unsigned char) ((y>>4)&0x3f));
    35f6:	c7 01       	movw	r24, r14
    35f8:	24 e0       	ldi	r18, 0x04	; 4
    35fa:	96 95       	lsr	r25
    35fc:	87 95       	ror	r24
    35fe:	2a 95       	dec	r18
    3600:	e1 f7       	brne	.-8      	; 0x35fa <_send_uncompressed_pdu+0x34>
    3602:	8f 73       	andi	r24, 0x3F	; 63
    3604:	02 95       	swap	r16
    3606:	00 0f       	add	r16, r16
    3608:	00 0f       	add	r16, r16
    360a:	00 74       	andi	r16, 0x40	; 64
    360c:	80 2b       	or	r24, r16
    360e:	80 93 0d 36 	sts	0x360D, r24
	_bluetooth_transmit_uart0_byte(aBuffer[2]);
    3612:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
	aBuffer[3] = ((unsigned char) ((y<<3) &0x78)) | ((unsigned char) ((z>>7)&0x07));
    3616:	c6 01       	movw	r24, r12
    3618:	88 0f       	add	r24, r24
    361a:	89 2f       	mov	r24, r25
    361c:	88 1f       	adc	r24, r24
    361e:	99 0b       	sbc	r25, r25
    3620:	91 95       	neg	r25
    3622:	87 70       	andi	r24, 0x07	; 7
    3624:	ee 0c       	add	r14, r14
    3626:	ee 0c       	add	r14, r14
    3628:	ee 0c       	add	r14, r14
    362a:	98 e7       	ldi	r25, 0x78	; 120
    362c:	e9 22       	and	r14, r25
    362e:	8e 29       	or	r24, r14
    3630:	80 93 0e 36 	sts	0x360E, r24
	_bluetooth_transmit_uart0_byte(aBuffer[3]);
    3634:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
	aBuffer[4] = ((unsigned char) (z&0x7f));
    3638:	8f e7       	ldi	r24, 0x7F	; 127
    363a:	c8 22       	and	r12, r24
    363c:	c0 92 0f 36 	sts	0x360F, r12
	_bluetooth_transmit_uart0_byte(aBuffer[4]);
    3640:	8c 2d       	mov	r24, r12
    3642:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_bluetooth_transmit_uart0_byte>
}
    3646:	1f 91       	pop	r17
    3648:	0f 91       	pop	r16
    364a:	ff 90       	pop	r15
    364c:	ef 90       	pop	r14
    364e:	df 90       	pop	r13
    3650:	cf 90       	pop	r12
    3652:	08 95       	ret

00003654 <_send_data>:



void _send_data(void)
{	
	if (paused==0)
    3654:	80 91 41 01 	lds	r24, 0x0141
    3658:	88 23       	and	r24, r24
    365a:	39 f5       	brne	.+78     	; 0x36aa <_send_data+0x56>
	{		
 		alive_timer++;                                  
    365c:	80 91 42 01 	lds	r24, 0x0142
    3660:	90 91 43 01 	lds	r25, 0x0143
    3664:	01 96       	adiw	r24, 0x01	; 1
    3666:	90 93 43 01 	sts	0x0143, r25
    366a:	80 93 42 01 	sts	0x0142, r24
        if (alive_timer>=2730) //if no acks for approx 30 seconds, reset radio
    366e:	8a 5a       	subi	r24, 0xAA	; 170
    3670:	9a 40       	sbci	r25, 0x0A	; 10
    3672:	30 f0       	brcs	.+12     	; 0x3680 <_send_data+0x2c>
        {
           //	_atmega_reset();
		   _bluetooth_reset();
    3674:	0e 94 47 22 	call	0x448e	; 0x448e <_bluetooth_reset>
           	alive_timer=0;                                  
    3678:	10 92 43 01 	sts	0x0143, r1
    367c:	10 92 42 01 	sts	0x0142, r1
        }
#ifdef _VERSION==3
		x=_atmega_a2dConvert10bit(ADC2);
    3680:	82 e0       	ldi	r24, 0x02	; 2
    3682:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    3686:	90 93 47 01 	sts	0x0147, r25
    368a:	80 93 46 01 	sts	0x0146, r24
		y=_atmega_a2dConvert10bit(ADC1);
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    3694:	90 93 49 01 	sts	0x0149, r25
    3698:	80 93 48 01 	sts	0x0148, r24
		z=_atmega_a2dConvert10bit(ADC0);
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    36a2:	90 93 4b 01 	sts	0x014B, r25
    36a6:	80 93 4a 01 	sts	0x014A, r24
    36aa:	08 95       	ret

000036ac <_send_data_bufferred>:


void _send_data_bufferred(void)
{
	
		if (paused==0)
    36ac:	80 91 41 01 	lds	r24, 0x0141
    36b0:	88 23       	and	r24, r24
    36b2:	29 f5       	brne	.+74     	; 0x36fe <_send_data_bufferred+0x52>
		{
 			alive_timer++;                                  
    36b4:	80 91 42 01 	lds	r24, 0x0142
    36b8:	90 91 43 01 	lds	r25, 0x0143
    36bc:	01 96       	adiw	r24, 0x01	; 1
    36be:	90 93 43 01 	sts	0x0143, r25
    36c2:	80 93 42 01 	sts	0x0142, r24
            if (alive_timer>=2730) //if no acks for approx 30 seconds, reset radio
    36c6:	8a 5a       	subi	r24, 0xAA	; 170
    36c8:	9a 40       	sbci	r25, 0x0A	; 10
    36ca:	30 f0       	brcs	.+12     	; 0x36d8 <_send_data_bufferred+0x2c>
            {
            	//_atmega_reset();
				_bluetooth_reset();
    36cc:	0e 94 47 22 	call	0x448e	; 0x448e <_bluetooth_reset>
            	alive_timer=0;                                  
    36d0:	10 92 43 01 	sts	0x0143, r1
    36d4:	10 92 42 01 	sts	0x0142, r1
					mycounter=0;
			/*	if ((i==2400))
					for (int j=0;(j<100);j++)
						_delay_ms(5);*/
				}
			if (x>1023)
    36d8:	80 91 46 01 	lds	r24, 0x0146
    36dc:	90 91 47 01 	lds	r25, 0x0147
    36e0:	80 50       	subi	r24, 0x00	; 0
    36e2:	94 40       	sbci	r25, 0x04	; 4
    36e4:	60 f0       	brcs	.+24     	; 0x36fe <_send_data_bufferred+0x52>
			{
				x=0;
    36e6:	10 92 47 01 	sts	0x0147, r1
    36ea:	10 92 46 01 	sts	0x0146, r1
				y=0;
    36ee:	10 92 49 01 	sts	0x0149, r1
    36f2:	10 92 48 01 	sts	0x0148, r1
				z=0;
    36f6:	10 92 4b 01 	sts	0x014B, r1
    36fa:	10 92 4a 01 	sts	0x014A, r1
    36fe:	08 95       	ret

00003700 <_wocket_initialize>:
	
	Description: This function initializes the wocket
	
*/
void _wocket_initialize(void)
{
    3700:	ef 92       	push	r14
    3702:	ff 92       	push	r15
    3704:	0f 93       	push	r16
    3706:	1f 93       	push	r17
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
	

	// Disable the watchdog timer. It has to be done at the beginning of the program.
	_atmega_disable_watchdog();
    370c:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <_atmega_disable_watchdog>
	_atmega_initialize(CPU_CLK_PRESCALAR_1024);
    3710:	86 e0       	ldi	r24, 0x06	; 6
    3712:	0e 94 9c 22 	call	0x4538	; 0x4538 <_atmega_initialize>
	num_skipped_timer_interrupts=10;//(F_CPU/1024)/PERFECT_SAMPLING_FREQUENCY;
    3716:	8a e0       	ldi	r24, 0x0A	; 10
    3718:	80 93 e6 35 	sts	0x35E6, r24


	/* Blink yellow for 5 seconds if battery not fully charged */
	unsigned short battery=_atmega_a2dConvert10bit(IN_VSENSE_BAT);
    371c:	87 e0       	ldi	r24, 0x07	; 7
    371e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <_atmega_a2dConvert10bit>
    3722:	8c 01       	movw	r16, r24
	if (battery<700)
    3724:	42 e0       	ldi	r20, 0x02	; 2
    3726:	8c 3b       	cpi	r24, 0xBC	; 188
    3728:	94 07       	cpc	r25, r20
    372a:	18 f5       	brcc	.+70     	; 0x3772 <_wocket_initialize+0x72>
    372c:	c0 e0       	ldi	r28, 0x00	; 0
    372e:	d0 e0       	ldi	r29, 0x00	; 0
    3730:	40 e1       	ldi	r20, 0x10	; 16
    3732:	e4 2e       	mov	r14, r20
    3734:	47 e2       	ldi	r20, 0x27	; 39
    3736:	f4 2e       	mov	r15, r20
	{
		for (int i=0;(i<3);i++){
			_yellowled_turn_on();		
    3738:	0e 94 03 23 	call	0x4606	; 0x4606 <_yellowled_turn_on>
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	f7 01       	movw	r30, r14
    3742:	31 97       	sbiw	r30, 0x01	; 1
    3744:	f1 f7       	brne	.-4      	; 0x3742 <_wocket_initialize+0x42>
			for(int j=0;(j<200);j++)
    3746:	01 96       	adiw	r24, 0x01	; 1
    3748:	88 3c       	cpi	r24, 0xC8	; 200
    374a:	91 05       	cpc	r25, r1
    374c:	c9 f7       	brne	.-14     	; 0x3740 <_wocket_initialize+0x40>
				_delay_ms(5);
			_yellowled_turn_off();
    374e:	0e 94 0b 23 	call	0x4616	; 0x4616 <_yellowled_turn_off>
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	f7 01       	movw	r30, r14
    3758:	31 97       	sbiw	r30, 0x01	; 1
    375a:	f1 f7       	brne	.-4      	; 0x3758 <_wocket_initialize+0x58>
			for(int j=0;(j<200);j++)
    375c:	01 96       	adiw	r24, 0x01	; 1
    375e:	88 3c       	cpi	r24, 0xC8	; 200
    3760:	91 05       	cpc	r25, r1
    3762:	c9 f7       	brne	.-14     	; 0x3756 <_wocket_initialize+0x56>

	/* Blink yellow for 5 seconds if battery not fully charged */
	unsigned short battery=_atmega_a2dConvert10bit(IN_VSENSE_BAT);
	if (battery<700)
	{
		for (int i=0;(i<3);i++){
    3764:	21 96       	adiw	r28, 0x01	; 1
    3766:	c3 30       	cpi	r28, 0x03	; 3
    3768:	d1 05       	cpc	r29, r1
    376a:	31 f7       	brne	.-52     	; 0x3738 <_wocket_initialize+0x38>
		}
	}

	/* Load the status byte from the EEPROM if it fails turn on the yellow led for 5 seconds then 
	   shutdown */
	if (battery>100)
    376c:	05 36       	cpi	r16, 0x65	; 101
    376e:	11 05       	cpc	r17, r1
    3770:	50 f0       	brcs	.+20     	; 0x3786 <_wocket_initialize+0x86>
	{
		_INITIALIZED=eeprom_read_byte(&_NV_INITIALIZED);		
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	0e 94 25 24 	call	0x484a	; 0x484a <__eerd_byte_m1284p>
    377a:	80 93 4e 01 	sts	0x014E, r24
	


	//eeprom_write_byte(&_NV_DEBUG,_INITIALIZED);	
	/* If the wocket has been initialized */
	if (_INITIALIZED==_WOCKET_INITIALIZED)
    377e:	85 32       	cpi	r24, 0x25	; 37
    3780:	09 f0       	breq	.+2      	; 0x3784 <_wocket_initialize+0x84>
    3782:	b4 c0       	rjmp	.+360    	; 0x38ec <_wocket_initialize+0x1ec>
    3784:	0f c0       	rjmp	.+30     	; 0x37a4 <_wocket_initialize+0xa4>
	{
		_INITIALIZED=eeprom_read_byte(&_NV_INITIALIZED);		
	}
	else
	{
		_yellowled_turn_on();		
    3786:	0e 94 03 23 	call	0x4606	; 0x4606 <_yellowled_turn_on>
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	20 e1       	ldi	r18, 0x10	; 16
    3790:	37 e2       	ldi	r19, 0x27	; 39
    3792:	f9 01       	movw	r30, r18
    3794:	31 97       	sbiw	r30, 0x01	; 1
    3796:	f1 f7       	brne	.-4      	; 0x3794 <_wocket_initialize+0x94>
		for(int i=0;(i<1000);i++)
    3798:	01 96       	adiw	r24, 0x01	; 1
    379a:	43 e0       	ldi	r20, 0x03	; 3
    379c:	88 3e       	cpi	r24, 0xE8	; 232
    379e:	94 07       	cpc	r25, r20
    37a0:	c1 f7       	brne	.-16     	; 0x3792 <_wocket_initialize+0x92>
    37a2:	c2 c1       	rjmp	.+900    	; 0x3b28 <_wocket_initialize+0x428>
	//eeprom_write_byte(&_NV_DEBUG,_INITIALIZED);	
	/* If the wocket has been initialized */
	if (_INITIALIZED==_WOCKET_INITIALIZED)
	{
		// Read the sampling rate from the EEPROM
		if (battery>300)
    37a4:	0d 52       	subi	r16, 0x2D	; 45
    37a6:	11 40       	sbci	r17, 0x01	; 1
    37a8:	08 f4       	brcc	.+2      	; 0x37ac <_wocket_initialize+0xac>
    37aa:	90 c0       	rjmp	.+288    	; 0x38cc <_wocket_initialize+0x1cc>
		{
			_SAMPLING_RATE=eeprom_read_byte(&_NV_SAMPLING_RATE);
    37ac:	82 e0       	ldi	r24, 0x02	; 2
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	0e 94 25 24 	call	0x484a	; 0x484a <__eerd_byte_m1284p>
    37b4:	80 93 06 01 	sts	0x0106, r24
			_STATUS_BYTE=eeprom_read_byte(&_NV_STATUS_BYTE);
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	0e 94 25 24 	call	0x484a	; 0x484a <__eerd_byte_m1284p>
    37c0:	80 93 4f 01 	sts	0x014F, r24
			_wTM=eeprom_read_byte(&_NV_TM);
    37c4:	86 e0       	ldi	r24, 0x06	; 6
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	0e 94 25 24 	call	0x484a	; 0x484a <__eerd_byte_m1284p>
    37cc:	80 93 52 01 	sts	0x0152, r24
			_wSENS=eeprom_read_byte(&_NV_SENS);
    37d0:	87 e0       	ldi	r24, 0x07	; 7
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	0e 94 25 24 	call	0x484a	; 0x484a <__eerd_byte_m1284p>
    37d8:	80 93 08 01 	sts	0x0108, r24

			_wTCNT2=eeprom_read_byte(&_NV_TCT);
    37dc:	83 e0       	ldi	r24, 0x03	; 3
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	0e 94 25 24 	call	0x484a	; 0x484a <__eerd_byte_m1284p>
    37e4:	80 93 50 01 	sts	0x0150, r24
			_wTCNT2_reps=eeprom_read_byte(&_NV_TCTREPS);
    37e8:	84 e0       	ldi	r24, 0x04	; 4
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	0e 94 25 24 	call	0x484a	; 0x484a <__eerd_byte_m1284p>
    37f0:	80 93 07 01 	sts	0x0107, r24
			_wTCNT2_last=eeprom_read_byte(&_NV_TCTLAST);
    37f4:	85 e0       	ldi	r24, 0x05	; 5
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	0e 94 25 24 	call	0x484a	; 0x484a <__eerd_byte_m1284p>
    37fc:	80 93 51 01 	sts	0x0151, r24

			_wBTCAL100=eeprom_read_word(&_NV_BTCAL100);
    3800:	88 e0       	ldi	r24, 0x08	; 8
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    3808:	90 93 f0 35 	sts	0x35F0, r25
    380c:	80 93 ef 35 	sts	0x35EF, r24
			_wBTCAL80=eeprom_read_word(&_NV_BTCAL80);
    3810:	8a e0       	ldi	r24, 0x0A	; 10
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    3818:	90 93 fe 35 	sts	0x35FE, r25
    381c:	80 93 fd 35 	sts	0x35FD, r24
			_wBTCAL60=eeprom_read_word(&_NV_BTCAL60);
    3820:	8c e0       	ldi	r24, 0x0C	; 12
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    3828:	90 93 f8 35 	sts	0x35F8, r25
    382c:	80 93 f7 35 	sts	0x35F7, r24
			_wBTCAL40=eeprom_read_word(&_NV_BTCAL40);
    3830:	8e e0       	ldi	r24, 0x0E	; 14
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    3838:	90 93 f6 35 	sts	0x35F6, r25
    383c:	80 93 f5 35 	sts	0x35F5, r24
			_wBTCAL20=eeprom_read_word(&_NV_BTCAL20);
    3840:	80 e1       	ldi	r24, 0x10	; 16
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    3848:	90 93 ec 35 	sts	0x35EC, r25
    384c:	80 93 eb 35 	sts	0x35EB, r24
			_wBTCAL10=eeprom_read_word(&_NV_BTCAL10);
    3850:	82 e1       	ldi	r24, 0x12	; 18
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    3858:	90 93 fc 35 	sts	0x35FC, r25
    385c:	80 93 fb 35 	sts	0x35FB, r24


			_wX1G_CAL=eeprom_read_word(&_NV_X1G_CAL);
    3860:	84 e1       	ldi	r24, 0x14	; 20
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    3868:	90 93 e8 35 	sts	0x35E8, r25
    386c:	80 93 e7 35 	sts	0x35E7, r24
			_wXN1G_CAL=eeprom_read_word(&_NV_XN1G_CAL);
    3870:	86 e1       	ldi	r24, 0x16	; 22
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    3878:	90 93 ea 35 	sts	0x35EA, r25
    387c:	80 93 e9 35 	sts	0x35E9, r24
			_wY1G_CAL=eeprom_read_word(&_NV_Y1G_CAL);
    3880:	88 e1       	ldi	r24, 0x18	; 24
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    3888:	90 93 00 36 	sts	0x3600, r25
    388c:	80 93 ff 35 	sts	0x35FF, r24
			_wYN1G_CAL=eeprom_read_word(&_NV_YN1G_CAL);
    3890:	8a e1       	ldi	r24, 0x1A	; 26
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    3898:	90 93 ee 35 	sts	0x35EE, r25
    389c:	80 93 ed 35 	sts	0x35ED, r24
			_wZ1G_CAL=eeprom_read_word(&_NV_Z1G_CAL);
    38a0:	8c e1       	ldi	r24, 0x1C	; 28
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    38a8:	90 93 f4 35 	sts	0x35F4, r25
    38ac:	80 93 f3 35 	sts	0x35F3, r24
			_wZN1G_CAL=eeprom_read_word(&_NV_ZN1G_CAL);
    38b0:	8e e1       	ldi	r24, 0x1E	; 30
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	0e 94 2d 24 	call	0x485a	; 0x485a <__eerd_word_m1284p>
    38b8:	90 93 f2 35 	sts	0x35F2, r25
    38bc:	80 93 f1 35 	sts	0x35F1, r24

			_wPDT=eeprom_read_byte(&_NV_PDT);
    38c0:	80 e2       	ldi	r24, 0x20	; 32
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	0e 94 25 24 	call	0x484a	; 0x484a <__eerd_byte_m1284p>
    38c8:	80 93 f9 35 	sts	0x35F9, r24

		}

		// Load the transmission mode						
		_greenled_turn_on();		
    38cc:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_greenled_turn_on>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	20 e1       	ldi	r18, 0x10	; 16
    38d6:	37 e2       	ldi	r19, 0x27	; 39
    38d8:	f9 01       	movw	r30, r18
    38da:	31 97       	sbiw	r30, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <_wocket_initialize+0x1da>
		for(int i=0;(i<200);i++)
    38de:	01 96       	adiw	r24, 0x01	; 1
    38e0:	88 3c       	cpi	r24, 0xC8	; 200
    38e2:	91 05       	cpc	r25, r1
    38e4:	c9 f7       	brne	.-14     	; 0x38d8 <_wocket_initialize+0x1d8>
			_delay_ms(5);
		_greenled_turn_off();		
    38e6:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <_greenled_turn_off>
    38ea:	f1 c0       	rjmp	.+482    	; 0x3ace <_wocket_initialize+0x3ce>

		// Set the sampling rate to 90Hz
		//_SAMPLING_RATE=40;
		//_wTM=_TM_Burst_60;

		_SAMPLING_RATE=40;
    38ec:	88 e2       	ldi	r24, 0x28	; 40
    38ee:	80 93 06 01 	sts	0x0106, r24
		_wTM=_TM_Continuous;
    38f2:	10 92 52 01 	sts	0x0152, r1
	
		// Write the sampling rate to the EEPROM
		if (battery>300)
    38f6:	0d 52       	subi	r16, 0x2D	; 45
    38f8:	11 40       	sbci	r17, 0x01	; 1
    38fa:	08 f4       	brcc	.+2      	; 0x38fe <_wocket_initialize+0x1fe>
    38fc:	c2 c0       	rjmp	.+388    	; 0x3a82 <_wocket_initialize+0x382>
		{
			eeprom_write_byte(&_NV_SAMPLING_RATE,_SAMPLING_RATE);
    38fe:	82 e0       	ldi	r24, 0x02	; 2
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	68 e2       	ldi	r22, 0x28	; 40
    3904:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>
			// Calculate the timer variables used to sample at the right frequency
			_wocket_initialize_timer2_interrupt();
    3908:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_wocket_initialize_timer2_interrupt>
			eeprom_write_byte(&_NV_TCT,_wTCNT2);
    390c:	83 e0       	ldi	r24, 0x03	; 3
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	60 91 50 01 	lds	r22, 0x0150
    3914:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>
			eeprom_write_byte(&_NV_TCTREPS,_wTCNT2_reps);
    3918:	84 e0       	ldi	r24, 0x04	; 4
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	60 91 07 01 	lds	r22, 0x0107
    3920:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>
			eeprom_write_byte(&_NV_TCTLAST,_wTCNT2_last);
    3924:	85 e0       	ldi	r24, 0x05	; 5
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	60 91 51 01 	lds	r22, 0x0151
    392c:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>

			eeprom_write_byte(&_NV_TM,_wTM);
    3930:	86 e0       	ldi	r24, 0x06	; 6
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	60 91 52 01 	lds	r22, 0x0152
    3938:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>
			eeprom_write_byte(&_NV_STATUS_BYTE,0x00);
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>
			eeprom_write_byte(&_NV_SENS,_wSENS);
    3946:	87 e0       	ldi	r24, 0x07	; 7
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	60 91 08 01 	lds	r22, 0x0108
    394e:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>

			//Set default battery calibration values
			eeprom_write_word(&_NV_BTCAL100,_DEFAULTBTCAL100);
    3952:	88 e0       	ldi	r24, 0x08	; 8
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	65 ed       	ldi	r22, 0xD5	; 213
    3958:	72 e0       	ldi	r23, 0x02	; 2
    395a:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_BTCAL80,_DEFAULTBTCAL80);
    395e:	8a e0       	ldi	r24, 0x0A	; 10
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	68 ea       	ldi	r22, 0xA8	; 168
    3964:	72 e0       	ldi	r23, 0x02	; 2
    3966:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_BTCAL60,_DEFAULTBTCAL60);
    396a:	8c e0       	ldi	r24, 0x0C	; 12
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	60 e8       	ldi	r22, 0x80	; 128
    3970:	72 e0       	ldi	r23, 0x02	; 2
    3972:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_BTCAL40,_DEFAULTBTCAL40);
    3976:	8e e0       	ldi	r24, 0x0E	; 14
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	68 e5       	ldi	r22, 0x58	; 88
    397c:	72 e0       	ldi	r23, 0x02	; 2
    397e:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_BTCAL20,_DEFAULTBTCAL20);
    3982:	80 e1       	ldi	r24, 0x10	; 16
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	60 e3       	ldi	r22, 0x30	; 48
    3988:	72 e0       	ldi	r23, 0x02	; 2
    398a:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_BTCAL10,_DEFAULTBTCAL10);
    398e:	82 e1       	ldi	r24, 0x12	; 18
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	6c e1       	ldi	r22, 0x1C	; 28
    3994:	72 e0       	ldi	r23, 0x02	; 2
    3996:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>

			_wBTCAL100=_DEFAULTBTCAL100;
    399a:	85 ed       	ldi	r24, 0xD5	; 213
    399c:	92 e0       	ldi	r25, 0x02	; 2
    399e:	90 93 f0 35 	sts	0x35F0, r25
    39a2:	80 93 ef 35 	sts	0x35EF, r24
			_wBTCAL80=_DEFAULTBTCAL80;
    39a6:	88 ea       	ldi	r24, 0xA8	; 168
    39a8:	92 e0       	ldi	r25, 0x02	; 2
    39aa:	90 93 fe 35 	sts	0x35FE, r25
    39ae:	80 93 fd 35 	sts	0x35FD, r24
			_wBTCAL60=_DEFAULTBTCAL60;
    39b2:	80 e8       	ldi	r24, 0x80	; 128
    39b4:	92 e0       	ldi	r25, 0x02	; 2
    39b6:	90 93 f8 35 	sts	0x35F8, r25
    39ba:	80 93 f7 35 	sts	0x35F7, r24
			_wBTCAL40=_DEFAULTBTCAL40;
    39be:	88 e5       	ldi	r24, 0x58	; 88
    39c0:	92 e0       	ldi	r25, 0x02	; 2
    39c2:	90 93 f6 35 	sts	0x35F6, r25
    39c6:	80 93 f5 35 	sts	0x35F5, r24
			_wBTCAL20=_DEFAULTBTCAL20;
    39ca:	80 e3       	ldi	r24, 0x30	; 48
    39cc:	92 e0       	ldi	r25, 0x02	; 2
    39ce:	90 93 ec 35 	sts	0x35EC, r25
    39d2:	80 93 eb 35 	sts	0x35EB, r24
			_wBTCAL10=_DEFAULTBTCAL10;
    39d6:	8c e1       	ldi	r24, 0x1C	; 28
    39d8:	92 e0       	ldi	r25, 0x02	; 2
    39da:	90 93 fc 35 	sts	0x35FC, r25
    39de:	80 93 fb 35 	sts	0x35FB, r24

			//Set default acc calibration values
			eeprom_write_word(&_NV_X1G_CAL,_DEFAULT_X1G_CAL);
    39e2:	84 e1       	ldi	r24, 0x14	; 20
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	64 ef       	ldi	r22, 0xF4	; 244
    39e8:	71 e0       	ldi	r23, 0x01	; 1
    39ea:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_XN1G_CAL,_DEFAULT_XN1G_CAL);
    39ee:	86 e1       	ldi	r24, 0x16	; 22
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	65 ef       	ldi	r22, 0xF5	; 245
    39f4:	71 e0       	ldi	r23, 0x01	; 1
    39f6:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_Y1G_CAL,_DEFAULT_Y1G_CAL);
    39fa:	88 e1       	ldi	r24, 0x18	; 24
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	66 ef       	ldi	r22, 0xF6	; 246
    3a00:	71 e0       	ldi	r23, 0x01	; 1
    3a02:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_YN1G_CAL,_DEFAULT_YN1G_CAL);
    3a06:	8a e1       	ldi	r24, 0x1A	; 26
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	67 ef       	ldi	r22, 0xF7	; 247
    3a0c:	71 e0       	ldi	r23, 0x01	; 1
    3a0e:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_Z1G_CAL,_DEFAULT_Z1G_CAL);
    3a12:	8c e1       	ldi	r24, 0x1C	; 28
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	68 ef       	ldi	r22, 0xF8	; 248
    3a18:	71 e0       	ldi	r23, 0x01	; 1
    3a1a:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_ZN1G_CAL,_DEFAULT_ZN1G_CAL);
    3a1e:	8e e1       	ldi	r24, 0x1E	; 30
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	69 ef       	ldi	r22, 0xF9	; 249
    3a24:	71 e0       	ldi	r23, 0x01	; 1
    3a26:	0e 94 41 24 	call	0x4882	; 0x4882 <__eewr_word_m1284p>

			_wX1G_CAL=_DEFAULT_X1G_CAL;
    3a2a:	84 ef       	ldi	r24, 0xF4	; 244
    3a2c:	91 e0       	ldi	r25, 0x01	; 1
    3a2e:	90 93 e8 35 	sts	0x35E8, r25
    3a32:	80 93 e7 35 	sts	0x35E7, r24
			_wXN1G_CAL=_DEFAULT_XN1G_CAL;
    3a36:	85 ef       	ldi	r24, 0xF5	; 245
    3a38:	91 e0       	ldi	r25, 0x01	; 1
    3a3a:	90 93 ea 35 	sts	0x35EA, r25
    3a3e:	80 93 e9 35 	sts	0x35E9, r24
			_wY1G_CAL=_DEFAULT_Y1G_CAL;
    3a42:	86 ef       	ldi	r24, 0xF6	; 246
    3a44:	91 e0       	ldi	r25, 0x01	; 1
    3a46:	90 93 00 36 	sts	0x3600, r25
    3a4a:	80 93 ff 35 	sts	0x35FF, r24
			_wYN1G_CAL=_DEFAULT_YN1G_CAL;
    3a4e:	87 ef       	ldi	r24, 0xF7	; 247
    3a50:	91 e0       	ldi	r25, 0x01	; 1
    3a52:	90 93 ee 35 	sts	0x35EE, r25
    3a56:	80 93 ed 35 	sts	0x35ED, r24
			_wZ1G_CAL=_DEFAULT_Z1G_CAL;
    3a5a:	88 ef       	ldi	r24, 0xF8	; 248
    3a5c:	91 e0       	ldi	r25, 0x01	; 1
    3a5e:	90 93 f4 35 	sts	0x35F4, r25
    3a62:	80 93 f3 35 	sts	0x35F3, r24
			_wZN1G_CAL=_DEFAULT_ZN1G_CAL;
    3a66:	89 ef       	ldi	r24, 0xF9	; 249
    3a68:	91 e0       	ldi	r25, 0x01	; 1
    3a6a:	90 93 f2 35 	sts	0x35F2, r25
    3a6e:	80 93 f1 35 	sts	0x35F1, r24

			//SET the PDT
			_wPDT=_DEFAULT_PDT;
    3a72:	8f e7       	ldi	r24, 0x7F	; 127
    3a74:	80 93 f9 35 	sts	0x35F9, r24
			eeprom_write_byte(&_NV_PDT,_wPDT);
    3a78:	80 e2       	ldi	r24, 0x20	; 32
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	6f e7       	ldi	r22, 0x7F	; 127
    3a7e:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>

		}

		// Set the initialized flag in the status byte
		_INITIALIZED=_WOCKET_INITIALIZED;
    3a82:	85 e2       	ldi	r24, 0x25	; 37
    3a84:	80 93 4e 01 	sts	0x014E, r24

		// Write the status byte to the EEPROM		
		eeprom_write_byte(&_NV_INITIALIZED,_INITIALIZED);
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	65 e2       	ldi	r22, 0x25	; 37
    3a8e:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>
    3a92:	c0 e0       	ldi	r28, 0x00	; 0
    3a94:	d0 e0       	ldi	r29, 0x00	; 0
    3a96:	00 e1       	ldi	r16, 0x10	; 16
    3a98:	17 e2       	ldi	r17, 0x27	; 39
				
		// Blink green for 5 seconds	
		for (int i=0;(i<3);i++){
			_greenled_turn_on();		
    3a9a:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_greenled_turn_on>
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	f8 01       	movw	r30, r16
    3aa4:	31 97       	sbiw	r30, 0x01	; 1
    3aa6:	f1 f7       	brne	.-4      	; 0x3aa4 <_wocket_initialize+0x3a4>
			for(int j=0;(j<200);j++)
    3aa8:	01 96       	adiw	r24, 0x01	; 1
    3aaa:	88 3c       	cpi	r24, 0xC8	; 200
    3aac:	91 05       	cpc	r25, r1
    3aae:	c9 f7       	brne	.-14     	; 0x3aa2 <_wocket_initialize+0x3a2>
				_delay_ms(5);
			_greenled_turn_off();
    3ab0:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <_greenled_turn_off>
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	f8 01       	movw	r30, r16
    3aba:	31 97       	sbiw	r30, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <_wocket_initialize+0x3ba>
			for(int j=0;(j<200);j++)
    3abe:	01 96       	adiw	r24, 0x01	; 1
    3ac0:	88 3c       	cpi	r24, 0xC8	; 200
    3ac2:	91 05       	cpc	r25, r1
    3ac4:	c9 f7       	brne	.-14     	; 0x3ab8 <_wocket_initialize+0x3b8>

		// Write the status byte to the EEPROM		
		eeprom_write_byte(&_NV_INITIALIZED,_INITIALIZED);
				
		// Blink green for 5 seconds	
		for (int i=0;(i<3);i++){
    3ac6:	21 96       	adiw	r28, 0x01	; 1
    3ac8:	c3 30       	cpi	r28, 0x03	; 3
    3aca:	d1 05       	cpc	r29, r1
    3acc:	31 f7       	brne	.-52     	; 0x3a9a <_wocket_initialize+0x39a>
		}		
	}

	/* Set the overflow interrupt timer */
	unsigned char _MAX_SAMPLING_RATE=0;
	switch(_wTM)
    3ace:	80 91 52 01 	lds	r24, 0x0152
    3ad2:	82 30       	cpi	r24, 0x02	; 2
    3ad4:	91 f0       	breq	.+36     	; 0x3afa <_wocket_initialize+0x3fa>
    3ad6:	83 30       	cpi	r24, 0x03	; 3
    3ad8:	28 f4       	brcc	.+10     	; 0x3ae4 <_wocket_initialize+0x3e4>
    3ada:	88 23       	and	r24, r24
    3adc:	41 f0       	breq	.+16     	; 0x3aee <_wocket_initialize+0x3ee>
    3ade:	81 30       	cpi	r24, 0x01	; 1
    3ae0:	41 f4       	brne	.+16     	; 0x3af2 <_wocket_initialize+0x3f2>
    3ae2:	09 c0       	rjmp	.+18     	; 0x3af6 <_wocket_initialize+0x3f6>
    3ae4:	83 30       	cpi	r24, 0x03	; 3
    3ae6:	59 f0       	breq	.+22     	; 0x3afe <_wocket_initialize+0x3fe>
    3ae8:	84 30       	cpi	r24, 0x04	; 4
    3aea:	19 f4       	brne	.+6      	; 0x3af2 <_wocket_initialize+0x3f2>
    3aec:	0a c0       	rjmp	.+20     	; 0x3b02 <_wocket_initialize+0x402>
    3aee:	8e e7       	ldi	r24, 0x7E	; 126
    3af0:	09 c0       	rjmp	.+18     	; 0x3b04 <_wocket_initialize+0x404>
    3af2:	80 e0       	ldi	r24, 0x00	; 0
    3af4:	07 c0       	rjmp	.+14     	; 0x3b04 <_wocket_initialize+0x404>
    3af6:	80 e5       	ldi	r24, 0x50	; 80
    3af8:	05 c0       	rjmp	.+10     	; 0x3b04 <_wocket_initialize+0x404>
		case _TM_Continuous:	
			_MAX_SAMPLING_RATE=126;
			break;			
		case _TM_Burst_30:
			_MAX_SAMPLING_RATE=80;		
			break;
    3afa:	88 e2       	ldi	r24, 0x28	; 40
    3afc:	03 c0       	rjmp	.+6      	; 0x3b04 <_wocket_initialize+0x404>
		case _TM_Burst_60:
			_MAX_SAMPLING_RATE=40;		
			break;
    3afe:	8e e1       	ldi	r24, 0x1E	; 30
    3b00:	01 c0       	rjmp	.+2      	; 0x3b04 <_wocket_initialize+0x404>
		case _TM_Burst_90:
			_MAX_SAMPLING_RATE=30;		
			break;
    3b02:	84 e1       	ldi	r24, 0x14	; 20
			_MAX_SAMPLING_RATE=20;		
			break;
		default:
			break;
	}	
	if (_SAMPLING_RATE>_MAX_SAMPLING_RATE)
    3b04:	20 91 06 01 	lds	r18, 0x0106
    3b08:	82 17       	cp	r24, r18
    3b0a:	98 f4       	brcc	.+38     	; 0x3b32 <_wocket_initialize+0x432>
	{
		_yellowled_turn_on();		
    3b0c:	0e 94 03 23 	call	0x4606	; 0x4606 <_yellowled_turn_on>
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	20 e1       	ldi	r18, 0x10	; 16
    3b16:	37 e2       	ldi	r19, 0x27	; 39
    3b18:	f9 01       	movw	r30, r18
    3b1a:	31 97       	sbiw	r30, 0x01	; 1
    3b1c:	f1 f7       	brne	.-4      	; 0x3b1a <_wocket_initialize+0x41a>
		for(int i=0;(i<1000);i++)
    3b1e:	01 96       	adiw	r24, 0x01	; 1
    3b20:	43 e0       	ldi	r20, 0x03	; 3
    3b22:	88 3e       	cpi	r24, 0xE8	; 232
    3b24:	94 07       	cpc	r25, r20
    3b26:	c1 f7       	brne	.-16     	; 0x3b18 <_wocket_initialize+0x418>
			_delay_ms(5);
		_yellowled_turn_off();
    3b28:	0e 94 0b 23 	call	0x4616	; 0x4616 <_yellowled_turn_off>
		_atmega_finalize();
    3b2c:	0e 94 14 23 	call	0x4628	; 0x4628 <_atmega_finalize>
    3b30:	23 c0       	rjmp	.+70     	; 0x3b78 <_wocket_initialize+0x478>
		return;
	}

	_DEFAULT_SHUTDOWN= (unsigned long)_wPDT*(unsigned long)_SAMPLING_RATE* (unsigned long)60;
    3b32:	60 91 f9 35 	lds	r22, 0x35F9
    3b36:	70 e0       	ldi	r23, 0x00	; 0
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	40 e0       	ldi	r20, 0x00	; 0
    3b40:	50 e0       	ldi	r21, 0x00	; 0
    3b42:	0e 94 b5 23 	call	0x476a	; 0x476a <__mulsi3>
    3b46:	2c e3       	ldi	r18, 0x3C	; 60
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e0       	ldi	r20, 0x00	; 0
    3b4c:	50 e0       	ldi	r21, 0x00	; 0
    3b4e:	0e 94 b5 23 	call	0x476a	; 0x476a <__mulsi3>
    3b52:	60 93 5f 01 	sts	0x015F, r22
    3b56:	70 93 60 01 	sts	0x0160, r23
    3b5a:	80 93 61 01 	sts	0x0161, r24
    3b5e:	90 93 62 01 	sts	0x0162, r25
	_wShutdownTimer=_DEFAULT_SHUTDOWN;
    3b62:	60 93 5b 01 	sts	0x015B, r22
    3b66:	70 93 5c 01 	sts	0x015C, r23
    3b6a:	80 93 5d 01 	sts	0x015D, r24
    3b6e:	90 93 5e 01 	sts	0x015E, r25

	
	
     /* Enable Timer 2 */
     _atmega_enable_timer2(CPU_CLK_PRESCALAR_1024);
    3b72:	86 e0       	ldi	r24, 0x06	; 6
    3b74:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <_atmega_enable_timer2>
	 

}
    3b78:	df 91       	pop	r29
    3b7a:	cf 91       	pop	r28
    3b7c:	1f 91       	pop	r17
    3b7e:	0f 91       	pop	r16
    3b80:	ff 90       	pop	r15
    3b82:	ef 90       	pop	r14
    3b84:	08 95       	ret

00003b86 <_atmega_set_adc_clock>:
/* Local Function Definitions */



void _atmega_set_adc_clock(unsigned char prescalar){
        if (prescalar==ADC_PRESCALAR_2){
    3b86:	88 23       	and	r24, r24
    3b88:	21 f4       	brne	.+8      	; 0x3b92 <_atmega_set_adc_clock+0xc>
                ADCSRA &= ~((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
    3b8a:	80 91 7a 00 	lds	r24, 0x007A
    3b8e:	88 7f       	andi	r24, 0xF8	; 248
    3b90:	36 c0       	rjmp	.+108    	; 0x3bfe <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_4){
    3b92:	81 30       	cpi	r24, 0x01	; 1
    3b94:	49 f4       	brne	.+18     	; 0x3ba8 <_atmega_set_adc_clock+0x22>
                ADCSRA &= ~((1 << ADPS2) | (1 << ADPS0));
    3b96:	80 91 7a 00 	lds	r24, 0x007A
    3b9a:	8a 7f       	andi	r24, 0xFA	; 250
    3b9c:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= (1 << ADPS1);
    3ba0:	80 91 7a 00 	lds	r24, 0x007A
    3ba4:	82 60       	ori	r24, 0x02	; 2
    3ba6:	2b c0       	rjmp	.+86     	; 0x3bfe <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_8){
    3ba8:	82 30       	cpi	r24, 0x02	; 2
    3baa:	49 f4       	brne	.+18     	; 0x3bbe <_atmega_set_adc_clock+0x38>
                ADCSRA &= ~(1 << ADPS2);
    3bac:	80 91 7a 00 	lds	r24, 0x007A
    3bb0:	8b 7f       	andi	r24, 0xFB	; 251
    3bb2:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= ((1 << ADPS1) |(1 << ADPS0)) ;
    3bb6:	80 91 7a 00 	lds	r24, 0x007A
    3bba:	83 60       	ori	r24, 0x03	; 3
    3bbc:	20 c0       	rjmp	.+64     	; 0x3bfe <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_16){
    3bbe:	83 30       	cpi	r24, 0x03	; 3
    3bc0:	49 f4       	brne	.+18     	; 0x3bd4 <_atmega_set_adc_clock+0x4e>
                ADCSRA &= ~((1 << ADPS1) |(1 << ADPS0));
    3bc2:	80 91 7a 00 	lds	r24, 0x007A
    3bc6:	8c 7f       	andi	r24, 0xFC	; 252
    3bc8:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= (1 << ADPS2);
    3bcc:	80 91 7a 00 	lds	r24, 0x007A
    3bd0:	84 60       	ori	r24, 0x04	; 4
    3bd2:	15 c0       	rjmp	.+42     	; 0x3bfe <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_32){
    3bd4:	84 30       	cpi	r24, 0x04	; 4
    3bd6:	49 f4       	brne	.+18     	; 0x3bea <_atmega_set_adc_clock+0x64>
                ADCSRA &= ~(1 << ADPS1);
    3bd8:	80 91 7a 00 	lds	r24, 0x007A
    3bdc:	8d 7f       	andi	r24, 0xFD	; 253
    3bde:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= ((1 << ADPS2)|(1 << ADPS0));
    3be2:	80 91 7a 00 	lds	r24, 0x007A
    3be6:	85 60       	ori	r24, 0x05	; 5
    3be8:	0a c0       	rjmp	.+20     	; 0x3bfe <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_64){
    3bea:	85 30       	cpi	r24, 0x05	; 5
    3bec:	59 f4       	brne	.+22     	; 0x3c04 <_atmega_set_adc_clock+0x7e>
                ADCSRA &= ~(1 << ADPS0);
    3bee:	80 91 7a 00 	lds	r24, 0x007A
    3bf2:	8e 7f       	andi	r24, 0xFE	; 254
    3bf4:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= ((1 << ADPS2)|(1 << ADPS1));
    3bf8:	80 91 7a 00 	lds	r24, 0x007A
    3bfc:	86 60       	ori	r24, 0x06	; 6
    3bfe:	80 93 7a 00 	sts	0x007A, r24
    3c02:	08 95       	ret
        }else if (prescalar==ADC_PRESCALAR_128){            
    3c04:	86 30       	cpi	r24, 0x06	; 6
    3c06:	29 f4       	brne	.+10     	; 0x3c12 <_atmega_set_adc_clock+0x8c>
                ADCSRA |= ((1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0));
    3c08:	80 91 7a 00 	lds	r24, 0x007A
    3c0c:	87 60       	ori	r24, 0x07	; 7
    3c0e:	80 93 7a 00 	sts	0x007A, r24
    3c12:	08 95       	ret

00003c14 <_atmega_adc_turn_on>:


void _atmega_adc_turn_on()
{

	sbi(ADCSRA,ADEN);
    3c14:	ea e7       	ldi	r30, 0x7A	; 122
    3c16:	f0 e0       	ldi	r31, 0x00	; 0
    3c18:	80 81       	ld	r24, Z
    3c1a:	80 68       	ori	r24, 0x80	; 128
    3c1c:	80 83       	st	Z, r24
}
    3c1e:	08 95       	ret

00003c20 <_atmega_adc_turn_off>:


void _atmega_adc_turn_off()
{
	cbi(ADCSRA,ADEN);
    3c20:	ea e7       	ldi	r30, 0x7A	; 122
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	80 81       	ld	r24, Z
    3c26:	8f 77       	andi	r24, 0x7F	; 127
    3c28:	80 83       	st	Z, r24
}
    3c2a:	08 95       	ret

00003c2c <_atmega_select_adc>:


void _atmega_select_adc(unsigned char channel){
        if (channel==ADC0){
    3c2c:	88 23       	and	r24, r24
    3c2e:	21 f4       	brne	.+8      	; 0x3c38 <_atmega_select_adc+0xc>
                cbi(ADMUX,0);
    3c30:	80 91 7c 00 	lds	r24, 0x007C
    3c34:	8e 7f       	andi	r24, 0xFE	; 254
    3c36:	05 c0       	rjmp	.+10     	; 0x3c42 <_atmega_select_adc+0x16>
                cbi(ADMUX,1);
                cbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }
        else if (channel==ADC1){
    3c38:	81 30       	cpi	r24, 0x01	; 1
    3c3a:	71 f4       	brne	.+28     	; 0x3c58 <_atmega_select_adc+0x2c>
                sbi(ADMUX,0);
    3c3c:	80 91 7c 00 	lds	r24, 0x007C
    3c40:	81 60       	ori	r24, 0x01	; 1
    3c42:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,1);
    3c46:	80 91 7c 00 	lds	r24, 0x007C
    3c4a:	8d 7f       	andi	r24, 0xFD	; 253
    3c4c:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,2);
    3c50:	80 91 7c 00 	lds	r24, 0x007C
    3c54:	8b 7f       	andi	r24, 0xFB	; 251
    3c56:	2b c0       	rjmp	.+86     	; 0x3cae <_atmega_select_adc+0x82>
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC2){
    3c58:	82 30       	cpi	r24, 0x02	; 2
    3c5a:	21 f4       	brne	.+8      	; 0x3c64 <_atmega_select_adc+0x38>
                cbi(ADMUX,0);
    3c5c:	80 91 7c 00 	lds	r24, 0x007C
    3c60:	8e 7f       	andi	r24, 0xFE	; 254
    3c62:	05 c0       	rjmp	.+10     	; 0x3c6e <_atmega_select_adc+0x42>
                sbi(ADMUX,1);
                cbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC3){
    3c64:	83 30       	cpi	r24, 0x03	; 3
    3c66:	49 f4       	brne	.+18     	; 0x3c7a <_atmega_select_adc+0x4e>
                sbi(ADMUX,0);
    3c68:	80 91 7c 00 	lds	r24, 0x007C
    3c6c:	81 60       	ori	r24, 0x01	; 1
    3c6e:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,1);
    3c72:	80 91 7c 00 	lds	r24, 0x007C
    3c76:	82 60       	ori	r24, 0x02	; 2
    3c78:	e9 cf       	rjmp	.-46     	; 0x3c4c <_atmega_select_adc+0x20>
                cbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC4){
    3c7a:	84 30       	cpi	r24, 0x04	; 4
    3c7c:	49 f4       	brne	.+18     	; 0x3c90 <_atmega_select_adc+0x64>
                cbi(ADMUX,0);
    3c7e:	80 91 7c 00 	lds	r24, 0x007C
    3c82:	8e 7f       	andi	r24, 0xFE	; 254
    3c84:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,1);
    3c88:	80 91 7c 00 	lds	r24, 0x007C
    3c8c:	8d 7f       	andi	r24, 0xFD	; 253
    3c8e:	0a c0       	rjmp	.+20     	; 0x3ca4 <_atmega_select_adc+0x78>
                sbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC6)
    3c90:	86 30       	cpi	r24, 0x06	; 6
    3c92:	d1 f4       	brne	.+52     	; 0x3cc8 <_atmega_select_adc+0x9c>
        {
                cbi(ADMUX,0);
    3c94:	80 91 7c 00 	lds	r24, 0x007C
    3c98:	8e 7f       	andi	r24, 0xFE	; 254
    3c9a:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,1);
    3c9e:	80 91 7c 00 	lds	r24, 0x007C
    3ca2:	82 60       	ori	r24, 0x02	; 2
    3ca4:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,2);
    3ca8:	80 91 7c 00 	lds	r24, 0x007C
    3cac:	84 60       	ori	r24, 0x04	; 4
    3cae:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,3);
    3cb2:	80 91 7c 00 	lds	r24, 0x007C
    3cb6:	87 7f       	andi	r24, 0xF7	; 247
    3cb8:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,4);
    3cbc:	80 91 7c 00 	lds	r24, 0x007C
    3cc0:	8f 7e       	andi	r24, 0xEF	; 239
    3cc2:	80 93 7c 00 	sts	0x007C, r24
    3cc6:	08 95       	ret
        }
        else if (channel==ADC7)
    3cc8:	87 30       	cpi	r24, 0x07	; 7
    3cca:	c9 f4       	brne	.+50     	; 0x3cfe <_atmega_select_adc+0xd2>
        {
                sbi(ADMUX,0);
    3ccc:	80 91 7c 00 	lds	r24, 0x007C
    3cd0:	81 60       	ori	r24, 0x01	; 1
    3cd2:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,1);
    3cd6:	80 91 7c 00 	lds	r24, 0x007C
    3cda:	82 60       	ori	r24, 0x02	; 2
    3cdc:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,2);
    3ce0:	80 91 7c 00 	lds	r24, 0x007C
    3ce4:	84 60       	ori	r24, 0x04	; 4
    3ce6:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,3);
    3cea:	80 91 7c 00 	lds	r24, 0x007C
    3cee:	87 7f       	andi	r24, 0xF7	; 247
    3cf0:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,4);
    3cf4:	80 91 7c 00 	lds	r24, 0x007C
    3cf8:	8f 7e       	andi	r24, 0xEF	; 239
    3cfa:	80 93 7c 00 	sts	0x007C, r24
    3cfe:	08 95       	ret

00003d00 <_atmega_a2dConvert10bit>:


unsigned short _atmega_a2dConvert10bit(unsigned char channel){
	
	// Select channel
	_atmega_select_adc(channel);
    3d00:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <_atmega_select_adc>
	

	//Start ADC Conversion
	sbi(ADCSRA, ADIF);   // clear hardware "conversion complete" flag 
    3d04:	80 91 7a 00 	lds	r24, 0x007A
    3d08:	80 61       	ori	r24, 0x10	; 16
    3d0a:	80 93 7a 00 	sts	0x007A, r24
	sbi(ADCSRA,ADSC);
    3d0e:	80 91 7a 00 	lds	r24, 0x007A
    3d12:	80 64       	ori	r24, 0x40	; 64
    3d14:	80 93 7a 00 	sts	0x007A, r24
	
	// ADSC is 1 while converting, 0 when it is done
	while(bit_is_set(ADCSRA, ADSC)); 
    3d18:	80 91 7a 00 	lds	r24, 0x007A
    3d1c:	86 fd       	sbrc	r24, 6
    3d1e:	fc cf       	rjmp	.-8      	; 0x3d18 <_atmega_a2dConvert10bit+0x18>

	return ((ADCL)|((ADCH)<<8));
    3d20:	20 91 78 00 	lds	r18, 0x0078
    3d24:	40 91 79 00 	lds	r20, 0x0079
    3d28:	94 2f       	mov	r25, r20
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	28 2b       	or	r18, r24
    3d30:	39 2b       	or	r19, r25
}
    3d32:	c9 01       	movw	r24, r18
    3d34:	08 95       	ret

00003d36 <_atmega_initialize_uart0>:
	
*/
void _atmega_initialize_uart0(unsigned int baud, unsigned char mode)
{
        /* Set baud rate */
        UBRR0H = (unsigned char)(baud>>8);
    3d36:	90 93 c5 00 	sts	0x00C5, r25
        UBRR0L = (unsigned char)baud;
    3d3a:	80 93 c4 00 	sts	0x00C4, r24
        /* Enable receiver and/or transmitter */
		switch(mode)
    3d3e:	66 23       	and	r22, r22
    3d40:	19 f0       	breq	.+6      	; 0x3d48 <_atmega_initialize_uart0+0x12>
    3d42:	61 30       	cpi	r22, 0x01	; 1
    3d44:	29 f4       	brne	.+10     	; 0x3d50 <_atmega_initialize_uart0+0x1a>
    3d46:	02 c0       	rjmp	.+4      	; 0x3d4c <_atmega_initialize_uart0+0x16>
		{
			case TX_UART_MODE:
        		UCSR0B = (1<<TXEN0);
    3d48:	88 e0       	ldi	r24, 0x08	; 8
    3d4a:	03 c0       	rjmp	.+6      	; 0x3d52 <_atmega_initialize_uart0+0x1c>
				break;
			case RX_UART_MODE:
        		UCSR0B = (1<<RXEN0);
    3d4c:	80 e1       	ldi	r24, 0x10	; 16
    3d4e:	01 c0       	rjmp	.+2      	; 0x3d52 <_atmega_initialize_uart0+0x1c>
				break;
			default:
        		UCSR0B = (1<<TXEN0)|(1<<RXEN0);
    3d50:	88 e1       	ldi	r24, 0x18	; 24
    3d52:	80 93 c1 00 	sts	0x00C1, r24
		}
        /* Set frame format: 8data, 2stop bit */
        UCSR0C = (3<<UCSZ00);//| (3<<UCSZ01) ;  //change 1 to 0 and &
    3d56:	86 e0       	ldi	r24, 0x06	; 6
    3d58:	80 93 c2 00 	sts	0x00C2, r24
}
    3d5c:	08 95       	ret

00003d5e <_atmega_initialize_uart1>:
	
*/
void _atmega_initialize_uart1(unsigned int baud, unsigned char mode)
{
        /* Set baud rate */
        UBRR1H = (unsigned char)(baud>>8);
    3d5e:	90 93 cd 00 	sts	0x00CD, r25
        UBRR1L = (unsigned char)baud;
    3d62:	80 93 cc 00 	sts	0x00CC, r24
        /* Enable receiver and transmitter */
		switch(mode)
    3d66:	66 23       	and	r22, r22
    3d68:	19 f0       	breq	.+6      	; 0x3d70 <_atmega_initialize_uart1+0x12>
    3d6a:	61 30       	cpi	r22, 0x01	; 1
    3d6c:	29 f4       	brne	.+10     	; 0x3d78 <_atmega_initialize_uart1+0x1a>
    3d6e:	02 c0       	rjmp	.+4      	; 0x3d74 <_atmega_initialize_uart1+0x16>
		{
			case TX_UART_MODE:
        		UCSR1B = (1<<TXEN1);
    3d70:	88 e0       	ldi	r24, 0x08	; 8
    3d72:	03 c0       	rjmp	.+6      	; 0x3d7a <_atmega_initialize_uart1+0x1c>
				break;
			case RX_UART_MODE:
        		UCSR1B = (1<<RXEN1);
    3d74:	80 e1       	ldi	r24, 0x10	; 16
    3d76:	01 c0       	rjmp	.+2      	; 0x3d7a <_atmega_initialize_uart1+0x1c>
				break;
			default:
        		UCSR1B = (1<<TXEN1)|(1<<RXEN1);
    3d78:	88 e1       	ldi	r24, 0x18	; 24
    3d7a:	80 93 c9 00 	sts	0x00C9, r24
				break;
		}        
        /* Set frame format: 8data, 2stop bit */
        UCSR1C =(3<<UCSZ10);  //change 1 to 0 and &
    3d7e:	86 e0       	ldi	r24, 0x06	; 6
    3d80:	80 93 ca 00 	sts	0x00CA, r24
}
    3d84:	08 95       	ret

00003d86 <_atmega_disable_JTAG>:
*/
void _atmega_disable_JTAG(void)
{
	unsigned char sreg;

	sreg = SREG;
    3d86:	8f b7       	in	r24, 0x3f	; 63
	cli();
    3d88:	f8 94       	cli
	MCUCR |= ( 1 <<JTD );
    3d8a:	95 b7       	in	r25, 0x35	; 53
    3d8c:	90 68       	ori	r25, 0x80	; 128
    3d8e:	95 bf       	out	0x35, r25	; 53
	MCUCR |= ( 1 <<JTD );
    3d90:	95 b7       	in	r25, 0x35	; 53
    3d92:	90 68       	ori	r25, 0x80	; 128
    3d94:	95 bf       	out	0x35, r25	; 53
	SREG = sreg;
    3d96:	8f bf       	out	0x3f, r24	; 63
}
    3d98:	08 95       	ret

00003d9a <_atmega_set_timer2_prescalar>:


void _atmega_set_timer2_prescalar(unsigned char prescalar)
{
	switch(prescalar)
    3d9a:	82 30       	cpi	r24, 0x02	; 2
    3d9c:	b1 f0       	breq	.+44     	; 0x3dca <_atmega_set_timer2_prescalar+0x30>
    3d9e:	83 30       	cpi	r24, 0x03	; 3
    3da0:	28 f4       	brcc	.+10     	; 0x3dac <_atmega_set_timer2_prescalar+0x12>
    3da2:	88 23       	and	r24, r24
    3da4:	51 f0       	breq	.+20     	; 0x3dba <_atmega_set_timer2_prescalar+0x20>
    3da6:	81 30       	cpi	r24, 0x01	; 1
    3da8:	01 f5       	brne	.+64     	; 0x3dea <_atmega_set_timer2_prescalar+0x50>
    3daa:	0b c0       	rjmp	.+22     	; 0x3dc2 <_atmega_set_timer2_prescalar+0x28>
    3dac:	84 30       	cpi	r24, 0x04	; 4
    3dae:	a9 f0       	breq	.+42     	; 0x3dda <_atmega_set_timer2_prescalar+0x40>
    3db0:	84 30       	cpi	r24, 0x04	; 4
    3db2:	78 f0       	brcs	.+30     	; 0x3dd2 <_atmega_set_timer2_prescalar+0x38>
    3db4:	85 30       	cpi	r24, 0x05	; 5
    3db6:	c9 f4       	brne	.+50     	; 0x3dea <_atmega_set_timer2_prescalar+0x50>
    3db8:	14 c0       	rjmp	.+40     	; 0x3de2 <_atmega_set_timer2_prescalar+0x48>
	{
		case CPU_CLK_PRESCALAR_NONE:
			TCCR2B |= (1 << CS20);
    3dba:	80 91 b1 00 	lds	r24, 0x00B1
    3dbe:	81 60       	ori	r24, 0x01	; 1
    3dc0:	17 c0       	rjmp	.+46     	; 0x3df0 <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_8:
			TCCR2B |= (1 << CS21); 
    3dc2:	80 91 b1 00 	lds	r24, 0x00B1
    3dc6:	82 60       	ori	r24, 0x02	; 2
    3dc8:	13 c0       	rjmp	.+38     	; 0x3df0 <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_32:
			TCCR2B |= ((1 << CS20) | (1 << CS21));
    3dca:	80 91 b1 00 	lds	r24, 0x00B1
    3dce:	83 60       	ori	r24, 0x03	; 3
    3dd0:	0f c0       	rjmp	.+30     	; 0x3df0 <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_64:
			TCCR2B |= (1 << CS22) ;
    3dd2:	80 91 b1 00 	lds	r24, 0x00B1
    3dd6:	84 60       	ori	r24, 0x04	; 4
    3dd8:	0b c0       	rjmp	.+22     	; 0x3df0 <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_128:
			TCCR2B |= ((1 << CS20) |(1 << CS22));
    3dda:	80 91 b1 00 	lds	r24, 0x00B1
    3dde:	85 60       	ori	r24, 0x05	; 5
    3de0:	07 c0       	rjmp	.+14     	; 0x3df0 <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_256:
			TCCR2B |= ((1 << CS22) |(1 << CS21));
    3de2:	80 91 b1 00 	lds	r24, 0x00B1
    3de6:	86 60       	ori	r24, 0x06	; 6
    3de8:	03 c0       	rjmp	.+6      	; 0x3df0 <_atmega_set_timer2_prescalar+0x56>
			break;
		default:
			TCCR2B |= ((1 << CS20) |(1 << CS21) | (1 << CS22)); 
    3dea:	80 91 b1 00 	lds	r24, 0x00B1
    3dee:	87 60       	ori	r24, 0x07	; 7
    3df0:	80 93 b1 00 	sts	0x00B1, r24
    3df4:	08 95       	ret

00003df6 <_atmega_enable_timer2>:
*/
void _atmega_enable_timer2(unsigned char timer_prescalar)
{

	// Setup the prescaler to 1024		 
	_atmega_set_timer2_prescalar(timer_prescalar);
    3df6:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <_atmega_set_timer2_prescalar>
	// Set the counter to 0
	TCNT2=0;
    3dfa:	10 92 b2 00 	sts	0x00B2, r1
	//Enable the overflow interrupt
	TIMSK2 |= (1 << TOIE2); // Enable CTC interrupt
    3dfe:	e0 e7       	ldi	r30, 0x70	; 112
    3e00:	f0 e0       	ldi	r31, 0x00	; 0
    3e02:	80 81       	ld	r24, Z
    3e04:	81 60       	ori	r24, 0x01	; 1
    3e06:	80 83       	st	Z, r24
	// Enable global interrupts
	sei(); 
    3e08:	78 94       	sei
}
    3e0a:	08 95       	ret

00003e0c <_atmega_disable_timer2>:
	
*/
void _atmega_disable_timer2(void)
{	
	//disable timer interrupt
	TIMSK2=0;
    3e0c:	10 92 70 00 	sts	0x0070, r1
	// reset counter unit
	TCCR2B=0;
    3e10:	10 92 b1 00 	sts	0x00B1, r1
}
    3e14:	08 95       	ret

00003e16 <_atmega_reset>:
	
*/
void _atmega_disable_timer2(void)
{	
	//disable timer interrupt
	TIMSK2=0;
    3e16:	10 92 70 00 	sts	0x0070, r1
	// reset counter unit
	TCCR2B=0;
    3e1a:	10 92 b1 00 	sts	0x00B1, r1


void _atmega_reset(void)
{   
		_atmega_disable_timer2();            
        cli(); //irq's off
    3e1e:	f8 94       	cli
        wdt_enable(WDTO_15MS); //wd on,15ms
    3e20:	28 e0       	ldi	r18, 0x08	; 8
    3e22:	88 e1       	ldi	r24, 0x18	; 24
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	0f b6       	in	r0, 0x3f	; 63
    3e28:	f8 94       	cli
    3e2a:	a8 95       	wdr
    3e2c:	80 93 60 00 	sts	0x0060, r24
    3e30:	0f be       	out	0x3f, r0	; 63
    3e32:	20 93 60 00 	sts	0x0060, r18
    3e36:	ff cf       	rjmp	.-2      	; 0x3e36 <_atmega_reset+0x20>

00003e38 <_atmega_disable_watchdog>:
	This has to be done at the begining of an application
	
*/
void _atmega_disable_watchdog(void)
{
	MCUSR = 0;
    3e38:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    3e3a:	88 e1       	ldi	r24, 0x18	; 24
    3e3c:	0f b6       	in	r0, 0x3f	; 63
    3e3e:	f8 94       	cli
    3e40:	80 93 60 00 	sts	0x0060, r24
    3e44:	10 92 60 00 	sts	0x0060, r1
    3e48:	0f be       	out	0x3f, r0	; 63
}
    3e4a:	08 95       	ret

00003e4c <_bluetooth_enter_command_mode>:


/* Bluetooth Functions */

unsigned char _bluetooth_enter_command_mode(void)
{
    3e4c:	40 e0       	ldi	r20, 0x00	; 0
void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
  UCSR0A=UCSR0A & 0xdf;
  
  UDR0 =  data;  /* Start transmission   */
    3e4e:	54 e2       	ldi	r21, 0x24	; 36
    3e50:	20 e1       	ldi	r18, 0x10	; 16
    3e52:	37 e2       	ldi	r19, 0x27	; 39
    3e54:	6d e0       	ldi	r22, 0x0D	; 13
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3e56:	80 91 c0 00 	lds	r24, 0x00C0
    3e5a:	85 ff       	sbrs	r24, 5
    3e5c:	fc cf       	rjmp	.-8      	; 0x3e56 <_bluetooth_enter_command_mode+0xa>
  UCSR0A=UCSR0A & 0xdf;
    3e5e:	80 91 c0 00 	lds	r24, 0x00C0
    3e62:	8f 7d       	andi	r24, 0xDF	; 223
    3e64:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3e68:	50 93 c6 00 	sts	0x00C6, r21
    3e6c:	c9 01       	movw	r24, r18
    3e6e:	01 97       	sbiw	r24, 0x01	; 1
    3e70:	f1 f7       	brne	.-4      	; 0x3e6e <_bluetooth_enter_command_mode+0x22>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3e72:	80 91 c0 00 	lds	r24, 0x00C0
    3e76:	85 ff       	sbrs	r24, 5
    3e78:	fc cf       	rjmp	.-8      	; 0x3e72 <_bluetooth_enter_command_mode+0x26>
  UCSR0A=UCSR0A & 0xdf;
    3e7a:	80 91 c0 00 	lds	r24, 0x00C0
    3e7e:	8f 7d       	andi	r24, 0xDF	; 223
    3e80:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3e84:	50 93 c6 00 	sts	0x00C6, r21
    3e88:	c9 01       	movw	r24, r18
    3e8a:	01 97       	sbiw	r24, 0x01	; 1
    3e8c:	f1 f7       	brne	.-4      	; 0x3e8a <_bluetooth_enter_command_mode+0x3e>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3e8e:	80 91 c0 00 	lds	r24, 0x00C0
    3e92:	85 ff       	sbrs	r24, 5
    3e94:	fc cf       	rjmp	.-8      	; 0x3e8e <_bluetooth_enter_command_mode+0x42>
  UCSR0A=UCSR0A & 0xdf;
    3e96:	80 91 c0 00 	lds	r24, 0x00C0
    3e9a:	8f 7d       	andi	r24, 0xDF	; 223
    3e9c:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3ea0:	50 93 c6 00 	sts	0x00C6, r21
    3ea4:	c9 01       	movw	r24, r18
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	f1 f7       	brne	.-4      	; 0x3ea6 <_bluetooth_enter_command_mode+0x5a>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3eaa:	80 91 c0 00 	lds	r24, 0x00C0
    3eae:	85 ff       	sbrs	r24, 5
    3eb0:	fc cf       	rjmp	.-8      	; 0x3eaa <_bluetooth_enter_command_mode+0x5e>
  UCSR0A=UCSR0A & 0xdf;
    3eb2:	80 91 c0 00 	lds	r24, 0x00C0
    3eb6:	8f 7d       	andi	r24, 0xDF	; 223
    3eb8:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3ebc:	60 93 c6 00 	sts	0x00C6, r22
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3ec0:	80 91 c0 00 	lds	r24, 0x00C0
    3ec4:	85 ff       	sbrs	r24, 5
    3ec6:	fc cf       	rjmp	.-8      	; 0x3ec0 <_bluetooth_enter_command_mode+0x74>
  UCSR0A=UCSR0A & 0xdf;
    3ec8:	80 91 c0 00 	lds	r24, 0x00C0
    3ecc:	8f 7d       	andi	r24, 0xDF	; 223
    3ece:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3ed2:	60 93 c6 00 	sts	0x00C6, r22
}

unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    3ed6:	80 91 c0 00 	lds	r24, 0x00C0
    3eda:	87 fd       	sbrc	r24, 7
    3edc:	04 c0       	rjmp	.+8      	; 0x3ee6 <_bluetooth_enter_command_mode+0x9a>
    3ede:	80 91 c0 00 	lds	r24, 0x00C0
    3ee2:	87 ff       	sbrs	r24, 7
    3ee4:	25 c0       	rjmp	.+74     	; 0x3f30 <_bluetooth_enter_command_mode+0xe4>
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    3ee6:	80 91 c6 00 	lds	r24, 0x00C6

		attempts++;

		if (_bluetooth_receive_uart0_byte(&aByte))
		{		
				if (aByte=='C'){					
    3eea:	83 34       	cpi	r24, 0x43	; 67
    3eec:	09 f5       	brne	.+66     	; 0x3f30 <_bluetooth_enter_command_mode+0xe4>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3eee:	80 91 c0 00 	lds	r24, 0x00C0
    3ef2:	85 ff       	sbrs	r24, 5
    3ef4:	fc cf       	rjmp	.-8      	; 0x3eee <_bluetooth_enter_command_mode+0xa2>
  UCSR0A=UCSR0A & 0xdf;
    3ef6:	80 91 c0 00 	lds	r24, 0x00C0
    3efa:	8f 7d       	andi	r24, 0xDF	; 223
    3efc:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3f00:	8d e0       	ldi	r24, 0x0D	; 13
    3f02:	80 93 c6 00 	sts	0x00C6, r24
    3f06:	20 e0       	ldi	r18, 0x00	; 0
    3f08:	30 e0       	ldi	r19, 0x00	; 0
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3f0a:	9d e0       	ldi	r25, 0x0D	; 13
    3f0c:	80 91 c0 00 	lds	r24, 0x00C0
    3f10:	85 ff       	sbrs	r24, 5
    3f12:	fc cf       	rjmp	.-8      	; 0x3f0c <_bluetooth_enter_command_mode+0xc0>
  UCSR0A=UCSR0A & 0xdf;
    3f14:	80 91 c0 00 	lds	r24, 0x00C0
    3f18:	8f 7d       	andi	r24, 0xDF	; 223
    3f1a:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3f1e:	90 93 c6 00 	sts	0x00C6, r25

		if (_bluetooth_receive_uart0_byte(&aByte))
		{		
				if (aByte=='C'){					
					_bluetooth_transmit_uart0_byte(13);						
					for (int i=0;(i<10);i++)        		
    3f22:	2f 5f       	subi	r18, 0xFF	; 255
    3f24:	3f 4f       	sbci	r19, 0xFF	; 255
    3f26:	2a 30       	cpi	r18, 0x0A	; 10
    3f28:	31 05       	cpc	r19, r1
    3f2a:	81 f7       	brne	.-32     	; 0x3f0c <_bluetooth_enter_command_mode+0xc0>
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	08 95       	ret
		_bluetooth_transmit_uart0_byte(13);
		/*_bluetooth_transmit_uart0_byte(13);
		_bluetooth_transmit_uart0_byte(13);
		_bluetooth_transmit_uart0_byte(13);*/

		attempts++;
    3f30:	4f 5f       	subi	r20, 0xFF	; 255
						_bluetooth_transmit_uart0_byte(13);
					return 1;	
				}
		}

 		if (attempts>=255) 
    3f32:	4f 3f       	cpi	r20, 0xFF	; 255
    3f34:	09 f0       	breq	.+2      	; 0x3f38 <_bluetooth_enter_command_mode+0xec>
    3f36:	8f cf       	rjmp	.-226    	; 0x3e56 <_bluetooth_enter_command_mode+0xa>
    3f38:	80 e0       	ldi	r24, 0x00	; 0
			break;				
	}

	
	return 0;
}
    3f3a:	08 95       	ret

00003f3c <_bluetooth_exit_command_mode>:


unsigned char _bluetooth_exit_command_mode(void)
{
    3f3c:	40 e0       	ldi	r20, 0x00	; 0
void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
  UCSR0A=UCSR0A & 0xdf;
  
  UDR0 =  data;  /* Start transmission   */
    3f3e:	5d e2       	ldi	r21, 0x2D	; 45
    3f40:	20 e1       	ldi	r18, 0x10	; 16
    3f42:	37 e2       	ldi	r19, 0x27	; 39
    3f44:	6d e0       	ldi	r22, 0x0D	; 13
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3f46:	80 91 c0 00 	lds	r24, 0x00C0
    3f4a:	85 ff       	sbrs	r24, 5
    3f4c:	fc cf       	rjmp	.-8      	; 0x3f46 <_bluetooth_exit_command_mode+0xa>
  UCSR0A=UCSR0A & 0xdf;
    3f4e:	80 91 c0 00 	lds	r24, 0x00C0
    3f52:	8f 7d       	andi	r24, 0xDF	; 223
    3f54:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3f58:	50 93 c6 00 	sts	0x00C6, r21
    3f5c:	c9 01       	movw	r24, r18
    3f5e:	01 97       	sbiw	r24, 0x01	; 1
    3f60:	f1 f7       	brne	.-4      	; 0x3f5e <_bluetooth_exit_command_mode+0x22>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3f62:	80 91 c0 00 	lds	r24, 0x00C0
    3f66:	85 ff       	sbrs	r24, 5
    3f68:	fc cf       	rjmp	.-8      	; 0x3f62 <_bluetooth_exit_command_mode+0x26>
  UCSR0A=UCSR0A & 0xdf;
    3f6a:	80 91 c0 00 	lds	r24, 0x00C0
    3f6e:	8f 7d       	andi	r24, 0xDF	; 223
    3f70:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3f74:	50 93 c6 00 	sts	0x00C6, r21
    3f78:	c9 01       	movw	r24, r18
    3f7a:	01 97       	sbiw	r24, 0x01	; 1
    3f7c:	f1 f7       	brne	.-4      	; 0x3f7a <_bluetooth_exit_command_mode+0x3e>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3f7e:	80 91 c0 00 	lds	r24, 0x00C0
    3f82:	85 ff       	sbrs	r24, 5
    3f84:	fc cf       	rjmp	.-8      	; 0x3f7e <_bluetooth_exit_command_mode+0x42>
  UCSR0A=UCSR0A & 0xdf;
    3f86:	80 91 c0 00 	lds	r24, 0x00C0
    3f8a:	8f 7d       	andi	r24, 0xDF	; 223
    3f8c:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3f90:	50 93 c6 00 	sts	0x00C6, r21
    3f94:	c9 01       	movw	r24, r18
    3f96:	01 97       	sbiw	r24, 0x01	; 1
    3f98:	f1 f7       	brne	.-4      	; 0x3f96 <_bluetooth_exit_command_mode+0x5a>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3f9a:	80 91 c0 00 	lds	r24, 0x00C0
    3f9e:	85 ff       	sbrs	r24, 5
    3fa0:	fc cf       	rjmp	.-8      	; 0x3f9a <_bluetooth_exit_command_mode+0x5e>
  UCSR0A=UCSR0A & 0xdf;
    3fa2:	80 91 c0 00 	lds	r24, 0x00C0
    3fa6:	8f 7d       	andi	r24, 0xDF	; 223
    3fa8:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3fac:	60 93 c6 00 	sts	0x00C6, r22
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    3fb0:	80 91 c0 00 	lds	r24, 0x00C0
    3fb4:	85 ff       	sbrs	r24, 5
    3fb6:	fc cf       	rjmp	.-8      	; 0x3fb0 <_bluetooth_exit_command_mode+0x74>
  UCSR0A=UCSR0A & 0xdf;
    3fb8:	80 91 c0 00 	lds	r24, 0x00C0
    3fbc:	8f 7d       	andi	r24, 0xDF	; 223
    3fbe:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    3fc2:	60 93 c6 00 	sts	0x00C6, r22
		_bluetooth_transmit_uart0_byte('-');		
		_delay_ms(5);
				
		_bluetooth_transmit_uart0_byte(13);
		_bluetooth_transmit_uart0_byte(13);
		attempts++;
    3fc6:	4f 5f       	subi	r20, 0xFF	; 255

 		if ((attempts>=255) || (_bluetooth_receive_uart0_byte(&aByte)==0))
    3fc8:	4f 3f       	cpi	r20, 0xFF	; 255
    3fca:	69 f0       	breq	.+26     	; 0x3fe6 <_bluetooth_exit_command_mode+0xaa>
}

unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    3fcc:	80 91 c0 00 	lds	r24, 0x00C0
    3fd0:	87 fd       	sbrc	r24, 7
    3fd2:	06 c0       	rjmp	.+12     	; 0x3fe0 <_bluetooth_exit_command_mode+0xa4>
    3fd4:	80 91 c0 00 	lds	r24, 0x00C0
    3fd8:	87 fd       	sbrc	r24, 7
    3fda:	02 c0       	rjmp	.+4      	; 0x3fe0 <_bluetooth_exit_command_mode+0xa4>
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	08 95       	ret
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    3fe0:	80 91 c6 00 	lds	r24, 0x00C6
    3fe4:	b0 cf       	rjmp	.-160    	; 0x3f46 <_bluetooth_exit_command_mode+0xa>
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
	// succeeded in entering command mode
	if (attempts<255)
		return 1;
	
	return 0;
}
    3fe8:	08 95       	ret

00003fea <_bluetooth_set_baud_rate>:
	_bluetooth_turn_on();

}

unsigned char _bluetooth_set_baud_rate(unsigned char baudrate)
{
    3fea:	9f 92       	push	r9
    3fec:	af 92       	push	r10
    3fee:	bf 92       	push	r11
    3ff0:	cf 92       	push	r12
    3ff2:	df 92       	push	r13
    3ff4:	ef 92       	push	r14
    3ff6:	ff 92       	push	r15
    3ff8:	0f 93       	push	r16
    3ffa:	1f 93       	push	r17
    3ffc:	48 2f       	mov	r20, r24
    3ffe:	50 e0       	ldi	r21, 0x00	; 0
void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
  UCSR0A=UCSR0A & 0xdf;
  
  UDR0 =  data;  /* Start transmission   */
    4000:	fd e0       	ldi	r31, 0x0D	; 13
    4002:	60 e1       	ldi	r22, 0x10	; 16
    4004:	77 e2       	ldi	r23, 0x27	; 39
    4006:	b3 e5       	ldi	r27, 0x53	; 83
    4008:	bb 2e       	mov	r11, r27
	_bluetooth_turn_on();

}

unsigned char _bluetooth_set_baud_rate(unsigned char baudrate)
{
    400a:	a5 e5       	ldi	r26, 0x55	; 85
    400c:	aa 2e       	mov	r10, r26
    400e:	ec e2       	ldi	r30, 0x2C	; 44
    4010:	9e 2e       	mov	r9, r30
    4012:	03 e3       	ldi	r16, 0x33	; 51
    4014:	e8 e3       	ldi	r30, 0x38	; 56
    4016:	39 e3       	ldi	r19, 0x39	; 57
    4018:	f3 2e       	mov	r15, r19
    401a:	26 e3       	ldi	r18, 0x36	; 54
    401c:	e2 2e       	mov	r14, r18
    401e:	14 e3       	ldi	r17, 0x34	; 52
    4020:	a2 e3       	ldi	r26, 0x32	; 50
    4022:	b1 e3       	ldi	r27, 0x31	; 49
    4024:	95 e3       	ldi	r25, 0x35	; 53
    4026:	c9 2e       	mov	r12, r25
    4028:	87 e3       	ldi	r24, 0x37	; 55
    402a:	d8 2e       	mov	r13, r24
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
}

unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    4030:	80 91 c0 00 	lds	r24, 0x00C0
    4034:	87 fd       	sbrc	r24, 7
    4036:	04 c0       	rjmp	.+8      	; 0x4040 <_bluetooth_set_baud_rate+0x56>
    4038:	80 91 c0 00 	lds	r24, 0x00C0
    403c:	87 ff       	sbrs	r24, 7
    403e:	02 c0       	rjmp	.+4      	; 0x4044 <_bluetooth_set_baud_rate+0x5a>
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    4040:	80 91 c6 00 	lds	r24, 0x00C6
	unsigned char attempts=0;
	unsigned char aByte=0;

	while(1)  
	{   
		for (int i=0;(i<100);i++)
    4044:	2f 5f       	subi	r18, 0xFF	; 255
    4046:	3f 4f       	sbci	r19, 0xFF	; 255
    4048:	24 36       	cpi	r18, 0x64	; 100
    404a:	31 05       	cpc	r19, r1
    404c:	89 f7       	brne	.-30     	; 0x4030 <_bluetooth_set_baud_rate+0x46>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    404e:	80 91 c0 00 	lds	r24, 0x00C0
    4052:	85 ff       	sbrs	r24, 5
    4054:	fc cf       	rjmp	.-8      	; 0x404e <_bluetooth_set_baud_rate+0x64>
  UCSR0A=UCSR0A & 0xdf;
    4056:	80 91 c0 00 	lds	r24, 0x00C0
    405a:	8f 7d       	andi	r24, 0xDF	; 223
    405c:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4060:	f0 93 c6 00 	sts	0x00C6, r31
    4064:	cb 01       	movw	r24, r22
    4066:	01 97       	sbiw	r24, 0x01	; 1
    4068:	f1 f7       	brne	.-4      	; 0x4066 <_bluetooth_set_baud_rate+0x7c>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    406a:	80 91 c0 00 	lds	r24, 0x00C0
    406e:	85 ff       	sbrs	r24, 5
    4070:	fc cf       	rjmp	.-8      	; 0x406a <_bluetooth_set_baud_rate+0x80>
  UCSR0A=UCSR0A & 0xdf;
    4072:	80 91 c0 00 	lds	r24, 0x00C0
    4076:	8f 7d       	andi	r24, 0xDF	; 223
    4078:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    407c:	f0 93 c6 00 	sts	0x00C6, r31
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    4080:	80 91 c0 00 	lds	r24, 0x00C0
    4084:	85 ff       	sbrs	r24, 5
    4086:	fc cf       	rjmp	.-8      	; 0x4080 <_bluetooth_set_baud_rate+0x96>
  UCSR0A=UCSR0A & 0xdf;
    4088:	80 91 c0 00 	lds	r24, 0x00C0
    408c:	8f 7d       	andi	r24, 0xDF	; 223
    408e:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4092:	b0 92 c6 00 	sts	0x00C6, r11
    4096:	cb 01       	movw	r24, r22
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	f1 f7       	brne	.-4      	; 0x4098 <_bluetooth_set_baud_rate+0xae>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    409c:	80 91 c0 00 	lds	r24, 0x00C0
    40a0:	85 ff       	sbrs	r24, 5
    40a2:	fc cf       	rjmp	.-8      	; 0x409c <_bluetooth_set_baud_rate+0xb2>
  UCSR0A=UCSR0A & 0xdf;
    40a4:	80 91 c0 00 	lds	r24, 0x00C0
    40a8:	8f 7d       	andi	r24, 0xDF	; 223
    40aa:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    40ae:	a0 92 c6 00 	sts	0x00C6, r10
    40b2:	cb 01       	movw	r24, r22
    40b4:	01 97       	sbiw	r24, 0x01	; 1
    40b6:	f1 f7       	brne	.-4      	; 0x40b4 <_bluetooth_set_baud_rate+0xca>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    40b8:	80 91 c0 00 	lds	r24, 0x00C0
    40bc:	85 ff       	sbrs	r24, 5
    40be:	fc cf       	rjmp	.-8      	; 0x40b8 <_bluetooth_set_baud_rate+0xce>
  UCSR0A=UCSR0A & 0xdf;
    40c0:	80 91 c0 00 	lds	r24, 0x00C0
    40c4:	8f 7d       	andi	r24, 0xDF	; 223
    40c6:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    40ca:	90 92 c6 00 	sts	0x00C6, r9
    40ce:	cb 01       	movw	r24, r22
    40d0:	01 97       	sbiw	r24, 0x01	; 1
    40d2:	f1 f7       	brne	.-4      	; 0x40d0 <_bluetooth_set_baud_rate+0xe6>
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte('U');
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(',');
		_delay_ms(5);
		switch(baudrate){
    40d4:	4c 30       	cpi	r20, 0x0C	; 12
    40d6:	09 f4       	brne	.+2      	; 0x40da <_bluetooth_set_baud_rate+0xf0>
    40d8:	7d c0       	rjmp	.+250    	; 0x41d4 <__stack+0xd5>
    40da:	4d 30       	cpi	r20, 0x0D	; 13
    40dc:	68 f4       	brcc	.+26     	; 0x40f8 <_bluetooth_set_baud_rate+0x10e>
    40de:	41 30       	cpi	r20, 0x01	; 1
    40e0:	09 f4       	brne	.+2      	; 0x40e4 <_bluetooth_set_baud_rate+0xfa>
    40e2:	c3 c0       	rjmp	.+390    	; 0x426a <__stack+0x16b>
    40e4:	41 30       	cpi	r20, 0x01	; 1
    40e6:	08 f4       	brcc	.+2      	; 0x40ea <_bluetooth_set_baud_rate+0x100>
    40e8:	d7 c0       	rjmp	.+430    	; 0x4298 <__stack+0x199>
    40ea:	43 30       	cpi	r20, 0x03	; 3
    40ec:	09 f4       	brne	.+2      	; 0x40f0 <_bluetooth_set_baud_rate+0x106>
    40ee:	a6 c0       	rjmp	.+332    	; 0x423c <__stack+0x13d>
    40f0:	48 30       	cpi	r20, 0x08	; 8
    40f2:	09 f0       	breq	.+2      	; 0x40f6 <_bluetooth_set_baud_rate+0x10c>
    40f4:	e8 c0       	rjmp	.+464    	; 0x42c6 <__stack+0x1c7>
    40f6:	8b c0       	rjmp	.+278    	; 0x420e <__stack+0x10f>
    40f8:	43 33       	cpi	r20, 0x33	; 51
    40fa:	a9 f1       	breq	.+106    	; 0x4166 <__stack+0x67>
    40fc:	44 33       	cpi	r20, 0x34	; 52
    40fe:	38 f4       	brcc	.+14     	; 0x410e <__stack+0xf>
    4100:	40 31       	cpi	r20, 0x10	; 16
    4102:	09 f4       	brne	.+2      	; 0x4106 <__stack+0x7>
    4104:	57 c0       	rjmp	.+174    	; 0x41b4 <__stack+0xb5>
    4106:	49 31       	cpi	r20, 0x19	; 25
    4108:	09 f0       	breq	.+2      	; 0x410c <__stack+0xd>
    410a:	dd c0       	rjmp	.+442    	; 0x42c6 <__stack+0x1c7>
    410c:	3c c0       	rjmp	.+120    	; 0x4186 <__stack+0x87>
    410e:	47 36       	cpi	r20, 0x67	; 103
    4110:	d1 f0       	breq	.+52     	; 0x4146 <__stack+0x47>
    4112:	4f 3c       	cpi	r20, 0xCF	; 207
    4114:	09 f0       	breq	.+2      	; 0x4118 <__stack+0x19>
    4116:	d7 c0       	rjmp	.+430    	; 0x42c6 <__stack+0x1c7>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    4118:	80 91 c0 00 	lds	r24, 0x00C0
    411c:	85 ff       	sbrs	r24, 5
    411e:	fc cf       	rjmp	.-8      	; 0x4118 <__stack+0x19>
  UCSR0A=UCSR0A & 0xdf;
    4120:	80 91 c0 00 	lds	r24, 0x00C0
    4124:	8f 7d       	andi	r24, 0xDF	; 223
    4126:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    412a:	a0 93 c6 00 	sts	0x00C6, r26
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    412e:	80 91 c0 00 	lds	r24, 0x00C0
    4132:	85 ff       	sbrs	r24, 5
    4134:	fc cf       	rjmp	.-8      	; 0x412e <__stack+0x2f>
  UCSR0A=UCSR0A & 0xdf;
    4136:	80 91 c0 00 	lds	r24, 0x00C0
    413a:	8f 7d       	andi	r24, 0xDF	; 223
    413c:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4140:	10 93 c6 00 	sts	0x00C6, r17
    4144:	d6 c0       	rjmp	.+428    	; 0x42f2 <__stack+0x1f3>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    4146:	80 91 c0 00 	lds	r24, 0x00C0
    414a:	85 ff       	sbrs	r24, 5
    414c:	fc cf       	rjmp	.-8      	; 0x4146 <__stack+0x47>
  UCSR0A=UCSR0A & 0xdf;
    414e:	80 91 c0 00 	lds	r24, 0x00C0
    4152:	8f 7d       	andi	r24, 0xDF	; 223
    4154:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4158:	10 93 c6 00 	sts	0x00C6, r17
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    415c:	80 91 c0 00 	lds	r24, 0x00C0
    4160:	85 ff       	sbrs	r24, 5
    4162:	fc cf       	rjmp	.-8      	; 0x415c <__stack+0x5d>
    4164:	bf c0       	rjmp	.+382    	; 0x42e4 <__stack+0x1e5>
    4166:	80 91 c0 00 	lds	r24, 0x00C0
    416a:	85 ff       	sbrs	r24, 5
    416c:	fc cf       	rjmp	.-8      	; 0x4166 <__stack+0x67>
  UCSR0A=UCSR0A & 0xdf;
    416e:	80 91 c0 00 	lds	r24, 0x00C0
    4172:	8f 7d       	andi	r24, 0xDF	; 223
    4174:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4178:	f0 92 c6 00 	sts	0x00C6, r15
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    417c:	80 91 c0 00 	lds	r24, 0x00C0
    4180:	85 ff       	sbrs	r24, 5
    4182:	fc cf       	rjmp	.-8      	; 0x417c <__stack+0x7d>
    4184:	98 c0       	rjmp	.+304    	; 0x42b6 <__stack+0x1b7>
    4186:	80 91 c0 00 	lds	r24, 0x00C0
    418a:	85 ff       	sbrs	r24, 5
    418c:	fc cf       	rjmp	.-8      	; 0x4186 <__stack+0x87>
  UCSR0A=UCSR0A & 0xdf;
    418e:	80 91 c0 00 	lds	r24, 0x00C0
    4192:	8f 7d       	andi	r24, 0xDF	; 223
    4194:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4198:	b0 93 c6 00 	sts	0x00C6, r27
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    419c:	80 91 c0 00 	lds	r24, 0x00C0
    41a0:	85 ff       	sbrs	r24, 5
    41a2:	fc cf       	rjmp	.-8      	; 0x419c <__stack+0x9d>
  UCSR0A=UCSR0A & 0xdf;
    41a4:	80 91 c0 00 	lds	r24, 0x00C0
    41a8:	8f 7d       	andi	r24, 0xDF	; 223
    41aa:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    41ae:	f0 92 c6 00 	sts	0x00C6, r15
    41b2:	9f c0       	rjmp	.+318    	; 0x42f2 <__stack+0x1f3>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    41b4:	80 91 c0 00 	lds	r24, 0x00C0
    41b8:	85 ff       	sbrs	r24, 5
    41ba:	fc cf       	rjmp	.-8      	; 0x41b4 <__stack+0xb5>
  UCSR0A=UCSR0A & 0xdf;
    41bc:	80 91 c0 00 	lds	r24, 0x00C0
    41c0:	8f 7d       	andi	r24, 0xDF	; 223
    41c2:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    41c6:	a0 93 c6 00 	sts	0x00C6, r26
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    41ca:	80 91 c0 00 	lds	r24, 0x00C0
    41ce:	85 ff       	sbrs	r24, 5
    41d0:	fc cf       	rjmp	.-8      	; 0x41ca <__stack+0xcb>
    41d2:	88 c0       	rjmp	.+272    	; 0x42e4 <__stack+0x1e5>
    41d4:	80 91 c0 00 	lds	r24, 0x00C0
    41d8:	85 ff       	sbrs	r24, 5
    41da:	fc cf       	rjmp	.-8      	; 0x41d4 <__stack+0xd5>
  UCSR0A=UCSR0A & 0xdf;
    41dc:	80 91 c0 00 	lds	r24, 0x00C0
    41e0:	8f 7d       	andi	r24, 0xDF	; 223
    41e2:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    41e6:	00 93 c6 00 	sts	0x00C6, r16
    41ea:	cb 01       	movw	r24, r22
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	f1 f7       	brne	.-4      	; 0x41ec <__stack+0xed>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    41f0:	80 91 c0 00 	lds	r24, 0x00C0
    41f4:	85 ff       	sbrs	r24, 5
    41f6:	fc cf       	rjmp	.-8      	; 0x41f0 <__stack+0xf1>
  UCSR0A=UCSR0A & 0xdf;
    41f8:	80 91 c0 00 	lds	r24, 0x00C0
    41fc:	8f 7d       	andi	r24, 0xDF	; 223
    41fe:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4202:	e0 93 c6 00 	sts	0x00C6, r30
    4206:	cb 01       	movw	r24, r22
    4208:	01 97       	sbiw	r24, 0x01	; 1
    420a:	f1 f7       	brne	.-4      	; 0x4208 <__stack+0x109>
    420c:	72 c0       	rjmp	.+228    	; 0x42f2 <__stack+0x1f3>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    420e:	80 91 c0 00 	lds	r24, 0x00C0
    4212:	85 ff       	sbrs	r24, 5
    4214:	fc cf       	rjmp	.-8      	; 0x420e <__stack+0x10f>
  UCSR0A=UCSR0A & 0xdf;
    4216:	80 91 c0 00 	lds	r24, 0x00C0
    421a:	8f 7d       	andi	r24, 0xDF	; 223
    421c:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4220:	c0 92 c6 00 	sts	0x00C6, r12
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    4224:	80 91 c0 00 	lds	r24, 0x00C0
    4228:	85 ff       	sbrs	r24, 5
    422a:	fc cf       	rjmp	.-8      	; 0x4224 <__stack+0x125>
  UCSR0A=UCSR0A & 0xdf;
    422c:	80 91 c0 00 	lds	r24, 0x00C0
    4230:	8f 7d       	andi	r24, 0xDF	; 223
    4232:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4236:	d0 92 c6 00 	sts	0x00C6, r13
    423a:	5b c0       	rjmp	.+182    	; 0x42f2 <__stack+0x1f3>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    423c:	80 91 c0 00 	lds	r24, 0x00C0
    4240:	85 ff       	sbrs	r24, 5
    4242:	fc cf       	rjmp	.-8      	; 0x423c <__stack+0x13d>
  UCSR0A=UCSR0A & 0xdf;
    4244:	80 91 c0 00 	lds	r24, 0x00C0
    4248:	8f 7d       	andi	r24, 0xDF	; 223
    424a:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    424e:	b0 93 c6 00 	sts	0x00C6, r27
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    4252:	80 91 c0 00 	lds	r24, 0x00C0
    4256:	85 ff       	sbrs	r24, 5
    4258:	fc cf       	rjmp	.-8      	; 0x4252 <__stack+0x153>
  UCSR0A=UCSR0A & 0xdf;
    425a:	80 91 c0 00 	lds	r24, 0x00C0
    425e:	8f 7d       	andi	r24, 0xDF	; 223
    4260:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4264:	b0 93 c6 00 	sts	0x00C6, r27
    4268:	44 c0       	rjmp	.+136    	; 0x42f2 <__stack+0x1f3>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    426a:	80 91 c0 00 	lds	r24, 0x00C0
    426e:	85 ff       	sbrs	r24, 5
    4270:	fc cf       	rjmp	.-8      	; 0x426a <__stack+0x16b>
  UCSR0A=UCSR0A & 0xdf;
    4272:	80 91 c0 00 	lds	r24, 0x00C0
    4276:	8f 7d       	andi	r24, 0xDF	; 223
    4278:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    427c:	a0 93 c6 00 	sts	0x00C6, r26
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    4280:	80 91 c0 00 	lds	r24, 0x00C0
    4284:	85 ff       	sbrs	r24, 5
    4286:	fc cf       	rjmp	.-8      	; 0x4280 <__stack+0x181>
  UCSR0A=UCSR0A & 0xdf;
    4288:	80 91 c0 00 	lds	r24, 0x00C0
    428c:	8f 7d       	andi	r24, 0xDF	; 223
    428e:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4292:	00 93 c6 00 	sts	0x00C6, r16
    4296:	2d c0       	rjmp	.+90     	; 0x42f2 <__stack+0x1f3>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    4298:	80 91 c0 00 	lds	r24, 0x00C0
    429c:	85 ff       	sbrs	r24, 5
    429e:	fc cf       	rjmp	.-8      	; 0x4298 <__stack+0x199>
  UCSR0A=UCSR0A & 0xdf;
    42a0:	80 91 c0 00 	lds	r24, 0x00C0
    42a4:	8f 7d       	andi	r24, 0xDF	; 223
    42a6:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    42aa:	10 93 c6 00 	sts	0x00C6, r17
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    42ae:	80 91 c0 00 	lds	r24, 0x00C0
    42b2:	85 ff       	sbrs	r24, 5
    42b4:	fc cf       	rjmp	.-8      	; 0x42ae <__stack+0x1af>
  UCSR0A=UCSR0A & 0xdf;
    42b6:	80 91 c0 00 	lds	r24, 0x00C0
    42ba:	8f 7d       	andi	r24, 0xDF	; 223
    42bc:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    42c0:	e0 92 c6 00 	sts	0x00C6, r14
    42c4:	16 c0       	rjmp	.+44     	; 0x42f2 <__stack+0x1f3>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    42c6:	80 91 c0 00 	lds	r24, 0x00C0
    42ca:	85 ff       	sbrs	r24, 5
    42cc:	fc cf       	rjmp	.-8      	; 0x42c6 <__stack+0x1c7>
  UCSR0A=UCSR0A & 0xdf;
    42ce:	80 91 c0 00 	lds	r24, 0x00C0
    42d2:	8f 7d       	andi	r24, 0xDF	; 223
    42d4:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    42d8:	00 93 c6 00 	sts	0x00C6, r16
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    42dc:	80 91 c0 00 	lds	r24, 0x00C0
    42e0:	85 ff       	sbrs	r24, 5
    42e2:	fc cf       	rjmp	.-8      	; 0x42dc <__stack+0x1dd>
  UCSR0A=UCSR0A & 0xdf;
    42e4:	80 91 c0 00 	lds	r24, 0x00C0
    42e8:	8f 7d       	andi	r24, 0xDF	; 223
    42ea:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    42ee:	e0 93 c6 00 	sts	0x00C6, r30
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    42f2:	80 91 c0 00 	lds	r24, 0x00C0
    42f6:	85 ff       	sbrs	r24, 5
    42f8:	fc cf       	rjmp	.-8      	; 0x42f2 <__stack+0x1f3>
  UCSR0A=UCSR0A & 0xdf;
    42fa:	80 91 c0 00 	lds	r24, 0x00C0
    42fe:	8f 7d       	andi	r24, 0xDF	; 223
    4300:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4304:	f0 93 c6 00 	sts	0x00C6, r31
    4308:	cb 01       	movw	r24, r22
    430a:	01 97       	sbiw	r24, 0x01	; 1
    430c:	f1 f7       	brne	.-4      	; 0x430a <__stack+0x20b>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    430e:	80 91 c0 00 	lds	r24, 0x00C0
    4312:	85 ff       	sbrs	r24, 5
    4314:	fc cf       	rjmp	.-8      	; 0x430e <__stack+0x20f>
  UCSR0A=UCSR0A & 0xdf;
    4316:	80 91 c0 00 	lds	r24, 0x00C0
    431a:	8f 7d       	andi	r24, 0xDF	; 223
    431c:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4320:	f0 93 c6 00 	sts	0x00C6, r31
    4324:	cb 01       	movw	r24, r22
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	f1 f7       	brne	.-4      	; 0x4326 <__stack+0x227>
}

unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    432a:	80 91 c0 00 	lds	r24, 0x00C0
    432e:	87 fd       	sbrc	r24, 7
    4330:	04 c0       	rjmp	.+8      	; 0x433a <__stack+0x23b>
    4332:	80 91 c0 00 	lds	r24, 0x00C0
    4336:	87 ff       	sbrs	r24, 7
    4338:	06 c0       	rjmp	.+12     	; 0x4346 <__stack+0x247>
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    433a:	80 91 c6 00 	lds	r24, 0x00C6
		_delay_ms(5);

		attempts++;
		if (_bluetooth_receive_uart0_byte(&aByte))
		{
			if (aByte=='A')			
    433e:	81 34       	cpi	r24, 0x41	; 65
    4340:	11 f4       	brne	.+4      	; 0x4346 <__stack+0x247>
    4342:	81 e0       	ldi	r24, 0x01	; 1
    4344:	05 c0       	rjmp	.+10     	; 0x4350 <__stack+0x251>
		_bluetooth_transmit_uart0_byte(13);
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(13);
		_delay_ms(5);

		attempts++;
    4346:	5f 5f       	subi	r21, 0xFF	; 255
		if (_bluetooth_receive_uart0_byte(&aByte))
		{
			if (aByte=='A')			
				return 1;					
		}
		if (attempts>=255)
    4348:	5f 3f       	cpi	r21, 0xFF	; 255
    434a:	09 f0       	breq	.+2      	; 0x434e <__stack+0x24f>
    434c:	6f ce       	rjmp	.-802    	; 0x402c <_bluetooth_set_baud_rate+0x42>
    434e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	// succeeded in entering command mode

	return 0;
}
    4350:	1f 91       	pop	r17
    4352:	0f 91       	pop	r16
    4354:	ff 90       	pop	r15
    4356:	ef 90       	pop	r14
    4358:	df 90       	pop	r13
    435a:	cf 90       	pop	r12
    435c:	bf 90       	pop	r11
    435e:	af 90       	pop	r10
    4360:	9f 90       	pop	r9
    4362:	08 95       	ret

00004364 <_bluetooth_get_baud_rate>:


unsigned char _bluetooth_get_baud_rate()
{
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	20 e0       	ldi	r18, 0x00	; 0
void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
  UCSR0A=UCSR0A & 0xdf;
  
  UDR0 =  data;  /* Start transmission   */
    4368:	6d e0       	ldi	r22, 0x0D	; 13
    436a:	40 e1       	ldi	r20, 0x10	; 16
    436c:	57 e2       	ldi	r21, 0x27	; 39
    436e:	e7 e4       	ldi	r30, 0x47	; 71
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    4370:	75 e5       	ldi	r23, 0x55	; 85
    4372:	80 91 c0 00 	lds	r24, 0x00C0
    4376:	85 ff       	sbrs	r24, 5
    4378:	fc cf       	rjmp	.-8      	; 0x4372 <_bluetooth_get_baud_rate+0xe>
  UCSR0A=UCSR0A & 0xdf;
    437a:	80 91 c0 00 	lds	r24, 0x00C0
    437e:	8f 7d       	andi	r24, 0xDF	; 223
    4380:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    4384:	60 93 c6 00 	sts	0x00C6, r22
    4388:	ca 01       	movw	r24, r20
    438a:	01 97       	sbiw	r24, 0x01	; 1
    438c:	f1 f7       	brne	.-4      	; 0x438a <_bluetooth_get_baud_rate+0x26>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    438e:	80 91 c0 00 	lds	r24, 0x00C0
    4392:	85 ff       	sbrs	r24, 5
    4394:	fc cf       	rjmp	.-8      	; 0x438e <_bluetooth_get_baud_rate+0x2a>
  UCSR0A=UCSR0A & 0xdf;
    4396:	80 91 c0 00 	lds	r24, 0x00C0
    439a:	8f 7d       	andi	r24, 0xDF	; 223
    439c:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    43a0:	60 93 c6 00 	sts	0x00C6, r22
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    43a4:	80 91 c0 00 	lds	r24, 0x00C0
    43a8:	85 ff       	sbrs	r24, 5
    43aa:	fc cf       	rjmp	.-8      	; 0x43a4 <_bluetooth_get_baud_rate+0x40>
  UCSR0A=UCSR0A & 0xdf;
    43ac:	80 91 c0 00 	lds	r24, 0x00C0
    43b0:	8f 7d       	andi	r24, 0xDF	; 223
    43b2:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    43b6:	e0 93 c6 00 	sts	0x00C6, r30
    43ba:	ca 01       	movw	r24, r20
    43bc:	01 97       	sbiw	r24, 0x01	; 1
    43be:	f1 f7       	brne	.-4      	; 0x43bc <_bluetooth_get_baud_rate+0x58>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    43c0:	80 91 c0 00 	lds	r24, 0x00C0
    43c4:	85 ff       	sbrs	r24, 5
    43c6:	fc cf       	rjmp	.-8      	; 0x43c0 <_bluetooth_get_baud_rate+0x5c>
  UCSR0A=UCSR0A & 0xdf;
    43c8:	80 91 c0 00 	lds	r24, 0x00C0
    43cc:	8f 7d       	andi	r24, 0xDF	; 223
    43ce:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    43d2:	70 93 c6 00 	sts	0x00C6, r23
    43d6:	ca 01       	movw	r24, r20
    43d8:	01 97       	sbiw	r24, 0x01	; 1
    43da:	f1 f7       	brne	.-4      	; 0x43d8 <_bluetooth_get_baud_rate+0x74>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    43dc:	80 91 c0 00 	lds	r24, 0x00C0
    43e0:	85 ff       	sbrs	r24, 5
    43e2:	fc cf       	rjmp	.-8      	; 0x43dc <_bluetooth_get_baud_rate+0x78>
  UCSR0A=UCSR0A & 0xdf;
    43e4:	80 91 c0 00 	lds	r24, 0x00C0
    43e8:	8f 7d       	andi	r24, 0xDF	; 223
    43ea:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    43ee:	60 93 c6 00 	sts	0x00C6, r22
    43f2:	ca 01       	movw	r24, r20
    43f4:	01 97       	sbiw	r24, 0x01	; 1
    43f6:	f1 f7       	brne	.-4      	; 0x43f4 <_bluetooth_get_baud_rate+0x90>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    43f8:	80 91 c0 00 	lds	r24, 0x00C0
    43fc:	85 ff       	sbrs	r24, 5
    43fe:	fc cf       	rjmp	.-8      	; 0x43f8 <_bluetooth_get_baud_rate+0x94>
  UCSR0A=UCSR0A & 0xdf;
    4400:	80 91 c0 00 	lds	r24, 0x00C0
    4404:	8f 7d       	andi	r24, 0xDF	; 223
    4406:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    440a:	60 93 c6 00 	sts	0x00C6, r22
    440e:	ca 01       	movw	r24, r20
    4410:	01 97       	sbiw	r24, 0x01	; 1
    4412:	f1 f7       	brne	.-4      	; 0x4410 <_bluetooth_get_baud_rate+0xac>
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(13);
		_delay_ms(5);


		attempts++;
    4414:	3f 5f       	subi	r19, 0xFF	; 255
 		if ((attempts>=255) || (_bluetooth_receive_uart0_byte(&baudrate)==0))
    4416:	3f 3f       	cpi	r19, 0xFF	; 255
    4418:	21 f1       	breq	.+72     	; 0x4462 <_bluetooth_get_baud_rate+0xfe>
}

unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    441a:	80 91 c0 00 	lds	r24, 0x00C0
    441e:	87 fd       	sbrc	r24, 7
    4420:	14 c0       	rjmp	.+40     	; 0x444a <_bluetooth_get_baud_rate+0xe6>
    4422:	80 91 c0 00 	lds	r24, 0x00C0
    4426:	87 fd       	sbrc	r24, 7
    4428:	10 c0       	rjmp	.+32     	; 0x444a <_bluetooth_get_baud_rate+0xe6>
			break;

	}
	if (attempts<255)
	{	
		switch(baudrate)
    442a:	24 33       	cpi	r18, 0x34	; 52
    442c:	89 f0       	breq	.+34     	; 0x4450 <_bluetooth_get_baud_rate+0xec>
    442e:	25 33       	cpi	r18, 0x35	; 53
    4430:	28 f4       	brcc	.+10     	; 0x443c <_bluetooth_get_baud_rate+0xd8>
    4432:	21 33       	cpi	r18, 0x31	; 49
    4434:	89 f0       	breq	.+34     	; 0x4458 <_bluetooth_get_baud_rate+0xf4>
    4436:	22 33       	cpi	r18, 0x32	; 50
    4438:	99 f4       	brne	.+38     	; 0x4460 <_bluetooth_get_baud_rate+0xfc>
    443a:	05 c0       	rjmp	.+10     	; 0x4446 <_bluetooth_get_baud_rate+0xe2>
    443c:	25 33       	cpi	r18, 0x35	; 53
    443e:	71 f0       	breq	.+28     	; 0x445c <_bluetooth_get_baud_rate+0xf8>
    4440:	29 33       	cpi	r18, 0x39	; 57
    4442:	71 f4       	brne	.+28     	; 0x4460 <_bluetooth_get_baud_rate+0xfc>
    4444:	07 c0       	rjmp	.+14     	; 0x4454 <_bluetooth_get_baud_rate+0xf0>
    4446:	2f ec       	ldi	r18, 0xCF	; 207
    4448:	0c c0       	rjmp	.+24     	; 0x4462 <_bluetooth_get_baud_rate+0xfe>
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    444a:	20 91 c6 00 	lds	r18, 0x00C6
    444e:	91 cf       	rjmp	.-222    	; 0x4372 <_bluetooth_get_baud_rate+0xe>
    4450:	27 e6       	ldi	r18, 0x67	; 103
    4452:	07 c0       	rjmp	.+14     	; 0x4462 <_bluetooth_get_baud_rate+0xfe>
    4454:	23 e3       	ldi	r18, 0x33	; 51
    4456:	05 c0       	rjmp	.+10     	; 0x4462 <_bluetooth_get_baud_rate+0xfe>
			case '4':
				baudrate=ATMEGA_BAUD_4800;
				break;
			case '9':
				baudrate=ATMEGA_BAUD_9600;
				break;
    4458:	23 e0       	ldi	r18, 0x03	; 3
    445a:	03 c0       	rjmp	.+6      	; 0x4462 <_bluetooth_get_baud_rate+0xfe>
			case '1':
				baudrate=ATMEGA_BAUD_115200;
				break;
    445c:	28 e0       	ldi	r18, 0x08	; 8
    445e:	01 c0       	rjmp	.+2      	; 0x4462 <_bluetooth_get_baud_rate+0xfe>
			case '5':
				baudrate=ATMEGA_BAUD_57600;
				break;
    4460:	2c e0       	ldi	r18, 0x0C	; 12
				break;
			}
	}
	
	return baudrate;
}
    4462:	82 2f       	mov	r24, r18
    4464:	08 95       	ret

00004466 <_bluetooth_turn_on>:
	
*/
void _bluetooth_turn_on(void)
{
	// Set the direction of TX pin as output
	sbi(DDRD,OUT_BT_TXD);
    4466:	51 9a       	sbi	0x0a, 1	; 10

	// Set the direction of the RESET pin as output and high
	sbi(DDRD,OUT_BT_RESET_N);	
    4468:	52 9a       	sbi	0x0a, 2	; 10
	sbi(PORTD,OUT_BT_RESET_N);  
    446a:	5a 9a       	sbi	0x0b, 2	; 11

	// Set the direction of the switch pin as output and low
	sbi(DDRB,OUT_BT_SW_N);
    446c:	24 9a       	sbi	0x04, 4	; 4
	cbi(PORTB,OUT_BT_SW_N);
    446e:	2c 98       	cbi	0x05, 4	; 5

	// Set the status of the bluetooth to true
	sbi(atmega_status, BIT0_BLUETOOTH_STATUS);
    4470:	80 91 e4 35 	lds	r24, 0x35E4
    4474:	81 60       	ori	r24, 0x01	; 1
    4476:	80 93 e4 35 	sts	0x35E4, r24
}
    447a:	08 95       	ret

0000447c <_bluetooth_turn_off>:
	
*/
void _bluetooth_turn_off(void)
{
	// Set the direction of TX, RESET and switch pins as input
	cbi(DDRD,OUT_BT_TXD);
    447c:	51 98       	cbi	0x0a, 1	; 10
	cbi(DDRD,OUT_BT_RESET_N);
    447e:	52 98       	cbi	0x0a, 2	; 10
	cbi(DDRB,OUT_BT_SW_N);		 
    4480:	24 98       	cbi	0x04, 4	; 4

	// Set the status of bluetooth to false
	cbi(atmega_status, BIT0_BLUETOOTH_STATUS);
    4482:	80 91 e4 35 	lds	r24, 0x35E4
    4486:	8e 7f       	andi	r24, 0xFE	; 254
    4488:	80 93 e4 35 	sts	0x35E4, r24
}
    448c:	08 95       	ret

0000448e <_bluetooth_reset>:
}


void _bluetooth_reset(void)
{
	_bluetooth_turn_off();
    448e:	0e 94 3e 22 	call	0x447c	; 0x447c <_bluetooth_turn_off>
    4492:	20 e0       	ldi	r18, 0x00	; 0
    4494:	40 e1       	ldi	r20, 0x10	; 16
    4496:	57 e2       	ldi	r21, 0x27	; 39
    4498:	ca 01       	movw	r24, r20
    449a:	01 97       	sbiw	r24, 0x01	; 1
    449c:	f1 f7       	brne	.-4      	; 0x449a <_bluetooth_reset+0xc>
	for (unsigned char i=0;(i<255);i++)
    449e:	2f 5f       	subi	r18, 0xFF	; 255
    44a0:	2f 3f       	cpi	r18, 0xFF	; 255
    44a2:	d1 f7       	brne	.-12     	; 0x4498 <_bluetooth_reset+0xa>
		_delay_ms(5);
	_bluetooth_turn_on();
    44a4:	0e 94 33 22 	call	0x4466	; 0x4466 <_bluetooth_turn_on>

}
    44a8:	08 95       	ret

000044aa <_is_bluetooth_on>:
	Description: Tests if the bluetooth status bit is on
	
*/

unsigned char _is_bluetooth_on(void)
{
    44aa:	80 91 e4 35 	lds	r24, 0x35E4
	return ((atmega_status>>BIT0_BLUETOOTH_STATUS) & 0x01);
}
    44ae:	81 70       	andi	r24, 0x01	; 1
    44b0:	08 95       	ret

000044b2 <_bluetooth_is_connected>:


unsigned char _bluetooth_is_connected(void){

#ifdef _VERSION==3
        return (0x01 & (PINA>>IN_BT_CONNECT));
    44b2:	80 b1       	in	r24, 0x00	; 0
    44b4:	82 95       	swap	r24
#else
        return (0x01 & (PIND>>IN_BT_CONNECT));
#endif
}
    44b6:	81 70       	andi	r24, 0x01	; 1
    44b8:	08 95       	ret

000044ba <_bluetooth_is_discoverable>:


unsigned char _bluetooth_is_discoverable(void){

#ifdef _VERSION==3
        return (0x01 & (PINA>>IN_BT_DISC));
    44ba:	80 b1       	in	r24, 0x00	; 0
    44bc:	82 95       	swap	r24
    44be:	86 95       	lsr	r24
    44c0:	86 95       	lsr	r24

#else
         return (0x01 & (PIND>>IN_BT_DISC));
#endif
}
    44c2:	81 70       	andi	r24, 0x01	; 1
    44c4:	08 95       	ret

000044c6 <_receive_uart0_flush>:



void _receive_uart0_flush( void )
{
    44c6:	02 c0       	rjmp	.+4      	; 0x44cc <_receive_uart0_flush+0x6>
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
    44c8:	80 91 c6 00 	lds	r24, 0x00C6
    44cc:	80 91 c0 00 	lds	r24, 0x00C0
    44d0:	87 fd       	sbrc	r24, 7
    44d2:	fa cf       	rjmp	.-12     	; 0x44c8 <_receive_uart0_flush+0x2>
}
    44d4:	08 95       	ret

000044d6 <_bluetooth_receive_uart0_byte>:

unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
    44d6:	fc 01       	movw	r30, r24
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    44d8:	80 91 c0 00 	lds	r24, 0x00C0
    44dc:	87 fd       	sbrc	r24, 7
    44de:	06 c0       	rjmp	.+12     	; 0x44ec <_bluetooth_receive_uart0_byte+0x16>
    44e0:	80 91 c0 00 	lds	r24, 0x00C0
    44e4:	87 fd       	sbrc	r24, 7
    44e6:	02 c0       	rjmp	.+4      	; 0x44ec <_bluetooth_receive_uart0_byte+0x16>
    44e8:	80 e0       	ldi	r24, 0x00	; 0
    44ea:	08 95       	ret
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    44ec:	80 91 c6 00 	lds	r24, 0x00C6
    44f0:	80 83       	st	Z, r24
    44f2:	81 e0       	ldi	r24, 0x01	; 1

   return 1;/* Return success*/
  }
    44f4:	08 95       	ret

000044f6 <_bluetooth_transmit_uart0_byte>:


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
    44f6:	98 2f       	mov	r25, r24
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    44f8:	80 91 c0 00 	lds	r24, 0x00C0
    44fc:	85 ff       	sbrs	r24, 5
    44fe:	fc cf       	rjmp	.-8      	; 0x44f8 <_bluetooth_transmit_uart0_byte+0x2>
  UCSR0A=UCSR0A & 0xdf;
    4500:	80 91 c0 00 	lds	r24, 0x00C0
    4504:	8f 7d       	andi	r24, 0xDF	; 223
    4506:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    450a:	90 93 c6 00 	sts	0x00C6, r25
   
}
    450e:	08 95       	ret

00004510 <_accelerometer_set_sensitivity>:
/* Accelerometer Functions */

unsigned char _accelerometer_set_sensitivity(unsigned char level){

#ifdef _VERSION==3
	if (level==_4G){
    4510:	88 23       	and	r24, r24
    4512:	11 f4       	brne	.+4      	; 0x4518 <_accelerometer_set_sensitivity+0x8>
		cbi(PORTB,OUT_ACCEL_SEL1);
    4514:	28 98       	cbi	0x05, 0	; 5
    4516:	08 95       	ret
		return _4G;
	}else if (level==_12G){
    4518:	81 30       	cpi	r24, 0x01	; 1
    451a:	11 f0       	breq	.+4      	; 0x4520 <_accelerometer_set_sensitivity+0x10>
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	08 95       	ret
		sbi(PORTB,OUT_ACCEL_SEL1);		
    4520:	28 9a       	sbi	0x05, 0	; 5
    4522:	81 e0       	ldi	r24, 0x01	; 1
		sbi(PORTB,OUT_ACCEL_SEL2);
		return _6G;
	}
#endif
	return 0;
}
    4524:	08 95       	ret

00004526 <_accelerometer_turn_on>:
*/
void _accelerometer_turn_on(void)
{

#ifdef _VERSION 3
	sbi(DDRB,OUT_ACCEL_SEL1);	
    4526:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB,OUT_ACCEL_SLEEP_N);
    4528:	23 9a       	sbi	0x04, 3	; 4
	sbi(PORTB,OUT_ACCEL_SLEEP_N);	 
    452a:	2b 9a       	sbi	0x05, 3	; 5
	sbi(DDRB,OUT_ACCEL_SEL2);
	sbi(DDRB,OUT_ACCEL_SLEEP_N);
	sbi(PORTB,OUT_ACCEL_SLEEP_N);
#endif	 			
	// Set the status of the accelerometer to true
	sbi(atmega_status, BIT1_ACCELEROMETER_STATUS);
    452c:	80 91 e4 35 	lds	r24, 0x35E4
    4530:	82 60       	ori	r24, 0x02	; 2
    4532:	80 93 e4 35 	sts	0x35E4, r24
}
    4536:	08 95       	ret

00004538 <_atmega_initialize>:
	
*/
void _atmega_initialize(unsigned char timer_prescalar)
{

	unsigned char prev_osccal=OSCCAL;
    4538:	80 91 66 00 	lds	r24, 0x0066

	atmega_status=0x00;
    453c:	10 92 e4 35 	sts	0x35E4, r1

	//Disable watchdog timer
	//_atmega_disable_watchdog();

	// Disable JTAG interface
	_atmega_disable_JTAG();
    4540:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <_atmega_disable_JTAG>


#ifdef _VERSION==3
	// By default initialize all ports as input to minimize power consumption
	// Setup Port A pins as input to minimize power consumption		
	cbi(DDRA,IN_ACCEL_Z_FILT);
    4544:	08 98       	cbi	0x01, 0	; 1
	cbi(DDRA,IN_ACCEL_Y_FILT);
    4546:	09 98       	cbi	0x01, 1	; 1
	cbi(DDRA,IN_ACCEL_X_FILT);
    4548:	0a 98       	cbi	0x01, 2	; 1
	cbi(DDRA,IN_DOCK_N);
    454a:	0b 98       	cbi	0x01, 3	; 1
	cbi(DDRA,IN_USER_N);
    454c:	0d 98       	cbi	0x01, 5	; 1
	cbi(DDRA,IN_BT_DISC);
    454e:	0e 98       	cbi	0x01, 6	; 1
	cbi(DDRA,IN_VSENSE_BAT);
    4550:	0f 98       	cbi	0x01, 7	; 1

	// Setup Port B pins as input to minimize power consumption
	cbi(DDRB,OUT_ACCEL_SEL1);	
    4552:	20 98       	cbi	0x04, 0	; 4
	cbi(DDRB,PB1);
    4554:	21 98       	cbi	0x04, 1	; 4
	cbi(PORTB,PB2);
    4556:	2a 98       	cbi	0x05, 2	; 5
	cbi(DDRB,OUT_ACCEL_SLEEP_N);
    4558:	23 98       	cbi	0x04, 3	; 4
	cbi(DDRB,OUT_BT_SW_N);	
    455a:	24 98       	cbi	0x04, 4	; 4
	cbi(DDRB,IN_CPU_PROG_MOSI);
    455c:	25 98       	cbi	0x04, 5	; 4
	cbi(DDRB,OUT_CPU_PROG_MISO);	
    455e:	26 98       	cbi	0x04, 6	; 4
	cbi(DDRB,IN_CPU_PROG_SCLK);	
    4560:	27 98       	cbi	0x04, 7	; 4
	
	// Setup Port C pins as input to minimize power consumption
	cbi(DDRC,PC0);	
    4562:	38 98       	cbi	0x07, 0	; 7
	cbi(DDRC,PC1);	
    4564:	39 98       	cbi	0x07, 1	; 7
	cbi(DDRC,PC2);	
    4566:	3a 98       	cbi	0x07, 2	; 7
	cbi(DDRC,OUT_LED_YE);	
    4568:	3b 98       	cbi	0x07, 3	; 7
	cbi(DDRC,PC4);	
    456a:	3c 98       	cbi	0x07, 4	; 7
	cbi(DDRC,PC5);	
    456c:	3d 98       	cbi	0x07, 5	; 7
	cbi(DDRC,PC6);	
    456e:	3e 98       	cbi	0x07, 6	; 7
	cbi(DDRC,PC7);	
    4570:	3f 98       	cbi	0x07, 7	; 7

	// Setup Port D pins as input to minimize power consumption
	cbi(DDRD,IN_BT_RXD);	
    4572:	50 98       	cbi	0x0a, 0	; 10
	cbi(DDRD,OUT_BT_TXD);	
    4574:	51 98       	cbi	0x0a, 1	; 10
	cbi(DDRD,OUT_BT_RESET_N);	
    4576:	52 98       	cbi	0x0a, 2	; 10
	cbi(DDRD,OUT_LED_GN);	
    4578:	53 98       	cbi	0x0a, 3	; 10
	cbi(DDRD,PD4);	
    457a:	54 98       	cbi	0x0a, 4	; 10
	cbi(DDRD,PD5);	
    457c:	55 98       	cbi	0x0a, 5	; 10
	cbi(DDRD,PD6);
    457e:	56 98       	cbi	0x0a, 6	; 10
	cbi(DDRD,PD7);	
    4580:	57 98       	cbi	0x0a, 7	; 10
	cbi(DDRD,IN_BT_DISC);	
	cbi(DDRD,PD6);
	cbi(DDRD,PD7);	
#endif
	/* Set peripherials to the lowest power states */
	_bluetooth_turn_on();
    4582:	0e 94 33 22 	call	0x4466	; 0x4466 <_bluetooth_turn_on>
	_accelerometer_turn_on();
    4586:	0e 94 93 22 	call	0x4526	; 0x4526 <_accelerometer_turn_on>
	_accelerometer_set_sensitivity(_4G);
    458a:	80 e0       	ldi	r24, 0x00	; 0
    458c:	0e 94 88 22 	call	0x4510	; 0x4510 <_accelerometer_set_sensitivity>
		OSCCAL= prev_osccal;	
	}
	
	_yellowled_turn_off();
	*/
	_atmega_initialize_uart0(ATMEGA_BAUD_38400, TX_RX_UART_MODE);
    4590:	8c e0       	ldi	r24, 0x0C	; 12
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	62 e0       	ldi	r22, 0x02	; 2
    4596:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_atmega_initialize_uart0>


	/* Set ADC for conversion */    
    //Set ADC reference to AVCC
     ADMUX |=(1 << REFS0);
    459a:	ec e7       	ldi	r30, 0x7C	; 124
    459c:	f0 e0       	ldi	r31, 0x00	; 0
    459e:	80 81       	ld	r24, Z
    45a0:	80 64       	ori	r24, 0x40	; 64
    45a2:	80 83       	st	Z, r24
     //Set the ADC conversion clock prescalar       
     _atmega_set_adc_clock(ADC_PRESCALAR_64);
    45a4:	85 e0       	ldi	r24, 0x05	; 5
    45a6:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <_atmega_set_adc_clock>


void _atmega_adc_turn_on()
{

	sbi(ADCSRA,ADEN);
    45aa:	ea e7       	ldi	r30, 0x7A	; 122
    45ac:	f0 e0       	ldi	r31, 0x00	; 0
    45ae:	80 81       	ld	r24, Z
    45b0:	80 68       	ori	r24, 0x80	; 128
    45b2:	80 83       	st	Z, r24

	//Turn on ADC conversion_send_data_bufferred
	 _atmega_adc_turn_on();


}
    45b4:	08 95       	ret

000045b6 <_accelerometer_turn_off>:
	
*/
void _accelerometer_turn_off(void)
{
#ifdef _VERSION==3
	 _accelerometer_set_sensitivity(_4G);
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	0e 94 88 22 	call	0x4510	; 0x4510 <_accelerometer_set_sensitivity>
	 cbi(DDRB,OUT_ACCEL_SEL1);		 
    45bc:	20 98       	cbi	0x04, 0	; 4
	 sbi(DDRB,OUT_ACCEL_SLEEP_N); //sleep pin in output mode
    45be:	23 9a       	sbi	0x04, 3	; 4
	 cbi(PORTB,OUT_ACCEL_SLEEP_N); //clear the pin
    45c0:	2b 98       	cbi	0x05, 3	; 5
	 cbi(PORTB,OUT_ACCEL_SLEEP_N); //clear the pin
#endif
	 
	 
	 // Set the status of the accelerometer to false
	 cbi(atmega_status, BIT1_ACCELEROMETER_STATUS);
    45c2:	80 91 e4 35 	lds	r24, 0x35E4
    45c6:	8d 7f       	andi	r24, 0xFD	; 253
    45c8:	80 93 e4 35 	sts	0x35E4, r24
}
    45cc:	08 95       	ret

000045ce <_is_accelerometer_on>:
	Description: Tests if the accelerometer status bit is on
	
*/

unsigned char _is_accelerometer_on(void)
{
    45ce:	80 91 e4 35 	lds	r24, 0x35E4
    45d2:	86 95       	lsr	r24
	return ((atmega_status>>BIT1_ACCELEROMETER_STATUS) & 0x01);
}
    45d4:	81 70       	andi	r24, 0x01	; 1
    45d6:	08 95       	ret

000045d8 <_greenled_turn_on>:
*/

void _greenled_turn_on(void)
{
#ifdef _VERSION==3
	sbi(DDRD,OUT_LED_GN);
    45d8:	53 9a       	sbi	0x0a, 3	; 10
	sbi(PORTD,OUT_LED_GN);
    45da:	5b 9a       	sbi	0x0b, 3	; 11
	sbi(DDRC,OUT_LED_GN);
	sbi(PORTC,OUT_LED_GN);
#endif
	
	// Set the status of the green led to true
	sbi(atmega_status, BIT2_GREENLED_STATUS); 
    45dc:	80 91 e4 35 	lds	r24, 0x35E4
    45e0:	84 60       	ori	r24, 0x04	; 4
    45e2:	80 93 e4 35 	sts	0x35E4, r24
}
    45e6:	08 95       	ret

000045e8 <_greenled_turn_off>:

void _greenled_turn_off(void)
{

#ifdef _VERSION==3
	sbi(DDRD,OUT_LED_GN);
    45e8:	53 9a       	sbi	0x0a, 3	; 10
	cbi(PORTD,OUT_LED_GN);
    45ea:	5b 98       	cbi	0x0b, 3	; 11
	cbi(DDRD,OUT_LED_GN);
    45ec:	53 98       	cbi	0x0a, 3	; 10
	cbi(PORTC,OUT_LED_GN);
	cbi(DDRC,OUT_LED_GN);
#endif
	
	// Set the status of the green led to false
	cbi(atmega_status, BIT2_GREENLED_STATUS);
    45ee:	80 91 e4 35 	lds	r24, 0x35E4
    45f2:	8b 7f       	andi	r24, 0xFB	; 251
    45f4:	80 93 e4 35 	sts	0x35E4, r24

}
    45f8:	08 95       	ret

000045fa <_is_greenled_on>:
	
	Description: Tests if the green led is on
	
*/
unsigned char _is_greenled_on(void)
{
    45fa:	80 91 e4 35 	lds	r24, 0x35E4
    45fe:	86 95       	lsr	r24
    4600:	86 95       	lsr	r24
	return ((atmega_status>>BIT2_GREENLED_STATUS) & 0x01);
}
    4602:	81 70       	andi	r24, 0x01	; 1
    4604:	08 95       	ret

00004606 <_yellowled_turn_on>:
	Description: This function turns on the yellow led
	
*/
void _yellowled_turn_on(void)
{
	sbi(DDRC,OUT_LED_YE);
    4606:	3b 9a       	sbi	0x07, 3	; 7
	sbi(PORTC,OUT_LED_YE);
    4608:	43 9a       	sbi	0x08, 3	; 8

	// Set the status of the yellow led to true
	sbi(atmega_status, BIT3_YELLOWLED_STATUS);
    460a:	80 91 e4 35 	lds	r24, 0x35E4
    460e:	88 60       	ori	r24, 0x08	; 8
    4610:	80 93 e4 35 	sts	0x35E4, r24
}
    4614:	08 95       	ret

00004616 <_yellowled_turn_off>:
	
*/
void _yellowled_turn_off(void)
{

	sbi(DDRC,OUT_LED_YE);
    4616:	3b 9a       	sbi	0x07, 3	; 7
	cbi(PORTC,OUT_LED_YE);
    4618:	43 98       	cbi	0x08, 3	; 8
	cbi(DDRC,OUT_LED_YE);	
    461a:	3b 98       	cbi	0x07, 3	; 7
	
	// Set the status of the yellow led to false
	cbi(atmega_status, BIT3_YELLOWLED_STATUS);
    461c:	80 91 e4 35 	lds	r24, 0x35E4
    4620:	87 7f       	andi	r24, 0xF7	; 247
    4622:	80 93 e4 35 	sts	0x35E4, r24
}
    4626:	08 95       	ret

00004628 <_atmega_finalize>:
	Description: This function shuts down all peripherals and makes sure that the device is in its lowest power state
	
*/
void _atmega_finalize(void)
{
	cli();
    4628:	f8 94       	cli
	_bluetooth_turn_off();
    462a:	0e 94 3e 22 	call	0x447c	; 0x447c <_bluetooth_turn_off>
	_accelerometer_turn_off();
    462e:	0e 94 db 22 	call	0x45b6	; 0x45b6 <_accelerometer_turn_off>
	_greenled_turn_off();
    4632:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <_greenled_turn_off>
	_yellowled_turn_off();
    4636:	0e 94 0b 23 	call	0x4616	; 0x4616 <_yellowled_turn_off>

	//Set all ports as inputs
	DDRA=0x00;
    463a:	11 b8       	out	0x01, r1	; 1
	DDRB=0x00;
    463c:	14 b8       	out	0x04, r1	; 4
	DDRC=0x00;
    463e:	17 b8       	out	0x07, r1	; 7
	DDRD=0x00;
    4640:	1a b8       	out	0x0a, r1	; 10

	PORTA=0x00;
    4642:	12 b8       	out	0x02, r1	; 2
	PORTB=0x00;
    4644:	15 b8       	out	0x05, r1	; 5
	PORTC=0x00;
    4646:	18 b8       	out	0x08, r1	; 8
	PORTD=0x00;
    4648:	1b b8       	out	0x0b, r1	; 11
	
*/
void _atmega_disable_timer2(void)
{	
	//disable timer interrupt
	TIMSK2=0;
    464a:	10 92 70 00 	sts	0x0070, r1
	// reset counter unit
	TCCR2B=0;
    464e:	10 92 b1 00 	sts	0x00B1, r1

	// Disable timer
	_atmega_disable_timer2();

	//Disable watchdog
	wdt_disable();
    4652:	88 e1       	ldi	r24, 0x18	; 24
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	f8 94       	cli
    4658:	80 93 60 00 	sts	0x0060, r24
    465c:	10 92 60 00 	sts	0x0060, r1
    4660:	0f be       	out	0x3f, r0	; 63
}


void _atmega_adc_turn_off()
{
	cbi(ADCSRA,ADEN);
    4662:	ea e7       	ldi	r30, 0x7A	; 122
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	80 81       	ld	r24, Z
    4668:	8f 77       	andi	r24, 0x7F	; 127
    466a:	80 83       	st	Z, r24
	//Disable ADC Conversion
	_atmega_adc_turn_off();


	// Disable pull-ups
  	MCUCR |= (1u << PUD); 
    466c:	85 b7       	in	r24, 0x35	; 53
    466e:	80 61       	ori	r24, 0x10	; 16
    4670:	85 bf       	out	0x35, r24	; 53
	// Disable Analog comparitor
  	ACSR &= ~(1<<ACIE);   // Disable analog comparator interrupt
    4672:	80 b7       	in	r24, 0x30	; 48
    4674:	87 7f       	andi	r24, 0xF7	; 247
    4676:	80 bf       	out	0x30, r24	; 48
  	ACSR |= (1<<ACD);     // Disable analog comparitor 
    4678:	80 b7       	in	r24, 0x30	; 48
    467a:	80 68       	ori	r24, 0x80	; 128
    467c:	80 bf       	out	0x30, r24	; 48
	// Power Reduction Register, everything off;
  	//PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTWI)); 

	//Power down the MCU

	sleep_enable();
    467e:	83 b7       	in	r24, 0x33	; 51
    4680:	81 60       	ori	r24, 0x01	; 1
    4682:	83 bf       	out	0x33, r24	; 51
    sleep_bod_disable();
    4684:	85 b7       	in	r24, 0x35	; 53
    4686:	80 66       	ori	r24, 0x60	; 96
    4688:	85 bf       	out	0x35, r24	; 53
    468a:	8f 7d       	andi	r24, 0xDF	; 223
    468c:	85 bf       	out	0x35, r24	; 53
    sei();	
    468e:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    4690:	83 b7       	in	r24, 0x33	; 51
    4692:	81 7f       	andi	r24, 0xF1	; 241
    4694:	84 60       	ori	r24, 0x04	; 4
    4696:	83 bf       	out	0x33, r24	; 51
	sleep_cpu();
    4698:	88 95       	sleep
    sleep_disable();
    469a:	83 b7       	in	r24, 0x33	; 51
    469c:	8e 7f       	andi	r24, 0xFE	; 254
    469e:	83 bf       	out	0x33, r24	; 51

}
    46a0:	08 95       	ret

000046a2 <_is_yellowled_on>:
	
	Description: Tests if the yellow led is on
	
*/
unsigned char _is_yellowled_on(void)
{
    46a2:	80 91 e4 35 	lds	r24, 0x35E4
    46a6:	86 95       	lsr	r24
    46a8:	86 95       	lsr	r24
    46aa:	86 95       	lsr	r24
	return ((atmega_status>>BIT3_YELLOWLED_STATUS) & 0x01);
}
    46ac:	81 70       	andi	r24, 0x01	; 1
    46ae:	08 95       	ret

000046b0 <_is_docked>:
	Description: Tests if the wocket is docked
	
*/
unsigned char _is_docked(void)
{	
	return (!( 0x01 & (PINA>>IN_DOCK_N)));
    46b0:	80 b1       	in	r24, 0x00	; 0
    46b2:	86 95       	lsr	r24
    46b4:	86 95       	lsr	r24
    46b6:	86 95       	lsr	r24
    46b8:	80 95       	com	r24
}
    46ba:	81 70       	andi	r24, 0x01	; 1
    46bc:	08 95       	ret

000046be <ComputeByte>:
  unsigned char ComputeByte(unsigned char inCrc, unsigned char inData)
  {
     int i;
     unsigned short data;
     data = (unsigned short)(inCrc ^ inData);
     data <<= 8;
    46be:	36 2f       	mov	r19, r22
    46c0:	38 27       	eor	r19, r24
    46c2:	20 e0       	ldi	r18, 0x00	; 0
    46c4:	80 e0       	ldi	r24, 0x00	; 0
    46c6:	90 e0       	ldi	r25, 0x00	; 0
     for (i = 0; i < 8; i++)
     {
        if ((data & 0x8000) != 0)
        	data = (unsigned short)(data ^ POLYNOMIAL);
    46c8:	40 e8       	ldi	r20, 0x80	; 128
    46ca:	53 e8       	ldi	r21, 0x83	; 131
     unsigned short data;
     data = (unsigned short)(inCrc ^ inData);
     data <<= 8;
     for (i = 0; i < 8; i++)
     {
        if ((data & 0x8000) != 0)
    46cc:	37 ff       	sbrs	r19, 7
    46ce:	02 c0       	rjmp	.+4      	; 0x46d4 <ComputeByte+0x16>
        	data = (unsigned short)(data ^ POLYNOMIAL);
    46d0:	24 27       	eor	r18, r20
    46d2:	35 27       	eor	r19, r21
        data = (unsigned short)(data << 1);
    46d4:	22 0f       	add	r18, r18
    46d6:	33 1f       	adc	r19, r19
  {
     int i;
     unsigned short data;
     data = (unsigned short)(inCrc ^ inData);
     data <<= 8;
     for (i = 0; i < 8; i++)
    46d8:	01 96       	adiw	r24, 0x01	; 1
    46da:	88 30       	cpi	r24, 0x08	; 8
    46dc:	91 05       	cpc	r25, r1
    46de:	b1 f7       	brne	.-20     	; 0x46cc <ComputeByte+0xe>
        if ((data & 0x8000) != 0)
        	data = (unsigned short)(data ^ POLYNOMIAL);
        data = (unsigned short)(data << 1);
     }
     return (unsigned char)(data >> 8);
   }
    46e0:	83 2f       	mov	r24, r19
    46e2:	08 95       	ret

000046e4 <ComputeCRC8>:

   
  unsigned char ComputeCRC8(unsigned char crc, unsigned char *data, int len)
  {
    46e4:	ef 92       	push	r14
    46e6:	ff 92       	push	r15
    46e8:	0f 93       	push	r16
    46ea:	1f 93       	push	r17
    46ec:	cf 93       	push	r28
    46ee:	df 93       	push	r29
    46f0:	7b 01       	movw	r14, r22
    46f2:	8a 01       	movw	r16, r20
    46f4:	c0 e0       	ldi	r28, 0x00	; 0
    46f6:	d0 e0       	ldi	r29, 0x00	; 0
    46f8:	07 c0       	rjmp	.+14     	; 0x4708 <ComputeCRC8+0x24>
      for (int i = 0; (i < len); i++)
          crc = ComputeByte(crc, *(data+i));
    46fa:	f7 01       	movw	r30, r14
    46fc:	ec 0f       	add	r30, r28
    46fe:	fd 1f       	adc	r31, r29
    4700:	60 81       	ld	r22, Z
    4702:	0e 94 5f 23 	call	0x46be	; 0x46be <ComputeByte>
   }

   
  unsigned char ComputeCRC8(unsigned char crc, unsigned char *data, int len)
  {
      for (int i = 0; (i < len); i++)
    4706:	21 96       	adiw	r28, 0x01	; 1
    4708:	c0 17       	cp	r28, r16
    470a:	d1 07       	cpc	r29, r17
    470c:	b4 f3       	brlt	.-20     	; 0x46fa <ComputeCRC8+0x16>
          crc = ComputeByte(crc, *(data+i));
       return crc;
  }
    470e:	df 91       	pop	r29
    4710:	cf 91       	pop	r28
    4712:	1f 91       	pop	r17
    4714:	0f 91       	pop	r16
    4716:	ff 90       	pop	r15
    4718:	ef 90       	pop	r14
    471a:	08 95       	ret

0000471c <CRC16>:


unsigned short CRC16(unsigned char *buf, int len )
{
    471c:	cf 93       	push	r28
    471e:	df 93       	push	r29
    4720:	dc 01       	movw	r26, r24
    4722:	20 e0       	ldi	r18, 0x00	; 0
    4724:	30 e0       	ldi	r19, 0x00	; 0
	while( len-- ) {
		int i;
		crc ^= *(char *)buf++ << 8;
		for( i = 0; i < 8; ++i ) {
			if( crc & 0x8000 )
				crc = (crc << 1) ^ 0x1021;
    4726:	c1 e2       	ldi	r28, 0x21	; 33
    4728:	d0 e1       	ldi	r29, 0x10	; 16
    472a:	15 c0       	rjmp	.+42     	; 0x4756 <CRC16+0x3a>
unsigned short CRC16(unsigned char *buf, int len )
{
	unsigned short crc = 0;
	while( len-- ) {
		int i;
		crc ^= *(char *)buf++ << 8;
    472c:	5c 91       	ld	r21, X
    472e:	40 e0       	ldi	r20, 0x00	; 0
    4730:	24 27       	eor	r18, r20
    4732:	35 27       	eor	r19, r21
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	f9 01       	movw	r30, r18
    473a:	ee 0f       	add	r30, r30
    473c:	ff 1f       	adc	r31, r31
		for( i = 0; i < 8; ++i ) {
			if( crc & 0x8000 )
    473e:	37 ff       	sbrs	r19, 7
    4740:	04 c0       	rjmp	.+8      	; 0x474a <CRC16+0x2e>
				crc = (crc << 1) ^ 0x1021;
    4742:	9f 01       	movw	r18, r30
    4744:	2c 27       	eor	r18, r28
    4746:	3d 27       	eor	r19, r29
    4748:	01 c0       	rjmp	.+2      	; 0x474c <CRC16+0x30>
			else
				crc = crc << 1;
    474a:	9f 01       	movw	r18, r30
{
	unsigned short crc = 0;
	while( len-- ) {
		int i;
		crc ^= *(char *)buf++ << 8;
		for( i = 0; i < 8; ++i ) {
    474c:	01 96       	adiw	r24, 0x01	; 1
    474e:	88 30       	cpi	r24, 0x08	; 8
    4750:	91 05       	cpc	r25, r1
    4752:	91 f7       	brne	.-28     	; 0x4738 <CRC16+0x1c>
unsigned short CRC16(unsigned char *buf, int len )
{
	unsigned short crc = 0;
	while( len-- ) {
		int i;
		crc ^= *(char *)buf++ << 8;
    4754:	11 96       	adiw	r26, 0x01	; 1


unsigned short CRC16(unsigned char *buf, int len )
{
	unsigned short crc = 0;
	while( len-- ) {
    4756:	61 50       	subi	r22, 0x01	; 1
    4758:	70 40       	sbci	r23, 0x00	; 0
    475a:	8f ef       	ldi	r24, 0xFF	; 255
    475c:	6f 3f       	cpi	r22, 0xFF	; 255
    475e:	78 07       	cpc	r23, r24
    4760:	29 f7       	brne	.-54     	; 0x472c <CRC16+0x10>
			else
				crc = crc << 1;
		}
	}
	return crc;
}
    4762:	c9 01       	movw	r24, r18
    4764:	df 91       	pop	r29
    4766:	cf 91       	pop	r28
    4768:	08 95       	ret

0000476a <__mulsi3>:
    476a:	62 9f       	mul	r22, r18
    476c:	d0 01       	movw	r26, r0
    476e:	73 9f       	mul	r23, r19
    4770:	f0 01       	movw	r30, r0
    4772:	82 9f       	mul	r24, r18
    4774:	e0 0d       	add	r30, r0
    4776:	f1 1d       	adc	r31, r1
    4778:	64 9f       	mul	r22, r20
    477a:	e0 0d       	add	r30, r0
    477c:	f1 1d       	adc	r31, r1
    477e:	92 9f       	mul	r25, r18
    4780:	f0 0d       	add	r31, r0
    4782:	83 9f       	mul	r24, r19
    4784:	f0 0d       	add	r31, r0
    4786:	74 9f       	mul	r23, r20
    4788:	f0 0d       	add	r31, r0
    478a:	65 9f       	mul	r22, r21
    478c:	f0 0d       	add	r31, r0
    478e:	99 27       	eor	r25, r25
    4790:	72 9f       	mul	r23, r18
    4792:	b0 0d       	add	r27, r0
    4794:	e1 1d       	adc	r30, r1
    4796:	f9 1f       	adc	r31, r25
    4798:	63 9f       	mul	r22, r19
    479a:	b0 0d       	add	r27, r0
    479c:	e1 1d       	adc	r30, r1
    479e:	f9 1f       	adc	r31, r25
    47a0:	bd 01       	movw	r22, r26
    47a2:	cf 01       	movw	r24, r30
    47a4:	11 24       	eor	r1, r1
    47a6:	08 95       	ret

000047a8 <__udivmodhi4>:
    47a8:	aa 1b       	sub	r26, r26
    47aa:	bb 1b       	sub	r27, r27
    47ac:	51 e1       	ldi	r21, 0x11	; 17
    47ae:	07 c0       	rjmp	.+14     	; 0x47be <__udivmodhi4_ep>

000047b0 <__udivmodhi4_loop>:
    47b0:	aa 1f       	adc	r26, r26
    47b2:	bb 1f       	adc	r27, r27
    47b4:	a6 17       	cp	r26, r22
    47b6:	b7 07       	cpc	r27, r23
    47b8:	10 f0       	brcs	.+4      	; 0x47be <__udivmodhi4_ep>
    47ba:	a6 1b       	sub	r26, r22
    47bc:	b7 0b       	sbc	r27, r23

000047be <__udivmodhi4_ep>:
    47be:	88 1f       	adc	r24, r24
    47c0:	99 1f       	adc	r25, r25
    47c2:	5a 95       	dec	r21
    47c4:	a9 f7       	brne	.-22     	; 0x47b0 <__udivmodhi4_loop>
    47c6:	80 95       	com	r24
    47c8:	90 95       	com	r25
    47ca:	bc 01       	movw	r22, r24
    47cc:	cd 01       	movw	r24, r26
    47ce:	08 95       	ret

000047d0 <__udivmodsi4>:
    47d0:	a1 e2       	ldi	r26, 0x21	; 33
    47d2:	1a 2e       	mov	r1, r26
    47d4:	aa 1b       	sub	r26, r26
    47d6:	bb 1b       	sub	r27, r27
    47d8:	fd 01       	movw	r30, r26
    47da:	0d c0       	rjmp	.+26     	; 0x47f6 <__udivmodsi4_ep>

000047dc <__udivmodsi4_loop>:
    47dc:	aa 1f       	adc	r26, r26
    47de:	bb 1f       	adc	r27, r27
    47e0:	ee 1f       	adc	r30, r30
    47e2:	ff 1f       	adc	r31, r31
    47e4:	a2 17       	cp	r26, r18
    47e6:	b3 07       	cpc	r27, r19
    47e8:	e4 07       	cpc	r30, r20
    47ea:	f5 07       	cpc	r31, r21
    47ec:	20 f0       	brcs	.+8      	; 0x47f6 <__udivmodsi4_ep>
    47ee:	a2 1b       	sub	r26, r18
    47f0:	b3 0b       	sbc	r27, r19
    47f2:	e4 0b       	sbc	r30, r20
    47f4:	f5 0b       	sbc	r31, r21

000047f6 <__udivmodsi4_ep>:
    47f6:	66 1f       	adc	r22, r22
    47f8:	77 1f       	adc	r23, r23
    47fa:	88 1f       	adc	r24, r24
    47fc:	99 1f       	adc	r25, r25
    47fe:	1a 94       	dec	r1
    4800:	69 f7       	brne	.-38     	; 0x47dc <__udivmodsi4_loop>
    4802:	60 95       	com	r22
    4804:	70 95       	com	r23
    4806:	80 95       	com	r24
    4808:	90 95       	com	r25
    480a:	9b 01       	movw	r18, r22
    480c:	ac 01       	movw	r20, r24
    480e:	bd 01       	movw	r22, r26
    4810:	cf 01       	movw	r24, r30
    4812:	08 95       	ret

00004814 <__divmodsi4>:
    4814:	97 fb       	bst	r25, 7
    4816:	09 2e       	mov	r0, r25
    4818:	05 26       	eor	r0, r21
    481a:	0e d0       	rcall	.+28     	; 0x4838 <__divmodsi4_neg1>
    481c:	57 fd       	sbrc	r21, 7
    481e:	04 d0       	rcall	.+8      	; 0x4828 <__divmodsi4_neg2>
    4820:	d7 df       	rcall	.-82     	; 0x47d0 <__udivmodsi4>
    4822:	0a d0       	rcall	.+20     	; 0x4838 <__divmodsi4_neg1>
    4824:	00 1c       	adc	r0, r0
    4826:	38 f4       	brcc	.+14     	; 0x4836 <__divmodsi4_exit>

00004828 <__divmodsi4_neg2>:
    4828:	50 95       	com	r21
    482a:	40 95       	com	r20
    482c:	30 95       	com	r19
    482e:	21 95       	neg	r18
    4830:	3f 4f       	sbci	r19, 0xFF	; 255
    4832:	4f 4f       	sbci	r20, 0xFF	; 255
    4834:	5f 4f       	sbci	r21, 0xFF	; 255

00004836 <__divmodsi4_exit>:
    4836:	08 95       	ret

00004838 <__divmodsi4_neg1>:
    4838:	f6 f7       	brtc	.-4      	; 0x4836 <__divmodsi4_exit>
    483a:	90 95       	com	r25
    483c:	80 95       	com	r24
    483e:	70 95       	com	r23
    4840:	61 95       	neg	r22
    4842:	7f 4f       	sbci	r23, 0xFF	; 255
    4844:	8f 4f       	sbci	r24, 0xFF	; 255
    4846:	9f 4f       	sbci	r25, 0xFF	; 255
    4848:	08 95       	ret

0000484a <__eerd_byte_m1284p>:
    484a:	f9 99       	sbic	0x1f, 1	; 31
    484c:	fe cf       	rjmp	.-4      	; 0x484a <__eerd_byte_m1284p>
    484e:	92 bd       	out	0x22, r25	; 34
    4850:	81 bd       	out	0x21, r24	; 33
    4852:	f8 9a       	sbi	0x1f, 0	; 31
    4854:	99 27       	eor	r25, r25
    4856:	80 b5       	in	r24, 0x20	; 32
    4858:	08 95       	ret

0000485a <__eerd_word_m1284p>:
    485a:	a8 e1       	ldi	r26, 0x18	; 24
    485c:	b0 e0       	ldi	r27, 0x00	; 0
    485e:	42 e0       	ldi	r20, 0x02	; 2
    4860:	50 e0       	ldi	r21, 0x00	; 0
    4862:	0c 94 48 24 	jmp	0x4890	; 0x4890 <__eerd_blraw_m1284p>

00004866 <__eewr_byte_m1284p>:
    4866:	26 2f       	mov	r18, r22

00004868 <__eewr_r18_m1284p>:
    4868:	f9 99       	sbic	0x1f, 1	; 31
    486a:	fe cf       	rjmp	.-4      	; 0x4868 <__eewr_r18_m1284p>
    486c:	1f ba       	out	0x1f, r1	; 31
    486e:	92 bd       	out	0x22, r25	; 34
    4870:	81 bd       	out	0x21, r24	; 33
    4872:	20 bd       	out	0x20, r18	; 32
    4874:	0f b6       	in	r0, 0x3f	; 63
    4876:	f8 94       	cli
    4878:	fa 9a       	sbi	0x1f, 2	; 31
    487a:	f9 9a       	sbi	0x1f, 1	; 31
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	01 96       	adiw	r24, 0x01	; 1
    4880:	08 95       	ret

00004882 <__eewr_word_m1284p>:
    4882:	0e 94 33 24 	call	0x4866	; 0x4866 <__eewr_byte_m1284p>
    4886:	27 2f       	mov	r18, r23
    4888:	0c 94 34 24 	jmp	0x4868	; 0x4868 <__eewr_r18_m1284p>

0000488c <__eerd_block_m1284p>:
    488c:	dc 01       	movw	r26, r24
    488e:	cb 01       	movw	r24, r22

00004890 <__eerd_blraw_m1284p>:
    4890:	fc 01       	movw	r30, r24
    4892:	f9 99       	sbic	0x1f, 1	; 31
    4894:	fe cf       	rjmp	.-4      	; 0x4892 <__eerd_blraw_m1284p+0x2>
    4896:	06 c0       	rjmp	.+12     	; 0x48a4 <__eerd_blraw_m1284p+0x14>
    4898:	f2 bd       	out	0x22, r31	; 34
    489a:	e1 bd       	out	0x21, r30	; 33
    489c:	f8 9a       	sbi	0x1f, 0	; 31
    489e:	31 96       	adiw	r30, 0x01	; 1
    48a0:	00 b4       	in	r0, 0x20	; 32
    48a2:	0d 92       	st	X+, r0
    48a4:	41 50       	subi	r20, 0x01	; 1
    48a6:	50 40       	sbci	r21, 0x00	; 0
    48a8:	b8 f7       	brcc	.-18     	; 0x4898 <__eerd_blraw_m1284p+0x8>
    48aa:	08 95       	ret

000048ac <_exit>:
    48ac:	f8 94       	cli

000048ae <__stop_program>:
    48ae:	ff cf       	rjmp	.-2      	; 0x48ae <__stop_program>
