
Wockets-Version3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  0000320a  000032be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000320a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000038c0  00800210  00800210  000033ce  2**0
                  ALLOC
  3 .eeprom       0000001e  00810000  00810000  000033ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000060  00000000  00000000  000033ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000b02  00000000  00000000  0000344c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020ba  00000000  00000000  00003f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000673  00000000  00000000  00006008  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000202e  00000000  00000000  0000667b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  000086ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093b  00000000  00000000  00008a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b7  00000000  00000000  00009367  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  00009b1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_11>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      8c:	2e 06       	cpc	r2, r30
      8e:	2e 06       	cpc	r2, r30
      90:	2e 06       	cpc	r2, r30
      92:	2e 06       	cpc	r2, r30
      94:	2e 06       	cpc	r2, r30
      96:	30 06       	cpc	r3, r16
      98:	2e 06       	cpc	r2, r30
      9a:	32 06       	cpc	r3, r18
      9c:	2e 06       	cpc	r2, r30
      9e:	30 06       	cpc	r3, r16
      a0:	2e 06       	cpc	r2, r30
      a2:	30 06       	cpc	r3, r16
      a4:	2e 06       	cpc	r2, r30
      a6:	30 06       	cpc	r3, r16
      a8:	2e 06       	cpc	r2, r30
      aa:	2e 06       	cpc	r2, r30
      ac:	2e 06       	cpc	r2, r30
      ae:	2e 06       	cpc	r2, r30
      b0:	2e 06       	cpc	r2, r30
      b2:	30 06       	cpc	r3, r16
      b4:	2e 06       	cpc	r2, r30
      b6:	32 06       	cpc	r3, r18
      b8:	2e 06       	cpc	r2, r30
      ba:	2e 06       	cpc	r2, r30
      bc:	77 06       	cpc	r7, r23
      be:	9a 06       	cpc	r9, r26
      c0:	5e 07       	cpc	r21, r30
      c2:	56 0a       	sbc	r5, r22
      c4:	94 06       	cpc	r9, r20
      c6:	56 0a       	sbc	r5, r22
      c8:	a4 08       	sbc	r10, r4
      ca:	d6 07       	cpc	r29, r22
      cc:	57 07       	cpc	r21, r23
      ce:	a2 07       	cpc	r26, r18
      d0:	56 0a       	sbc	r5, r22
      d2:	56 0a       	sbc	r5, r22
      d4:	46 07       	cpc	r20, r22
      d6:	4c 07       	cpc	r20, r28
      d8:	56 0a       	sbc	r5, r22
      da:	72 06       	cpc	r7, r18
      dc:	69 06       	cpc	r6, r25
      de:	6d 06       	cpc	r6, r29
      e0:	b9 07       	cpc	r27, r25
      e2:	c2 07       	cpc	r28, r18
      e4:	00 09       	sbc	r16, r0
      e6:	73 09       	sbc	r23, r3
      e8:	49 0a       	sbc	r4, r25
      ea:	4b 0a       	sbc	r4, r27

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d0 e4       	ldi	r29, 0x40	; 64
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	12 e0       	ldi	r17, 0x02	; 2
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	ea e0       	ldi	r30, 0x0A	; 10
     100:	f2 e3       	ldi	r31, 0x32	; 50
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a0 31       	cpi	r26, 0x10	; 16
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	1a e3       	ldi	r17, 0x3A	; 58
     114:	a0 e1       	ldi	r26, 0x10	; 16
     116:	b2 e0       	ldi	r27, 0x02	; 2
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a0 3d       	cpi	r26, 0xD0	; 208
     11e:	b1 07       	cpc	r27, r17
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
     126:	0c 94 03 19 	jmp	0x3206	; 0x3206 <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <__vector_11>:




ISR(TIMER2_OVF_vect)
{
     12e:	1f 92       	push	r1
     130:	0f 92       	push	r0
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	0f 92       	push	r0
     136:	0b b6       	in	r0, 0x3b	; 59
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	2f 93       	push	r18
     13e:	3f 93       	push	r19
     140:	4f 93       	push	r20
     142:	5f 93       	push	r21
     144:	6f 93       	push	r22
     146:	7f 93       	push	r23
     148:	8f 93       	push	r24
     14a:	9f 93       	push	r25
     14c:	af 93       	push	r26
     14e:	bf 93       	push	r27
     150:	ef 93       	push	r30
     152:	ff 93       	push	r31

//	if (_is_docked())
//		_atmega_finalize();
		
	/* Skip sampling depending on the sampling rate variables/timers */
 	if (interrupt_reps==0)
     154:	90 91 1e 02 	lds	r25, 0x021E
     158:	99 23       	and	r25, r25
     15a:	81 f4       	brne	.+32     	; 0x17c <__vector_11+0x4e>
	{	
		interrupt_reps=_wTCNT2_reps;
     15c:	80 91 05 01 	lds	r24, 0x0105
     160:	80 93 1e 02 	sts	0x021E, r24
		TCNT2=_wTCNT2;
     164:	80 91 32 02 	lds	r24, 0x0232
     168:	80 93 b2 00 	sts	0x00B2, r24
	}


	
	/* Sample data and transmt it if necessary */
	sampleFlag=1;
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	80 93 12 02 	sts	0x0212, r24
	if (_wTM==_TM_Continuous)
     172:	80 91 34 02 	lds	r24, 0x0234
     176:	88 23       	and	r24, r24
     178:	11 f5       	brne	.+68     	; 0x1be <__vector_11+0x90>
     17a:	0d c0       	rjmp	.+26     	; 0x196 <__vector_11+0x68>
	{	
		interrupt_reps=_wTCNT2_reps;
		TCNT2=_wTCNT2;
	}
	else{ //otherwise wait
		if (interrupt_reps==1)	
     17c:	91 30       	cpi	r25, 0x01	; 1
     17e:	19 f4       	brne	.+6      	; 0x186 <__vector_11+0x58>
			TCNT2=_wTCNT2_last;	
     180:	80 91 33 02 	lds	r24, 0x0233
     184:	02 c0       	rjmp	.+4      	; 0x18a <__vector_11+0x5c>
		else		
			TCNT2=_wTCNT2;					
     186:	80 91 32 02 	lds	r24, 0x0232
     18a:	80 93 b2 00 	sts	0x00B2, r24
		interrupt_reps--;
     18e:	91 50       	subi	r25, 0x01	; 1
     190:	90 93 1e 02 	sts	0x021E, r25
     194:	83 c0       	rjmp	.+262    	; 0x29c <__vector_11+0x16e>

	
	/* Sample data and transmt it if necessary */
	sampleFlag=1;
	if (_wTM==_TM_Continuous)
		 _wPC++;	
     196:	80 91 35 02 	lds	r24, 0x0235
     19a:	90 91 36 02 	lds	r25, 0x0236
     19e:	a0 91 37 02 	lds	r26, 0x0237
     1a2:	b0 91 38 02 	lds	r27, 0x0238
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	a1 1d       	adc	r26, r1
     1aa:	b1 1d       	adc	r27, r1
     1ac:	80 93 35 02 	sts	0x0235, r24
     1b0:	90 93 36 02 	sts	0x0236, r25
     1b4:	a0 93 37 02 	sts	0x0237, r26
     1b8:	b0 93 38 02 	sts	0x0238, r27
     1bc:	6f c0       	rjmp	.+222    	; 0x29c <__vector_11+0x16e>
	else if (_wTM==_TM_Burst_60)
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	09 f0       	breq	.+2      	; 0x1c4 <__vector_11+0x96>
     1c2:	6c c0       	rjmp	.+216    	; 0x29c <__vector_11+0x16e>
	{
		if (_wPDT!=0)
     1c4:	80 91 be 3a 	lds	r24, 0x3ABE
     1c8:	88 23       	and	r24, r24
     1ca:	99 f0       	breq	.+38     	; 0x1f2 <__vector_11+0xc4>
			_wShutdownTimer--;
     1cc:	80 91 39 02 	lds	r24, 0x0239
     1d0:	90 91 3a 02 	lds	r25, 0x023A
     1d4:	a0 91 3b 02 	lds	r26, 0x023B
     1d8:	b0 91 3c 02 	lds	r27, 0x023C
     1dc:	01 97       	sbiw	r24, 0x01	; 1
     1de:	a1 09       	sbc	r26, r1
     1e0:	b1 09       	sbc	r27, r1
     1e2:	80 93 39 02 	sts	0x0239, r24
     1e6:	90 93 3a 02 	sts	0x023A, r25
     1ea:	a0 93 3b 02 	sts	0x023B, r26
     1ee:	b0 93 3c 02 	sts	0x023C, r27

		 _wPC++;
     1f2:	80 91 35 02 	lds	r24, 0x0235
     1f6:	90 91 36 02 	lds	r25, 0x0236
     1fa:	a0 91 37 02 	lds	r26, 0x0237
     1fe:	b0 91 38 02 	lds	r27, 0x0238
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	a1 1d       	adc	r26, r1
     206:	b1 1d       	adc	r27, r1
     208:	80 93 35 02 	sts	0x0235, r24
     20c:	90 93 36 02 	sts	0x0236, r25
     210:	a0 93 37 02 	sts	0x0237, r26
     214:	b0 93 38 02 	sts	0x0238, r27

		if (!_bluetooth_is_connected()){
     218:	0e 94 9d 10 	call	0x213a	; 0x213a <_bluetooth_is_connected>
     21c:	88 23       	and	r24, r24
     21e:	b1 f4       	brne	.+44     	; 0x24c <__vector_11+0x11e>
			
	

			if (seconds_disconnected<1800)
     220:	80 91 1b 02 	lds	r24, 0x021B
     224:	90 91 1c 02 	lds	r25, 0x021C
     228:	27 e0       	ldi	r18, 0x07	; 7
     22a:	88 30       	cpi	r24, 0x08	; 8
     22c:	92 07       	cpc	r25, r18
     22e:	10 f4       	brcc	.+4      	; 0x234 <__vector_11+0x106>
				seconds_disconnected++;
     230:	01 96       	adiw	r24, 0x01	; 1
     232:	07 c0       	rjmp	.+14     	; 0x242 <__vector_11+0x114>
			else if (seconds_disconnected==1800)
     234:	88 50       	subi	r24, 0x08	; 8
     236:	97 40       	sbci	r25, 0x07	; 7
     238:	89 f5       	brne	.+98     	; 0x29c <__vector_11+0x16e>
			{
				_bluetooth_turn_on();
     23a:	0e 94 85 10 	call	0x210a	; 0x210a <_bluetooth_turn_on>
				//_atmega_reset();
				seconds_disconnected=1801;			
     23e:	89 e0       	ldi	r24, 0x09	; 9
     240:	97 e0       	ldi	r25, 0x07	; 7
     242:	90 93 1c 02 	sts	0x021C, r25
     246:	80 93 1b 02 	sts	0x021B, r24
     24a:	28 c0       	rjmp	.+80     	; 0x29c <__vector_11+0x16e>
			}
			return;	

		}
		//reset shutdown timer if connected
		if ((_wPDT!=0) && (_wShutdownTimer!=_DEFAULT_SHUTDOWN))
     24c:	80 91 be 3a 	lds	r24, 0x3ABE
     250:	88 23       	and	r24, r24
     252:	e9 f0       	breq	.+58     	; 0x28e <__vector_11+0x160>
     254:	20 91 3d 02 	lds	r18, 0x023D
     258:	30 91 3e 02 	lds	r19, 0x023E
     25c:	40 91 3f 02 	lds	r20, 0x023F
     260:	50 91 40 02 	lds	r21, 0x0240
     264:	80 91 39 02 	lds	r24, 0x0239
     268:	90 91 3a 02 	lds	r25, 0x023A
     26c:	a0 91 3b 02 	lds	r26, 0x023B
     270:	b0 91 3c 02 	lds	r27, 0x023C
     274:	82 17       	cp	r24, r18
     276:	93 07       	cpc	r25, r19
     278:	a4 07       	cpc	r26, r20
     27a:	b5 07       	cpc	r27, r21
     27c:	41 f0       	breq	.+16     	; 0x28e <__vector_11+0x160>
			_wShutdownTimer=_DEFAULT_SHUTDOWN;
     27e:	20 93 39 02 	sts	0x0239, r18
     282:	30 93 3a 02 	sts	0x023A, r19
     286:	40 93 3b 02 	sts	0x023B, r20
     28a:	50 93 3c 02 	sts	0x023C, r21

		_atmega_finalize();
     28e:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <_atmega_finalize>
		connected=1;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	80 93 1a 02 	sts	0x021A, r24
		_receive_data();		
     298:	0e 94 f6 05 	call	0xbec	; 0xbec <_receive_data>
	}




}
     29c:	ff 91       	pop	r31
     29e:	ef 91       	pop	r30
     2a0:	bf 91       	pop	r27
     2a2:	af 91       	pop	r26
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	7f 91       	pop	r23
     2aa:	6f 91       	pop	r22
     2ac:	5f 91       	pop	r21
     2ae:	4f 91       	pop	r20
     2b0:	3f 91       	pop	r19
     2b2:	2f 91       	pop	r18
     2b4:	0f 90       	pop	r0
     2b6:	0b be       	out	0x3b, r0	; 59
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <main>:
unsigned char interrupt_reps=0;



int main()
{
     2c2:	2f 92       	push	r2
     2c4:	3f 92       	push	r3
     2c6:	4f 92       	push	r4
     2c8:	5f 92       	push	r5
     2ca:	6f 92       	push	r6
     2cc:	7f 92       	push	r7
     2ce:	8f 92       	push	r8
     2d0:	9f 92       	push	r9
     2d2:	af 92       	push	r10
     2d4:	bf 92       	push	r11
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	df 93       	push	r29
     2e4:	cf 93       	push	r28
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	e2 97       	sbiw	r28, 0x32	; 50
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
				
scounter=0;
     2f6:	10 92 80 1e 	sts	0x1E80, r1
     2fa:	10 92 7f 1e 	sts	0x1E7F, r1


	//Initialized data buffer
	dataIndex=0;
     2fe:	10 92 4d 02 	sts	0x024D, r1
     302:	10 92 4c 02 	sts	0x024C, r1
	// Blink green for 5 seconds	

	_wocket_initialize();
     306:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_wocket_initialize>
		

	power_adc_disable();
     30a:	80 91 64 00 	lds	r24, 0x0064
     30e:	81 60       	ori	r24, 0x01	; 1
     310:	80 93 64 00 	sts	0x0064, r24
  	power_spi_disable();
     314:	80 91 64 00 	lds	r24, 0x0064
     318:	84 60       	ori	r24, 0x04	; 4
     31a:	80 93 64 00 	sts	0x0064, r24
  	power_timer0_disable();
     31e:	80 91 64 00 	lds	r24, 0x0064
     322:	80 62       	ori	r24, 0x20	; 32
     324:	80 93 64 00 	sts	0x0064, r24
  	power_timer1_disable();
     328:	80 91 64 00 	lds	r24, 0x0064
     32c:	88 60       	ori	r24, 0x08	; 8
     32e:	80 93 64 00 	sts	0x0064, r24
  	power_twi_disable();
     332:	80 91 64 00 	lds	r24, 0x0064
     336:	80 68       	ori	r24, 0x80	; 128
     338:	80 93 64 00 	sts	0x0064, r24
	xmean=0;
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	a0 e0       	ldi	r26, 0x00	; 0
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	80 93 6b 10 	sts	0x106B, r24
     348:	90 93 6c 10 	sts	0x106C, r25
     34c:	a0 93 6d 10 	sts	0x106D, r26
     350:	b0 93 6e 10 	sts	0x106E, r27
	ymean=0;
     354:	80 93 87 1e 	sts	0x1E87, r24
     358:	90 93 88 1e 	sts	0x1E88, r25
     35c:	a0 93 89 1e 	sts	0x1E89, r26
     360:	b0 93 8a 1e 	sts	0x1E8A, r27
	zmean=0;
     364:	80 93 44 02 	sts	0x0244, r24
     368:	90 93 45 02 	sts	0x0245, r25
     36c:	a0 93 46 02 	sts	0x0246, r26
     370:	b0 93 47 02 	sts	0x0247, r27
	xsum=0;
     374:	80 93 5e 10 	sts	0x105E, r24
     378:	90 93 5f 10 	sts	0x105F, r25
     37c:	a0 93 60 10 	sts	0x1060, r26
     380:	b0 93 61 10 	sts	0x1061, r27
	ysum=0;
     384:	80 93 67 10 	sts	0x1067, r24
     388:	90 93 68 10 	sts	0x1068, r25
     38c:	a0 93 69 10 	sts	0x1069, r26
     390:	b0 93 6a 10 	sts	0x106A, r27
	zsum=0;
     394:	80 93 63 10 	sts	0x1063, r24
     398:	90 93 64 10 	sts	0x1064, r25
     39c:	a0 93 65 10 	sts	0x1065, r26
     3a0:	b0 93 66 10 	sts	0x1066, r27
	sampleFlag=1;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	80 93 12 02 	sts	0x0212, r24


	while(1){
			

			if (connected)
     3aa:	80 91 1a 02 	lds	r24, 0x021A
     3ae:	88 23       	and	r24, r24
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <main+0xf2>
     3b2:	0c c3       	rjmp	.+1560   	; 0x9cc <main+0x70a>
				break;

		//Sample only in the main loop because of p
		if(sampleFlag){
     3b4:	80 91 12 02 	lds	r24, 0x0212
     3b8:	88 23       	and	r24, r24
     3ba:	09 f4       	brne	.+2      	; 0x3be <main+0xfc>
     3bc:	f1 c2       	rjmp	.+1506   	; 0x9a0 <main+0x6de>
			power_adc_enable();
     3be:	80 91 64 00 	lds	r24, 0x0064
     3c2:	8e 7f       	andi	r24, 0xFE	; 254
     3c4:	80 93 64 00 	sts	0x0064, r24
			_atmega_adc_turn_on();
     3c8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_atmega_adc_turn_on>

			x=_atmega_a2dConvert10bit(ADC2);
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	0e 94 29 0c 	call	0x1852	; 0x1852 <_atmega_a2dConvert10bit>
     3d2:	90 93 2b 02 	sts	0x022B, r25
     3d6:	80 93 2a 02 	sts	0x022A, r24
			y=_atmega_a2dConvert10bit(ADC1);
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 29 0c 	call	0x1852	; 0x1852 <_atmega_a2dConvert10bit>
     3e0:	90 93 2d 02 	sts	0x022D, r25
     3e4:	80 93 2c 02 	sts	0x022C, r24
			z=_atmega_a2dConvert10bit(ADC0);
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 29 0c 	call	0x1852	; 0x1852 <_atmega_a2dConvert10bit>
     3ee:	90 93 2f 02 	sts	0x022F, r25
     3f2:	80 93 2e 02 	sts	0x022E, r24
			b=_atmega_a2dConvert10bit(ADC7);
     3f6:	87 e0       	ldi	r24, 0x07	; 7
     3f8:	0e 94 29 0c 	call	0x1852	; 0x1852 <_atmega_a2dConvert10bit>
     3fc:	3c 01       	movw	r6, r24
     3fe:	90 93 42 02 	sts	0x0242, r25
     402:	80 93 41 02 	sts	0x0241, r24
	
			xs[dataIndex]=x;
     406:	40 90 4c 02 	lds	r4, 0x024C
     40a:	50 90 4d 02 	lds	r5, 0x024D
     40e:	60 91 2a 02 	lds	r22, 0x022A
     412:	70 91 2b 02 	lds	r23, 0x022B
     416:	f2 01       	movw	r30, r4
     418:	ee 0f       	add	r30, r30
     41a:	ff 1f       	adc	r31, r31
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	df 01       	movw	r26, r30
     422:	a4 57       	subi	r26, 0x74	; 116
     424:	b1 4e       	sbci	r27, 0xE1	; 225
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	6d 93       	st	X+, r22
     42c:	7d 93       	st	X+, r23
     42e:	8d 93       	st	X+, r24
     430:	9c 93       	st	X, r25
     432:	13 97       	sbiw	r26, 0x03	; 3
			ys[dataIndex]=y;
     434:	e0 90 2c 02 	lds	r14, 0x022C
     438:	f0 90 2d 02 	lds	r15, 0x022D
     43c:	df 01       	movw	r26, r30
     43e:	a2 5b       	subi	r26, 0xB2	; 178
     440:	bd 4f       	sbci	r27, 0xFD	; 253
     442:	00 e0       	ldi	r16, 0x00	; 0
     444:	10 e0       	ldi	r17, 0x00	; 0
     446:	ed 92       	st	X+, r14
     448:	fd 92       	st	X+, r15
     44a:	0d 93       	st	X+, r16
     44c:	1c 93       	st	X, r17
     44e:	13 97       	sbiw	r26, 0x03	; 3
			zs[dataIndex]=z;
     450:	a0 90 2e 02 	lds	r10, 0x022E
     454:	b0 90 2f 02 	lds	r11, 0x022F
     458:	df 01       	movw	r26, r30
     45a:	a1 59       	subi	r26, 0x91	; 145
     45c:	bf 4e       	sbci	r27, 0xEF	; 239
     45e:	cc 24       	eor	r12, r12
     460:	dd 24       	eor	r13, r13
     462:	ad 92       	st	X+, r10
     464:	bd 92       	st	X+, r11
     466:	cd 92       	st	X+, r12
     468:	dc 92       	st	X, r13
     46a:	13 97       	sbiw	r26, 0x03	; 3
			bs[dataIndex]=b;
     46c:	e4 56       	subi	r30, 0x64	; 100
     46e:	f3 4d       	sbci	r31, 0xD3	; 211
     470:	88 24       	eor	r8, r8
     472:	99 24       	eor	r9, r9
     474:	60 82       	st	Z, r6
     476:	71 82       	std	Z+1, r7	; 0x01
     478:	82 82       	std	Z+2, r8	; 0x02
     47a:	93 82       	std	Z+3, r9	; 0x03

			xmean+=x;
     47c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     480:	20 91 6b 10 	lds	r18, 0x106B
     484:	30 91 6c 10 	lds	r19, 0x106C
     488:	40 91 6d 10 	lds	r20, 0x106D
     48c:	50 91 6e 10 	lds	r21, 0x106E
     490:	0e 94 c5 12 	call	0x258a	; 0x258a <__addsf3>
     494:	69 a7       	std	Y+41, r22	; 0x29
     496:	7a a7       	std	Y+42, r23	; 0x2a
     498:	8b a7       	std	Y+43, r24	; 0x2b
     49a:	9c a7       	std	Y+44, r25	; 0x2c
     49c:	60 93 6b 10 	sts	0x106B, r22
     4a0:	70 93 6c 10 	sts	0x106C, r23
     4a4:	80 93 6d 10 	sts	0x106D, r24
     4a8:	90 93 6e 10 	sts	0x106E, r25
			ymean+=y;
     4ac:	c8 01       	movw	r24, r16
     4ae:	b7 01       	movw	r22, r14
     4b0:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     4b4:	20 91 87 1e 	lds	r18, 0x1E87
     4b8:	30 91 88 1e 	lds	r19, 0x1E88
     4bc:	40 91 89 1e 	lds	r20, 0x1E89
     4c0:	50 91 8a 1e 	lds	r21, 0x1E8A
     4c4:	0e 94 c5 12 	call	0x258a	; 0x258a <__addsf3>
     4c8:	6d a7       	std	Y+45, r22	; 0x2d
     4ca:	7e a7       	std	Y+46, r23	; 0x2e
     4cc:	8f a7       	std	Y+47, r24	; 0x2f
     4ce:	98 ab       	std	Y+48, r25	; 0x30
     4d0:	60 93 87 1e 	sts	0x1E87, r22
     4d4:	70 93 88 1e 	sts	0x1E88, r23
     4d8:	80 93 89 1e 	sts	0x1E89, r24
     4dc:	90 93 8a 1e 	sts	0x1E8A, r25
			zmean+=z;
     4e0:	c6 01       	movw	r24, r12
     4e2:	b5 01       	movw	r22, r10
     4e4:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     4e8:	20 91 44 02 	lds	r18, 0x0244
     4ec:	30 91 45 02 	lds	r19, 0x0245
     4f0:	40 91 46 02 	lds	r20, 0x0246
     4f4:	50 91 47 02 	lds	r21, 0x0247
     4f8:	0e 94 c5 12 	call	0x258a	; 0x258a <__addsf3>
     4fc:	5b 01       	movw	r10, r22
     4fe:	6c 01       	movw	r12, r24
     500:	60 93 44 02 	sts	0x0244, r22
     504:	70 93 45 02 	sts	0x0245, r23
     508:	80 93 46 02 	sts	0x0246, r24
     50c:	90 93 47 02 	sts	0x0247, r25
			bmean+=b;
     510:	c4 01       	movw	r24, r8
     512:	b3 01       	movw	r22, r6
     514:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     518:	20 91 48 02 	lds	r18, 0x0248
     51c:	30 91 49 02 	lds	r19, 0x0249
     520:	40 91 4a 02 	lds	r20, 0x024A
     524:	50 91 4b 02 	lds	r21, 0x024B
     528:	0e 94 c5 12 	call	0x258a	; 0x258a <__addsf3>
     52c:	7b 01       	movw	r14, r22
     52e:	8c 01       	movw	r16, r24
     530:	60 93 48 02 	sts	0x0248, r22
     534:	70 93 49 02 	sts	0x0249, r23
     538:	80 93 4a 02 	sts	0x024A, r24
     53c:	90 93 4b 02 	sts	0x024B, r25


			dataIndex++;				 
     540:	08 94       	sec
     542:	41 1c       	adc	r4, r1
     544:	51 1c       	adc	r5, r1
     546:	50 92 4d 02 	sts	0x024D, r5
     54a:	40 92 4c 02 	sts	0x024C, r4

			//Compute the noise level
			if (dataIndex==900)
     54e:	24 e8       	ldi	r18, 0x84	; 132
     550:	42 16       	cp	r4, r18
     552:	23 e0       	ldi	r18, 0x03	; 3
     554:	52 06       	cpc	r5, r18
     556:	09 f0       	breq	.+2      	; 0x55a <main+0x298>
     558:	1a c2       	rjmp	.+1076   	; 0x98e <main+0x6cc>
			{
				xmean/=900.0;
     55a:	69 a5       	ldd	r22, Y+41	; 0x29
     55c:	7a a5       	ldd	r23, Y+42	; 0x2a
     55e:	8b a5       	ldd	r24, Y+43	; 0x2b
     560:	9c a5       	ldd	r25, Y+44	; 0x2c
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	41 e6       	ldi	r20, 0x61	; 97
     568:	54 e4       	ldi	r21, 0x44	; 68
     56a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__divsf3>
     56e:	6d a3       	std	Y+37, r22	; 0x25
     570:	7e a3       	std	Y+38, r23	; 0x26
     572:	8f a3       	std	Y+39, r24	; 0x27
     574:	98 a7       	std	Y+40, r25	; 0x28
     576:	60 93 6b 10 	sts	0x106B, r22
     57a:	70 93 6c 10 	sts	0x106C, r23
     57e:	80 93 6d 10 	sts	0x106D, r24
     582:	90 93 6e 10 	sts	0x106E, r25
				ymean/=900.0;
     586:	6d a5       	ldd	r22, Y+45	; 0x2d
     588:	7e a5       	ldd	r23, Y+46	; 0x2e
     58a:	8f a5       	ldd	r24, Y+47	; 0x2f
     58c:	98 a9       	ldd	r25, Y+48	; 0x30
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	41 e6       	ldi	r20, 0x61	; 97
     594:	54 e4       	ldi	r21, 0x44	; 68
     596:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__divsf3>
     59a:	69 a3       	std	Y+33, r22	; 0x21
     59c:	7a a3       	std	Y+34, r23	; 0x22
     59e:	8b a3       	std	Y+35, r24	; 0x23
     5a0:	9c a3       	std	Y+36, r25	; 0x24
     5a2:	60 93 87 1e 	sts	0x1E87, r22
     5a6:	70 93 88 1e 	sts	0x1E88, r23
     5aa:	80 93 89 1e 	sts	0x1E89, r24
     5ae:	90 93 8a 1e 	sts	0x1E8A, r25
				zmean/=900.0;
     5b2:	c6 01       	movw	r24, r12
     5b4:	b5 01       	movw	r22, r10
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	41 e6       	ldi	r20, 0x61	; 97
     5bc:	54 e4       	ldi	r21, 0x44	; 68
     5be:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__divsf3>
     5c2:	6d 8f       	std	Y+29, r22	; 0x1d
     5c4:	7e 8f       	std	Y+30, r23	; 0x1e
     5c6:	8f 8f       	std	Y+31, r24	; 0x1f
     5c8:	98 a3       	std	Y+32, r25	; 0x20
     5ca:	60 93 44 02 	sts	0x0244, r22
     5ce:	70 93 45 02 	sts	0x0245, r23
     5d2:	80 93 46 02 	sts	0x0246, r24
     5d6:	90 93 47 02 	sts	0x0247, r25
				bmean/=900.0;
     5da:	c8 01       	movw	r24, r16
     5dc:	b7 01       	movw	r22, r14
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	41 e6       	ldi	r20, 0x61	; 97
     5e4:	54 e4       	ldi	r21, 0x44	; 68
     5e6:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__divsf3>
     5ea:	69 8f       	std	Y+25, r22	; 0x19
     5ec:	7a 8f       	std	Y+26, r23	; 0x1a
     5ee:	8b 8f       	std	Y+27, r24	; 0x1b
     5f0:	9c 8f       	std	Y+28, r25	; 0x1c
     5f2:	60 93 48 02 	sts	0x0248, r22
     5f6:	70 93 49 02 	sts	0x0249, r23
     5fa:	80 93 4a 02 	sts	0x024A, r24
     5fe:	90 93 4b 02 	sts	0x024B, r25
     602:	80 91 82 1e 	lds	r24, 0x1E82
     606:	90 91 83 1e 	lds	r25, 0x1E83
     60a:	a0 91 84 1e 	lds	r26, 0x1E84
     60e:	b0 91 85 1e 	lds	r27, 0x1E85
     612:	89 87       	std	Y+9, r24	; 0x09
     614:	9a 87       	std	Y+10, r25	; 0x0a
     616:	ab 87       	std	Y+11, r26	; 0x0b
     618:	bc 87       	std	Y+12, r27	; 0x0c
     61a:	80 91 63 10 	lds	r24, 0x1063
     61e:	90 91 64 10 	lds	r25, 0x1064
     622:	a0 91 65 10 	lds	r26, 0x1065
     626:	b0 91 66 10 	lds	r27, 0x1066
     62a:	8d 87       	std	Y+13, r24	; 0x0d
     62c:	9e 87       	std	Y+14, r25	; 0x0e
     62e:	af 87       	std	Y+15, r26	; 0x0f
     630:	b8 8b       	std	Y+16, r27	; 0x10
     632:	80 91 67 10 	lds	r24, 0x1067
     636:	90 91 68 10 	lds	r25, 0x1068
     63a:	a0 91 69 10 	lds	r26, 0x1069
     63e:	b0 91 6a 10 	lds	r27, 0x106A
     642:	89 8b       	std	Y+17, r24	; 0x11
     644:	9a 8b       	std	Y+18, r25	; 0x12
     646:	ab 8b       	std	Y+19, r26	; 0x13
     648:	bc 8b       	std	Y+20, r27	; 0x14
     64a:	80 91 5e 10 	lds	r24, 0x105E
     64e:	90 91 5f 10 	lds	r25, 0x105F
     652:	a0 91 60 10 	lds	r26, 0x1060
     656:	b0 91 61 10 	lds	r27, 0x1061
     65a:	8d 8b       	std	Y+21, r24	; 0x15
     65c:	9e 8b       	std	Y+22, r25	; 0x16
     65e:	af 8b       	std	Y+23, r26	; 0x17
     660:	b8 8f       	std	Y+24, r27	; 0x18
     662:	ac e8       	ldi	r26, 0x8C	; 140
     664:	be e1       	ldi	r27, 0x1E	; 30
     666:	b8 87       	std	Y+8, r27	; 0x08
     668:	af 83       	std	Y+7, r26	; 0x07
     66a:	ee e4       	ldi	r30, 0x4E	; 78
     66c:	f2 e0       	ldi	r31, 0x02	; 2
     66e:	fe 83       	std	Y+6, r31	; 0x06
     670:	ed 83       	std	Y+5, r30	; 0x05
     672:	8f e6       	ldi	r24, 0x6F	; 111
     674:	90 e1       	ldi	r25, 0x10	; 16
     676:	9c 83       	std	Y+4, r25	; 0x04
     678:	8b 83       	std	Y+3, r24	; 0x03
     67a:	ac e9       	ldi	r26, 0x9C	; 156
     67c:	bc e2       	ldi	r27, 0x2C	; 44
     67e:	ba 83       	std	Y+2, r27	; 0x02
     680:	a9 83       	std	Y+1, r26	; 0x01
     682:	1a aa       	std	Y+50, r1	; 0x32
     684:	19 aa       	std	Y+49, r1	; 0x31
     686:	bd c0       	rjmp	.+378    	; 0x802 <main+0x540>

				for (dataIndex=0;(dataIndex<900);dataIndex++)
				{
					xs[dataIndex]=(xs[dataIndex]-xmean)*(xs[dataIndex]-xmean);
     688:	ef 81       	ldd	r30, Y+7	; 0x07
     68a:	f8 85       	ldd	r31, Y+8	; 0x08
     68c:	60 81       	ld	r22, Z
     68e:	71 81       	ldd	r23, Z+1	; 0x01
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     698:	2d a1       	ldd	r18, Y+37	; 0x25
     69a:	3e a1       	ldd	r19, Y+38	; 0x26
     69c:	4f a1       	ldd	r20, Y+39	; 0x27
     69e:	58 a5       	ldd	r21, Y+40	; 0x28
     6a0:	0e 94 94 12 	call	0x2528	; 0x2528 <__subsf3>
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     6ac:	0e 94 1c 11 	call	0x2238	; 0x2238 <__fixunssfsi>
     6b0:	1b 01       	movw	r2, r22
     6b2:	2c 01       	movw	r4, r24
     6b4:	af 81       	ldd	r26, Y+7	; 0x07
     6b6:	b8 85       	ldd	r27, Y+8	; 0x08
     6b8:	6d 93       	st	X+, r22
     6ba:	7d 93       	st	X+, r23
     6bc:	8d 93       	st	X+, r24
     6be:	9d 93       	st	X+, r25
     6c0:	b8 87       	std	Y+8, r27	; 0x08
     6c2:	af 83       	std	Y+7, r26	; 0x07
					ys[dataIndex]=(ys[dataIndex]-ymean)*(ys[dataIndex]-ymean);
     6c4:	ed 81       	ldd	r30, Y+5	; 0x05
     6c6:	fe 81       	ldd	r31, Y+6	; 0x06
     6c8:	60 81       	ld	r22, Z
     6ca:	71 81       	ldd	r23, Z+1	; 0x01
     6cc:	82 81       	ldd	r24, Z+2	; 0x02
     6ce:	93 81       	ldd	r25, Z+3	; 0x03
     6d0:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     6d4:	29 a1       	ldd	r18, Y+33	; 0x21
     6d6:	3a a1       	ldd	r19, Y+34	; 0x22
     6d8:	4b a1       	ldd	r20, Y+35	; 0x23
     6da:	5c a1       	ldd	r21, Y+36	; 0x24
     6dc:	0e 94 94 12 	call	0x2528	; 0x2528 <__subsf3>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     6e8:	0e 94 1c 11 	call	0x2238	; 0x2238 <__fixunssfsi>
     6ec:	3b 01       	movw	r6, r22
     6ee:	4c 01       	movw	r8, r24
     6f0:	ad 81       	ldd	r26, Y+5	; 0x05
     6f2:	be 81       	ldd	r27, Y+6	; 0x06
     6f4:	6d 93       	st	X+, r22
     6f6:	7d 93       	st	X+, r23
     6f8:	8d 93       	st	X+, r24
     6fa:	9d 93       	st	X+, r25
     6fc:	be 83       	std	Y+6, r27	; 0x06
     6fe:	ad 83       	std	Y+5, r26	; 0x05
					zs[dataIndex]=(zs[dataIndex]-zmean)*(zs[dataIndex]-zmean);
     700:	eb 81       	ldd	r30, Y+3	; 0x03
     702:	fc 81       	ldd	r31, Y+4	; 0x04
     704:	60 81       	ld	r22, Z
     706:	71 81       	ldd	r23, Z+1	; 0x01
     708:	82 81       	ldd	r24, Z+2	; 0x02
     70a:	93 81       	ldd	r25, Z+3	; 0x03
     70c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     710:	2d 8d       	ldd	r18, Y+29	; 0x1d
     712:	3e 8d       	ldd	r19, Y+30	; 0x1e
     714:	4f 8d       	ldd	r20, Y+31	; 0x1f
     716:	58 a1       	ldd	r21, Y+32	; 0x20
     718:	0e 94 94 12 	call	0x2528	; 0x2528 <__subsf3>
     71c:	9b 01       	movw	r18, r22
     71e:	ac 01       	movw	r20, r24
     720:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     724:	0e 94 1c 11 	call	0x2238	; 0x2238 <__fixunssfsi>
     728:	5b 01       	movw	r10, r22
     72a:	6c 01       	movw	r12, r24
     72c:	ab 81       	ldd	r26, Y+3	; 0x03
     72e:	bc 81       	ldd	r27, Y+4	; 0x04
     730:	6d 93       	st	X+, r22
     732:	7d 93       	st	X+, r23
     734:	8d 93       	st	X+, r24
     736:	9d 93       	st	X+, r25
     738:	bc 83       	std	Y+4, r27	; 0x04
     73a:	ab 83       	std	Y+3, r26	; 0x03
					bs[dataIndex]=(bs[dataIndex]-bmean)*(bs[dataIndex]-bmean);
     73c:	e9 81       	ldd	r30, Y+1	; 0x01
     73e:	fa 81       	ldd	r31, Y+2	; 0x02
     740:	60 81       	ld	r22, Z
     742:	71 81       	ldd	r23, Z+1	; 0x01
     744:	82 81       	ldd	r24, Z+2	; 0x02
     746:	93 81       	ldd	r25, Z+3	; 0x03
     748:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     74c:	29 8d       	ldd	r18, Y+25	; 0x19
     74e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     750:	4b 8d       	ldd	r20, Y+27	; 0x1b
     752:	5c 8d       	ldd	r21, Y+28	; 0x1c
     754:	0e 94 94 12 	call	0x2528	; 0x2528 <__subsf3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     760:	0e 94 1c 11 	call	0x2238	; 0x2238 <__fixunssfsi>
     764:	7b 01       	movw	r14, r22
     766:	8c 01       	movw	r16, r24
     768:	a9 81       	ldd	r26, Y+1	; 0x01
     76a:	ba 81       	ldd	r27, Y+2	; 0x02
     76c:	6d 93       	st	X+, r22
     76e:	7d 93       	st	X+, r23
     770:	8d 93       	st	X+, r24
     772:	9d 93       	st	X+, r25
     774:	ba 83       	std	Y+2, r27	; 0x02
     776:	a9 83       	std	Y+1, r26	; 0x01
					
					xsum+=xs[dataIndex];
     778:	c2 01       	movw	r24, r4
     77a:	b1 01       	movw	r22, r2
     77c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     780:	9b 01       	movw	r18, r22
     782:	ac 01       	movw	r20, r24
     784:	6d 89       	ldd	r22, Y+21	; 0x15
     786:	7e 89       	ldd	r23, Y+22	; 0x16
     788:	8f 89       	ldd	r24, Y+23	; 0x17
     78a:	98 8d       	ldd	r25, Y+24	; 0x18
     78c:	0e 94 c5 12 	call	0x258a	; 0x258a <__addsf3>
     790:	6d 8b       	std	Y+21, r22	; 0x15
     792:	7e 8b       	std	Y+22, r23	; 0x16
     794:	8f 8b       	std	Y+23, r24	; 0x17
     796:	98 8f       	std	Y+24, r25	; 0x18
					ysum+=ys[dataIndex];
     798:	c4 01       	movw	r24, r8
     79a:	b3 01       	movw	r22, r6
     79c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     7a0:	9b 01       	movw	r18, r22
     7a2:	ac 01       	movw	r20, r24
     7a4:	69 89       	ldd	r22, Y+17	; 0x11
     7a6:	7a 89       	ldd	r23, Y+18	; 0x12
     7a8:	8b 89       	ldd	r24, Y+19	; 0x13
     7aa:	9c 89       	ldd	r25, Y+20	; 0x14
     7ac:	0e 94 c5 12 	call	0x258a	; 0x258a <__addsf3>
     7b0:	69 8b       	std	Y+17, r22	; 0x11
     7b2:	7a 8b       	std	Y+18, r23	; 0x12
     7b4:	8b 8b       	std	Y+19, r24	; 0x13
     7b6:	9c 8b       	std	Y+20, r25	; 0x14
					zsum+=zs[dataIndex];
     7b8:	c6 01       	movw	r24, r12
     7ba:	b5 01       	movw	r22, r10
     7bc:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     7c0:	9b 01       	movw	r18, r22
     7c2:	ac 01       	movw	r20, r24
     7c4:	6d 85       	ldd	r22, Y+13	; 0x0d
     7c6:	7e 85       	ldd	r23, Y+14	; 0x0e
     7c8:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ca:	98 89       	ldd	r25, Y+16	; 0x10
     7cc:	0e 94 c5 12 	call	0x258a	; 0x258a <__addsf3>
     7d0:	6d 87       	std	Y+13, r22	; 0x0d
     7d2:	7e 87       	std	Y+14, r23	; 0x0e
     7d4:	8f 87       	std	Y+15, r24	; 0x0f
     7d6:	98 8b       	std	Y+16, r25	; 0x10
					bsum+=bs[dataIndex];
     7d8:	c8 01       	movw	r24, r16
     7da:	b7 01       	movw	r22, r14
     7dc:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__floatunsisf>
     7e0:	9b 01       	movw	r18, r22
     7e2:	ac 01       	movw	r20, r24
     7e4:	69 85       	ldd	r22, Y+9	; 0x09
     7e6:	7a 85       	ldd	r23, Y+10	; 0x0a
     7e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7ea:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ec:	0e 94 c5 12 	call	0x258a	; 0x258a <__addsf3>
     7f0:	69 87       	std	Y+9, r22	; 0x09
     7f2:	7a 87       	std	Y+10, r23	; 0x0a
     7f4:	8b 87       	std	Y+11, r24	; 0x0b
     7f6:	9c 87       	std	Y+12, r25	; 0x0c
     7f8:	e9 a9       	ldd	r30, Y+49	; 0x31
     7fa:	fa a9       	ldd	r31, Y+50	; 0x32
     7fc:	31 96       	adiw	r30, 0x01	; 1
     7fe:	fa ab       	std	Y+50, r31	; 0x32
     800:	e9 ab       	std	Y+49, r30	; 0x31
				xmean/=900.0;
				ymean/=900.0;
				zmean/=900.0;
				bmean/=900.0;

				for (dataIndex=0;(dataIndex<900);dataIndex++)
     802:	89 a9       	ldd	r24, Y+49	; 0x31
     804:	9a a9       	ldd	r25, Y+50	; 0x32
     806:	a3 e0       	ldi	r26, 0x03	; 3
     808:	84 38       	cpi	r24, 0x84	; 132
     80a:	9a 07       	cpc	r25, r26
     80c:	08 f4       	brcc	.+2      	; 0x810 <main+0x54e>
     80e:	3c cf       	rjmp	.-392    	; 0x688 <main+0x3c6>
     810:	90 93 4d 02 	sts	0x024D, r25
     814:	80 93 4c 02 	sts	0x024C, r24
					zsum+=zs[dataIndex];
					bsum+=bs[dataIndex];

				}

				xsum=sqrt(xsum/900);
     818:	6d 89       	ldd	r22, Y+21	; 0x15
     81a:	7e 89       	ldd	r23, Y+22	; 0x16
     81c:	8f 89       	ldd	r24, Y+23	; 0x17
     81e:	98 8d       	ldd	r25, Y+24	; 0x18
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	41 e6       	ldi	r20, 0x61	; 97
     826:	54 e4       	ldi	r21, 0x44	; 68
     828:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__divsf3>
     82c:	0e 94 8b 18 	call	0x3116	; 0x3116 <sqrt>
     830:	3b 01       	movw	r6, r22
     832:	4c 01       	movw	r8, r24
     834:	60 93 5e 10 	sts	0x105E, r22
     838:	70 93 5f 10 	sts	0x105F, r23
     83c:	80 93 60 10 	sts	0x1060, r24
     840:	90 93 61 10 	sts	0x1061, r25
				ysum=sqrt(ysum/900);
     844:	69 89       	ldd	r22, Y+17	; 0x11
     846:	7a 89       	ldd	r23, Y+18	; 0x12
     848:	8b 89       	ldd	r24, Y+19	; 0x13
     84a:	9c 89       	ldd	r25, Y+20	; 0x14
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	41 e6       	ldi	r20, 0x61	; 97
     852:	54 e4       	ldi	r21, 0x44	; 68
     854:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__divsf3>
     858:	0e 94 8b 18 	call	0x3116	; 0x3116 <sqrt>
     85c:	5b 01       	movw	r10, r22
     85e:	6c 01       	movw	r12, r24
     860:	60 93 67 10 	sts	0x1067, r22
     864:	70 93 68 10 	sts	0x1068, r23
     868:	80 93 69 10 	sts	0x1069, r24
     86c:	90 93 6a 10 	sts	0x106A, r25
				zsum=sqrt(zsum/900);
     870:	6d 85       	ldd	r22, Y+13	; 0x0d
     872:	7e 85       	ldd	r23, Y+14	; 0x0e
     874:	8f 85       	ldd	r24, Y+15	; 0x0f
     876:	98 89       	ldd	r25, Y+16	; 0x10
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	41 e6       	ldi	r20, 0x61	; 97
     87e:	54 e4       	ldi	r21, 0x44	; 68
     880:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__divsf3>
     884:	0e 94 8b 18 	call	0x3116	; 0x3116 <sqrt>
     888:	7b 01       	movw	r14, r22
     88a:	8c 01       	movw	r16, r24
     88c:	60 93 63 10 	sts	0x1063, r22
     890:	70 93 64 10 	sts	0x1064, r23
     894:	80 93 65 10 	sts	0x1065, r24
     898:	90 93 66 10 	sts	0x1066, r25
				bsum=sqrt(bsum/900);
     89c:	69 85       	ldd	r22, Y+9	; 0x09
     89e:	7a 85       	ldd	r23, Y+10	; 0x0a
     8a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	41 e6       	ldi	r20, 0x61	; 97
     8aa:	54 e4       	ldi	r21, 0x44	; 68
     8ac:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__divsf3>
     8b0:	0e 94 8b 18 	call	0x3116	; 0x3116 <sqrt>
     8b4:	1b 01       	movw	r2, r22
     8b6:	2c 01       	movw	r4, r24
     8b8:	60 93 82 1e 	sts	0x1E82, r22
     8bc:	70 93 83 1e 	sts	0x1E83, r23
     8c0:	80 93 84 1e 	sts	0x1E84, r24
     8c4:	90 93 85 1e 	sts	0x1E85, r25


				if ( (xsum>3) || (ysum>3) || (zsum>3) || (xsum==0) || (ysum==0) || (zsum==0))
     8c8:	c4 01       	movw	r24, r8
     8ca:	b3 01       	movw	r22, r6
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e4       	ldi	r20, 0x40	; 64
     8d2:	50 e4       	ldi	r21, 0x40	; 64
     8d4:	0e 94 c8 14 	call	0x2990	; 0x2990 <__gtsf2>
     8d8:	18 16       	cp	r1, r24
     8da:	94 f1       	brlt	.+100    	; 0x940 <main+0x67e>
     8dc:	c6 01       	movw	r24, r12
     8de:	b5 01       	movw	r22, r10
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e4       	ldi	r20, 0x40	; 64
     8e6:	50 e4       	ldi	r21, 0x40	; 64
     8e8:	0e 94 c8 14 	call	0x2990	; 0x2990 <__gtsf2>
     8ec:	18 16       	cp	r1, r24
     8ee:	44 f1       	brlt	.+80     	; 0x940 <main+0x67e>
     8f0:	c8 01       	movw	r24, r16
     8f2:	b7 01       	movw	r22, r14
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e4       	ldi	r20, 0x40	; 64
     8fa:	50 e4       	ldi	r21, 0x40	; 64
     8fc:	0e 94 c8 14 	call	0x2990	; 0x2990 <__gtsf2>
     900:	18 16       	cp	r1, r24
     902:	f4 f0       	brlt	.+60     	; 0x940 <main+0x67e>
     904:	c4 01       	movw	r24, r8
     906:	b3 01       	movw	r22, r6
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	0e 94 98 14 	call	0x2930	; 0x2930 <__eqsf2>
     914:	88 23       	and	r24, r24
     916:	a1 f0       	breq	.+40     	; 0x940 <main+0x67e>
     918:	c6 01       	movw	r24, r12
     91a:	b5 01       	movw	r22, r10
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	0e 94 98 14 	call	0x2930	; 0x2930 <__eqsf2>
     928:	88 23       	and	r24, r24
     92a:	51 f0       	breq	.+20     	; 0x940 <main+0x67e>
     92c:	c8 01       	movw	r24, r16
     92e:	b7 01       	movw	r22, r14
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	0e 94 98 14 	call	0x2930	; 0x2930 <__eqsf2>
     93c:	88 23       	and	r24, r24
     93e:	c9 f4       	brne	.+50     	; 0x972 <main+0x6b0>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     940:	00 e1       	ldi	r16, 0x10	; 16
     942:	17 e2       	ldi	r17, 0x27	; 39
				{

					while(1)
					{
						_yellowled_turn_on();		
     944:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_yellowled_turn_on>
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	f8 01       	movw	r30, r16
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <main+0x68c>
						for(int i=0;(i<200);i++)
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	88 3c       	cpi	r24, 0xC8	; 200
     956:	91 05       	cpc	r25, r1
     958:	c9 f7       	brne	.-14     	; 0x94c <main+0x68a>
							_delay_ms(5);
						_yellowled_turn_off();
     95a:	0e 94 06 11 	call	0x220c	; 0x220c <_yellowled_turn_off>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	f8 01       	movw	r30, r16
     964:	31 97       	sbiw	r30, 0x01	; 1
     966:	f1 f7       	brne	.-4      	; 0x964 <main+0x6a2>
						for(int i=0;(i<200);i++)
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	88 3c       	cpi	r24, 0xC8	; 200
     96c:	91 05       	cpc	r25, r1
     96e:	c9 f7       	brne	.-14     	; 0x962 <main+0x6a0>
     970:	e9 cf       	rjmp	.-46     	; 0x944 <main+0x682>
							_delay_ms(5);
					}			

				}

				if (bsum>1)
     972:	c2 01       	movw	r24, r4
     974:	b1 01       	movw	r22, r2
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e8       	ldi	r20, 0x80	; 128
     97c:	5f e3       	ldi	r21, 0x3F	; 63
     97e:	0e 94 c8 14 	call	0x2990	; 0x2990 <__gtsf2>
     982:	18 16       	cp	r1, r24
     984:	14 f4       	brge	.+4      	; 0x98a <main+0x6c8>
					_yellowled_turn_on();
     986:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_yellowled_turn_on>
				
				_greenled_turn_on();
     98a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_greenled_turn_on>
			}
			 //Most of the time the data buffer with 750 will not overflow
			 //and will be enough to transmit the data, data will go from 0 up to a specific
			 //value

			_atmega_adc_turn_off();
     98e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_atmega_adc_turn_off>
			power_adc_disable();
     992:	80 91 64 00 	lds	r24, 0x0064
     996:	81 60       	ori	r24, 0x01	; 1
     998:	80 93 64 00 	sts	0x0064, r24

			sampleFlag=0;
     99c:	10 92 12 02 	sts	0x0212, r1
		}	
		
		_yellowled_turn_off();
     9a0:	0e 94 06 11 	call	0x220c	; 0x220c <_yellowled_turn_off>
		_greenled_turn_on();
     9a4:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_greenled_turn_on>
			cli();
     9a8:	f8 94       	cli
			set_sleep_mode(SLEEP_MODE_IDLE);
     9aa:	83 b7       	in	r24, 0x33	; 51
     9ac:	81 7f       	andi	r24, 0xF1	; 241
     9ae:	83 bf       	out	0x33, r24	; 51
			//set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    		sleep_enable();
     9b0:	83 b7       	in	r24, 0x33	; 51
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	83 bf       	out	0x33, r24	; 51
    		sleep_bod_disable(); 	
     9b6:	85 b7       	in	r24, 0x35	; 53
     9b8:	80 66       	ori	r24, 0x60	; 96
     9ba:	85 bf       	out	0x35, r24	; 53
     9bc:	8f 7d       	andi	r24, 0xDF	; 223
     9be:	85 bf       	out	0x35, r24	; 53
    		sei();
     9c0:	78 94       	sei
    		sleep_cpu();
     9c2:	88 95       	sleep
    		sleep_disable();
     9c4:	83 b7       	in	r24, 0x33	; 51
     9c6:	8e 7f       	andi	r24, 0xFE	; 254
     9c8:	83 bf       	out	0x33, r24	; 51
     9ca:	ef cc       	rjmp	.-1570   	; 0x3aa <main+0xe8>


	}

	return 0;
}
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	e2 96       	adiw	r28, 0x32	; 50
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	cf 91       	pop	r28
     9de:	df 91       	pop	r29
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	9f 90       	pop	r9
     9f2:	8f 90       	pop	r8
     9f4:	7f 90       	pop	r7
     9f6:	6f 90       	pop	r6
     9f8:	5f 90       	pop	r5
     9fa:	4f 90       	pop	r4
     9fc:	3f 90       	pop	r3
     9fe:	2f 90       	pop	r2
     a00:	08 95       	ret

00000a02 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
     a02:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     a04:	f9 99       	sbic	0x1f, 1	; 31
     a06:	fe cf       	rjmp	.-4      	; 0xa04 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     a08:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     a0a:	32 bd       	out	0x22, r19	; 34
     a0c:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     a0e:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	fa 9a       	sbi	0x1f, 2	; 31
     a16:	f9 9a       	sbi	0x1f, 1	; 31
     a18:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
     a1a:	08 95       	ret

00000a1c <_wocket_initialize_timer2_interrupt>:
*/


void _wocket_initialize_timer2_interrupt(void)
{
	unsigned short ticks=(unsigned short) ((F_CPU/1024)/_SAMPLING_RATE);
     a1c:	20 91 04 01 	lds	r18, 0x0104
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	64 e8       	ldi	r22, 0x84	; 132
     a28:	7e e1       	ldi	r23, 0x1E	; 30
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 13 18 	call	0x3026	; 0x3026 <__divmodsi4>
     a32:	92 2f       	mov	r25, r18
     a34:	90 95       	com	r25
	if (ticks>256)
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	21 30       	cpi	r18, 0x01	; 1
     a3a:	38 07       	cpc	r19, r24
     a3c:	48 f0       	brcs	.+18     	; 0xa50 <_wocket_initialize_timer2_interrupt+0x34>
	{
		_wTCNT2=0;
     a3e:	10 92 32 02 	sts	0x0232, r1
		_wTCNT2_reps=(ticks/256)+1;
     a42:	83 2f       	mov	r24, r19
     a44:	8f 5f       	subi	r24, 0xFF	; 255
     a46:	80 93 05 01 	sts	0x0105, r24
		_wTCNT2_last=255-(ticks%256);
     a4a:	90 93 33 02 	sts	0x0233, r25
     a4e:	08 95       	ret
	}else
	{
		_wTCNT2=255-ticks;
     a50:	90 93 32 02 	sts	0x0232, r25
		_wTCNT2_reps=0;
     a54:	10 92 05 01 	sts	0x0105, r1
		_wTCNT2_last=255;
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	80 93 33 02 	sts	0x0233, r24
     a5e:	08 95       	ret

00000a60 <_wocket_set_flag>:

}

void _wocket_set_flag(unsigned char flag)
{
	sbi(_STATUS_BYTE, flag);
     a60:	21 e0       	ldi	r18, 0x01	; 1
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <_wocket_set_flag+0xa>
     a66:	22 0f       	add	r18, r18
     a68:	33 1f       	adc	r19, r19
     a6a:	8a 95       	dec	r24
     a6c:	e2 f7       	brpl	.-8      	; 0xa66 <_wocket_set_flag+0x6>
     a6e:	80 91 31 02 	lds	r24, 0x0231
     a72:	82 2b       	or	r24, r18
     a74:	80 93 31 02 	sts	0x0231, r24
}
     a78:	08 95       	ret

00000a7a <_wocket_reset_flag>:


void _wocket_reset_flag(unsigned char flag)
{
		cbi(_STATUS_BYTE, flag);
     a7a:	21 e0       	ldi	r18, 0x01	; 1
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <_wocket_reset_flag+0xa>
     a80:	22 0f       	add	r18, r18
     a82:	33 1f       	adc	r19, r19
     a84:	8a 95       	dec	r24
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <_wocket_reset_flag+0x6>
     a88:	20 95       	com	r18
     a8a:	80 91 31 02 	lds	r24, 0x0231
     a8e:	82 23       	and	r24, r18
     a90:	80 93 31 02 	sts	0x0231, r24
}
     a94:	08 95       	ret

00000a96 <_wocket_is_flag_set>:



unsigned char _wocket_is_flag_set(unsigned char flag)
{	
     a96:	20 91 31 02 	lds	r18, 0x0231
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <_wocket_is_flag_set+0xc>
     a9e:	35 95       	asr	r19
     aa0:	27 95       	ror	r18
     aa2:	8a 95       	dec	r24
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <_wocket_is_flag_set+0x8>
	return ((_STATUS_BYTE>>flag) & 0x01);
}
     aa6:	82 2f       	mov	r24, r18
     aa8:	81 70       	andi	r24, 0x01	; 1
     aaa:	08 95       	ret

00000aac <_send_sr>:
}

void _send_sr()
{
 
	aBuffer[0]=m_SR_RSP_BYTE0;
     aac:	85 ec       	ldi	r24, 0xC5	; 197
     aae:	80 93 c6 3a 	sts	0x3AC6, r24
    aBuffer[1]=m_SR_RSP_BYTE1(_SAMPLING_RATE);
     ab2:	80 91 04 01 	lds	r24, 0x0104
     ab6:	8f 77       	andi	r24, 0x7F	; 127
     ab8:	80 93 c7 3a 	sts	0x3AC7, r24
	for (int i=0;(i<2);i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
     abc:	85 ec       	ldi	r24, 0xC5	; 197
     abe:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
     ac2:	80 91 c7 3a 	lds	r24, 0x3AC7
     ac6:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
 
}
     aca:	08 95       	ret

00000acc <_send_batch_count>:
}

void _send_batch_count(unsigned short count)
{
 
    aBuffer[0]=m_BC_RSP_BYTE0;
     acc:	2c ec       	ldi	r18, 0xCC	; 204
     ace:	20 93 c6 3a 	sts	0x3AC6, r18
    aBuffer[1]=m_BC_RSP_BYTE1(count);
     ad2:	9c 01       	movw	r18, r24
     ad4:	22 0f       	add	r18, r18
     ad6:	23 2f       	mov	r18, r19
     ad8:	22 1f       	adc	r18, r18
     ada:	33 0b       	sbc	r19, r19
     adc:	31 95       	neg	r19
     ade:	2f 77       	andi	r18, 0x7F	; 127
     ae0:	20 93 c7 3a 	sts	0x3AC7, r18
    aBuffer[2]=m_BC_RSP_BYTE2(count);
     ae4:	8f 77       	andi	r24, 0x7F	; 127
     ae6:	80 93 c8 3a 	sts	0x3AC8, r24
	for (int i=0;(i<3);i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
     aea:	8c ec       	ldi	r24, 0xCC	; 204
     aec:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
     af0:	80 91 c7 3a 	lds	r24, 0x3AC7
     af4:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
     af8:	80 91 c8 3a 	lds	r24, 0x3AC8
     afc:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
 
}
     b00:	08 95       	ret

00000b02 <_send_compressed_pdu>:
	_bluetooth_transmit_uart0_byte(aBuffer[4]);
}


void _send_compressed_pdu(unsigned char x, unsigned char y, unsigned char z)
{
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	0f 92       	push	r0
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	08 2f       	mov	r16, r24
     b14:	f4 2e       	mov	r15, r20
	aBuffer[0] =0xe0| ((x>>1)& 0x1f);
     b16:	86 95       	lsr	r24
     b18:	80 6e       	ori	r24, 0xE0	; 224
     b1a:	80 93 c6 3a 	sts	0x3AC6, r24
	_bluetooth_transmit_uart0_byte(aBuffer[0]);
     b1e:	69 83       	std	Y+1, r22	; 0x01
     b20:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
	aBuffer[1] = ((x & 0x01)<<6) | (y & 0x3f);
     b24:	10 e0       	ldi	r17, 0x00	; 0
     b26:	01 70       	andi	r16, 0x01	; 1
     b28:	10 70       	andi	r17, 0x00	; 0
     b2a:	26 e0       	ldi	r18, 0x06	; 6
     b2c:	00 0f       	add	r16, r16
     b2e:	11 1f       	adc	r17, r17
     b30:	2a 95       	dec	r18
     b32:	e1 f7       	brne	.-8      	; 0xb2c <_send_compressed_pdu+0x2a>
     b34:	99 81       	ldd	r25, Y+1	; 0x01
     b36:	9f 73       	andi	r25, 0x3F	; 63
     b38:	90 2b       	or	r25, r16
     b3a:	90 93 c7 3a 	sts	0x3AC7, r25
	_bluetooth_transmit_uart0_byte(aBuffer[1]);
     b3e:	89 2f       	mov	r24, r25
     b40:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
	aBuffer[2] =  (z<<1);
     b44:	ff 0c       	add	r15, r15
     b46:	f0 92 c8 3a 	sts	0x3AC8, r15
	_bluetooth_transmit_uart0_byte(aBuffer[2]);	
     b4a:	8f 2d       	mov	r24, r15
     b4c:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
}
     b50:	0f 90       	pop	r0
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	08 95       	ret

00000b5e <_send_uncompressed_pdu>:
	_bluetooth_transmit_uart0_byte(packet.byte5);
	
}
*/
void _send_uncompressed_pdu(unsigned short x, unsigned short y, unsigned short z)
{
     b5e:	cf 92       	push	r12
     b60:	df 92       	push	r13
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	8c 01       	movw	r16, r24
     b6c:	7b 01       	movw	r14, r22
     b6e:	6a 01       	movw	r12, r20
	aBuffer[0] =0x80| ((x>>8)& 0x03);
     b70:	81 2f       	mov	r24, r17
     b72:	83 70       	andi	r24, 0x03	; 3
     b74:	80 68       	ori	r24, 0x80	; 128
     b76:	80 93 c6 3a 	sts	0x3AC6, r24
	_bluetooth_transmit_uart0_byte(aBuffer[0]);
     b7a:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
	aBuffer[1] = ((unsigned char) ((x>>1)&0x7f));
     b7e:	c8 01       	movw	r24, r16
     b80:	96 95       	lsr	r25
     b82:	87 95       	ror	r24
     b84:	8f 77       	andi	r24, 0x7F	; 127
     b86:	80 93 c7 3a 	sts	0x3AC7, r24
	_bluetooth_transmit_uart0_byte(aBuffer[1]);
     b8a:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
	aBuffer[2] = ((unsigned char) ((x<<6) &0x40)) | ((unsigned char) ((y>>4)&0x3f));
     b8e:	c7 01       	movw	r24, r14
     b90:	44 e0       	ldi	r20, 0x04	; 4
     b92:	96 95       	lsr	r25
     b94:	87 95       	ror	r24
     b96:	4a 95       	dec	r20
     b98:	e1 f7       	brne	.-8      	; 0xb92 <_send_uncompressed_pdu+0x34>
     b9a:	8f 73       	andi	r24, 0x3F	; 63
     b9c:	02 95       	swap	r16
     b9e:	00 0f       	add	r16, r16
     ba0:	00 0f       	add	r16, r16
     ba2:	00 74       	andi	r16, 0x40	; 64
     ba4:	80 2b       	or	r24, r16
     ba6:	80 93 c8 3a 	sts	0x3AC8, r24
	_bluetooth_transmit_uart0_byte(aBuffer[2]);
     baa:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
	aBuffer[3] = ((unsigned char) ((y<<3) &0x78)) | ((unsigned char) ((z>>7)&0x07));
     bae:	c6 01       	movw	r24, r12
     bb0:	88 0f       	add	r24, r24
     bb2:	89 2f       	mov	r24, r25
     bb4:	88 1f       	adc	r24, r24
     bb6:	99 0b       	sbc	r25, r25
     bb8:	91 95       	neg	r25
     bba:	87 70       	andi	r24, 0x07	; 7
     bbc:	ee 0c       	add	r14, r14
     bbe:	ee 0c       	add	r14, r14
     bc0:	ee 0c       	add	r14, r14
     bc2:	98 e7       	ldi	r25, 0x78	; 120
     bc4:	e9 22       	and	r14, r25
     bc6:	8e 29       	or	r24, r14
     bc8:	80 93 c9 3a 	sts	0x3AC9, r24
	_bluetooth_transmit_uart0_byte(aBuffer[3]);
     bcc:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
	aBuffer[4] = ((unsigned char) (z&0x7f));
     bd0:	8f e7       	ldi	r24, 0x7F	; 127
     bd2:	c8 22       	and	r12, r24
     bd4:	c0 92 ca 3a 	sts	0x3ACA, r12
	_bluetooth_transmit_uart0_byte(aBuffer[4]);
     bd8:	8c 2d       	mov	r24, r12
     bda:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
}
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	df 90       	pop	r13
     be8:	cf 90       	pop	r12
     bea:	08 95       	ret

00000bec <_receive_data>:

		
	}
}
void _receive_data(void)
{
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	0f 92       	push	r0
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
	unsigned char aByte;

	// Attempt to receive a byte only if no command is being received or a partial comman has been received
	if ( ((command_counter==0)||(command_counter<command_length))  && (_bluetooth_receive_uart0_byte(&aByte)) )
     bfa:	90 91 1f 02 	lds	r25, 0x021F
     bfe:	99 23       	and	r25, r25
     c00:	29 f0       	breq	.+10     	; 0xc0c <_receive_data+0x20>
     c02:	80 91 20 02 	lds	r24, 0x0220
     c06:	98 17       	cp	r25, r24
     c08:	08 f0       	brcs	.+2      	; 0xc0c <_receive_data+0x20>
     c0a:	40 c0       	rjmp	.+128    	; 0xc8c <_receive_data+0xa0>
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	0e 94 a7 10 	call	0x214e	; 0x214e <_bluetooth_receive_uart0_byte>
     c14:	88 23       	and	r24, r24
     c16:	d1 f1       	breq	.+116    	; 0xc8c <_receive_data+0xa0>
    {
		aBuffer[command_counter++]=aByte;
     c18:	80 91 1f 02 	lds	r24, 0x021F
     c1c:	99 81       	ldd	r25, Y+1	; 0x01
     c1e:	e8 2f       	mov	r30, r24
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	ea 53       	subi	r30, 0x3A	; 58
     c24:	f5 4c       	sbci	r31, 0xC5	; 197
     c26:	90 83       	st	Z, r25
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	80 93 1f 02 	sts	0x021F, r24
		
		if ((aByte>>5)==COMMAND_PREFIX)
     c2e:	89 2f       	mov	r24, r25
     c30:	82 95       	swap	r24
     c32:	86 95       	lsr	r24
     c34:	87 70       	andi	r24, 0x07	; 7
     c36:	85 30       	cpi	r24, 0x05	; 5
     c38:	49 f5       	brne	.+82     	; 0xc8c <_receive_data+0xa0>
    	{
        	opcode=aByte&0x1f;                                              
     c3a:	89 2f       	mov	r24, r25
     c3c:	8f 71       	andi	r24, 0x1F	; 31
     c3e:	80 93 bf 3a 	sts	0x3ABF, r24
        	switch (opcode)
     c42:	e8 2f       	mov	r30, r24
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	e8 31       	cpi	r30, 0x18	; 24
     c48:	f1 05       	cpc	r31, r1
     c4a:	78 f4       	brcc	.+30     	; 0xc6a <_receive_data+0x7e>
     c4c:	ea 5b       	subi	r30, 0xBA	; 186
     c4e:	ff 4f       	sbci	r31, 0xFF	; 255
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	05 90       	lpm	r0, Z+
     c56:	f4 91       	lpm	r31, Z+
     c58:	e0 2d       	mov	r30, r0
     c5a:	09 94       	ijmp
				case (unsigned char)RESUME:
				case (unsigned char)GET_TM:
				case (unsigned char)GET_BTCAL:
				case (unsigned char) GET_HV:
				case (unsigned char) GET_FV:				
                	command_length=1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	03 c0       	rjmp	.+6      	; 0xc66 <_receive_data+0x7a>
                case (unsigned char)SET_SEN:
                case (unsigned char)SET_SR:            
                case (unsigned char)SET_ALT:
                case (unsigned char)SET_PDT:
                case (unsigned char)SET_TM:                
                     command_length=2;
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <_receive_data+0x7a>
                     break;
                case (unsigned char)SET_CAL:
				case (unsigned char) SET_BTCAL:
                      command_length=10;                                                              
     c64:	8a e0       	ldi	r24, 0x0A	; 10
     c66:	80 93 20 02 	sts	0x0220, r24
                      break;                                                          
    		}
    		command_counter=1;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 1f 02 	sts	0x021F, r24
    		command_timer=0;
     c70:	10 92 22 02 	sts	0x0222, r1
     c74:	10 92 21 02 	sts	0x0221, r1
    		processed_counter=0;                                            
     c78:	10 92 23 02 	sts	0x0223, r1
    		address=0xffff;
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	9f ef       	ldi	r25, 0xFF	; 255
     c80:	90 93 03 01 	sts	0x0103, r25
     c84:	80 93 02 01 	sts	0x0102, r24
    		response_length=0;
     c88:	10 92 24 02 	sts	0x0224, r1
		}

	}

	// increment timer as long as the command is still being received
    if (command_counter>0)
     c8c:	60 91 1f 02 	lds	r22, 0x021F
     c90:	66 23       	and	r22, r22
     c92:	09 f4       	brne	.+2      	; 0xc96 <_receive_data+0xaa>
     c94:	23 c4       	rjmp	.+2118   	; 0x14dc <_receive_data+0x8f0>
		command_timer++;
     c96:	80 91 21 02 	lds	r24, 0x0221
     c9a:	90 91 22 02 	lds	r25, 0x0222
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	90 93 22 02 	sts	0x0222, r25
     ca4:	80 93 21 02 	sts	0x0221, r24


 	//if all command is received, start processing it
    if ((command_counter>0) && (command_counter==command_length))
     ca8:	80 91 20 02 	lds	r24, 0x0220
     cac:	68 17       	cp	r22, r24
     cae:	09 f0       	breq	.+2      	; 0xcb2 <_receive_data+0xc6>
     cb0:	15 c4       	rjmp	.+2090   	; 0x14dc <_receive_data+0x8f0>
    {                                       
            switch (opcode)
     cb2:	80 91 bf 3a 	lds	r24, 0x3ABF
     cb6:	e8 2f       	mov	r30, r24
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	e8 31       	cpi	r30, 0x18	; 24
     cbc:	f1 05       	cpc	r31, r1
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <_receive_data+0xd6>
     cc0:	f5 c3       	rjmp	.+2026   	; 0x14ac <_receive_data+0x8c0>
     cc2:	e2 5a       	subi	r30, 0xA2	; 162
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	05 90       	lpm	r0, Z+
     ccc:	f4 91       	lpm	r31, Z+
     cce:	e0 2d       	mov	r30, r0
     cd0:	09 94       	ijmp
            {
                    case (unsigned char)PAUSE:                                                      
                            paused=1;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	80 93 25 02 	sts	0x0225, r24
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <_receive_data+0xf2>
                            processed_counter=command_counter;                                                      
                            break;
                    case (unsigned char)RESUME:                                                     
                            paused=0;
     cda:	10 92 25 02 	sts	0x0225, r1
                            processed_counter=command_counter;                                                      
     cde:	60 93 23 02 	sts	0x0223, r22
     ce2:	e4 c3       	rjmp	.+1992   	; 0x14ac <_receive_data+0x8c0>
                            break;
                    //reset alive timer if it is alive
                    case (unsigned char)ALIVE:                                                      
                            alive_timer=0;
     ce4:	10 92 27 02 	sts	0x0227, r1
     ce8:	10 92 26 02 	sts	0x0226, r1
     cec:	f8 cf       	rjmp	.-16     	; 0xcde <_receive_data+0xf2>
				
                            break;
                    //setup battery buffer
                case (unsigned char) GET_BT:           
#ifdef _VERSION==3
                            word=_atmega_a2dConvert10bit(ADC7);
     cee:	87 e0       	ldi	r24, 0x07	; 7
     cf0:	0e 94 29 0c 	call	0x1852	; 0x1852 <_atmega_a2dConvert10bit>
     cf4:	90 93 29 02 	sts	0x0229, r25
     cf8:	80 93 28 02 	sts	0x0228, r24
#else
                            word=_atmega_a2dConvert10bit(ADC4);
#endif				  

                            aBuffer[0]=m_BL_RSP_BYTE0;
     cfc:	20 ec       	ldi	r18, 0xC0	; 192
     cfe:	20 93 c6 3a 	sts	0x3AC6, r18
                            aBuffer[1]=m_BL_RSP_BYTE1(word);
     d02:	9c 01       	movw	r18, r24
     d04:	13 e0       	ldi	r17, 0x03	; 3
     d06:	36 95       	lsr	r19
     d08:	27 95       	ror	r18
     d0a:	1a 95       	dec	r17
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <_receive_data+0x11a>
     d0e:	20 93 c7 3a 	sts	0x3AC7, r18
                            aBuffer[2]=m_BL_RSP_BYTE2(word);
     d12:	87 70       	andi	r24, 0x07	; 7
     d14:	82 95       	swap	r24
     d16:	80 7f       	andi	r24, 0xF0	; 240
     d18:	80 93 c8 3a 	sts	0x3AC8, r24
                            processed_counter=command_counter;
     d1c:	80 91 1f 02 	lds	r24, 0x021F
     d20:	80 93 23 02 	sts	0x0223, r24
                            response_length=3;		                                                                          
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	c0 c3       	rjmp	.+1920   	; 0x14a8 <_receive_data+0x8bc>
                            break;		
                case (unsigned char) GET_SEN:           			  
                            aBuffer[0]=m_SENS_RSP_BYTE0;
     d28:	83 ec       	ldi	r24, 0xC3	; 195
     d2a:	80 93 c6 3a 	sts	0x3AC6, r24
                            aBuffer[1]=m_SENS_RSP_BYTE1(_wSENS);                       
     d2e:	80 91 06 01 	lds	r24, 0x0106
     d32:	24 c1       	rjmp	.+584    	; 0xf7c <_receive_data+0x390>
                            processed_counter=command_counter;
                            response_length=2;		                                                                          
                            break;	
                case (unsigned char) GET_BP:           
#ifdef _VERSION==3
                            word=_atmega_a2dConvert10bit(ADC7);
     d34:	87 e0       	ldi	r24, 0x07	; 7
     d36:	0e 94 29 0c 	call	0x1852	; 0x1852 <_atmega_a2dConvert10bit>
     d3a:	9c 01       	movw	r18, r24
#else
                            word=_atmega_a2dConvert10bit(ADC4);
						
#endif				  
							if (word>_wBTCAL100)
     d3c:	40 91 b4 3a 	lds	r20, 0x3AB4
     d40:	50 91 b5 3a 	lds	r21, 0x3AB5
     d44:	48 17       	cp	r20, r24
     d46:	59 07       	cpc	r21, r25
     d48:	38 f4       	brcc	.+14     	; 0xd58 <_receive_data+0x16c>
								word=100;
     d4a:	84 e6       	ldi	r24, 0x64	; 100
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	90 93 29 02 	sts	0x0229, r25
     d52:	80 93 28 02 	sts	0x0228, r24
     d56:	8d c0       	rjmp	.+282    	; 0xe72 <_receive_data+0x286>
							else if (word>_wBTCAL80)
     d58:	60 91 c2 3a 	lds	r22, 0x3AC2
     d5c:	70 91 c3 3a 	lds	r23, 0x3AC3
     d60:	68 17       	cp	r22, r24
     d62:	79 07       	cpc	r23, r25
     d64:	a0 f4       	brcc	.+40     	; 0xd8e <_receive_data+0x1a2>
								word=80 + ((word- _wBTCAL80)*20) / (_wBTCAL100-_wBTCAL80);
     d66:	26 1b       	sub	r18, r22
     d68:	37 0b       	sbc	r19, r23
     d6a:	46 1b       	sub	r20, r22
     d6c:	57 0b       	sbc	r21, r23
     d6e:	84 e1       	ldi	r24, 0x14	; 20
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	bc 01       	movw	r22, r24
     d74:	26 9f       	mul	r18, r22
     d76:	c0 01       	movw	r24, r0
     d78:	27 9f       	mul	r18, r23
     d7a:	90 0d       	add	r25, r0
     d7c:	36 9f       	mul	r19, r22
     d7e:	90 0d       	add	r25, r0
     d80:	11 24       	eor	r1, r1
     d82:	ba 01       	movw	r22, r20
     d84:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__udivmodhi4>
     d88:	60 5b       	subi	r22, 0xB0	; 176
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	19 c0       	rjmp	.+50     	; 0xdc0 <_receive_data+0x1d4>
							else if (word>_wBTCAL60)
     d8e:	40 91 bc 3a 	lds	r20, 0x3ABC
     d92:	50 91 bd 3a 	lds	r21, 0x3ABD
     d96:	48 17       	cp	r20, r24
     d98:	59 07       	cpc	r21, r25
     d9a:	b8 f4       	brcc	.+46     	; 0xdca <_receive_data+0x1de>
								word=60 + ((word- _wBTCAL60)*20) / (_wBTCAL80-_wBTCAL60);
     d9c:	24 1b       	sub	r18, r20
     d9e:	35 0b       	sbc	r19, r21
     da0:	64 1b       	sub	r22, r20
     da2:	75 0b       	sbc	r23, r21
     da4:	84 e1       	ldi	r24, 0x14	; 20
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	ac 01       	movw	r20, r24
     daa:	24 9f       	mul	r18, r20
     dac:	c0 01       	movw	r24, r0
     dae:	25 9f       	mul	r18, r21
     db0:	90 0d       	add	r25, r0
     db2:	34 9f       	mul	r19, r20
     db4:	90 0d       	add	r25, r0
     db6:	11 24       	eor	r1, r1
     db8:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__udivmodhi4>
     dbc:	64 5c       	subi	r22, 0xC4	; 196
     dbe:	7f 4f       	sbci	r23, 0xFF	; 255
     dc0:	70 93 29 02 	sts	0x0229, r23
     dc4:	60 93 28 02 	sts	0x0228, r22
     dc8:	54 c0       	rjmp	.+168    	; 0xe72 <_receive_data+0x286>
							else if (word>_wBTCAL40)
     dca:	60 91 ba 3a 	lds	r22, 0x3ABA
     dce:	70 91 bb 3a 	lds	r23, 0x3ABB
     dd2:	68 17       	cp	r22, r24
     dd4:	79 07       	cpc	r23, r25
     dd6:	a0 f4       	brcc	.+40     	; 0xe00 <_receive_data+0x214>
								word=40 + ((word- _wBTCAL40)*20) / (_wBTCAL60-_wBTCAL40);
     dd8:	26 1b       	sub	r18, r22
     dda:	37 0b       	sbc	r19, r23
     ddc:	46 1b       	sub	r20, r22
     dde:	57 0b       	sbc	r21, r23
     de0:	84 e1       	ldi	r24, 0x14	; 20
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	bc 01       	movw	r22, r24
     de6:	26 9f       	mul	r18, r22
     de8:	c0 01       	movw	r24, r0
     dea:	27 9f       	mul	r18, r23
     dec:	90 0d       	add	r25, r0
     dee:	36 9f       	mul	r19, r22
     df0:	90 0d       	add	r25, r0
     df2:	11 24       	eor	r1, r1
     df4:	ba 01       	movw	r22, r20
     df6:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__udivmodhi4>
     dfa:	68 5d       	subi	r22, 0xD8	; 216
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	e0 cf       	rjmp	.-64     	; 0xdc0 <_receive_data+0x1d4>
							else if (word>_wBTCAL20)
     e00:	e0 91 b0 3a 	lds	r30, 0x3AB0
     e04:	f0 91 b1 3a 	lds	r31, 0x3AB1
     e08:	e8 17       	cp	r30, r24
     e0a:	f9 07       	cpc	r31, r25
     e0c:	98 f4       	brcc	.+38     	; 0xe34 <_receive_data+0x248>
								word=20 + ((word- _wBTCAL20)*20) / (_wBTCAL40-_wBTCAL20);
     e0e:	2e 1b       	sub	r18, r30
     e10:	3f 0b       	sbc	r19, r31
     e12:	6e 1b       	sub	r22, r30
     e14:	7f 0b       	sbc	r23, r31
     e16:	84 e1       	ldi	r24, 0x14	; 20
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	ac 01       	movw	r20, r24
     e1c:	24 9f       	mul	r18, r20
     e1e:	c0 01       	movw	r24, r0
     e20:	25 9f       	mul	r18, r21
     e22:	90 0d       	add	r25, r0
     e24:	34 9f       	mul	r19, r20
     e26:	90 0d       	add	r25, r0
     e28:	11 24       	eor	r1, r1
     e2a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__udivmodhi4>
     e2e:	6c 5e       	subi	r22, 0xEC	; 236
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	c6 cf       	rjmp	.-116    	; 0xdc0 <_receive_data+0x1d4>
							else if (word>_wBTCAL10)
     e34:	40 91 c0 3a 	lds	r20, 0x3AC0
     e38:	50 91 c1 3a 	lds	r21, 0x3AC1
     e3c:	48 17       	cp	r20, r24
     e3e:	59 07       	cpc	r21, r25
     e40:	a0 f4       	brcc	.+40     	; 0xe6a <_receive_data+0x27e>
								word=10 + ((word- _wBTCAL10)*10) / (_wBTCAL20-_wBTCAL10);
     e42:	84 1b       	sub	r24, r20
     e44:	95 0b       	sbc	r25, r21
     e46:	9c 01       	movw	r18, r24
     e48:	b3 e0       	ldi	r27, 0x03	; 3
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	ba 95       	dec	r27
     e50:	e1 f7       	brne	.-8      	; 0xe4a <_receive_data+0x25e>
     e52:	e4 1b       	sub	r30, r20
     e54:	f5 0b       	sbc	r31, r21
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	82 0f       	add	r24, r18
     e5c:	93 1f       	adc	r25, r19
     e5e:	bf 01       	movw	r22, r30
     e60:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__udivmodhi4>
     e64:	66 5f       	subi	r22, 0xF6	; 246
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	ab cf       	rjmp	.-170    	; 0xdc0 <_receive_data+0x1d4>
							else
								word=0;
     e6a:	10 92 29 02 	sts	0x0229, r1
     e6e:	10 92 28 02 	sts	0x0228, r1

                            aBuffer[0]=m_BP_RSP_BYTE0;
     e72:	81 ec       	ldi	r24, 0xC1	; 193
     e74:	80 93 c6 3a 	sts	0x3AC6, r24
                            aBuffer[1]=m_BP_RSP_BYTE1(word);      ;
     e78:	80 91 28 02 	lds	r24, 0x0228
     e7c:	8f 77       	andi	r24, 0x7F	; 127
     e7e:	80 93 c7 3a 	sts	0x3AC7, r24
                            processed_counter=command_counter;
     e82:	80 91 1f 02 	lds	r24, 0x021F
     e86:	80 93 23 02 	sts	0x0223, r24
     e8a:	0d c3       	rjmp	.+1562   	; 0x14a6 <_receive_data+0x8ba>
                            response_length=2;		                                                                          
                            break;
 				   case (unsigned char) GET_PDT:  
				   		aBuffer[0]=m_PDT_RSP_BYTE0;
     e8c:	87 ec       	ldi	r24, 0xC7	; 199
     e8e:	80 93 c6 3a 	sts	0x3AC6, r24
                        aBuffer[1]=m_PDT_RSP_BYTE1(_wPDT);
     e92:	80 91 be 3a 	lds	r24, 0x3ABE
     e96:	10 c0       	rjmp	.+32     	; 0xeb8 <_receive_data+0x2cc>
						processed_counter=command_counter;
						response_length=2;
						break;			
                   case (unsigned char) SET_PDT:  
				   		_wPDT=m_SET_PDT(aBuffer[1]);
     e98:	20 91 c7 3a 	lds	r18, 0x3AC7
     e9c:	2f 77       	andi	r18, 0x7F	; 127
     e9e:	20 93 be 3a 	sts	0x3ABE, r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     ea2:	f9 99       	sbic	0x1f, 1	; 31
     ea4:	fe cf       	rjmp	.-4      	; 0xea2 <_receive_data+0x2b6>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     ea6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     ea8:	8d e1       	ldi	r24, 0x1D	; 29
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	76 c0       	rjmp	.+236    	; 0xf9a <_receive_data+0x3ae>
						eeprom_write_byte(&_NV_PDT,_wPDT);
						processed_counter=command_counter;
						break;																				
                   case (unsigned char) GET_SR:  
				   		aBuffer[0]=m_SR_RSP_BYTE0;
     eae:	85 ec       	ldi	r24, 0xC5	; 197
     eb0:	80 93 c6 3a 	sts	0x3AC6, r24
                        aBuffer[1]=m_SR_RSP_BYTE1(_SAMPLING_RATE);
     eb4:	80 91 04 01 	lds	r24, 0x0104
     eb8:	8f 77       	andi	r24, 0x7F	; 127
     eba:	f1 c2       	rjmp	.+1506   	; 0x149e <_receive_data+0x8b2>
						processed_counter=command_counter;
						response_length=2;
						break;
                case (unsigned char) GET_PC:  
				   		aBuffer[0]=m_PC_RSP_BYTE0;
     ebc:	82 ec       	ldi	r24, 0xC2	; 194
     ebe:	80 93 c6 3a 	sts	0x3AC6, r24
                        aBuffer[1]=m_PC_RSP_BYTE1(_wPC);
     ec2:	20 91 35 02 	lds	r18, 0x0235
     ec6:	30 91 36 02 	lds	r19, 0x0236
     eca:	40 91 37 02 	lds	r20, 0x0237
     ece:	50 91 38 02 	lds	r21, 0x0238
     ed2:	da 01       	movw	r26, r20
     ed4:	c9 01       	movw	r24, r18
     ed6:	f9 e1       	ldi	r31, 0x19	; 25
     ed8:	b6 95       	lsr	r27
     eda:	a7 95       	ror	r26
     edc:	97 95       	ror	r25
     ede:	87 95       	ror	r24
     ee0:	fa 95       	dec	r31
     ee2:	d1 f7       	brne	.-12     	; 0xed8 <_receive_data+0x2ec>
     ee4:	80 93 c7 3a 	sts	0x3AC7, r24
						aBuffer[2]=m_PC_RSP_BYTE2(_wPC);
     ee8:	da 01       	movw	r26, r20
     eea:	c9 01       	movw	r24, r18
     eec:	e2 e1       	ldi	r30, 0x12	; 18
     eee:	b6 95       	lsr	r27
     ef0:	a7 95       	ror	r26
     ef2:	97 95       	ror	r25
     ef4:	87 95       	ror	r24
     ef6:	ea 95       	dec	r30
     ef8:	d1 f7       	brne	.-12     	; 0xeee <_receive_data+0x302>
     efa:	8f 77       	andi	r24, 0x7F	; 127
     efc:	80 93 c8 3a 	sts	0x3AC8, r24
                        aBuffer[3]=m_PC_RSP_BYTE3(_wPC);
     f00:	da 01       	movw	r26, r20
     f02:	c9 01       	movw	r24, r18
     f04:	7b e0       	ldi	r23, 0x0B	; 11
     f06:	b6 95       	lsr	r27
     f08:	a7 95       	ror	r26
     f0a:	97 95       	ror	r25
     f0c:	87 95       	ror	r24
     f0e:	7a 95       	dec	r23
     f10:	d1 f7       	brne	.-12     	; 0xf06 <_receive_data+0x31a>
     f12:	8f 77       	andi	r24, 0x7F	; 127
     f14:	80 93 c9 3a 	sts	0x3AC9, r24
						aBuffer[4]=m_PC_RSP_BYTE4(_wPC);
     f18:	da 01       	movw	r26, r20
     f1a:	c9 01       	movw	r24, r18
     f1c:	44 e0       	ldi	r20, 0x04	; 4
     f1e:	b6 95       	lsr	r27
     f20:	a7 95       	ror	r26
     f22:	97 95       	ror	r25
     f24:	87 95       	ror	r24
     f26:	4a 95       	dec	r20
     f28:	d1 f7       	brne	.-12     	; 0xf1e <_receive_data+0x332>
     f2a:	8f 77       	andi	r24, 0x7F	; 127
     f2c:	80 93 ca 3a 	sts	0x3ACA, r24
                        aBuffer[5]=m_PC_RSP_BYTE5(_wPC);
     f30:	2f 70       	andi	r18, 0x0F	; 15
     f32:	22 0f       	add	r18, r18
     f34:	22 0f       	add	r18, r18
     f36:	22 0f       	add	r18, r18
     f38:	20 93 cb 3a 	sts	0x3ACB, r18
						processed_counter=command_counter;
     f3c:	60 93 23 02 	sts	0x0223, r22
						response_length=6;
     f40:	86 e0       	ldi	r24, 0x06	; 6
     f42:	b2 c2       	rjmp	.+1380   	; 0x14a8 <_receive_data+0x8bc>
						break;
                   case (unsigned char) SET_SR:  
				   		_SAMPLING_RATE=m_SET_SR(aBuffer[1]);
     f44:	80 91 c7 3a 	lds	r24, 0x3AC7
     f48:	8f 77       	andi	r24, 0x7F	; 127
     f4a:	80 93 04 01 	sts	0x0104, r24
						_wocket_initialize_timer2_interrupt();
     f4e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_wocket_initialize_timer2_interrupt>
						eeprom_write_byte(&_NV_SAMPLING_RATE,_SAMPLING_RATE);
     f52:	20 91 04 01 	lds	r18, 0x0104
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     f56:	f9 99       	sbic	0x1f, 1	; 31
     f58:	fe cf       	rjmp	.-4      	; 0xf56 <_receive_data+0x36a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     f5a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	92 bd       	out	0x22, r25	; 34
     f62:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     f64:	20 bd       	out	0x20, r18	; 32

    __asm__ __volatile__ (
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	fa 9a       	sbi	0x1f, 2	; 31
     f6c:	f9 9a       	sbi	0x1f, 1	; 31
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	8b c2       	rjmp	.+1302   	; 0x1488 <_receive_data+0x89c>
						processed_counter=command_counter;
						break;

     			 case (unsigned char) GET_TM:  
				   		aBuffer[0]=m_TM_RSP_BYTE0;
     f72:	88 ec       	ldi	r24, 0xC8	; 200
     f74:	80 93 c6 3a 	sts	0x3AC6, r24
                        aBuffer[1]=m_TM_RSP_BYTE1(_wTM);
     f78:	80 91 34 02 	lds	r24, 0x0234
     f7c:	87 70       	andi	r24, 0x07	; 7
     f7e:	82 95       	swap	r24
     f80:	80 7f       	andi	r24, 0xF0	; 240
     f82:	8d c2       	rjmp	.+1306   	; 0x149e <_receive_data+0x8b2>
						processed_counter=command_counter;
						response_length=2;
						break;
                   case (unsigned char) SET_TM:  
				   		_wTM=m_SET_TM(aBuffer[1]);
     f84:	20 91 c7 3a 	lds	r18, 0x3AC7
     f88:	22 95       	swap	r18
     f8a:	27 70       	andi	r18, 0x07	; 7
     f8c:	20 93 34 02 	sts	0x0234, r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     f90:	f9 99       	sbic	0x1f, 1	; 31
     f92:	fe cf       	rjmp	.-4      	; 0xf90 <_receive_data+0x3a4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     f94:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	92 bd       	out	0x22, r25	; 34
     f9c:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     f9e:	20 bd       	out	0x20, r18	; 32

    __asm__ __volatile__ (
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	fa 9a       	sbi	0x1f, 2	; 31
     fa6:	f9 9a       	sbi	0x1f, 1	; 31
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	99 ce       	rjmp	.-718    	; 0xcde <_receive_data+0xf2>
						eeprom_write_byte(&_NV_TM,_wTM);
						processed_counter=command_counter;
						break;
                    case (unsigned char) SET_CAL:                                                                    
                            if (eeprom_is_ready())
     fac:	f9 99       	sbic	0x1f, 1	; 31
     fae:	7e c2       	rjmp	.+1276   	; 0x14ac <_receive_data+0x8c0>
                            {
                                    //do nothing if battery is low
#ifdef _VERSION==3
                                    if (_atmega_a2dConvert10bit(ADC7)<600)
     fb0:	87 e0       	ldi	r24, 0x07	; 7
     fb2:	0e 94 29 0c 	call	0x1852	; 0x1852 <_atmega_a2dConvert10bit>
     fb6:	88 55       	subi	r24, 0x58	; 88
     fb8:	92 40       	sbci	r25, 0x02	; 2
     fba:	08 f4       	brcc	.+2      	; 0xfbe <_receive_data+0x3d2>
     fbc:	77 c2       	rjmp	.+1262   	; 0x14ac <_receive_data+0x8c0>
                                    if (_atmega_a2dConvert10bit(ADC4)<600)
#endif
                                            break;
                                    else
                                    {   
										_wX1G_CAL=m_SET_CAL_x1g(aBuffer[1],aBuffer[2]);
     fbe:	60 91 c8 3a 	lds	r22, 0x3AC8
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	60 77       	andi	r22, 0x70	; 112
     fc6:	70 70       	andi	r23, 0x00	; 0
     fc8:	34 e0       	ldi	r19, 0x04	; 4
     fca:	76 95       	lsr	r23
     fcc:	67 95       	ror	r22
     fce:	3a 95       	dec	r19
     fd0:	e1 f7       	brne	.-8      	; 0xfca <_receive_data+0x3de>
     fd2:	80 91 c7 3a 	lds	r24, 0x3AC7
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	8f 77       	andi	r24, 0x7F	; 127
     fda:	90 70       	andi	r25, 0x00	; 0
     fdc:	23 e0       	ldi	r18, 0x03	; 3
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	2a 95       	dec	r18
     fe4:	e1 f7       	brne	.-8      	; 0xfde <_receive_data+0x3f2>
     fe6:	68 2b       	or	r22, r24
     fe8:	79 2b       	or	r23, r25
     fea:	70 93 ad 3a 	sts	0x3AAD, r23
     fee:	60 93 ac 3a 	sts	0x3AAC, r22
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
     ff2:	81 e1       	ldi	r24, 0x11	; 17
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	41 e0       	ldi	r20, 0x01	; 1
     ff8:	55 e0       	ldi	r21, 0x05	; 5
     ffa:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__eewr_word>
										eeprom_write_word(&_NV_X1G_CAL,_wX1G_CAL);
										_wXN1G_CAL=m_SET_CAL_xn1g(aBuffer[2],aBuffer[3]);
     ffe:	60 91 c9 3a 	lds	r22, 0x3AC9
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	6e 77       	andi	r22, 0x7E	; 126
    1006:	70 70       	andi	r23, 0x00	; 0
    1008:	76 95       	lsr	r23
    100a:	67 95       	ror	r22
    100c:	80 91 c8 3a 	lds	r24, 0x3AC8
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	8f 70       	andi	r24, 0x0F	; 15
    1014:	90 70       	andi	r25, 0x00	; 0
    1016:	06 e0       	ldi	r16, 0x06	; 6
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 95       	dec	r16
    101e:	e1 f7       	brne	.-8      	; 0x1018 <_receive_data+0x42c>
    1020:	68 2b       	or	r22, r24
    1022:	79 2b       	or	r23, r25
    1024:	70 93 af 3a 	sts	0x3AAF, r23
    1028:	60 93 ae 3a 	sts	0x3AAE, r22
    102c:	83 e1       	ldi	r24, 0x13	; 19
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	55 e0       	ldi	r21, 0x05	; 5
    1034:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__eewr_word>
										eeprom_write_word(&_NV_XN1G_CAL,_wXN1G_CAL);
										_wY1G_CAL=m_SET_CAL_y1g(aBuffer[3],aBuffer[4],aBuffer[5]);
    1038:	60 91 ca 3a 	lds	r22, 0x3ACA
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	6f 77       	andi	r22, 0x7F	; 127
    1040:	70 70       	andi	r23, 0x00	; 0
    1042:	66 0f       	add	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	66 0f       	add	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	80 91 c9 3a 	lds	r24, 0x3AC9
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	81 70       	andi	r24, 0x01	; 1
    1052:	90 70       	andi	r25, 0x00	; 0
    1054:	98 2f       	mov	r25, r24
    1056:	88 27       	eor	r24, r24
    1058:	99 0f       	add	r25, r25
    105a:	68 2b       	or	r22, r24
    105c:	79 2b       	or	r23, r25
    105e:	80 91 cb 3a 	lds	r24, 0x3ACB
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	80 76       	andi	r24, 0x60	; 96
    1066:	90 70       	andi	r25, 0x00	; 0
    1068:	a5 e0       	ldi	r26, 0x05	; 5
    106a:	96 95       	lsr	r25
    106c:	87 95       	ror	r24
    106e:	aa 95       	dec	r26
    1070:	e1 f7       	brne	.-8      	; 0x106a <_receive_data+0x47e>
    1072:	68 2b       	or	r22, r24
    1074:	79 2b       	or	r23, r25
    1076:	70 93 c5 3a 	sts	0x3AC5, r23
    107a:	60 93 c4 3a 	sts	0x3AC4, r22
    107e:	85 e1       	ldi	r24, 0x15	; 21
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	55 e0       	ldi	r21, 0x05	; 5
    1086:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__eewr_word>
										eeprom_write_word(&_NV_Y1G_CAL,_wY1G_CAL);
										_wYN1G_CAL= m_SET_CAL_yn1g(aBuffer[5],aBuffer[6]);
    108a:	60 91 cc 3a 	lds	r22, 0x3ACC
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	6c 77       	andi	r22, 0x7C	; 124
    1092:	70 70       	andi	r23, 0x00	; 0
    1094:	76 95       	lsr	r23
    1096:	67 95       	ror	r22
    1098:	76 95       	lsr	r23
    109a:	67 95       	ror	r22
    109c:	80 91 cb 3a 	lds	r24, 0x3ACB
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	8f 71       	andi	r24, 0x1F	; 31
    10a4:	90 70       	andi	r25, 0x00	; 0
    10a6:	e5 e0       	ldi	r30, 0x05	; 5
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	ea 95       	dec	r30
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <_receive_data+0x4bc>
    10b0:	68 2b       	or	r22, r24
    10b2:	79 2b       	or	r23, r25
    10b4:	70 93 b3 3a 	sts	0x3AB3, r23
    10b8:	60 93 b2 3a 	sts	0x3AB2, r22
    10bc:	87 e1       	ldi	r24, 0x17	; 23
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	55 e0       	ldi	r21, 0x05	; 5
    10c4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__eewr_word>
										eeprom_write_word(&_NV_YN1G_CAL,_wYN1G_CAL);
										_wZ1G_CAL= m_SET_CAL_z1g(aBuffer[6],aBuffer[7],aBuffer[8]);
    10c8:	60 91 cd 3a 	lds	r22, 0x3ACD
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	66 0f       	add	r22, r22
    10d0:	77 1f       	adc	r23, r23
    10d2:	70 70       	andi	r23, 0x00	; 0
    10d4:	80 91 cc 3a 	lds	r24, 0x3ACC
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	83 70       	andi	r24, 0x03	; 3
    10dc:	90 70       	andi	r25, 0x00	; 0
    10de:	98 2f       	mov	r25, r24
    10e0:	88 27       	eor	r24, r24
    10e2:	68 2b       	or	r22, r24
    10e4:	79 2b       	or	r23, r25
    10e6:	80 91 ce 3a 	lds	r24, 0x3ACE
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	80 74       	andi	r24, 0x40	; 64
    10ee:	90 70       	andi	r25, 0x00	; 0
    10f0:	36 e0       	ldi	r19, 0x06	; 6
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	3a 95       	dec	r19
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <_receive_data+0x506>
    10fa:	68 2b       	or	r22, r24
    10fc:	79 2b       	or	r23, r25
    10fe:	70 93 b9 3a 	sts	0x3AB9, r23
    1102:	60 93 b8 3a 	sts	0x3AB8, r22
    1106:	89 e1       	ldi	r24, 0x19	; 25
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	55 e0       	ldi	r21, 0x05	; 5
    110e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__eewr_word>
										eeprom_write_word(&_NV_Z1G_CAL,_wZ1G_CAL);
										_wZN1G_CAL=m_SET_CAL_zn1g(aBuffer[8],aBuffer[8]);
    1112:	80 91 ce 3a 	lds	r24, 0x3ACE
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	bc 01       	movw	r22, r24
    111a:	68 77       	andi	r22, 0x78	; 120
    111c:	70 70       	andi	r23, 0x00	; 0
    111e:	23 e0       	ldi	r18, 0x03	; 3
    1120:	76 95       	lsr	r23
    1122:	67 95       	ror	r22
    1124:	2a 95       	dec	r18
    1126:	e1 f7       	brne	.-8      	; 0x1120 <_receive_data+0x534>
    1128:	8f 73       	andi	r24, 0x3F	; 63
    112a:	90 70       	andi	r25, 0x00	; 0
    112c:	04 e0       	ldi	r16, 0x04	; 4
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 95       	dec	r16
    1134:	e1 f7       	brne	.-8      	; 0x112e <_receive_data+0x542>
    1136:	68 2b       	or	r22, r24
    1138:	79 2b       	or	r23, r25
    113a:	70 93 b7 3a 	sts	0x3AB7, r23
    113e:	60 93 b6 3a 	sts	0x3AB6, r22
    1142:	8b e1       	ldi	r24, 0x1B	; 27
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9c c1       	rjmp	.+824    	; 0x1480 <_receive_data+0x894>
                            }                                                                                                                       
                            //enable global interrupts
                            break;
                    case (unsigned char) GET_CAL:    
							                                                              
							aBuffer[0]= m_CAL_RSP_BYTE0;
    1148:	84 ec       	ldi	r24, 0xC4	; 196
    114a:	80 93 c6 3a 	sts	0x3AC6, r24
                            aBuffer[1]= m_CAL_RSP_BYTE1_x1g(_wX1G_CAL);                                                                   
    114e:	20 91 ac 3a 	lds	r18, 0x3AAC
    1152:	30 91 ad 3a 	lds	r19, 0x3AAD
    1156:	c9 01       	movw	r24, r18
    1158:	13 e0       	ldi	r17, 0x03	; 3
    115a:	96 95       	lsr	r25
    115c:	87 95       	ror	r24
    115e:	1a 95       	dec	r17
    1160:	e1 f7       	brne	.-8      	; 0x115a <_receive_data+0x56e>
    1162:	8f 77       	andi	r24, 0x7F	; 127
    1164:	80 93 c7 3a 	sts	0x3AC7, r24
                            aBuffer[2]= m_CAL_RSP_BYTE2_x1g(_wX1G_CAL);
							aBuffer[2]|= m_CAL_RSP_BYTE2_xn1g(_wXN1G_CAL);
    1168:	40 91 ae 3a 	lds	r20, 0x3AAE
    116c:	50 91 af 3a 	lds	r21, 0x3AAF
    1170:	ca 01       	movw	r24, r20
    1172:	b6 e0       	ldi	r27, 0x06	; 6
    1174:	96 95       	lsr	r25
    1176:	87 95       	ror	r24
    1178:	ba 95       	dec	r27
    117a:	e1 f7       	brne	.-8      	; 0x1174 <_receive_data+0x588>
    117c:	8f 70       	andi	r24, 0x0F	; 15
    117e:	22 95       	swap	r18
    1180:	20 77       	andi	r18, 0x70	; 112
    1182:	82 2b       	or	r24, r18
    1184:	80 93 c8 3a 	sts	0x3AC8, r24
                            aBuffer[3] = m_CAL_RSP_BYTE3_xn1g(_wXN1G_CAL);
							aBuffer[3]|= m_CAL_RSP_BYTE3_y1g(_wY1G_CAL);
    1188:	20 91 c4 3a 	lds	r18, 0x3AC4
    118c:	30 91 c5 3a 	lds	r19, 0x3AC5
    1190:	83 2f       	mov	r24, r19
    1192:	86 95       	lsr	r24
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	44 0f       	add	r20, r20
    1198:	4e 77       	andi	r20, 0x7E	; 126
    119a:	84 2b       	or	r24, r20
    119c:	80 93 c9 3a 	sts	0x3AC9, r24
                            aBuffer[4] = m_CAL_RSP_BYTE4_y1g(_wY1G_CAL);
    11a0:	c9 01       	movw	r24, r18
    11a2:	96 95       	lsr	r25
    11a4:	87 95       	ror	r24
    11a6:	96 95       	lsr	r25
    11a8:	87 95       	ror	r24
    11aa:	8f 77       	andi	r24, 0x7F	; 127
    11ac:	80 93 ca 3a 	sts	0x3ACA, r24
                            aBuffer[5] = m_CAL_RSP_BYTE5_y1g(_wY1G_CAL);
                            aBuffer[5]|= m_CAL_RSP_BYTE5_yn1g(_wYN1G_CAL);
    11b0:	40 91 b2 3a 	lds	r20, 0x3AB2
    11b4:	50 91 b3 3a 	lds	r21, 0x3AB3
    11b8:	ca 01       	movw	r24, r20
    11ba:	f5 e0       	ldi	r31, 0x05	; 5
    11bc:	96 95       	lsr	r25
    11be:	87 95       	ror	r24
    11c0:	fa 95       	dec	r31
    11c2:	e1 f7       	brne	.-8      	; 0x11bc <_receive_data+0x5d0>
    11c4:	8f 71       	andi	r24, 0x1F	; 31
    11c6:	22 95       	swap	r18
    11c8:	22 0f       	add	r18, r18
    11ca:	20 76       	andi	r18, 0x60	; 96
    11cc:	82 2b       	or	r24, r18
    11ce:	80 93 cb 3a 	sts	0x3ACB, r24
                            aBuffer[6] = m_CAL_RSP_BYTE6_yn1g(_wYN1G_CAL);
							aBuffer[6] |= m_CAL_RSP_BYTE6_z1g(_wZ1G_CAL);
    11d2:	20 91 b8 3a 	lds	r18, 0x3AB8
    11d6:	30 91 b9 3a 	lds	r19, 0x3AB9
    11da:	83 2f       	mov	r24, r19
    11dc:	83 70       	andi	r24, 0x03	; 3
    11de:	44 0f       	add	r20, r20
    11e0:	44 0f       	add	r20, r20
    11e2:	4c 77       	andi	r20, 0x7C	; 124
    11e4:	84 2b       	or	r24, r20
    11e6:	80 93 cc 3a 	sts	0x3ACC, r24
                            aBuffer[7] =  m_CAL_RSP_BYTE7_z1g(_wZ1G_CAL);
    11ea:	c9 01       	movw	r24, r18
    11ec:	96 95       	lsr	r25
    11ee:	87 95       	ror	r24
    11f0:	8f 77       	andi	r24, 0x7F	; 127
    11f2:	80 93 cd 3a 	sts	0x3ACD, r24
                            aBuffer[8] =  m_CAL_RSP_BYTE8_z1g(_wZ1G_CAL);
							aBuffer[8] |= m_CAL_RSP_BYTE8_zn1g(_wZN1G_CAL);
    11f6:	40 91 b6 3a 	lds	r20, 0x3AB6
    11fa:	50 91 b7 3a 	lds	r21, 0x3AB7
    11fe:	5b c0       	rjmp	.+182    	; 0x12b6 <_receive_data+0x6ca>
							processed_counter=command_counter;
                            response_length=10;                                                                               
                            break;    
                    case (unsigned char) GET_BTCAL:    
							                                                              
							aBuffer[0]= m_BTCAL_RSP_BYTE0;
    1200:	89 ec       	ldi	r24, 0xC9	; 201
    1202:	80 93 c6 3a 	sts	0x3AC6, r24
                            aBuffer[1]= m_BTCAL_RSP_BYTE1_100(_wBTCAL100);                                                                   
    1206:	20 91 b4 3a 	lds	r18, 0x3AB4
    120a:	30 91 b5 3a 	lds	r19, 0x3AB5
    120e:	c9 01       	movw	r24, r18
    1210:	73 e0       	ldi	r23, 0x03	; 3
    1212:	96 95       	lsr	r25
    1214:	87 95       	ror	r24
    1216:	7a 95       	dec	r23
    1218:	e1 f7       	brne	.-8      	; 0x1212 <_receive_data+0x626>
    121a:	8f 77       	andi	r24, 0x7F	; 127
    121c:	80 93 c7 3a 	sts	0x3AC7, r24
                            aBuffer[2]= m_BTCAL_RSP_BYTE2_100(_wBTCAL100);
							aBuffer[2]|= m_BTCAL_RSP_BYTE2_80(_wBTCAL80);
    1220:	40 91 c2 3a 	lds	r20, 0x3AC2
    1224:	50 91 c3 3a 	lds	r21, 0x3AC3
    1228:	ca 01       	movw	r24, r20
    122a:	56 e0       	ldi	r21, 0x06	; 6
    122c:	96 95       	lsr	r25
    122e:	87 95       	ror	r24
    1230:	5a 95       	dec	r21
    1232:	e1 f7       	brne	.-8      	; 0x122c <_receive_data+0x640>
    1234:	8f 70       	andi	r24, 0x0F	; 15
    1236:	22 95       	swap	r18
    1238:	20 77       	andi	r18, 0x70	; 112
    123a:	82 2b       	or	r24, r18
    123c:	80 93 c8 3a 	sts	0x3AC8, r24
                            aBuffer[3] = m_BTCAL_RSP_BYTE3_80(_wBTCAL80);
							aBuffer[3]|= m_BTCAL_RSP_BYTE3_60(_wBTCAL60);
    1240:	20 91 bc 3a 	lds	r18, 0x3ABC
    1244:	30 91 bd 3a 	lds	r19, 0x3ABD
    1248:	83 2f       	mov	r24, r19
    124a:	86 95       	lsr	r24
    124c:	81 70       	andi	r24, 0x01	; 1
    124e:	44 0f       	add	r20, r20
    1250:	4e 77       	andi	r20, 0x7E	; 126
    1252:	84 2b       	or	r24, r20
    1254:	80 93 c9 3a 	sts	0x3AC9, r24
                            aBuffer[4] = m_BTCAL_RSP_BYTE4_60(_wBTCAL60);
    1258:	c9 01       	movw	r24, r18
    125a:	96 95       	lsr	r25
    125c:	87 95       	ror	r24
    125e:	96 95       	lsr	r25
    1260:	87 95       	ror	r24
    1262:	8f 77       	andi	r24, 0x7F	; 127
    1264:	80 93 ca 3a 	sts	0x3ACA, r24
                            aBuffer[5] = m_BTCAL_RSP_BYTE5_60(_wBTCAL60);
                            aBuffer[5]|= m_BTCAL_RSP_BYTE5_40(_wBTCAL40);
    1268:	40 91 ba 3a 	lds	r20, 0x3ABA
    126c:	50 91 bb 3a 	lds	r21, 0x3ABB
    1270:	ca 01       	movw	r24, r20
    1272:	05 e0       	ldi	r16, 0x05	; 5
    1274:	96 95       	lsr	r25
    1276:	87 95       	ror	r24
    1278:	0a 95       	dec	r16
    127a:	e1 f7       	brne	.-8      	; 0x1274 <_receive_data+0x688>
    127c:	8f 71       	andi	r24, 0x1F	; 31
    127e:	22 95       	swap	r18
    1280:	22 0f       	add	r18, r18
    1282:	20 76       	andi	r18, 0x60	; 96
    1284:	82 2b       	or	r24, r18
    1286:	80 93 cb 3a 	sts	0x3ACB, r24
                            aBuffer[6] = m_BTCAL_RSP_BYTE6_40(_wBTCAL40);
							aBuffer[6] |= m_BTCAL_RSP_BYTE6_20(_wBTCAL20);
    128a:	20 91 b0 3a 	lds	r18, 0x3AB0
    128e:	30 91 b1 3a 	lds	r19, 0x3AB1
    1292:	83 2f       	mov	r24, r19
    1294:	83 70       	andi	r24, 0x03	; 3
    1296:	44 0f       	add	r20, r20
    1298:	44 0f       	add	r20, r20
    129a:	4c 77       	andi	r20, 0x7C	; 124
    129c:	84 2b       	or	r24, r20
    129e:	80 93 cc 3a 	sts	0x3ACC, r24
                            aBuffer[7] =  m_BTCAL_RSP_BYTE7_20(_wBTCAL20);
    12a2:	c9 01       	movw	r24, r18
    12a4:	96 95       	lsr	r25
    12a6:	87 95       	ror	r24
    12a8:	8f 77       	andi	r24, 0x7F	; 127
    12aa:	80 93 cd 3a 	sts	0x3ACD, r24
                            aBuffer[8] =  m_BTCAL_RSP_BYTE8_20(_wBTCAL20);
							aBuffer[8] |= m_BTCAL_RSP_BYTE8_10(_wBTCAL10);
    12ae:	40 91 c0 3a 	lds	r20, 0x3AC0
    12b2:	50 91 c1 3a 	lds	r21, 0x3AC1
    12b6:	ca 01       	movw	r24, r20
    12b8:	b4 e0       	ldi	r27, 0x04	; 4
    12ba:	96 95       	lsr	r25
    12bc:	87 95       	ror	r24
    12be:	ba 95       	dec	r27
    12c0:	e1 f7       	brne	.-8      	; 0x12ba <_receive_data+0x6ce>
    12c2:	8f 73       	andi	r24, 0x3F	; 63
    12c4:	22 95       	swap	r18
    12c6:	22 0f       	add	r18, r18
    12c8:	22 0f       	add	r18, r18
    12ca:	20 74       	andi	r18, 0x40	; 64
    12cc:	82 2b       	or	r24, r18
    12ce:	80 93 ce 3a 	sts	0x3ACE, r24
                            aBuffer[9] =  m_BTCAL_RSP_BYTE9_10(_wBTCAL10);
    12d2:	44 0f       	add	r20, r20
    12d4:	44 0f       	add	r20, r20
    12d6:	44 0f       	add	r20, r20
    12d8:	48 77       	andi	r20, 0x78	; 120
    12da:	40 93 cf 3a 	sts	0x3ACF, r20
							processed_counter=command_counter;
    12de:	60 93 23 02 	sts	0x0223, r22
                            response_length=10;                                                                               
    12e2:	8a e0       	ldi	r24, 0x0A	; 10
    12e4:	e1 c0       	rjmp	.+450    	; 0x14a8 <_receive_data+0x8bc>
                            break;  
 					case (unsigned char) SET_BTCAL:
                            if (eeprom_is_ready())
    12e6:	f9 99       	sbic	0x1f, 1	; 31
    12e8:	e1 c0       	rjmp	.+450    	; 0x14ac <_receive_data+0x8c0>
                            {
                                    //do nothing if battery is low
#ifdef _VERSION==3
                                    if (_atmega_a2dConvert10bit(ADC7)<600)
    12ea:	87 e0       	ldi	r24, 0x07	; 7
    12ec:	0e 94 29 0c 	call	0x1852	; 0x1852 <_atmega_a2dConvert10bit>
    12f0:	88 55       	subi	r24, 0x58	; 88
    12f2:	92 40       	sbci	r25, 0x02	; 2
    12f4:	08 f4       	brcc	.+2      	; 0x12f8 <_receive_data+0x70c>
    12f6:	da c0       	rjmp	.+436    	; 0x14ac <_receive_data+0x8c0>
                                    if (_atmega_a2dConvert10bit(ADC4)<600)
#endif
                                            break;
                                    else
                                    {   
										_wBTCAL100=m_SET_BTCAL_100(aBuffer[1],aBuffer[2]);
    12f8:	60 91 c8 3a 	lds	r22, 0x3AC8
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	60 77       	andi	r22, 0x70	; 112
    1300:	70 70       	andi	r23, 0x00	; 0
    1302:	a4 e0       	ldi	r26, 0x04	; 4
    1304:	76 95       	lsr	r23
    1306:	67 95       	ror	r22
    1308:	aa 95       	dec	r26
    130a:	e1 f7       	brne	.-8      	; 0x1304 <_receive_data+0x718>
    130c:	80 91 c7 3a 	lds	r24, 0x3AC7
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	8f 77       	andi	r24, 0x7F	; 127
    1314:	90 70       	andi	r25, 0x00	; 0
    1316:	f3 e0       	ldi	r31, 0x03	; 3
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	fa 95       	dec	r31
    131e:	e1 f7       	brne	.-8      	; 0x1318 <_receive_data+0x72c>
    1320:	68 2b       	or	r22, r24
    1322:	79 2b       	or	r23, r25
    1324:	70 93 b5 3a 	sts	0x3AB5, r23
    1328:	60 93 b4 3a 	sts	0x3AB4, r22
    132c:	85 e0       	ldi	r24, 0x05	; 5
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	41 e0       	ldi	r20, 0x01	; 1
    1332:	55 e0       	ldi	r21, 0x05	; 5
    1334:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__eewr_word>
										eeprom_write_word(&_NV_BTCAL100,_wBTCAL100);
										_wBTCAL80=m_SET_BTCAL_80(aBuffer[2],aBuffer[3]);
    1338:	60 91 c9 3a 	lds	r22, 0x3AC9
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	6e 77       	andi	r22, 0x7E	; 126
    1340:	70 70       	andi	r23, 0x00	; 0
    1342:	76 95       	lsr	r23
    1344:	67 95       	ror	r22
    1346:	80 91 c8 3a 	lds	r24, 0x3AC8
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	8f 70       	andi	r24, 0x0F	; 15
    134e:	90 70       	andi	r25, 0x00	; 0
    1350:	56 e0       	ldi	r21, 0x06	; 6
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	5a 95       	dec	r21
    1358:	e1 f7       	brne	.-8      	; 0x1352 <_receive_data+0x766>
    135a:	68 2b       	or	r22, r24
    135c:	79 2b       	or	r23, r25
    135e:	70 93 c3 3a 	sts	0x3AC3, r23
    1362:	60 93 c2 3a 	sts	0x3AC2, r22
    1366:	87 e0       	ldi	r24, 0x07	; 7
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	55 e0       	ldi	r21, 0x05	; 5
    136e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__eewr_word>
										eeprom_write_word(&_NV_BTCAL80,_wBTCAL80);
										_wBTCAL60=m_SET_BTCAL_60(aBuffer[3],aBuffer[4],aBuffer[5]);
    1372:	60 91 ca 3a 	lds	r22, 0x3ACA
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	6f 77       	andi	r22, 0x7F	; 127
    137a:	70 70       	andi	r23, 0x00	; 0
    137c:	66 0f       	add	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	80 91 c9 3a 	lds	r24, 0x3AC9
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	81 70       	andi	r24, 0x01	; 1
    138c:	90 70       	andi	r25, 0x00	; 0
    138e:	98 2f       	mov	r25, r24
    1390:	88 27       	eor	r24, r24
    1392:	99 0f       	add	r25, r25
    1394:	68 2b       	or	r22, r24
    1396:	79 2b       	or	r23, r25
    1398:	80 91 cb 3a 	lds	r24, 0x3ACB
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	80 76       	andi	r24, 0x60	; 96
    13a0:	90 70       	andi	r25, 0x00	; 0
    13a2:	25 e0       	ldi	r18, 0x05	; 5
    13a4:	96 95       	lsr	r25
    13a6:	87 95       	ror	r24
    13a8:	2a 95       	dec	r18
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <_receive_data+0x7b8>
    13ac:	68 2b       	or	r22, r24
    13ae:	79 2b       	or	r23, r25
    13b0:	70 93 bd 3a 	sts	0x3ABD, r23
    13b4:	60 93 bc 3a 	sts	0x3ABC, r22
    13b8:	89 e0       	ldi	r24, 0x09	; 9
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	41 e0       	ldi	r20, 0x01	; 1
    13be:	55 e0       	ldi	r21, 0x05	; 5
    13c0:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__eewr_word>
										eeprom_write_word(&_NV_BTCAL60,_wBTCAL60);
										_wBTCAL40= m_SET_BTCAL_40(aBuffer[5],aBuffer[6]);
    13c4:	60 91 cc 3a 	lds	r22, 0x3ACC
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	6c 77       	andi	r22, 0x7C	; 124
    13cc:	70 70       	andi	r23, 0x00	; 0
    13ce:	76 95       	lsr	r23
    13d0:	67 95       	ror	r22
    13d2:	76 95       	lsr	r23
    13d4:	67 95       	ror	r22
    13d6:	80 91 cb 3a 	lds	r24, 0x3ACB
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	8f 71       	andi	r24, 0x1F	; 31
    13de:	90 70       	andi	r25, 0x00	; 0
    13e0:	05 e0       	ldi	r16, 0x05	; 5
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 95       	dec	r16
    13e8:	e1 f7       	brne	.-8      	; 0x13e2 <_receive_data+0x7f6>
    13ea:	68 2b       	or	r22, r24
    13ec:	79 2b       	or	r23, r25
    13ee:	70 93 bb 3a 	sts	0x3ABB, r23
    13f2:	60 93 ba 3a 	sts	0x3ABA, r22
    13f6:	8b e0       	ldi	r24, 0x0B	; 11
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	41 e0       	ldi	r20, 0x01	; 1
    13fc:	55 e0       	ldi	r21, 0x05	; 5
    13fe:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__eewr_word>
										eeprom_write_word(&_NV_BTCAL40,_wBTCAL40);
										_wBTCAL20= m_SET_BTCAL_20(aBuffer[6],aBuffer[7],aBuffer[8]);
    1402:	60 91 cd 3a 	lds	r22, 0x3ACD
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	66 0f       	add	r22, r22
    140a:	77 1f       	adc	r23, r23
    140c:	70 70       	andi	r23, 0x00	; 0
    140e:	80 91 cc 3a 	lds	r24, 0x3ACC
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	83 70       	andi	r24, 0x03	; 3
    1416:	90 70       	andi	r25, 0x00	; 0
    1418:	98 2f       	mov	r25, r24
    141a:	88 27       	eor	r24, r24
    141c:	68 2b       	or	r22, r24
    141e:	79 2b       	or	r23, r25
    1420:	80 91 ce 3a 	lds	r24, 0x3ACE
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	80 74       	andi	r24, 0x40	; 64
    1428:	90 70       	andi	r25, 0x00	; 0
    142a:	a6 e0       	ldi	r26, 0x06	; 6
    142c:	96 95       	lsr	r25
    142e:	87 95       	ror	r24
    1430:	aa 95       	dec	r26
    1432:	e1 f7       	brne	.-8      	; 0x142c <_receive_data+0x840>
    1434:	68 2b       	or	r22, r24
    1436:	79 2b       	or	r23, r25
    1438:	70 93 b1 3a 	sts	0x3AB1, r23
    143c:	60 93 b0 3a 	sts	0x3AB0, r22
    1440:	8d e0       	ldi	r24, 0x0D	; 13
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	41 e0       	ldi	r20, 0x01	; 1
    1446:	55 e0       	ldi	r21, 0x05	; 5
    1448:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__eewr_word>
										eeprom_write_word(&_NV_BTCAL20,_wBTCAL20);
										_wBTCAL10=m_SET_BTCAL_10(aBuffer[8],aBuffer[8]);
    144c:	80 91 ce 3a 	lds	r24, 0x3ACE
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	bc 01       	movw	r22, r24
    1454:	68 77       	andi	r22, 0x78	; 120
    1456:	70 70       	andi	r23, 0x00	; 0
    1458:	f3 e0       	ldi	r31, 0x03	; 3
    145a:	76 95       	lsr	r23
    145c:	67 95       	ror	r22
    145e:	fa 95       	dec	r31
    1460:	e1 f7       	brne	.-8      	; 0x145a <_receive_data+0x86e>
    1462:	8f 73       	andi	r24, 0x3F	; 63
    1464:	90 70       	andi	r25, 0x00	; 0
    1466:	e4 e0       	ldi	r30, 0x04	; 4
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	ea 95       	dec	r30
    146e:	e1 f7       	brne	.-8      	; 0x1468 <_receive_data+0x87c>
    1470:	68 2b       	or	r22, r24
    1472:	79 2b       	or	r23, r25
    1474:	70 93 c1 3a 	sts	0x3AC1, r23
    1478:	60 93 c0 3a 	sts	0x3AC0, r22
    147c:	8f e0       	ldi	r24, 0x0F	; 15
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	55 e0       	ldi	r21, 0x05	; 5
    1484:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__eewr_word>
										eeprom_write_word(&_NV_BTCAL10,_wBTCAL10);
										processed_counter=command_counter;
    1488:	80 91 1f 02 	lds	r24, 0x021F
    148c:	80 93 23 02 	sts	0x0223, r24
    1490:	0d c0       	rjmp	.+26     	; 0x14ac <_receive_data+0x8c0>
                                                                                                                                    
                            }                                                                                                                       
                            //enable global interrupts
                            break;	
	   				case (unsigned char) GET_HV:  
				   		aBuffer[0]=m_HV_RSP_BYTE0;
    1492:	8a ec       	ldi	r24, 0xCA	; 202
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <_receive_data+0x8ac>
                        aBuffer[1]=m_HV_RSP_BYTE1(_VERSION);
						processed_counter=command_counter;		
						response_length=2;
						break;				
					case (unsigned char) GET_FV:  
				   		aBuffer[0]=m_FV_RSP_BYTE0;
    1496:	8b ec       	ldi	r24, 0xCB	; 203
    1498:	80 93 c6 3a 	sts	0x3AC6, r24
                        aBuffer[1]=m_FV_RSP_BYTE1(_FVERSION);
    149c:	83 e0       	ldi	r24, 0x03	; 3
    149e:	80 93 c7 3a 	sts	0x3AC7, r24
						processed_counter=command_counter;
    14a2:	60 93 23 02 	sts	0x0223, r22
						response_length=2;
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	80 93 24 02 	sts	0x0224, r24
                    default:        
                            break;

            }

            if (processed_counter==command_counter)
    14ac:	90 91 23 02 	lds	r25, 0x0223
    14b0:	80 91 1f 02 	lds	r24, 0x021F
    14b4:	98 17       	cp	r25, r24
    14b6:	59 f5       	brne	.+86     	; 0x150e <_receive_data+0x922>
    14b8:	00 e0       	ldi	r16, 0x00	; 0
    14ba:	10 e0       	ldi	r17, 0x00	; 0
    14bc:	08 c0       	rjmp	.+16     	; 0x14ce <_receive_data+0x8e2>
			{                                        
                            
                    for (int i=0;(i<response_length);i++)                                                                                       
                     	_bluetooth_transmit_uart0_byte(aBuffer[i]);                                                                                                                                                   
    14be:	f8 01       	movw	r30, r16
    14c0:	ea 53       	subi	r30, 0x3A	; 58
    14c2:	f5 4c       	sbci	r31, 0xC5	; 197
    14c4:	80 81       	ld	r24, Z
    14c6:	0e 94 b7 10 	call	0x216e	; 0x216e <_bluetooth_transmit_uart0_byte>
            }

            if (processed_counter==command_counter)
			{                                        
                            
                    for (int i=0;(i<response_length);i++)                                                                                       
    14ca:	0f 5f       	subi	r16, 0xFF	; 255
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	80 91 24 02 	lds	r24, 0x0224
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	08 17       	cp	r16, r24
    14d6:	19 07       	cpc	r17, r25
    14d8:	94 f3       	brlt	.-28     	; 0x14be <_receive_data+0x8d2>
    14da:	07 c0       	rjmp	.+14     	; 0x14ea <_receive_data+0x8fe>
                    address=0xffff;
                    response_length=0;
                    
            }
    } //if command timed out
    else if (command_timer>=MAX_COMMAND_TIMER)
    14dc:	80 91 21 02 	lds	r24, 0x0221
    14e0:	90 91 22 02 	lds	r25, 0x0222
    14e4:	8f 3f       	cpi	r24, 0xFF	; 255
    14e6:	91 05       	cpc	r25, r1
    14e8:	90 f0       	brcs	.+36     	; 0x150e <_receive_data+0x922>
    {                            
            command_length=0;
    14ea:	10 92 20 02 	sts	0x0220, r1
            command_counter=0;
    14ee:	10 92 1f 02 	sts	0x021F, r1
            command_timer=0;
    14f2:	10 92 22 02 	sts	0x0222, r1
    14f6:	10 92 21 02 	sts	0x0221, r1
            processed_counter=0;                            
    14fa:	10 92 23 02 	sts	0x0223, r1
            address=0xffff;
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    1502:	90 93 03 01 	sts	0x0103, r25
    1506:	80 93 02 01 	sts	0x0102, r24
            response_length=0;
    150a:	10 92 24 02 	sts	0x0224, r1

    }

}
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <_send_data>:



void _send_data(void)
{	
	if (paused==0)
    151a:	80 91 25 02 	lds	r24, 0x0225
    151e:	88 23       	and	r24, r24
    1520:	39 f5       	brne	.+78     	; 0x1570 <_send_data+0x56>
	{		
 		alive_timer++;                                  
    1522:	80 91 26 02 	lds	r24, 0x0226
    1526:	90 91 27 02 	lds	r25, 0x0227
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	90 93 27 02 	sts	0x0227, r25
    1530:	80 93 26 02 	sts	0x0226, r24
        if (alive_timer>=2730) //if no acks for approx 30 seconds, reset radio
    1534:	8a 5a       	subi	r24, 0xAA	; 170
    1536:	9a 40       	sbci	r25, 0x0A	; 10
    1538:	30 f0       	brcs	.+12     	; 0x1546 <_send_data+0x2c>
        {
           //	_atmega_reset();
		   _bluetooth_reset();
    153a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_bluetooth_reset>
           	alive_timer=0;                                  
    153e:	10 92 27 02 	sts	0x0227, r1
    1542:	10 92 26 02 	sts	0x0226, r1
        }
#ifdef _VERSION==3
		x=_atmega_a2dConvert10bit(ADC2);
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	0e 94 29 0c 	call	0x1852	; 0x1852 <_atmega_a2dConvert10bit>
    154c:	90 93 2b 02 	sts	0x022B, r25
    1550:	80 93 2a 02 	sts	0x022A, r24
		y=_atmega_a2dConvert10bit(ADC1);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	0e 94 29 0c 	call	0x1852	; 0x1852 <_atmega_a2dConvert10bit>
    155a:	90 93 2d 02 	sts	0x022D, r25
    155e:	80 93 2c 02 	sts	0x022C, r24
		z=_atmega_a2dConvert10bit(ADC0);
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	0e 94 29 0c 	call	0x1852	; 0x1852 <_atmega_a2dConvert10bit>
    1568:	90 93 2f 02 	sts	0x022F, r25
    156c:	80 93 2e 02 	sts	0x022E, r24
    1570:	08 95       	ret

00001572 <_send_data_bufferred>:
 
}
void _send_data_bufferred(void)
{
	
		if (paused==0)
    1572:	80 91 25 02 	lds	r24, 0x0225
    1576:	88 23       	and	r24, r24
    1578:	29 f5       	brne	.+74     	; 0x15c4 <_send_data_bufferred+0x52>
		{
 			alive_timer++;                                  
    157a:	80 91 26 02 	lds	r24, 0x0226
    157e:	90 91 27 02 	lds	r25, 0x0227
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	90 93 27 02 	sts	0x0227, r25
    1588:	80 93 26 02 	sts	0x0226, r24
            if (alive_timer>=2730) //if no acks for approx 30 seconds, reset radio
    158c:	8a 5a       	subi	r24, 0xAA	; 170
    158e:	9a 40       	sbci	r25, 0x0A	; 10
    1590:	30 f0       	brcs	.+12     	; 0x159e <_send_data_bufferred+0x2c>
            {
            	//_atmega_reset();
				_bluetooth_reset();
    1592:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_bluetooth_reset>
            	alive_timer=0;                                  
    1596:	10 92 27 02 	sts	0x0227, r1
    159a:	10 92 26 02 	sts	0x0226, r1
					mycounter=0;
			/*	if ((i==2400))
					for (int j=0;(j<100);j++)
						_delay_ms(5);*/
				}
			if (x>1023)
    159e:	80 91 2a 02 	lds	r24, 0x022A
    15a2:	90 91 2b 02 	lds	r25, 0x022B
    15a6:	80 50       	subi	r24, 0x00	; 0
    15a8:	94 40       	sbci	r25, 0x04	; 4
    15aa:	60 f0       	brcs	.+24     	; 0x15c4 <_send_data_bufferred+0x52>
			{
				x=0;
    15ac:	10 92 2b 02 	sts	0x022B, r1
    15b0:	10 92 2a 02 	sts	0x022A, r1
				y=0;
    15b4:	10 92 2d 02 	sts	0x022D, r1
    15b8:	10 92 2c 02 	sts	0x022C, r1
				z=0;
    15bc:	10 92 2f 02 	sts	0x022F, r1
    15c0:	10 92 2e 02 	sts	0x022E, r1
    15c4:	08 95       	ret

000015c6 <_wocket_initialize>:
void _wocket_initialize(void)
{
	

	// Disable the watchdog timer. It has to be done at the beginning of the program.
	_atmega_disable_watchdog();
    15c6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_atmega_disable_watchdog>
	_atmega_initialize(CPU_CLK_PRESCALAR_1024);
    15ca:	86 e0       	ldi	r24, 0x06	; 6
    15cc:	0e 94 cb 0c 	call	0x1996	; 0x1996 <_atmega_initialize>
	num_skipped_timer_interrupts=10;//(F_CPU/1024)/PERFECT_SAMPLING_FREQUENCY;
    15d0:	8a e0       	ldi	r24, 0x0A	; 10
    15d2:	80 93 8b 1e 	sts	0x1E8B, r24



	_yellowled_turn_on();		
    15d6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_yellowled_turn_on>
	_greenled_turn_on();		
    15da:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_greenled_turn_on>
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	20 e1       	ldi	r18, 0x10	; 16
    15e4:	37 e2       	ldi	r19, 0x27	; 39
    15e6:	f9 01       	movw	r30, r18
    15e8:	31 97       	sbiw	r30, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <_wocket_initialize+0x22>
	for(int i=0;(i<2000);i++)
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	47 e0       	ldi	r20, 0x07	; 7
    15f0:	80 3d       	cpi	r24, 0xD0	; 208
    15f2:	94 07       	cpc	r25, r20
    15f4:	c1 f7       	brne	.-16     	; 0x15e6 <_wocket_initialize+0x20>
		_delay_ms(5);
	_yellowled_turn_off();
    15f6:	0e 94 06 11 	call	0x220c	; 0x220c <_yellowled_turn_off>
	_greenled_turn_off();
    15fa:	0e 94 ef 10 	call	0x21de	; 0x21de <_greenled_turn_off>


	_SAMPLING_RATE=90;
    15fe:	8a e5       	ldi	r24, 0x5A	; 90
    1600:	80 93 04 01 	sts	0x0104, r24
	_wTM=_TM_Continuous;
    1604:	10 92 34 02 	sts	0x0234, r1

	_wBTCAL100=_DEFAULTBTCAL100;
    1608:	85 ed       	ldi	r24, 0xD5	; 213
    160a:	92 e0       	ldi	r25, 0x02	; 2
    160c:	90 93 b5 3a 	sts	0x3AB5, r25
    1610:	80 93 b4 3a 	sts	0x3AB4, r24
	_wBTCAL80=_DEFAULTBTCAL80;
    1614:	88 ea       	ldi	r24, 0xA8	; 168
    1616:	92 e0       	ldi	r25, 0x02	; 2
    1618:	90 93 c3 3a 	sts	0x3AC3, r25
    161c:	80 93 c2 3a 	sts	0x3AC2, r24
	_wBTCAL60=_DEFAULTBTCAL60;
    1620:	80 e8       	ldi	r24, 0x80	; 128
    1622:	92 e0       	ldi	r25, 0x02	; 2
    1624:	90 93 bd 3a 	sts	0x3ABD, r25
    1628:	80 93 bc 3a 	sts	0x3ABC, r24
	_wBTCAL40=_DEFAULTBTCAL40;
    162c:	88 e5       	ldi	r24, 0x58	; 88
    162e:	92 e0       	ldi	r25, 0x02	; 2
    1630:	90 93 bb 3a 	sts	0x3ABB, r25
    1634:	80 93 ba 3a 	sts	0x3ABA, r24
	_wBTCAL20=_DEFAULTBTCAL20;
    1638:	80 e3       	ldi	r24, 0x30	; 48
    163a:	92 e0       	ldi	r25, 0x02	; 2
    163c:	90 93 b1 3a 	sts	0x3AB1, r25
    1640:	80 93 b0 3a 	sts	0x3AB0, r24
	_wBTCAL10=_DEFAULTBTCAL10;
    1644:	8c e1       	ldi	r24, 0x1C	; 28
    1646:	92 e0       	ldi	r25, 0x02	; 2
    1648:	90 93 c1 3a 	sts	0x3AC1, r25
    164c:	80 93 c0 3a 	sts	0x3AC0, r24



	_wX1G_CAL=_DEFAULT_X1G_CAL;
    1650:	84 ef       	ldi	r24, 0xF4	; 244
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	90 93 ad 3a 	sts	0x3AAD, r25
    1658:	80 93 ac 3a 	sts	0x3AAC, r24
	_wXN1G_CAL=_DEFAULT_XN1G_CAL;
    165c:	85 ef       	ldi	r24, 0xF5	; 245
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	90 93 af 3a 	sts	0x3AAF, r25
    1664:	80 93 ae 3a 	sts	0x3AAE, r24
	_wY1G_CAL=_DEFAULT_Y1G_CAL;
    1668:	86 ef       	ldi	r24, 0xF6	; 246
    166a:	91 e0       	ldi	r25, 0x01	; 1
    166c:	90 93 c5 3a 	sts	0x3AC5, r25
    1670:	80 93 c4 3a 	sts	0x3AC4, r24
	_wYN1G_CAL=_DEFAULT_YN1G_CAL;
    1674:	87 ef       	ldi	r24, 0xF7	; 247
    1676:	91 e0       	ldi	r25, 0x01	; 1
    1678:	90 93 b3 3a 	sts	0x3AB3, r25
    167c:	80 93 b2 3a 	sts	0x3AB2, r24
	_wZ1G_CAL=_DEFAULT_Z1G_CAL;
    1680:	88 ef       	ldi	r24, 0xF8	; 248
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	90 93 b9 3a 	sts	0x3AB9, r25
    1688:	80 93 b8 3a 	sts	0x3AB8, r24
	_wZN1G_CAL=_DEFAULT_ZN1G_CAL;
    168c:	89 ef       	ldi	r24, 0xF9	; 249
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	90 93 b7 3a 	sts	0x3AB7, r25
    1694:	80 93 b6 3a 	sts	0x3AB6, r24

	//SET the PDT
	_wPDT=_DEFAULT_PDT;
    1698:	8f e7       	ldi	r24, 0x7F	; 127
    169a:	80 93 be 3a 	sts	0x3ABE, r24




	// Set the initialized flag in the status byte
	_INITIALIZED=_WOCKET_INITIALIZED;
    169e:	85 e2       	ldi	r24, 0x25	; 37
    16a0:	80 93 30 02 	sts	0x0230, r24
		_yellowled_turn_off();
		_atmega_finalize();
		return;
	}

	_DEFAULT_SHUTDOWN= (unsigned long)_wPDT*(unsigned long)_SAMPLING_RATE* (unsigned long)60;
    16a4:	88 ee       	ldi	r24, 0xE8	; 232
    16a6:	96 e7       	ldi	r25, 0x76	; 118
    16a8:	aa e0       	ldi	r26, 0x0A	; 10
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	80 93 3d 02 	sts	0x023D, r24
    16b0:	90 93 3e 02 	sts	0x023E, r25
    16b4:	a0 93 3f 02 	sts	0x023F, r26
    16b8:	b0 93 40 02 	sts	0x0240, r27
	_wShutdownTimer=_DEFAULT_SHUTDOWN;
    16bc:	80 93 39 02 	sts	0x0239, r24
    16c0:	90 93 3a 02 	sts	0x023A, r25
    16c4:	a0 93 3b 02 	sts	0x023B, r26
    16c8:	b0 93 3c 02 	sts	0x023C, r27



	// Calculate the timer variables used to sample at the right frequency
	_wocket_initialize_timer2_interrupt();
    16cc:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_wocket_initialize_timer2_interrupt>
	
	
     /* Enable Timer 2 */
     _atmega_enable_timer2(CPU_CLK_PRESCALAR_1024);
    16d0:	86 e0       	ldi	r24, 0x06	; 6
    16d2:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_atmega_enable_timer2>
	 

}
    16d6:	08 95       	ret

000016d8 <_atmega_set_adc_clock>:
/* Local Function Definitions */



void _atmega_set_adc_clock(unsigned char prescalar){
        if (prescalar==ADC_PRESCALAR_2){
    16d8:	88 23       	and	r24, r24
    16da:	21 f4       	brne	.+8      	; 0x16e4 <_atmega_set_adc_clock+0xc>
                ADCSRA &= ~((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
    16dc:	80 91 7a 00 	lds	r24, 0x007A
    16e0:	88 7f       	andi	r24, 0xF8	; 248
    16e2:	36 c0       	rjmp	.+108    	; 0x1750 <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_4){
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	49 f4       	brne	.+18     	; 0x16fa <_atmega_set_adc_clock+0x22>
                ADCSRA &= ~((1 << ADPS2) | (1 << ADPS0));
    16e8:	80 91 7a 00 	lds	r24, 0x007A
    16ec:	8a 7f       	andi	r24, 0xFA	; 250
    16ee:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= (1 << ADPS1);
    16f2:	80 91 7a 00 	lds	r24, 0x007A
    16f6:	82 60       	ori	r24, 0x02	; 2
    16f8:	2b c0       	rjmp	.+86     	; 0x1750 <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_8){
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	49 f4       	brne	.+18     	; 0x1710 <_atmega_set_adc_clock+0x38>
                ADCSRA &= ~(1 << ADPS2);
    16fe:	80 91 7a 00 	lds	r24, 0x007A
    1702:	8b 7f       	andi	r24, 0xFB	; 251
    1704:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= ((1 << ADPS1) |(1 << ADPS0)) ;
    1708:	80 91 7a 00 	lds	r24, 0x007A
    170c:	83 60       	ori	r24, 0x03	; 3
    170e:	20 c0       	rjmp	.+64     	; 0x1750 <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_16){
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	49 f4       	brne	.+18     	; 0x1726 <_atmega_set_adc_clock+0x4e>
                ADCSRA &= ~((1 << ADPS1) |(1 << ADPS0));
    1714:	80 91 7a 00 	lds	r24, 0x007A
    1718:	8c 7f       	andi	r24, 0xFC	; 252
    171a:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= (1 << ADPS2);
    171e:	80 91 7a 00 	lds	r24, 0x007A
    1722:	84 60       	ori	r24, 0x04	; 4
    1724:	15 c0       	rjmp	.+42     	; 0x1750 <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_32){
    1726:	84 30       	cpi	r24, 0x04	; 4
    1728:	49 f4       	brne	.+18     	; 0x173c <_atmega_set_adc_clock+0x64>
                ADCSRA &= ~(1 << ADPS1);
    172a:	80 91 7a 00 	lds	r24, 0x007A
    172e:	8d 7f       	andi	r24, 0xFD	; 253
    1730:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= ((1 << ADPS2)|(1 << ADPS0));
    1734:	80 91 7a 00 	lds	r24, 0x007A
    1738:	85 60       	ori	r24, 0x05	; 5
    173a:	0a c0       	rjmp	.+20     	; 0x1750 <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_64){
    173c:	85 30       	cpi	r24, 0x05	; 5
    173e:	59 f4       	brne	.+22     	; 0x1756 <_atmega_set_adc_clock+0x7e>
                ADCSRA &= ~(1 << ADPS0);
    1740:	80 91 7a 00 	lds	r24, 0x007A
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= ((1 << ADPS2)|(1 << ADPS1));
    174a:	80 91 7a 00 	lds	r24, 0x007A
    174e:	86 60       	ori	r24, 0x06	; 6
    1750:	80 93 7a 00 	sts	0x007A, r24
    1754:	08 95       	ret
        }else if (prescalar==ADC_PRESCALAR_128){            
    1756:	86 30       	cpi	r24, 0x06	; 6
    1758:	29 f4       	brne	.+10     	; 0x1764 <_atmega_set_adc_clock+0x8c>
                ADCSRA |= ((1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0));
    175a:	80 91 7a 00 	lds	r24, 0x007A
    175e:	87 60       	ori	r24, 0x07	; 7
    1760:	80 93 7a 00 	sts	0x007A, r24
    1764:	08 95       	ret

00001766 <_atmega_adc_turn_on>:


void _atmega_adc_turn_on()
{

	sbi(ADCSRA,ADEN);
    1766:	ea e7       	ldi	r30, 0x7A	; 122
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 68       	ori	r24, 0x80	; 128
    176e:	80 83       	st	Z, r24
}
    1770:	08 95       	ret

00001772 <_atmega_adc_turn_off>:


void _atmega_adc_turn_off()
{
	cbi(ADCSRA,ADEN);
    1772:	ea e7       	ldi	r30, 0x7A	; 122
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8f 77       	andi	r24, 0x7F	; 127
    177a:	80 83       	st	Z, r24
}
    177c:	08 95       	ret

0000177e <_atmega_select_adc>:


void _atmega_select_adc(unsigned char channel){
        if (channel==ADC0){
    177e:	88 23       	and	r24, r24
    1780:	21 f4       	brne	.+8      	; 0x178a <_atmega_select_adc+0xc>
                cbi(ADMUX,0);
    1782:	80 91 7c 00 	lds	r24, 0x007C
    1786:	8e 7f       	andi	r24, 0xFE	; 254
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <_atmega_select_adc+0x16>
                cbi(ADMUX,1);
                cbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }
        else if (channel==ADC1){
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	71 f4       	brne	.+28     	; 0x17aa <_atmega_select_adc+0x2c>
                sbi(ADMUX,0);
    178e:	80 91 7c 00 	lds	r24, 0x007C
    1792:	81 60       	ori	r24, 0x01	; 1
    1794:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,1);
    1798:	80 91 7c 00 	lds	r24, 0x007C
    179c:	8d 7f       	andi	r24, 0xFD	; 253
    179e:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,2);
    17a2:	80 91 7c 00 	lds	r24, 0x007C
    17a6:	8b 7f       	andi	r24, 0xFB	; 251
    17a8:	2b c0       	rjmp	.+86     	; 0x1800 <_atmega_select_adc+0x82>
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC2){
    17aa:	82 30       	cpi	r24, 0x02	; 2
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <_atmega_select_adc+0x38>
                cbi(ADMUX,0);
    17ae:	80 91 7c 00 	lds	r24, 0x007C
    17b2:	8e 7f       	andi	r24, 0xFE	; 254
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <_atmega_select_adc+0x42>
                sbi(ADMUX,1);
                cbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC3){
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	49 f4       	brne	.+18     	; 0x17cc <_atmega_select_adc+0x4e>
                sbi(ADMUX,0);
    17ba:	80 91 7c 00 	lds	r24, 0x007C
    17be:	81 60       	ori	r24, 0x01	; 1
    17c0:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,1);
    17c4:	80 91 7c 00 	lds	r24, 0x007C
    17c8:	82 60       	ori	r24, 0x02	; 2
    17ca:	e9 cf       	rjmp	.-46     	; 0x179e <_atmega_select_adc+0x20>
                cbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC4){
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	49 f4       	brne	.+18     	; 0x17e2 <_atmega_select_adc+0x64>
                cbi(ADMUX,0);
    17d0:	80 91 7c 00 	lds	r24, 0x007C
    17d4:	8e 7f       	andi	r24, 0xFE	; 254
    17d6:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,1);
    17da:	80 91 7c 00 	lds	r24, 0x007C
    17de:	8d 7f       	andi	r24, 0xFD	; 253
    17e0:	0a c0       	rjmp	.+20     	; 0x17f6 <_atmega_select_adc+0x78>
                sbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC6)
    17e2:	86 30       	cpi	r24, 0x06	; 6
    17e4:	d1 f4       	brne	.+52     	; 0x181a <_atmega_select_adc+0x9c>
        {
                cbi(ADMUX,0);
    17e6:	80 91 7c 00 	lds	r24, 0x007C
    17ea:	8e 7f       	andi	r24, 0xFE	; 254
    17ec:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,1);
    17f0:	80 91 7c 00 	lds	r24, 0x007C
    17f4:	82 60       	ori	r24, 0x02	; 2
    17f6:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,2);
    17fa:	80 91 7c 00 	lds	r24, 0x007C
    17fe:	84 60       	ori	r24, 0x04	; 4
    1800:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,3);
    1804:	80 91 7c 00 	lds	r24, 0x007C
    1808:	87 7f       	andi	r24, 0xF7	; 247
    180a:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,4);
    180e:	80 91 7c 00 	lds	r24, 0x007C
    1812:	8f 7e       	andi	r24, 0xEF	; 239
    1814:	80 93 7c 00 	sts	0x007C, r24
    1818:	08 95       	ret
        }
        else if (channel==ADC7)
    181a:	87 30       	cpi	r24, 0x07	; 7
    181c:	c9 f4       	brne	.+50     	; 0x1850 <_atmega_select_adc+0xd2>
        {
                sbi(ADMUX,0);
    181e:	80 91 7c 00 	lds	r24, 0x007C
    1822:	81 60       	ori	r24, 0x01	; 1
    1824:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,1);
    1828:	80 91 7c 00 	lds	r24, 0x007C
    182c:	82 60       	ori	r24, 0x02	; 2
    182e:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,2);
    1832:	80 91 7c 00 	lds	r24, 0x007C
    1836:	84 60       	ori	r24, 0x04	; 4
    1838:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,3);
    183c:	80 91 7c 00 	lds	r24, 0x007C
    1840:	87 7f       	andi	r24, 0xF7	; 247
    1842:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,4);
    1846:	80 91 7c 00 	lds	r24, 0x007C
    184a:	8f 7e       	andi	r24, 0xEF	; 239
    184c:	80 93 7c 00 	sts	0x007C, r24
    1850:	08 95       	ret

00001852 <_atmega_a2dConvert10bit>:


unsigned short _atmega_a2dConvert10bit(unsigned char channel){
	
	// Select channel
	_atmega_select_adc(channel);
    1852:	0e 94 bf 0b 	call	0x177e	; 0x177e <_atmega_select_adc>
	

	//Start ADC Conversion
	sbi(ADCSRA, ADIF);   // clear hardware "conversion complete" flag 
    1856:	80 91 7a 00 	lds	r24, 0x007A
    185a:	80 61       	ori	r24, 0x10	; 16
    185c:	80 93 7a 00 	sts	0x007A, r24
	sbi(ADCSRA,ADSC);
    1860:	80 91 7a 00 	lds	r24, 0x007A
    1864:	80 64       	ori	r24, 0x40	; 64
    1866:	80 93 7a 00 	sts	0x007A, r24
	
	// ADSC is 1 while converting, 0 when it is done
	while(bit_is_set(ADCSRA, ADSC)); 
    186a:	80 91 7a 00 	lds	r24, 0x007A
    186e:	86 fd       	sbrc	r24, 6
    1870:	fc cf       	rjmp	.-8      	; 0x186a <_atmega_a2dConvert10bit+0x18>

	return ((ADCL)|((ADCH)<<8));
    1872:	20 91 78 00 	lds	r18, 0x0078
    1876:	40 91 79 00 	lds	r20, 0x0079
    187a:	94 2f       	mov	r25, r20
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	28 2b       	or	r18, r24
    1882:	39 2b       	or	r19, r25
}
    1884:	c9 01       	movw	r24, r18
    1886:	08 95       	ret

00001888 <_atmega_initialize_uart0>:
	
*/
void _atmega_initialize_uart0(unsigned int baud, unsigned char mode)
{
        /* Set baud rate */
        UBRR0H = (unsigned char)(baud>>8);
    1888:	90 93 c5 00 	sts	0x00C5, r25
        UBRR0L = (unsigned char)baud;
    188c:	80 93 c4 00 	sts	0x00C4, r24
        /* Enable receiver and/or transmitter */
		switch(mode)
    1890:	66 23       	and	r22, r22
    1892:	19 f0       	breq	.+6      	; 0x189a <_atmega_initialize_uart0+0x12>
    1894:	61 30       	cpi	r22, 0x01	; 1
    1896:	29 f4       	brne	.+10     	; 0x18a2 <_atmega_initialize_uart0+0x1a>
    1898:	02 c0       	rjmp	.+4      	; 0x189e <_atmega_initialize_uart0+0x16>
		{
			case TX_UART_MODE:
        		UCSR0B = (1<<TXEN0);
    189a:	88 e0       	ldi	r24, 0x08	; 8
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <_atmega_initialize_uart0+0x1c>
				break;
			case RX_UART_MODE:
        		UCSR0B = (1<<RXEN0);
    189e:	80 e1       	ldi	r24, 0x10	; 16
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <_atmega_initialize_uart0+0x1c>
				break;
			default:
        		UCSR0B = (1<<TXEN0)|(1<<RXEN0);
    18a2:	88 e1       	ldi	r24, 0x18	; 24
    18a4:	80 93 c1 00 	sts	0x00C1, r24
		}
        /* Set frame format: 8data, 2stop bit */
        UCSR0C = (3<<UCSZ00);  //change 1 to 0 and &
    18a8:	86 e0       	ldi	r24, 0x06	; 6
    18aa:	80 93 c2 00 	sts	0x00C2, r24
}
    18ae:	08 95       	ret

000018b0 <_atmega_initialize_uart1>:
	
*/
void _atmega_initialize_uart1(unsigned int baud, unsigned char mode)
{
        /* Set baud rate */
        UBRR1H = (unsigned char)(baud>>8);
    18b0:	90 93 cd 00 	sts	0x00CD, r25
        UBRR1L = (unsigned char)baud;
    18b4:	80 93 cc 00 	sts	0x00CC, r24
        /* Enable receiver and transmitter */
		switch(mode)
    18b8:	66 23       	and	r22, r22
    18ba:	19 f0       	breq	.+6      	; 0x18c2 <_atmega_initialize_uart1+0x12>
    18bc:	61 30       	cpi	r22, 0x01	; 1
    18be:	29 f4       	brne	.+10     	; 0x18ca <_atmega_initialize_uart1+0x1a>
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <_atmega_initialize_uart1+0x16>
		{
			case TX_UART_MODE:
        		UCSR1B = (1<<TXEN1);
    18c2:	88 e0       	ldi	r24, 0x08	; 8
    18c4:	03 c0       	rjmp	.+6      	; 0x18cc <_atmega_initialize_uart1+0x1c>
				break;
			case RX_UART_MODE:
        		UCSR1B = (1<<RXEN1);
    18c6:	80 e1       	ldi	r24, 0x10	; 16
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <_atmega_initialize_uart1+0x1c>
				break;
			default:
        		UCSR1B = (1<<TXEN1)|(1<<RXEN1);
    18ca:	88 e1       	ldi	r24, 0x18	; 24
    18cc:	80 93 c9 00 	sts	0x00C9, r24
				break;
		}        
        /* Set frame format: 8data, 2stop bit */
        UCSR1C =(3<<UCSZ10);  //change 1 to 0 and &
    18d0:	86 e0       	ldi	r24, 0x06	; 6
    18d2:	80 93 ca 00 	sts	0x00CA, r24
}
    18d6:	08 95       	ret

000018d8 <_atmega_disable_JTAG>:
*/
void _atmega_disable_JTAG(void)
{
	unsigned char sreg;

	sreg = SREG;
    18d8:	8f b7       	in	r24, 0x3f	; 63
	cli();
    18da:	f8 94       	cli
	MCUCR |= ( 1 <<JTD );
    18dc:	95 b7       	in	r25, 0x35	; 53
    18de:	90 68       	ori	r25, 0x80	; 128
    18e0:	95 bf       	out	0x35, r25	; 53
	MCUCR |= ( 1 <<JTD );
    18e2:	95 b7       	in	r25, 0x35	; 53
    18e4:	90 68       	ori	r25, 0x80	; 128
    18e6:	95 bf       	out	0x35, r25	; 53
	SREG = sreg;
    18e8:	8f bf       	out	0x3f, r24	; 63
}
    18ea:	08 95       	ret

000018ec <_atmega_set_timer2_prescalar>:


void _atmega_set_timer2_prescalar(unsigned char prescalar)
{
	switch(prescalar)
    18ec:	82 30       	cpi	r24, 0x02	; 2
    18ee:	b1 f0       	breq	.+44     	; 0x191c <_atmega_set_timer2_prescalar+0x30>
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	28 f4       	brcc	.+10     	; 0x18fe <_atmega_set_timer2_prescalar+0x12>
    18f4:	88 23       	and	r24, r24
    18f6:	51 f0       	breq	.+20     	; 0x190c <_atmega_set_timer2_prescalar+0x20>
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	01 f5       	brne	.+64     	; 0x193c <_atmega_set_timer2_prescalar+0x50>
    18fc:	0b c0       	rjmp	.+22     	; 0x1914 <_atmega_set_timer2_prescalar+0x28>
    18fe:	84 30       	cpi	r24, 0x04	; 4
    1900:	a9 f0       	breq	.+42     	; 0x192c <_atmega_set_timer2_prescalar+0x40>
    1902:	84 30       	cpi	r24, 0x04	; 4
    1904:	78 f0       	brcs	.+30     	; 0x1924 <_atmega_set_timer2_prescalar+0x38>
    1906:	85 30       	cpi	r24, 0x05	; 5
    1908:	c9 f4       	brne	.+50     	; 0x193c <_atmega_set_timer2_prescalar+0x50>
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <_atmega_set_timer2_prescalar+0x48>
	{
		case CPU_CLK_PRESCALAR_NONE:
			TCCR2B |= (1 << CS20);
    190c:	80 91 b1 00 	lds	r24, 0x00B1
    1910:	81 60       	ori	r24, 0x01	; 1
    1912:	17 c0       	rjmp	.+46     	; 0x1942 <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_8:
			TCCR2B |= (1 << CS21); 
    1914:	80 91 b1 00 	lds	r24, 0x00B1
    1918:	82 60       	ori	r24, 0x02	; 2
    191a:	13 c0       	rjmp	.+38     	; 0x1942 <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_32:
			TCCR2B |= ((1 << CS20) | (1 << CS21));
    191c:	80 91 b1 00 	lds	r24, 0x00B1
    1920:	83 60       	ori	r24, 0x03	; 3
    1922:	0f c0       	rjmp	.+30     	; 0x1942 <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_64:
			TCCR2B |= (1 << CS22) ;
    1924:	80 91 b1 00 	lds	r24, 0x00B1
    1928:	84 60       	ori	r24, 0x04	; 4
    192a:	0b c0       	rjmp	.+22     	; 0x1942 <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_128:
			TCCR2B |= ((1 << CS20) |(1 << CS22));
    192c:	80 91 b1 00 	lds	r24, 0x00B1
    1930:	85 60       	ori	r24, 0x05	; 5
    1932:	07 c0       	rjmp	.+14     	; 0x1942 <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_256:
			TCCR2B |= ((1 << CS22) |(1 << CS21));
    1934:	80 91 b1 00 	lds	r24, 0x00B1
    1938:	86 60       	ori	r24, 0x06	; 6
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <_atmega_set_timer2_prescalar+0x56>
			break;
		default:
			TCCR2B |= ((1 << CS20) |(1 << CS21) | (1 << CS22)); 
    193c:	80 91 b1 00 	lds	r24, 0x00B1
    1940:	87 60       	ori	r24, 0x07	; 7
    1942:	80 93 b1 00 	sts	0x00B1, r24
    1946:	08 95       	ret

00001948 <_atmega_enable_timer2>:
*/
void _atmega_enable_timer2(unsigned char timer_prescalar)
{

	// Setup the prescaler to 1024		 
	_atmega_set_timer2_prescalar(timer_prescalar);
    1948:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_atmega_set_timer2_prescalar>
	// Set the counter to 0
	TCNT2=0;
    194c:	10 92 b2 00 	sts	0x00B2, r1
	//Enable the overflow interrupt
	TIMSK2 |= (1 << TOIE2); // Enable CTC interrupt
    1950:	e0 e7       	ldi	r30, 0x70	; 112
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	81 60       	ori	r24, 0x01	; 1
    1958:	80 83       	st	Z, r24
	// Enable global interrupts
	sei(); 
    195a:	78 94       	sei
}
    195c:	08 95       	ret

0000195e <_atmega_disable_timer2>:
	
*/
void _atmega_disable_timer2(void)
{	
	//disable timer interrupt
	TIMSK2=0;
    195e:	10 92 70 00 	sts	0x0070, r1
	// reset counter unit
	TCCR2B=0;
    1962:	10 92 b1 00 	sts	0x00B1, r1
}
    1966:	08 95       	ret

00001968 <_atmega_reset>:



void _atmega_reset(void)
{               
        cli(); //irq's off
    1968:	f8 94       	cli
        wdt_enable(WDTO_15MS); //wd on,15ms
    196a:	28 e0       	ldi	r18, 0x08	; 8
    196c:	88 e1       	ldi	r24, 0x18	; 24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	a8 95       	wdr
    1976:	80 93 60 00 	sts	0x0060, r24
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	20 93 60 00 	sts	0x0060, r18
    1980:	ff cf       	rjmp	.-2      	; 0x1980 <_atmega_reset+0x18>

00001982 <_atmega_disable_watchdog>:
	This has to be done at the begining of an application
	
*/
void _atmega_disable_watchdog(void)
{
	MCUSR = 0;
    1982:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1984:	88 e1       	ldi	r24, 0x18	; 24
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	80 93 60 00 	sts	0x0060, r24
    198e:	10 92 60 00 	sts	0x0060, r1
    1992:	0f be       	out	0x3f, r0	; 63
}
    1994:	08 95       	ret

00001996 <_atmega_initialize>:
	
*/
void _atmega_initialize(unsigned char timer_prescalar)
{

	unsigned char prev_osccal=OSCCAL;
    1996:	80 91 66 00 	lds	r24, 0x0066
*/
void _atmega_disable_JTAG(void)
{
	unsigned char sreg;

	sreg = SREG;
    199a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    199c:	f8 94       	cli
	MCUCR |= ( 1 <<JTD );
    199e:	85 b7       	in	r24, 0x35	; 53
    19a0:	80 68       	ori	r24, 0x80	; 128
    19a2:	85 bf       	out	0x35, r24	; 53
	MCUCR |= ( 1 <<JTD );
    19a4:	85 b7       	in	r24, 0x35	; 53
    19a6:	80 68       	ori	r24, 0x80	; 128
    19a8:	85 bf       	out	0x35, r24	; 53
	SREG = sreg;
    19aa:	9f bf       	out	0x3f, r25	; 63


#ifdef _VERSION==3
	// By default initialize all ports as input to minimize power consumption
	// Setup Port A pins as input to minimize power consumption		
	cbi(DDRA,IN_ACCEL_Z_FILT);
    19ac:	08 98       	cbi	0x01, 0	; 1
	cbi(DDRA,IN_ACCEL_Y_FILT);
    19ae:	09 98       	cbi	0x01, 1	; 1
	cbi(DDRA,IN_ACCEL_X_FILT);
    19b0:	0a 98       	cbi	0x01, 2	; 1
	cbi(DDRA,IN_DOCK_N);
    19b2:	0b 98       	cbi	0x01, 3	; 1
	cbi(DDRA,IN_USER_N);
    19b4:	0d 98       	cbi	0x01, 5	; 1
	cbi(DDRA,IN_BT_DISC);
    19b6:	0e 98       	cbi	0x01, 6	; 1
	cbi(DDRA,IN_VSENSE_BAT);
    19b8:	0f 98       	cbi	0x01, 7	; 1

	// Setup Port B pins as input to minimize power consumption
	cbi(DDRB,OUT_ACCEL_SEL1);	
    19ba:	20 98       	cbi	0x04, 0	; 4
	cbi(DDRB,PB1);
    19bc:	21 98       	cbi	0x04, 1	; 4
	cbi(PORTB,PB2);
    19be:	2a 98       	cbi	0x05, 2	; 5
	cbi(DDRB,OUT_ACCEL_SLEEP_N);
    19c0:	23 98       	cbi	0x04, 3	; 4
	cbi(DDRB,OUT_BT_SW_N);	
    19c2:	24 98       	cbi	0x04, 4	; 4
	cbi(DDRB,IN_CPU_PROG_MOSI);
    19c4:	25 98       	cbi	0x04, 5	; 4
	cbi(DDRB,OUT_CPU_PROG_MISO);	
    19c6:	26 98       	cbi	0x04, 6	; 4
	cbi(DDRB,IN_CPU_PROG_SCLK);	
    19c8:	27 98       	cbi	0x04, 7	; 4
	
	// Setup Port C pins as input to minimize power consumption
	cbi(DDRC,PC0);	
    19ca:	38 98       	cbi	0x07, 0	; 7
	cbi(DDRC,PC1);	
    19cc:	39 98       	cbi	0x07, 1	; 7
	cbi(DDRC,PC2);	
    19ce:	3a 98       	cbi	0x07, 2	; 7
	cbi(DDRC,OUT_LED_YE);	
    19d0:	3b 98       	cbi	0x07, 3	; 7
	cbi(DDRC,PC4);	
    19d2:	3c 98       	cbi	0x07, 4	; 7
	cbi(DDRC,PC5);	
    19d4:	3d 98       	cbi	0x07, 5	; 7
	cbi(DDRC,PC6);	
    19d6:	3e 98       	cbi	0x07, 6	; 7
	cbi(DDRC,PC7);	
    19d8:	3f 98       	cbi	0x07, 7	; 7

	// Setup Port D pins as input to minimize power consumption
	cbi(DDRD,IN_BT_RXD);	
    19da:	50 98       	cbi	0x0a, 0	; 10
	cbi(DDRD,OUT_BT_TXD);	
    19dc:	51 98       	cbi	0x0a, 1	; 10
	cbi(DDRD,OUT_BT_RESET_N);	
    19de:	52 98       	cbi	0x0a, 2	; 10
	cbi(DDRD,OUT_LED_GN);	
    19e0:	53 98       	cbi	0x0a, 3	; 10
	cbi(DDRD,PD4);	
    19e2:	54 98       	cbi	0x0a, 4	; 10
	cbi(DDRD,PD5);	
    19e4:	55 98       	cbi	0x0a, 5	; 10
	cbi(DDRD,PD6);
    19e6:	56 98       	cbi	0x0a, 6	; 10
	cbi(DDRD,PD7);	
    19e8:	57 98       	cbi	0x0a, 7	; 10
	
*/
void _bluetooth_turn_on(void)
{
	// Set the direction of TX pin as output
	sbi(DDRD,OUT_BT_TXD);
    19ea:	51 9a       	sbi	0x0a, 1	; 10

	// Set the direction of the RESET pin as output and high
	sbi(DDRD,OUT_BT_RESET_N);	
    19ec:	52 9a       	sbi	0x0a, 2	; 10
	sbi(PORTD,OUT_BT_RESET_N);  
    19ee:	5a 9a       	sbi	0x0b, 2	; 11

	// Set the direction of the switch pin as output and low
	sbi(DDRB,OUT_BT_SW_N);
    19f0:	24 9a       	sbi	0x04, 4	; 4
	cbi(PORTB,OUT_BT_SW_N);
    19f2:	2c 98       	cbi	0x05, 4	; 5
*/
void _accelerometer_turn_on(void)
{

#ifdef _VERSION 3
	sbi(DDRB,OUT_ACCEL_SEL1);	
    19f4:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB,OUT_ACCEL_SLEEP_N);
    19f6:	23 9a       	sbi	0x04, 3	; 4
	sbi(PORTB,OUT_ACCEL_SLEEP_N);	 
    19f8:	2b 9a       	sbi	0x05, 3	; 5
	sbi(DDRB,OUT_ACCEL_SEL2);
	sbi(DDRB,OUT_ACCEL_SLEEP_N);
	sbi(PORTB,OUT_ACCEL_SLEEP_N);
#endif	 			
	// Set the status of the accelerometer to true
	sbi(atmega_status, BIT1_ACCELEROMETER_STATUS);
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	80 93 86 1e 	sts	0x1E86, r24

unsigned char _accelerometer_set_sensitivity(unsigned char level){

#ifdef _VERSION==3
	if (level==_4G){
		cbi(PORTB,OUT_ACCEL_SEL1);
    1a00:	28 98       	cbi	0x05, 0	; 5
	
*/
void _atmega_initialize_uart0(unsigned int baud, unsigned char mode)
{
        /* Set baud rate */
        UBRR0H = (unsigned char)(baud>>8);
    1a02:	10 92 c5 00 	sts	0x00C5, r1
        UBRR0L = (unsigned char)baud;
    1a06:	8c e0       	ldi	r24, 0x0C	; 12
    1a08:	80 93 c4 00 	sts	0x00C4, r24
				break;
			case RX_UART_MODE:
        		UCSR0B = (1<<RXEN0);
				break;
			default:
        		UCSR0B = (1<<TXEN0)|(1<<RXEN0);
    1a0c:	88 e1       	ldi	r24, 0x18	; 24
    1a0e:	80 93 c1 00 	sts	0x00C1, r24
		}
        /* Set frame format: 8data, 2stop bit */
        UCSR0C = (3<<UCSZ00);  //change 1 to 0 and &
    1a12:	86 e0       	ldi	r24, 0x06	; 6
    1a14:	80 93 c2 00 	sts	0x00C2, r24
	*/
	_atmega_initialize_uart0(ATMEGA_BAUD_38400, TX_RX_UART_MODE);

	/* Set ADC for conversion */    
    //Set ADC reference to AVCC
     ADMUX |=(1 << REFS0);
    1a18:	ec e7       	ldi	r30, 0x7C	; 124
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 64       	ori	r24, 0x40	; 64
    1a20:	80 83       	st	Z, r24
     //Set the ADC conversion clock prescalar       
     _atmega_set_adc_clock(ADC_PRESCALAR_64);
    1a22:	85 e0       	ldi	r24, 0x05	; 5
    1a24:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <_atmega_set_adc_clock>


void _atmega_adc_turn_on()
{

	sbi(ADCSRA,ADEN);
    1a28:	ea e7       	ldi	r30, 0x7A	; 122
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	80 68       	ori	r24, 0x80	; 128
    1a30:	80 83       	st	Z, r24

	//Turn on ADC conversion_send_data_bufferred
	 _atmega_adc_turn_on();


}
    1a32:	08 95       	ret

00001a34 <_atmega_finalize>:
	Description: This function shuts down all peripherals and makes sure that the device is in its lowest power state
	
*/
void _atmega_finalize(void)
{
	cli();
    1a34:	f8 94       	cli
	
*/
void _bluetooth_turn_off(void)
{
	// Set the direction of TX, RESET and switch pins as input
	cbi(DDRD,OUT_BT_TXD);
    1a36:	51 98       	cbi	0x0a, 1	; 10
	cbi(DDRD,OUT_BT_RESET_N);
    1a38:	52 98       	cbi	0x0a, 2	; 10
	cbi(DDRB,OUT_BT_SW_N);		 
    1a3a:	24 98       	cbi	0x04, 4	; 4

unsigned char _accelerometer_set_sensitivity(unsigned char level){

#ifdef _VERSION==3
	if (level==_4G){
		cbi(PORTB,OUT_ACCEL_SEL1);
    1a3c:	28 98       	cbi	0x05, 0	; 5
*/
void _accelerometer_turn_off(void)
{
#ifdef _VERSION==3
	 _accelerometer_set_sensitivity(_4G);
	 cbi(DDRB,OUT_ACCEL_SEL1);		 
    1a3e:	20 98       	cbi	0x04, 0	; 4
	 sbi(DDRB,OUT_ACCEL_SLEEP_N); //sleep pin in output mode
    1a40:	23 9a       	sbi	0x04, 3	; 4
	 cbi(PORTB,OUT_ACCEL_SLEEP_N); //clear the pin
    1a42:	2b 98       	cbi	0x05, 3	; 5

void _greenled_turn_off(void)
{

#ifdef _VERSION==3
	sbi(DDRD,OUT_LED_GN);
    1a44:	53 9a       	sbi	0x0a, 3	; 10
	cbi(PORTD,OUT_LED_GN);
    1a46:	5b 98       	cbi	0x0b, 3	; 11
	cbi(DDRD,OUT_LED_GN);
    1a48:	53 98       	cbi	0x0a, 3	; 10
	
*/
void _yellowled_turn_off(void)
{

	sbi(DDRC,OUT_LED_YE);
    1a4a:	3b 9a       	sbi	0x07, 3	; 7
	cbi(PORTC,OUT_LED_YE);
    1a4c:	43 98       	cbi	0x08, 3	; 8
	cbi(DDRC,OUT_LED_YE);	
    1a4e:	3b 98       	cbi	0x07, 3	; 7
	
	// Set the status of the yellow led to false
	cbi(atmega_status, BIT3_YELLOWLED_STATUS);
    1a50:	80 91 86 1e 	lds	r24, 0x1E86
    1a54:	80 7f       	andi	r24, 0xF0	; 240
    1a56:	80 93 86 1e 	sts	0x1E86, r24
	_accelerometer_turn_off();
	_greenled_turn_off();
	_yellowled_turn_off();

	//Set all ports as inputs
	DDRA=0x00;
    1a5a:	11 b8       	out	0x01, r1	; 1
	DDRB=0x00;
    1a5c:	14 b8       	out	0x04, r1	; 4
	DDRC=0x00;
    1a5e:	17 b8       	out	0x07, r1	; 7
	DDRD=0x00;
    1a60:	1a b8       	out	0x0a, r1	; 10

	PORTA=0x00;
    1a62:	12 b8       	out	0x02, r1	; 2
	PORTB=0x00;
    1a64:	15 b8       	out	0x05, r1	; 5
	PORTC=0x00;
    1a66:	18 b8       	out	0x08, r1	; 8
	PORTD=0x00;
    1a68:	1b b8       	out	0x0b, r1	; 11
	
*/
void _atmega_disable_timer2(void)
{	
	//disable timer interrupt
	TIMSK2=0;
    1a6a:	10 92 70 00 	sts	0x0070, r1
	// reset counter unit
	TCCR2B=0;
    1a6e:	10 92 b1 00 	sts	0x00B1, r1

	// Disable timer
	_atmega_disable_timer2();

	//Disable watchdog
	wdt_disable();
    1a72:	88 e1       	ldi	r24, 0x18	; 24
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	80 93 60 00 	sts	0x0060, r24
    1a7c:	10 92 60 00 	sts	0x0060, r1
    1a80:	0f be       	out	0x3f, r0	; 63
}


void _atmega_adc_turn_off()
{
	cbi(ADCSRA,ADEN);
    1a82:	ea e7       	ldi	r30, 0x7A	; 122
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	8f 77       	andi	r24, 0x7F	; 127
    1a8a:	80 83       	st	Z, r24
	//Disable ADC Conversion
	_atmega_adc_turn_off();


	// Disable pull-ups
  	MCUCR |= (1u << PUD); 
    1a8c:	85 b7       	in	r24, 0x35	; 53
    1a8e:	80 61       	ori	r24, 0x10	; 16
    1a90:	85 bf       	out	0x35, r24	; 53
	// Disable Analog comparitor
  	ACSR &= ~(1<<ACIE);   // Disable analog comparator interrupt
    1a92:	80 b7       	in	r24, 0x30	; 48
    1a94:	87 7f       	andi	r24, 0xF7	; 247
    1a96:	80 bf       	out	0x30, r24	; 48
  	ACSR |= (1<<ACD);     // Disable analog comparitor 
    1a98:	80 b7       	in	r24, 0x30	; 48
    1a9a:	80 68       	ori	r24, 0x80	; 128
    1a9c:	80 bf       	out	0x30, r24	; 48
	// Power Reduction Register, everything off;
  	//PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTWI)); 

	//Power down the MCU

	sleep_enable();
    1a9e:	83 b7       	in	r24, 0x33	; 51
    1aa0:	81 60       	ori	r24, 0x01	; 1
    1aa2:	83 bf       	out	0x33, r24	; 51
    sleep_bod_disable();
    1aa4:	85 b7       	in	r24, 0x35	; 53
    1aa6:	80 66       	ori	r24, 0x60	; 96
    1aa8:	85 bf       	out	0x35, r24	; 53
    1aaa:	8f 7d       	andi	r24, 0xDF	; 223
    1aac:	85 bf       	out	0x35, r24	; 53
    sei();	
    1aae:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1ab0:	83 b7       	in	r24, 0x33	; 51
    1ab2:	81 7f       	andi	r24, 0xF1	; 241
    1ab4:	84 60       	ori	r24, 0x04	; 4
    1ab6:	83 bf       	out	0x33, r24	; 51
	sleep_cpu();
    1ab8:	88 95       	sleep
    sleep_disable();
    1aba:	83 b7       	in	r24, 0x33	; 51
    1abc:	8e 7f       	andi	r24, 0xFE	; 254
    1abe:	83 bf       	out	0x33, r24	; 51

}
    1ac0:	08 95       	ret

00001ac2 <_bluetooth_enter_command_mode>:


/* Bluetooth Functions */

unsigned char _bluetooth_enter_command_mode(void)
{
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
  UCSR0A=UCSR0A & 0xdf;
  
  UDR0 =  data;  /* Start transmission   */
    1ac4:	54 e2       	ldi	r21, 0x24	; 36
    1ac6:	20 e1       	ldi	r18, 0x10	; 16
    1ac8:	37 e2       	ldi	r19, 0x27	; 39
    1aca:	6d e0       	ldi	r22, 0x0D	; 13
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1acc:	80 91 c0 00 	lds	r24, 0x00C0
    1ad0:	85 ff       	sbrs	r24, 5
    1ad2:	fc cf       	rjmp	.-8      	; 0x1acc <_bluetooth_enter_command_mode+0xa>
  UCSR0A=UCSR0A & 0xdf;
    1ad4:	80 91 c0 00 	lds	r24, 0x00C0
    1ad8:	8f 7d       	andi	r24, 0xDF	; 223
    1ada:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1ade:	50 93 c6 00 	sts	0x00C6, r21
    1ae2:	c9 01       	movw	r24, r18
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <_bluetooth_enter_command_mode+0x22>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1ae8:	80 91 c0 00 	lds	r24, 0x00C0
    1aec:	85 ff       	sbrs	r24, 5
    1aee:	fc cf       	rjmp	.-8      	; 0x1ae8 <_bluetooth_enter_command_mode+0x26>
  UCSR0A=UCSR0A & 0xdf;
    1af0:	80 91 c0 00 	lds	r24, 0x00C0
    1af4:	8f 7d       	andi	r24, 0xDF	; 223
    1af6:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1afa:	50 93 c6 00 	sts	0x00C6, r21
    1afe:	c9 01       	movw	r24, r18
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <_bluetooth_enter_command_mode+0x3e>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1b04:	80 91 c0 00 	lds	r24, 0x00C0
    1b08:	85 ff       	sbrs	r24, 5
    1b0a:	fc cf       	rjmp	.-8      	; 0x1b04 <_bluetooth_enter_command_mode+0x42>
  UCSR0A=UCSR0A & 0xdf;
    1b0c:	80 91 c0 00 	lds	r24, 0x00C0
    1b10:	8f 7d       	andi	r24, 0xDF	; 223
    1b12:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1b16:	50 93 c6 00 	sts	0x00C6, r21
    1b1a:	c9 01       	movw	r24, r18
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <_bluetooth_enter_command_mode+0x5a>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1b20:	80 91 c0 00 	lds	r24, 0x00C0
    1b24:	85 ff       	sbrs	r24, 5
    1b26:	fc cf       	rjmp	.-8      	; 0x1b20 <_bluetooth_enter_command_mode+0x5e>
  UCSR0A=UCSR0A & 0xdf;
    1b28:	80 91 c0 00 	lds	r24, 0x00C0
    1b2c:	8f 7d       	andi	r24, 0xDF	; 223
    1b2e:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1b32:	60 93 c6 00 	sts	0x00C6, r22
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1b36:	80 91 c0 00 	lds	r24, 0x00C0
    1b3a:	85 ff       	sbrs	r24, 5
    1b3c:	fc cf       	rjmp	.-8      	; 0x1b36 <_bluetooth_enter_command_mode+0x74>
  UCSR0A=UCSR0A & 0xdf;
    1b3e:	80 91 c0 00 	lds	r24, 0x00C0
    1b42:	8f 7d       	andi	r24, 0xDF	; 223
    1b44:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1b48:	60 93 c6 00 	sts	0x00C6, r22


unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    1b4c:	80 91 c0 00 	lds	r24, 0x00C0
    1b50:	87 fd       	sbrc	r24, 7
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <_bluetooth_enter_command_mode+0x9a>
    1b54:	80 91 c0 00 	lds	r24, 0x00C0
    1b58:	87 ff       	sbrs	r24, 7
    1b5a:	25 c0       	rjmp	.+74     	; 0x1ba6 <_bluetooth_enter_command_mode+0xe4>
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    1b5c:	80 91 c6 00 	lds	r24, 0x00C6

		attempts++;

		if (_bluetooth_receive_uart0_byte(&aByte))
		{		
				if (aByte=='C'){					
    1b60:	83 34       	cpi	r24, 0x43	; 67
    1b62:	09 f5       	brne	.+66     	; 0x1ba6 <_bluetooth_enter_command_mode+0xe4>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1b64:	80 91 c0 00 	lds	r24, 0x00C0
    1b68:	85 ff       	sbrs	r24, 5
    1b6a:	fc cf       	rjmp	.-8      	; 0x1b64 <_bluetooth_enter_command_mode+0xa2>
  UCSR0A=UCSR0A & 0xdf;
    1b6c:	80 91 c0 00 	lds	r24, 0x00C0
    1b70:	8f 7d       	andi	r24, 0xDF	; 223
    1b72:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1b76:	8d e0       	ldi	r24, 0x0D	; 13
    1b78:	80 93 c6 00 	sts	0x00C6, r24
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1b80:	9d e0       	ldi	r25, 0x0D	; 13
    1b82:	80 91 c0 00 	lds	r24, 0x00C0
    1b86:	85 ff       	sbrs	r24, 5
    1b88:	fc cf       	rjmp	.-8      	; 0x1b82 <_bluetooth_enter_command_mode+0xc0>
  UCSR0A=UCSR0A & 0xdf;
    1b8a:	80 91 c0 00 	lds	r24, 0x00C0
    1b8e:	8f 7d       	andi	r24, 0xDF	; 223
    1b90:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1b94:	90 93 c6 00 	sts	0x00C6, r25

		if (_bluetooth_receive_uart0_byte(&aByte))
		{		
				if (aByte=='C'){					
					_bluetooth_transmit_uart0_byte(13);						
					for (int i=0;(i<10);i++)        		
    1b98:	2f 5f       	subi	r18, 0xFF	; 255
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	2a 30       	cpi	r18, 0x0A	; 10
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	81 f7       	brne	.-32     	; 0x1b82 <_bluetooth_enter_command_mode+0xc0>
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	08 95       	ret
		_bluetooth_transmit_uart0_byte(13);
		/*_bluetooth_transmit_uart0_byte(13);
		_bluetooth_transmit_uart0_byte(13);
		_bluetooth_transmit_uart0_byte(13);*/

		attempts++;
    1ba6:	4f 5f       	subi	r20, 0xFF	; 255
						_bluetooth_transmit_uart0_byte(13);
					return 1;	
				}
		}

 		if (attempts>=255) 
    1ba8:	4f 3f       	cpi	r20, 0xFF	; 255
    1baa:	09 f0       	breq	.+2      	; 0x1bae <_bluetooth_enter_command_mode+0xec>
    1bac:	8f cf       	rjmp	.-226    	; 0x1acc <_bluetooth_enter_command_mode+0xa>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
			break;				
	}

	
	return 0;
}
    1bb0:	08 95       	ret

00001bb2 <_bluetooth_exit_command_mode>:


unsigned char _bluetooth_exit_command_mode(void)
{
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
  UCSR0A=UCSR0A & 0xdf;
  
  UDR0 =  data;  /* Start transmission   */
    1bb4:	5d e2       	ldi	r21, 0x2D	; 45
    1bb6:	20 e1       	ldi	r18, 0x10	; 16
    1bb8:	37 e2       	ldi	r19, 0x27	; 39
    1bba:	6d e0       	ldi	r22, 0x0D	; 13
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1bbc:	80 91 c0 00 	lds	r24, 0x00C0
    1bc0:	85 ff       	sbrs	r24, 5
    1bc2:	fc cf       	rjmp	.-8      	; 0x1bbc <_bluetooth_exit_command_mode+0xa>
  UCSR0A=UCSR0A & 0xdf;
    1bc4:	80 91 c0 00 	lds	r24, 0x00C0
    1bc8:	8f 7d       	andi	r24, 0xDF	; 223
    1bca:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1bce:	50 93 c6 00 	sts	0x00C6, r21
    1bd2:	c9 01       	movw	r24, r18
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <_bluetooth_exit_command_mode+0x22>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1bd8:	80 91 c0 00 	lds	r24, 0x00C0
    1bdc:	85 ff       	sbrs	r24, 5
    1bde:	fc cf       	rjmp	.-8      	; 0x1bd8 <_bluetooth_exit_command_mode+0x26>
  UCSR0A=UCSR0A & 0xdf;
    1be0:	80 91 c0 00 	lds	r24, 0x00C0
    1be4:	8f 7d       	andi	r24, 0xDF	; 223
    1be6:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1bea:	50 93 c6 00 	sts	0x00C6, r21
    1bee:	c9 01       	movw	r24, r18
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <_bluetooth_exit_command_mode+0x3e>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1bf4:	80 91 c0 00 	lds	r24, 0x00C0
    1bf8:	85 ff       	sbrs	r24, 5
    1bfa:	fc cf       	rjmp	.-8      	; 0x1bf4 <_bluetooth_exit_command_mode+0x42>
  UCSR0A=UCSR0A & 0xdf;
    1bfc:	80 91 c0 00 	lds	r24, 0x00C0
    1c00:	8f 7d       	andi	r24, 0xDF	; 223
    1c02:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1c06:	50 93 c6 00 	sts	0x00C6, r21
    1c0a:	c9 01       	movw	r24, r18
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <_bluetooth_exit_command_mode+0x5a>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1c10:	80 91 c0 00 	lds	r24, 0x00C0
    1c14:	85 ff       	sbrs	r24, 5
    1c16:	fc cf       	rjmp	.-8      	; 0x1c10 <_bluetooth_exit_command_mode+0x5e>
  UCSR0A=UCSR0A & 0xdf;
    1c18:	80 91 c0 00 	lds	r24, 0x00C0
    1c1c:	8f 7d       	andi	r24, 0xDF	; 223
    1c1e:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1c22:	60 93 c6 00 	sts	0x00C6, r22
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1c26:	80 91 c0 00 	lds	r24, 0x00C0
    1c2a:	85 ff       	sbrs	r24, 5
    1c2c:	fc cf       	rjmp	.-8      	; 0x1c26 <_bluetooth_exit_command_mode+0x74>
  UCSR0A=UCSR0A & 0xdf;
    1c2e:	80 91 c0 00 	lds	r24, 0x00C0
    1c32:	8f 7d       	andi	r24, 0xDF	; 223
    1c34:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1c38:	60 93 c6 00 	sts	0x00C6, r22
		_bluetooth_transmit_uart0_byte('-');		
		_delay_ms(5);
				
		_bluetooth_transmit_uart0_byte(13);
		_bluetooth_transmit_uart0_byte(13);
		attempts++;
    1c3c:	4f 5f       	subi	r20, 0xFF	; 255

 		if ((attempts>=255) || (_bluetooth_receive_uart0_byte(&aByte)==0))
    1c3e:	4f 3f       	cpi	r20, 0xFF	; 255
    1c40:	69 f0       	breq	.+26     	; 0x1c5c <_bluetooth_exit_command_mode+0xaa>


unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    1c42:	80 91 c0 00 	lds	r24, 0x00C0
    1c46:	87 fd       	sbrc	r24, 7
    1c48:	06 c0       	rjmp	.+12     	; 0x1c56 <_bluetooth_exit_command_mode+0xa4>
    1c4a:	80 91 c0 00 	lds	r24, 0x00C0
    1c4e:	87 fd       	sbrc	r24, 7
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <_bluetooth_exit_command_mode+0xa4>
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	08 95       	ret
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    1c56:	80 91 c6 00 	lds	r24, 0x00C6
    1c5a:	b0 cf       	rjmp	.-160    	; 0x1bbc <_bluetooth_exit_command_mode+0xa>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
	// succeeded in entering command mode
	if (attempts<255)
		return 1;
	
	return 0;
}
    1c5e:	08 95       	ret

00001c60 <_bluetooth_reset>:
	
*/
void _bluetooth_turn_off(void)
{
	// Set the direction of TX, RESET and switch pins as input
	cbi(DDRD,OUT_BT_TXD);
    1c60:	51 98       	cbi	0x0a, 1	; 10
	cbi(DDRD,OUT_BT_RESET_N);
    1c62:	52 98       	cbi	0x0a, 2	; 10
	cbi(DDRB,OUT_BT_SW_N);		 
    1c64:	24 98       	cbi	0x04, 4	; 4

	// Set the status of bluetooth to false
	cbi(atmega_status, BIT0_BLUETOOTH_STATUS);
    1c66:	30 91 86 1e 	lds	r19, 0x1E86
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	40 e1       	ldi	r20, 0x10	; 16
    1c6e:	57 e2       	ldi	r21, 0x27	; 39
    1c70:	ca 01       	movw	r24, r20
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <_bluetooth_reset+0x12>


void _bluetooth_reset(void)
{
	_bluetooth_turn_off();
	for (unsigned char i=0;(i<255);i++)
    1c76:	2f 5f       	subi	r18, 0xFF	; 255
    1c78:	2f 3f       	cpi	r18, 0xFF	; 255
    1c7a:	d1 f7       	brne	.-12     	; 0x1c70 <_bluetooth_reset+0x10>
	
*/
void _bluetooth_turn_on(void)
{
	// Set the direction of TX pin as output
	sbi(DDRD,OUT_BT_TXD);
    1c7c:	51 9a       	sbi	0x0a, 1	; 10

	// Set the direction of the RESET pin as output and high
	sbi(DDRD,OUT_BT_RESET_N);	
    1c7e:	52 9a       	sbi	0x0a, 2	; 10
	sbi(PORTD,OUT_BT_RESET_N);  
    1c80:	5a 9a       	sbi	0x0b, 2	; 11

	// Set the direction of the switch pin as output and low
	sbi(DDRB,OUT_BT_SW_N);
    1c82:	24 9a       	sbi	0x04, 4	; 4
	cbi(PORTB,OUT_BT_SW_N);
    1c84:	2c 98       	cbi	0x05, 4	; 5

	// Set the status of the bluetooth to true
	sbi(atmega_status, BIT0_BLUETOOTH_STATUS);
    1c86:	31 60       	ori	r19, 0x01	; 1
    1c88:	30 93 86 1e 	sts	0x1E86, r19
	_bluetooth_turn_off();
	for (unsigned char i=0;(i<255);i++)
		_delay_ms(5);
	_bluetooth_turn_on();

}
    1c8c:	08 95       	ret

00001c8e <_bluetooth_set_baud_rate>:

unsigned char _bluetooth_set_baud_rate(unsigned char baudrate)
{
    1c8e:	9f 92       	push	r9
    1c90:	af 92       	push	r10
    1c92:	bf 92       	push	r11
    1c94:	cf 92       	push	r12
    1c96:	df 92       	push	r13
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
  UCSR0A=UCSR0A & 0xdf;
  
  UDR0 =  data;  /* Start transmission   */
    1ca4:	fd e0       	ldi	r31, 0x0D	; 13
    1ca6:	60 e1       	ldi	r22, 0x10	; 16
    1ca8:	77 e2       	ldi	r23, 0x27	; 39
    1caa:	b3 e5       	ldi	r27, 0x53	; 83
    1cac:	bb 2e       	mov	r11, r27
	_bluetooth_turn_on();

}

unsigned char _bluetooth_set_baud_rate(unsigned char baudrate)
{
    1cae:	a5 e5       	ldi	r26, 0x55	; 85
    1cb0:	aa 2e       	mov	r10, r26
    1cb2:	ec e2       	ldi	r30, 0x2C	; 44
    1cb4:	9e 2e       	mov	r9, r30
    1cb6:	03 e3       	ldi	r16, 0x33	; 51
    1cb8:	e8 e3       	ldi	r30, 0x38	; 56
    1cba:	39 e3       	ldi	r19, 0x39	; 57
    1cbc:	f3 2e       	mov	r15, r19
    1cbe:	26 e3       	ldi	r18, 0x36	; 54
    1cc0:	e2 2e       	mov	r14, r18
    1cc2:	14 e3       	ldi	r17, 0x34	; 52
    1cc4:	a2 e3       	ldi	r26, 0x32	; 50
    1cc6:	b1 e3       	ldi	r27, 0x31	; 49
    1cc8:	95 e3       	ldi	r25, 0x35	; 53
    1cca:	c9 2e       	mov	r12, r25
    1ccc:	87 e3       	ldi	r24, 0x37	; 55
    1cce:	d8 2e       	mov	r13, r24
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0


unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    1cd4:	80 91 c0 00 	lds	r24, 0x00C0
    1cd8:	87 fd       	sbrc	r24, 7
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <_bluetooth_set_baud_rate+0x56>
    1cdc:	80 91 c0 00 	lds	r24, 0x00C0
    1ce0:	87 ff       	sbrs	r24, 7
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <_bluetooth_set_baud_rate+0x5a>
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    1ce4:	80 91 c6 00 	lds	r24, 0x00C6
	unsigned char attempts=0;
	unsigned char aByte=0;

	while(1)  
	{   
		for (int i=0;(i<100);i++)
    1ce8:	2f 5f       	subi	r18, 0xFF	; 255
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	24 36       	cpi	r18, 0x64	; 100
    1cee:	31 05       	cpc	r19, r1
    1cf0:	89 f7       	brne	.-30     	; 0x1cd4 <_bluetooth_set_baud_rate+0x46>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1cf2:	80 91 c0 00 	lds	r24, 0x00C0
    1cf6:	85 ff       	sbrs	r24, 5
    1cf8:	fc cf       	rjmp	.-8      	; 0x1cf2 <_bluetooth_set_baud_rate+0x64>
  UCSR0A=UCSR0A & 0xdf;
    1cfa:	80 91 c0 00 	lds	r24, 0x00C0
    1cfe:	8f 7d       	andi	r24, 0xDF	; 223
    1d00:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1d04:	f0 93 c6 00 	sts	0x00C6, r31
    1d08:	cb 01       	movw	r24, r22
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <_bluetooth_set_baud_rate+0x7c>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1d0e:	80 91 c0 00 	lds	r24, 0x00C0
    1d12:	85 ff       	sbrs	r24, 5
    1d14:	fc cf       	rjmp	.-8      	; 0x1d0e <_bluetooth_set_baud_rate+0x80>
  UCSR0A=UCSR0A & 0xdf;
    1d16:	80 91 c0 00 	lds	r24, 0x00C0
    1d1a:	8f 7d       	andi	r24, 0xDF	; 223
    1d1c:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1d20:	f0 93 c6 00 	sts	0x00C6, r31
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1d24:	80 91 c0 00 	lds	r24, 0x00C0
    1d28:	85 ff       	sbrs	r24, 5
    1d2a:	fc cf       	rjmp	.-8      	; 0x1d24 <_bluetooth_set_baud_rate+0x96>
  UCSR0A=UCSR0A & 0xdf;
    1d2c:	80 91 c0 00 	lds	r24, 0x00C0
    1d30:	8f 7d       	andi	r24, 0xDF	; 223
    1d32:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1d36:	b0 92 c6 00 	sts	0x00C6, r11
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <_bluetooth_set_baud_rate+0xae>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1d40:	80 91 c0 00 	lds	r24, 0x00C0
    1d44:	85 ff       	sbrs	r24, 5
    1d46:	fc cf       	rjmp	.-8      	; 0x1d40 <_bluetooth_set_baud_rate+0xb2>
  UCSR0A=UCSR0A & 0xdf;
    1d48:	80 91 c0 00 	lds	r24, 0x00C0
    1d4c:	8f 7d       	andi	r24, 0xDF	; 223
    1d4e:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1d52:	a0 92 c6 00 	sts	0x00C6, r10
    1d56:	cb 01       	movw	r24, r22
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <_bluetooth_set_baud_rate+0xca>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1d5c:	80 91 c0 00 	lds	r24, 0x00C0
    1d60:	85 ff       	sbrs	r24, 5
    1d62:	fc cf       	rjmp	.-8      	; 0x1d5c <_bluetooth_set_baud_rate+0xce>
  UCSR0A=UCSR0A & 0xdf;
    1d64:	80 91 c0 00 	lds	r24, 0x00C0
    1d68:	8f 7d       	andi	r24, 0xDF	; 223
    1d6a:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1d6e:	90 92 c6 00 	sts	0x00C6, r9
    1d72:	cb 01       	movw	r24, r22
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <_bluetooth_set_baud_rate+0xe6>
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte('U');
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(',');
		_delay_ms(5);
		switch(baudrate){
    1d78:	4c 30       	cpi	r20, 0x0C	; 12
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <_bluetooth_set_baud_rate+0xf0>
    1d7c:	7d c0       	rjmp	.+250    	; 0x1e78 <_bluetooth_set_baud_rate+0x1ea>
    1d7e:	4d 30       	cpi	r20, 0x0D	; 13
    1d80:	68 f4       	brcc	.+26     	; 0x1d9c <_bluetooth_set_baud_rate+0x10e>
    1d82:	41 30       	cpi	r20, 0x01	; 1
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <_bluetooth_set_baud_rate+0xfa>
    1d86:	c3 c0       	rjmp	.+390    	; 0x1f0e <_bluetooth_set_baud_rate+0x280>
    1d88:	41 30       	cpi	r20, 0x01	; 1
    1d8a:	08 f4       	brcc	.+2      	; 0x1d8e <_bluetooth_set_baud_rate+0x100>
    1d8c:	d7 c0       	rjmp	.+430    	; 0x1f3c <_bluetooth_set_baud_rate+0x2ae>
    1d8e:	43 30       	cpi	r20, 0x03	; 3
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <_bluetooth_set_baud_rate+0x106>
    1d92:	a6 c0       	rjmp	.+332    	; 0x1ee0 <_bluetooth_set_baud_rate+0x252>
    1d94:	48 30       	cpi	r20, 0x08	; 8
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <_bluetooth_set_baud_rate+0x10c>
    1d98:	e8 c0       	rjmp	.+464    	; 0x1f6a <_bluetooth_set_baud_rate+0x2dc>
    1d9a:	8b c0       	rjmp	.+278    	; 0x1eb2 <_bluetooth_set_baud_rate+0x224>
    1d9c:	43 33       	cpi	r20, 0x33	; 51
    1d9e:	a9 f1       	breq	.+106    	; 0x1e0a <_bluetooth_set_baud_rate+0x17c>
    1da0:	44 33       	cpi	r20, 0x34	; 52
    1da2:	38 f4       	brcc	.+14     	; 0x1db2 <_bluetooth_set_baud_rate+0x124>
    1da4:	40 31       	cpi	r20, 0x10	; 16
    1da6:	09 f4       	brne	.+2      	; 0x1daa <_bluetooth_set_baud_rate+0x11c>
    1da8:	57 c0       	rjmp	.+174    	; 0x1e58 <_bluetooth_set_baud_rate+0x1ca>
    1daa:	49 31       	cpi	r20, 0x19	; 25
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <_bluetooth_set_baud_rate+0x122>
    1dae:	dd c0       	rjmp	.+442    	; 0x1f6a <_bluetooth_set_baud_rate+0x2dc>
    1db0:	3c c0       	rjmp	.+120    	; 0x1e2a <_bluetooth_set_baud_rate+0x19c>
    1db2:	47 36       	cpi	r20, 0x67	; 103
    1db4:	d1 f0       	breq	.+52     	; 0x1dea <_bluetooth_set_baud_rate+0x15c>
    1db6:	4f 3c       	cpi	r20, 0xCF	; 207
    1db8:	09 f0       	breq	.+2      	; 0x1dbc <_bluetooth_set_baud_rate+0x12e>
    1dba:	d7 c0       	rjmp	.+430    	; 0x1f6a <_bluetooth_set_baud_rate+0x2dc>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1dbc:	80 91 c0 00 	lds	r24, 0x00C0
    1dc0:	85 ff       	sbrs	r24, 5
    1dc2:	fc cf       	rjmp	.-8      	; 0x1dbc <_bluetooth_set_baud_rate+0x12e>
  UCSR0A=UCSR0A & 0xdf;
    1dc4:	80 91 c0 00 	lds	r24, 0x00C0
    1dc8:	8f 7d       	andi	r24, 0xDF	; 223
    1dca:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1dce:	a0 93 c6 00 	sts	0x00C6, r26
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1dd2:	80 91 c0 00 	lds	r24, 0x00C0
    1dd6:	85 ff       	sbrs	r24, 5
    1dd8:	fc cf       	rjmp	.-8      	; 0x1dd2 <_bluetooth_set_baud_rate+0x144>
  UCSR0A=UCSR0A & 0xdf;
    1dda:	80 91 c0 00 	lds	r24, 0x00C0
    1dde:	8f 7d       	andi	r24, 0xDF	; 223
    1de0:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1de4:	10 93 c6 00 	sts	0x00C6, r17
    1de8:	d6 c0       	rjmp	.+428    	; 0x1f96 <_bluetooth_set_baud_rate+0x308>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1dea:	80 91 c0 00 	lds	r24, 0x00C0
    1dee:	85 ff       	sbrs	r24, 5
    1df0:	fc cf       	rjmp	.-8      	; 0x1dea <_bluetooth_set_baud_rate+0x15c>
  UCSR0A=UCSR0A & 0xdf;
    1df2:	80 91 c0 00 	lds	r24, 0x00C0
    1df6:	8f 7d       	andi	r24, 0xDF	; 223
    1df8:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1dfc:	10 93 c6 00 	sts	0x00C6, r17
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1e00:	80 91 c0 00 	lds	r24, 0x00C0
    1e04:	85 ff       	sbrs	r24, 5
    1e06:	fc cf       	rjmp	.-8      	; 0x1e00 <_bluetooth_set_baud_rate+0x172>
    1e08:	bf c0       	rjmp	.+382    	; 0x1f88 <_bluetooth_set_baud_rate+0x2fa>
    1e0a:	80 91 c0 00 	lds	r24, 0x00C0
    1e0e:	85 ff       	sbrs	r24, 5
    1e10:	fc cf       	rjmp	.-8      	; 0x1e0a <_bluetooth_set_baud_rate+0x17c>
  UCSR0A=UCSR0A & 0xdf;
    1e12:	80 91 c0 00 	lds	r24, 0x00C0
    1e16:	8f 7d       	andi	r24, 0xDF	; 223
    1e18:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1e1c:	f0 92 c6 00 	sts	0x00C6, r15
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1e20:	80 91 c0 00 	lds	r24, 0x00C0
    1e24:	85 ff       	sbrs	r24, 5
    1e26:	fc cf       	rjmp	.-8      	; 0x1e20 <_bluetooth_set_baud_rate+0x192>
    1e28:	98 c0       	rjmp	.+304    	; 0x1f5a <_bluetooth_set_baud_rate+0x2cc>
    1e2a:	80 91 c0 00 	lds	r24, 0x00C0
    1e2e:	85 ff       	sbrs	r24, 5
    1e30:	fc cf       	rjmp	.-8      	; 0x1e2a <_bluetooth_set_baud_rate+0x19c>
  UCSR0A=UCSR0A & 0xdf;
    1e32:	80 91 c0 00 	lds	r24, 0x00C0
    1e36:	8f 7d       	andi	r24, 0xDF	; 223
    1e38:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1e3c:	b0 93 c6 00 	sts	0x00C6, r27
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1e40:	80 91 c0 00 	lds	r24, 0x00C0
    1e44:	85 ff       	sbrs	r24, 5
    1e46:	fc cf       	rjmp	.-8      	; 0x1e40 <_bluetooth_set_baud_rate+0x1b2>
  UCSR0A=UCSR0A & 0xdf;
    1e48:	80 91 c0 00 	lds	r24, 0x00C0
    1e4c:	8f 7d       	andi	r24, 0xDF	; 223
    1e4e:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1e52:	f0 92 c6 00 	sts	0x00C6, r15
    1e56:	9f c0       	rjmp	.+318    	; 0x1f96 <_bluetooth_set_baud_rate+0x308>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1e58:	80 91 c0 00 	lds	r24, 0x00C0
    1e5c:	85 ff       	sbrs	r24, 5
    1e5e:	fc cf       	rjmp	.-8      	; 0x1e58 <_bluetooth_set_baud_rate+0x1ca>
  UCSR0A=UCSR0A & 0xdf;
    1e60:	80 91 c0 00 	lds	r24, 0x00C0
    1e64:	8f 7d       	andi	r24, 0xDF	; 223
    1e66:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1e6a:	a0 93 c6 00 	sts	0x00C6, r26
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1e6e:	80 91 c0 00 	lds	r24, 0x00C0
    1e72:	85 ff       	sbrs	r24, 5
    1e74:	fc cf       	rjmp	.-8      	; 0x1e6e <_bluetooth_set_baud_rate+0x1e0>
    1e76:	88 c0       	rjmp	.+272    	; 0x1f88 <_bluetooth_set_baud_rate+0x2fa>
    1e78:	80 91 c0 00 	lds	r24, 0x00C0
    1e7c:	85 ff       	sbrs	r24, 5
    1e7e:	fc cf       	rjmp	.-8      	; 0x1e78 <_bluetooth_set_baud_rate+0x1ea>
  UCSR0A=UCSR0A & 0xdf;
    1e80:	80 91 c0 00 	lds	r24, 0x00C0
    1e84:	8f 7d       	andi	r24, 0xDF	; 223
    1e86:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1e8a:	00 93 c6 00 	sts	0x00C6, r16
    1e8e:	cb 01       	movw	r24, r22
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <_bluetooth_set_baud_rate+0x202>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1e94:	80 91 c0 00 	lds	r24, 0x00C0
    1e98:	85 ff       	sbrs	r24, 5
    1e9a:	fc cf       	rjmp	.-8      	; 0x1e94 <_bluetooth_set_baud_rate+0x206>
  UCSR0A=UCSR0A & 0xdf;
    1e9c:	80 91 c0 00 	lds	r24, 0x00C0
    1ea0:	8f 7d       	andi	r24, 0xDF	; 223
    1ea2:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1ea6:	e0 93 c6 00 	sts	0x00C6, r30
    1eaa:	cb 01       	movw	r24, r22
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <_bluetooth_set_baud_rate+0x21e>
    1eb0:	72 c0       	rjmp	.+228    	; 0x1f96 <_bluetooth_set_baud_rate+0x308>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1eb2:	80 91 c0 00 	lds	r24, 0x00C0
    1eb6:	85 ff       	sbrs	r24, 5
    1eb8:	fc cf       	rjmp	.-8      	; 0x1eb2 <_bluetooth_set_baud_rate+0x224>
  UCSR0A=UCSR0A & 0xdf;
    1eba:	80 91 c0 00 	lds	r24, 0x00C0
    1ebe:	8f 7d       	andi	r24, 0xDF	; 223
    1ec0:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1ec4:	c0 92 c6 00 	sts	0x00C6, r12
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1ec8:	80 91 c0 00 	lds	r24, 0x00C0
    1ecc:	85 ff       	sbrs	r24, 5
    1ece:	fc cf       	rjmp	.-8      	; 0x1ec8 <_bluetooth_set_baud_rate+0x23a>
  UCSR0A=UCSR0A & 0xdf;
    1ed0:	80 91 c0 00 	lds	r24, 0x00C0
    1ed4:	8f 7d       	andi	r24, 0xDF	; 223
    1ed6:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1eda:	d0 92 c6 00 	sts	0x00C6, r13
    1ede:	5b c0       	rjmp	.+182    	; 0x1f96 <_bluetooth_set_baud_rate+0x308>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1ee0:	80 91 c0 00 	lds	r24, 0x00C0
    1ee4:	85 ff       	sbrs	r24, 5
    1ee6:	fc cf       	rjmp	.-8      	; 0x1ee0 <_bluetooth_set_baud_rate+0x252>
  UCSR0A=UCSR0A & 0xdf;
    1ee8:	80 91 c0 00 	lds	r24, 0x00C0
    1eec:	8f 7d       	andi	r24, 0xDF	; 223
    1eee:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1ef2:	b0 93 c6 00 	sts	0x00C6, r27
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1ef6:	80 91 c0 00 	lds	r24, 0x00C0
    1efa:	85 ff       	sbrs	r24, 5
    1efc:	fc cf       	rjmp	.-8      	; 0x1ef6 <_bluetooth_set_baud_rate+0x268>
  UCSR0A=UCSR0A & 0xdf;
    1efe:	80 91 c0 00 	lds	r24, 0x00C0
    1f02:	8f 7d       	andi	r24, 0xDF	; 223
    1f04:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1f08:	b0 93 c6 00 	sts	0x00C6, r27
    1f0c:	44 c0       	rjmp	.+136    	; 0x1f96 <_bluetooth_set_baud_rate+0x308>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1f0e:	80 91 c0 00 	lds	r24, 0x00C0
    1f12:	85 ff       	sbrs	r24, 5
    1f14:	fc cf       	rjmp	.-8      	; 0x1f0e <_bluetooth_set_baud_rate+0x280>
  UCSR0A=UCSR0A & 0xdf;
    1f16:	80 91 c0 00 	lds	r24, 0x00C0
    1f1a:	8f 7d       	andi	r24, 0xDF	; 223
    1f1c:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1f20:	a0 93 c6 00 	sts	0x00C6, r26
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1f24:	80 91 c0 00 	lds	r24, 0x00C0
    1f28:	85 ff       	sbrs	r24, 5
    1f2a:	fc cf       	rjmp	.-8      	; 0x1f24 <_bluetooth_set_baud_rate+0x296>
  UCSR0A=UCSR0A & 0xdf;
    1f2c:	80 91 c0 00 	lds	r24, 0x00C0
    1f30:	8f 7d       	andi	r24, 0xDF	; 223
    1f32:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1f36:	00 93 c6 00 	sts	0x00C6, r16
    1f3a:	2d c0       	rjmp	.+90     	; 0x1f96 <_bluetooth_set_baud_rate+0x308>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1f3c:	80 91 c0 00 	lds	r24, 0x00C0
    1f40:	85 ff       	sbrs	r24, 5
    1f42:	fc cf       	rjmp	.-8      	; 0x1f3c <_bluetooth_set_baud_rate+0x2ae>
  UCSR0A=UCSR0A & 0xdf;
    1f44:	80 91 c0 00 	lds	r24, 0x00C0
    1f48:	8f 7d       	andi	r24, 0xDF	; 223
    1f4a:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1f4e:	10 93 c6 00 	sts	0x00C6, r17
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1f52:	80 91 c0 00 	lds	r24, 0x00C0
    1f56:	85 ff       	sbrs	r24, 5
    1f58:	fc cf       	rjmp	.-8      	; 0x1f52 <_bluetooth_set_baud_rate+0x2c4>
  UCSR0A=UCSR0A & 0xdf;
    1f5a:	80 91 c0 00 	lds	r24, 0x00C0
    1f5e:	8f 7d       	andi	r24, 0xDF	; 223
    1f60:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1f64:	e0 92 c6 00 	sts	0x00C6, r14
    1f68:	16 c0       	rjmp	.+44     	; 0x1f96 <_bluetooth_set_baud_rate+0x308>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1f6a:	80 91 c0 00 	lds	r24, 0x00C0
    1f6e:	85 ff       	sbrs	r24, 5
    1f70:	fc cf       	rjmp	.-8      	; 0x1f6a <_bluetooth_set_baud_rate+0x2dc>
  UCSR0A=UCSR0A & 0xdf;
    1f72:	80 91 c0 00 	lds	r24, 0x00C0
    1f76:	8f 7d       	andi	r24, 0xDF	; 223
    1f78:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1f7c:	00 93 c6 00 	sts	0x00C6, r16
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1f80:	80 91 c0 00 	lds	r24, 0x00C0
    1f84:	85 ff       	sbrs	r24, 5
    1f86:	fc cf       	rjmp	.-8      	; 0x1f80 <_bluetooth_set_baud_rate+0x2f2>
  UCSR0A=UCSR0A & 0xdf;
    1f88:	80 91 c0 00 	lds	r24, 0x00C0
    1f8c:	8f 7d       	andi	r24, 0xDF	; 223
    1f8e:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1f92:	e0 93 c6 00 	sts	0x00C6, r30
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1f96:	80 91 c0 00 	lds	r24, 0x00C0
    1f9a:	85 ff       	sbrs	r24, 5
    1f9c:	fc cf       	rjmp	.-8      	; 0x1f96 <_bluetooth_set_baud_rate+0x308>
  UCSR0A=UCSR0A & 0xdf;
    1f9e:	80 91 c0 00 	lds	r24, 0x00C0
    1fa2:	8f 7d       	andi	r24, 0xDF	; 223
    1fa4:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1fa8:	f0 93 c6 00 	sts	0x00C6, r31
    1fac:	cb 01       	movw	r24, r22
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <_bluetooth_set_baud_rate+0x320>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1fb2:	80 91 c0 00 	lds	r24, 0x00C0
    1fb6:	85 ff       	sbrs	r24, 5
    1fb8:	fc cf       	rjmp	.-8      	; 0x1fb2 <_bluetooth_set_baud_rate+0x324>
  UCSR0A=UCSR0A & 0xdf;
    1fba:	80 91 c0 00 	lds	r24, 0x00C0
    1fbe:	8f 7d       	andi	r24, 0xDF	; 223
    1fc0:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    1fc4:	f0 93 c6 00 	sts	0x00C6, r31
    1fc8:	cb 01       	movw	r24, r22
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <_bluetooth_set_baud_rate+0x33c>


unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    1fce:	80 91 c0 00 	lds	r24, 0x00C0
    1fd2:	87 fd       	sbrc	r24, 7
    1fd4:	04 c0       	rjmp	.+8      	; 0x1fde <_bluetooth_set_baud_rate+0x350>
    1fd6:	80 91 c0 00 	lds	r24, 0x00C0
    1fda:	87 ff       	sbrs	r24, 7
    1fdc:	06 c0       	rjmp	.+12     	; 0x1fea <_bluetooth_set_baud_rate+0x35c>
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    1fde:	80 91 c6 00 	lds	r24, 0x00C6
		_delay_ms(5);

		attempts++;
		if (_bluetooth_receive_uart0_byte(&aByte))
		{
			if (aByte=='A')			
    1fe2:	81 34       	cpi	r24, 0x41	; 65
    1fe4:	11 f4       	brne	.+4      	; 0x1fea <_bluetooth_set_baud_rate+0x35c>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	05 c0       	rjmp	.+10     	; 0x1ff4 <_bluetooth_set_baud_rate+0x366>
		_bluetooth_transmit_uart0_byte(13);
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(13);
		_delay_ms(5);

		attempts++;
    1fea:	5f 5f       	subi	r21, 0xFF	; 255
		if (_bluetooth_receive_uart0_byte(&aByte))
		{
			if (aByte=='A')			
				return 1;					
		}
		if (attempts>=255)
    1fec:	5f 3f       	cpi	r21, 0xFF	; 255
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <_bluetooth_set_baud_rate+0x364>
    1ff0:	6f ce       	rjmp	.-802    	; 0x1cd0 <_bluetooth_set_baud_rate+0x42>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	// succeeded in entering command mode

	return 0;
}
    1ff4:	1f 91       	pop	r17
    1ff6:	0f 91       	pop	r16
    1ff8:	ff 90       	pop	r15
    1ffa:	ef 90       	pop	r14
    1ffc:	df 90       	pop	r13
    1ffe:	cf 90       	pop	r12
    2000:	bf 90       	pop	r11
    2002:	af 90       	pop	r10
    2004:	9f 90       	pop	r9
    2006:	08 95       	ret

00002008 <_bluetooth_get_baud_rate>:


unsigned char _bluetooth_get_baud_rate()
{
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	20 e0       	ldi	r18, 0x00	; 0
void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
  UCSR0A=UCSR0A & 0xdf;
  
  UDR0 =  data;  /* Start transmission   */
    200c:	6d e0       	ldi	r22, 0x0D	; 13
    200e:	40 e1       	ldi	r20, 0x10	; 16
    2010:	57 e2       	ldi	r21, 0x27	; 39
    2012:	e7 e4       	ldi	r30, 0x47	; 71
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    2014:	75 e5       	ldi	r23, 0x55	; 85
    2016:	80 91 c0 00 	lds	r24, 0x00C0
    201a:	85 ff       	sbrs	r24, 5
    201c:	fc cf       	rjmp	.-8      	; 0x2016 <_bluetooth_get_baud_rate+0xe>
  UCSR0A=UCSR0A & 0xdf;
    201e:	80 91 c0 00 	lds	r24, 0x00C0
    2022:	8f 7d       	andi	r24, 0xDF	; 223
    2024:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    2028:	60 93 c6 00 	sts	0x00C6, r22
    202c:	ca 01       	movw	r24, r20
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <_bluetooth_get_baud_rate+0x26>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    2032:	80 91 c0 00 	lds	r24, 0x00C0
    2036:	85 ff       	sbrs	r24, 5
    2038:	fc cf       	rjmp	.-8      	; 0x2032 <_bluetooth_get_baud_rate+0x2a>
  UCSR0A=UCSR0A & 0xdf;
    203a:	80 91 c0 00 	lds	r24, 0x00C0
    203e:	8f 7d       	andi	r24, 0xDF	; 223
    2040:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    2044:	60 93 c6 00 	sts	0x00C6, r22
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    2048:	80 91 c0 00 	lds	r24, 0x00C0
    204c:	85 ff       	sbrs	r24, 5
    204e:	fc cf       	rjmp	.-8      	; 0x2048 <_bluetooth_get_baud_rate+0x40>
  UCSR0A=UCSR0A & 0xdf;
    2050:	80 91 c0 00 	lds	r24, 0x00C0
    2054:	8f 7d       	andi	r24, 0xDF	; 223
    2056:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    205a:	e0 93 c6 00 	sts	0x00C6, r30
    205e:	ca 01       	movw	r24, r20
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <_bluetooth_get_baud_rate+0x58>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    2064:	80 91 c0 00 	lds	r24, 0x00C0
    2068:	85 ff       	sbrs	r24, 5
    206a:	fc cf       	rjmp	.-8      	; 0x2064 <_bluetooth_get_baud_rate+0x5c>
  UCSR0A=UCSR0A & 0xdf;
    206c:	80 91 c0 00 	lds	r24, 0x00C0
    2070:	8f 7d       	andi	r24, 0xDF	; 223
    2072:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    2076:	70 93 c6 00 	sts	0x00C6, r23
    207a:	ca 01       	movw	r24, r20
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <_bluetooth_get_baud_rate+0x74>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    2080:	80 91 c0 00 	lds	r24, 0x00C0
    2084:	85 ff       	sbrs	r24, 5
    2086:	fc cf       	rjmp	.-8      	; 0x2080 <_bluetooth_get_baud_rate+0x78>
  UCSR0A=UCSR0A & 0xdf;
    2088:	80 91 c0 00 	lds	r24, 0x00C0
    208c:	8f 7d       	andi	r24, 0xDF	; 223
    208e:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    2092:	60 93 c6 00 	sts	0x00C6, r22
    2096:	ca 01       	movw	r24, r20
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <_bluetooth_get_baud_rate+0x90>
  }


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    209c:	80 91 c0 00 	lds	r24, 0x00C0
    20a0:	85 ff       	sbrs	r24, 5
    20a2:	fc cf       	rjmp	.-8      	; 0x209c <_bluetooth_get_baud_rate+0x94>
  UCSR0A=UCSR0A & 0xdf;
    20a4:	80 91 c0 00 	lds	r24, 0x00C0
    20a8:	8f 7d       	andi	r24, 0xDF	; 223
    20aa:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    20ae:	60 93 c6 00 	sts	0x00C6, r22
    20b2:	ca 01       	movw	r24, r20
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <_bluetooth_get_baud_rate+0xac>
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(13);
		_delay_ms(5);


		attempts++;
    20b8:	3f 5f       	subi	r19, 0xFF	; 255
 		if ((attempts>=255) || (_bluetooth_receive_uart0_byte(&baudrate)==0))
    20ba:	3f 3f       	cpi	r19, 0xFF	; 255
    20bc:	21 f1       	breq	.+72     	; 0x2106 <_bluetooth_get_baud_rate+0xfe>


unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    20be:	80 91 c0 00 	lds	r24, 0x00C0
    20c2:	87 fd       	sbrc	r24, 7
    20c4:	14 c0       	rjmp	.+40     	; 0x20ee <_bluetooth_get_baud_rate+0xe6>
    20c6:	80 91 c0 00 	lds	r24, 0x00C0
    20ca:	87 fd       	sbrc	r24, 7
    20cc:	10 c0       	rjmp	.+32     	; 0x20ee <_bluetooth_get_baud_rate+0xe6>
			break;

	}
	if (attempts<255)
	{	
		switch(baudrate)
    20ce:	24 33       	cpi	r18, 0x34	; 52
    20d0:	89 f0       	breq	.+34     	; 0x20f4 <_bluetooth_get_baud_rate+0xec>
    20d2:	25 33       	cpi	r18, 0x35	; 53
    20d4:	28 f4       	brcc	.+10     	; 0x20e0 <_bluetooth_get_baud_rate+0xd8>
    20d6:	21 33       	cpi	r18, 0x31	; 49
    20d8:	89 f0       	breq	.+34     	; 0x20fc <_bluetooth_get_baud_rate+0xf4>
    20da:	22 33       	cpi	r18, 0x32	; 50
    20dc:	99 f4       	brne	.+38     	; 0x2104 <_bluetooth_get_baud_rate+0xfc>
    20de:	05 c0       	rjmp	.+10     	; 0x20ea <_bluetooth_get_baud_rate+0xe2>
    20e0:	25 33       	cpi	r18, 0x35	; 53
    20e2:	71 f0       	breq	.+28     	; 0x2100 <_bluetooth_get_baud_rate+0xf8>
    20e4:	29 33       	cpi	r18, 0x39	; 57
    20e6:	71 f4       	brne	.+28     	; 0x2104 <_bluetooth_get_baud_rate+0xfc>
    20e8:	07 c0       	rjmp	.+14     	; 0x20f8 <_bluetooth_get_baud_rate+0xf0>
    20ea:	2f ec       	ldi	r18, 0xCF	; 207
    20ec:	0c c0       	rjmp	.+24     	; 0x2106 <_bluetooth_get_baud_rate+0xfe>
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    20ee:	20 91 c6 00 	lds	r18, 0x00C6
    20f2:	91 cf       	rjmp	.-222    	; 0x2016 <_bluetooth_get_baud_rate+0xe>
    20f4:	27 e6       	ldi	r18, 0x67	; 103
    20f6:	07 c0       	rjmp	.+14     	; 0x2106 <_bluetooth_get_baud_rate+0xfe>
    20f8:	23 e3       	ldi	r18, 0x33	; 51
    20fa:	05 c0       	rjmp	.+10     	; 0x2106 <_bluetooth_get_baud_rate+0xfe>
			case '4':
				baudrate=ATMEGA_BAUD_4800;
				break;
			case '9':
				baudrate=ATMEGA_BAUD_9600;
				break;
    20fc:	23 e0       	ldi	r18, 0x03	; 3
    20fe:	03 c0       	rjmp	.+6      	; 0x2106 <_bluetooth_get_baud_rate+0xfe>
			case '1':
				baudrate=ATMEGA_BAUD_115200;
				break;
    2100:	28 e0       	ldi	r18, 0x08	; 8
    2102:	01 c0       	rjmp	.+2      	; 0x2106 <_bluetooth_get_baud_rate+0xfe>
			case '5':
				baudrate=ATMEGA_BAUD_57600;
				break;
    2104:	2c e0       	ldi	r18, 0x0C	; 12
				break;
			}
	}
	
	return baudrate;
}
    2106:	82 2f       	mov	r24, r18
    2108:	08 95       	ret

0000210a <_bluetooth_turn_on>:
	
*/
void _bluetooth_turn_on(void)
{
	// Set the direction of TX pin as output
	sbi(DDRD,OUT_BT_TXD);
    210a:	51 9a       	sbi	0x0a, 1	; 10

	// Set the direction of the RESET pin as output and high
	sbi(DDRD,OUT_BT_RESET_N);	
    210c:	52 9a       	sbi	0x0a, 2	; 10
	sbi(PORTD,OUT_BT_RESET_N);  
    210e:	5a 9a       	sbi	0x0b, 2	; 11

	// Set the direction of the switch pin as output and low
	sbi(DDRB,OUT_BT_SW_N);
    2110:	24 9a       	sbi	0x04, 4	; 4
	cbi(PORTB,OUT_BT_SW_N);
    2112:	2c 98       	cbi	0x05, 4	; 5

	// Set the status of the bluetooth to true
	sbi(atmega_status, BIT0_BLUETOOTH_STATUS);
    2114:	80 91 86 1e 	lds	r24, 0x1E86
    2118:	81 60       	ori	r24, 0x01	; 1
    211a:	80 93 86 1e 	sts	0x1E86, r24
}
    211e:	08 95       	ret

00002120 <_bluetooth_turn_off>:
	
*/
void _bluetooth_turn_off(void)
{
	// Set the direction of TX, RESET and switch pins as input
	cbi(DDRD,OUT_BT_TXD);
    2120:	51 98       	cbi	0x0a, 1	; 10
	cbi(DDRD,OUT_BT_RESET_N);
    2122:	52 98       	cbi	0x0a, 2	; 10
	cbi(DDRB,OUT_BT_SW_N);		 
    2124:	24 98       	cbi	0x04, 4	; 4

	// Set the status of bluetooth to false
	cbi(atmega_status, BIT0_BLUETOOTH_STATUS);
    2126:	80 91 86 1e 	lds	r24, 0x1E86
    212a:	8e 7f       	andi	r24, 0xFE	; 254
    212c:	80 93 86 1e 	sts	0x1E86, r24
}
    2130:	08 95       	ret

00002132 <_is_bluetooth_on>:
	Description: Tests if the bluetooth status bit is on
	
*/

unsigned char _is_bluetooth_on(void)
{
    2132:	80 91 86 1e 	lds	r24, 0x1E86
	return ((atmega_status>>BIT0_BLUETOOTH_STATUS) & 0x01);
}
    2136:	81 70       	andi	r24, 0x01	; 1
    2138:	08 95       	ret

0000213a <_bluetooth_is_connected>:


unsigned char _bluetooth_is_connected(void){

#ifdef _VERSION==3
        return (0x01 & (PINA>>IN_BT_CONNECT));
    213a:	80 b1       	in	r24, 0x00	; 0
    213c:	82 95       	swap	r24
#else
        return (0x01 & (PIND>>IN_BT_CONNECT));
#endif
}
    213e:	81 70       	andi	r24, 0x01	; 1
    2140:	08 95       	ret

00002142 <_bluetooth_is_discoverable>:


unsigned char _bluetooth_is_discoverable(void){

#ifdef _VERSION==3
        return (0x01 & (PINA>>IN_BT_DISC));
    2142:	80 b1       	in	r24, 0x00	; 0
    2144:	82 95       	swap	r24
    2146:	86 95       	lsr	r24
    2148:	86 95       	lsr	r24

#else
         return (0x01 & (PIND>>IN_BT_DISC));
#endif
}
    214a:	81 70       	andi	r24, 0x01	; 1
    214c:	08 95       	ret

0000214e <_bluetooth_receive_uart0_byte>:


unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
    214e:	fc 01       	movw	r30, r24
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    2150:	80 91 c0 00 	lds	r24, 0x00C0
    2154:	87 fd       	sbrc	r24, 7
    2156:	06 c0       	rjmp	.+12     	; 0x2164 <_bluetooth_receive_uart0_byte+0x16>
    2158:	80 91 c0 00 	lds	r24, 0x00C0
    215c:	87 fd       	sbrc	r24, 7
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <_bluetooth_receive_uart0_byte+0x16>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	08 95       	ret
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    2164:	80 91 c6 00 	lds	r24, 0x00C6
    2168:	80 83       	st	Z, r24
    216a:	81 e0       	ldi	r24, 0x01	; 1

   return 1;/* Return success*/
  }
    216c:	08 95       	ret

0000216e <_bluetooth_transmit_uart0_byte>:


void _bluetooth_transmit_uart0_byte( unsigned char data )
{
    216e:	98 2f       	mov	r25, r24
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    2170:	80 91 c0 00 	lds	r24, 0x00C0
    2174:	85 ff       	sbrs	r24, 5
    2176:	fc cf       	rjmp	.-8      	; 0x2170 <_bluetooth_transmit_uart0_byte+0x2>
  UCSR0A=UCSR0A & 0xdf;
    2178:	80 91 c0 00 	lds	r24, 0x00C0
    217c:	8f 7d       	andi	r24, 0xDF	; 223
    217e:	80 93 c0 00 	sts	0x00C0, r24
  
  UDR0 =  data;  /* Start transmission   */
    2182:	90 93 c6 00 	sts	0x00C6, r25
   
}
    2186:	08 95       	ret

00002188 <_accelerometer_set_sensitivity>:
/* Accelerometer Functions */

unsigned char _accelerometer_set_sensitivity(unsigned char level){

#ifdef _VERSION==3
	if (level==_4G){
    2188:	88 23       	and	r24, r24
    218a:	11 f4       	brne	.+4      	; 0x2190 <_accelerometer_set_sensitivity+0x8>
		cbi(PORTB,OUT_ACCEL_SEL1);
    218c:	28 98       	cbi	0x05, 0	; 5
    218e:	08 95       	ret
		return _4G;
	}else if (level==_12G){
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	11 f0       	breq	.+4      	; 0x2198 <_accelerometer_set_sensitivity+0x10>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	08 95       	ret
		sbi(PORTB,OUT_ACCEL_SEL1);		
    2198:	28 9a       	sbi	0x05, 0	; 5
    219a:	81 e0       	ldi	r24, 0x01	; 1
		sbi(PORTB,OUT_ACCEL_SEL2);
		return _6G;
	}
#endif
	return 0;
}
    219c:	08 95       	ret

0000219e <_accelerometer_turn_on>:
*/
void _accelerometer_turn_on(void)
{

#ifdef _VERSION 3
	sbi(DDRB,OUT_ACCEL_SEL1);	
    219e:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB,OUT_ACCEL_SLEEP_N);
    21a0:	23 9a       	sbi	0x04, 3	; 4
	sbi(PORTB,OUT_ACCEL_SLEEP_N);	 
    21a2:	2b 9a       	sbi	0x05, 3	; 5
	sbi(DDRB,OUT_ACCEL_SEL2);
	sbi(DDRB,OUT_ACCEL_SLEEP_N);
	sbi(PORTB,OUT_ACCEL_SLEEP_N);
#endif	 			
	// Set the status of the accelerometer to true
	sbi(atmega_status, BIT1_ACCELEROMETER_STATUS);
    21a4:	80 91 86 1e 	lds	r24, 0x1E86
    21a8:	82 60       	ori	r24, 0x02	; 2
    21aa:	80 93 86 1e 	sts	0x1E86, r24
}
    21ae:	08 95       	ret

000021b0 <_accelerometer_turn_off>:

unsigned char _accelerometer_set_sensitivity(unsigned char level){

#ifdef _VERSION==3
	if (level==_4G){
		cbi(PORTB,OUT_ACCEL_SEL1);
    21b0:	28 98       	cbi	0x05, 0	; 5
*/
void _accelerometer_turn_off(void)
{
#ifdef _VERSION==3
	 _accelerometer_set_sensitivity(_4G);
	 cbi(DDRB,OUT_ACCEL_SEL1);		 
    21b2:	20 98       	cbi	0x04, 0	; 4
	 sbi(DDRB,OUT_ACCEL_SLEEP_N); //sleep pin in output mode
    21b4:	23 9a       	sbi	0x04, 3	; 4
	 cbi(PORTB,OUT_ACCEL_SLEEP_N); //clear the pin
    21b6:	2b 98       	cbi	0x05, 3	; 5
	 cbi(PORTB,OUT_ACCEL_SLEEP_N); //clear the pin
#endif
	 
	 
	 // Set the status of the accelerometer to false
	 cbi(atmega_status, BIT1_ACCELEROMETER_STATUS);
    21b8:	80 91 86 1e 	lds	r24, 0x1E86
    21bc:	8d 7f       	andi	r24, 0xFD	; 253
    21be:	80 93 86 1e 	sts	0x1E86, r24
}
    21c2:	08 95       	ret

000021c4 <_is_accelerometer_on>:
	Description: Tests if the accelerometer status bit is on
	
*/

unsigned char _is_accelerometer_on(void)
{
    21c4:	80 91 86 1e 	lds	r24, 0x1E86
    21c8:	86 95       	lsr	r24
	return ((atmega_status>>BIT1_ACCELEROMETER_STATUS) & 0x01);
}
    21ca:	81 70       	andi	r24, 0x01	; 1
    21cc:	08 95       	ret

000021ce <_greenled_turn_on>:
*/

void _greenled_turn_on(void)
{
#ifdef _VERSION==3
	sbi(DDRD,OUT_LED_GN);
    21ce:	53 9a       	sbi	0x0a, 3	; 10
	sbi(PORTD,OUT_LED_GN);
    21d0:	5b 9a       	sbi	0x0b, 3	; 11
	sbi(DDRC,OUT_LED_GN);
	sbi(PORTC,OUT_LED_GN);
#endif
	
	// Set the status of the green led to true
	sbi(atmega_status, BIT2_GREENLED_STATUS); 
    21d2:	80 91 86 1e 	lds	r24, 0x1E86
    21d6:	84 60       	ori	r24, 0x04	; 4
    21d8:	80 93 86 1e 	sts	0x1E86, r24
}
    21dc:	08 95       	ret

000021de <_greenled_turn_off>:

void _greenled_turn_off(void)
{

#ifdef _VERSION==3
	sbi(DDRD,OUT_LED_GN);
    21de:	53 9a       	sbi	0x0a, 3	; 10
	cbi(PORTD,OUT_LED_GN);
    21e0:	5b 98       	cbi	0x0b, 3	; 11
	cbi(DDRD,OUT_LED_GN);
    21e2:	53 98       	cbi	0x0a, 3	; 10
	cbi(PORTC,OUT_LED_GN);
	cbi(DDRC,OUT_LED_GN);
#endif
	
	// Set the status of the green led to false
	cbi(atmega_status, BIT2_GREENLED_STATUS);
    21e4:	80 91 86 1e 	lds	r24, 0x1E86
    21e8:	8b 7f       	andi	r24, 0xFB	; 251
    21ea:	80 93 86 1e 	sts	0x1E86, r24

}
    21ee:	08 95       	ret

000021f0 <_is_greenled_on>:
	
	Description: Tests if the green led is on
	
*/
unsigned char _is_greenled_on(void)
{
    21f0:	80 91 86 1e 	lds	r24, 0x1E86
    21f4:	86 95       	lsr	r24
    21f6:	86 95       	lsr	r24
	return ((atmega_status>>BIT2_GREENLED_STATUS) & 0x01);
}
    21f8:	81 70       	andi	r24, 0x01	; 1
    21fa:	08 95       	ret

000021fc <_yellowled_turn_on>:
	Description: This function turns on the yellow led
	
*/
void _yellowled_turn_on(void)
{
	sbi(DDRC,OUT_LED_YE);
    21fc:	3b 9a       	sbi	0x07, 3	; 7
	sbi(PORTC,OUT_LED_YE);
    21fe:	43 9a       	sbi	0x08, 3	; 8

	// Set the status of the yellow led to true
	sbi(atmega_status, BIT3_YELLOWLED_STATUS);
    2200:	80 91 86 1e 	lds	r24, 0x1E86
    2204:	88 60       	ori	r24, 0x08	; 8
    2206:	80 93 86 1e 	sts	0x1E86, r24
}
    220a:	08 95       	ret

0000220c <_yellowled_turn_off>:
	
*/
void _yellowled_turn_off(void)
{

	sbi(DDRC,OUT_LED_YE);
    220c:	3b 9a       	sbi	0x07, 3	; 7
	cbi(PORTC,OUT_LED_YE);
    220e:	43 98       	cbi	0x08, 3	; 8
	cbi(DDRC,OUT_LED_YE);	
    2210:	3b 98       	cbi	0x07, 3	; 7
	
	// Set the status of the yellow led to false
	cbi(atmega_status, BIT3_YELLOWLED_STATUS);
    2212:	80 91 86 1e 	lds	r24, 0x1E86
    2216:	87 7f       	andi	r24, 0xF7	; 247
    2218:	80 93 86 1e 	sts	0x1E86, r24
}
    221c:	08 95       	ret

0000221e <_is_yellowled_on>:
	
	Description: Tests if the yellow led is on
	
*/
unsigned char _is_yellowled_on(void)
{
    221e:	80 91 86 1e 	lds	r24, 0x1E86
    2222:	86 95       	lsr	r24
    2224:	86 95       	lsr	r24
    2226:	86 95       	lsr	r24
	return ((atmega_status>>BIT3_YELLOWLED_STATUS) & 0x01);
}
    2228:	81 70       	andi	r24, 0x01	; 1
    222a:	08 95       	ret

0000222c <_is_docked>:
	Description: Tests if the wocket is docked
	
*/
unsigned char _is_docked(void)
{
	return ((PORTA>>IN_DOCK_N) & 0x01);
    222c:	82 b1       	in	r24, 0x02	; 2
    222e:	86 95       	lsr	r24
    2230:	86 95       	lsr	r24
    2232:	86 95       	lsr	r24
}
    2234:	81 70       	andi	r24, 0x01	; 1
    2236:	08 95       	ret

00002238 <__fixunssfsi>:
    2238:	ef 92       	push	r14
    223a:	ff 92       	push	r15
    223c:	0f 93       	push	r16
    223e:	1f 93       	push	r17
    2240:	7b 01       	movw	r14, r22
    2242:	8c 01       	movw	r16, r24
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	5f e4       	ldi	r21, 0x4F	; 79
    224c:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__gesf2>
    2250:	88 23       	and	r24, r24
    2252:	8c f0       	brlt	.+34     	; 0x2276 <__fixunssfsi+0x3e>
    2254:	c8 01       	movw	r24, r16
    2256:	b7 01       	movw	r22, r14
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e0       	ldi	r20, 0x00	; 0
    225e:	5f e4       	ldi	r21, 0x4F	; 79
    2260:	0e 94 94 12 	call	0x2528	; 0x2528 <__subsf3>
    2264:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__fixsfsi>
    2268:	9b 01       	movw	r18, r22
    226a:	ac 01       	movw	r20, r24
    226c:	20 50       	subi	r18, 0x00	; 0
    226e:	30 40       	sbci	r19, 0x00	; 0
    2270:	40 40       	sbci	r20, 0x00	; 0
    2272:	50 48       	sbci	r21, 0x80	; 128
    2274:	06 c0       	rjmp	.+12     	; 0x2282 <__fixunssfsi+0x4a>
    2276:	c8 01       	movw	r24, r16
    2278:	b7 01       	movw	r22, r14
    227a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__fixsfsi>
    227e:	9b 01       	movw	r18, r22
    2280:	ac 01       	movw	r20, r24
    2282:	b9 01       	movw	r22, r18
    2284:	ca 01       	movw	r24, r20
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	08 95       	ret

00002290 <_fpadd_parts>:
    2290:	a0 e0       	ldi	r26, 0x00	; 0
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	ee e4       	ldi	r30, 0x4E	; 78
    2296:	f1 e1       	ldi	r31, 0x11	; 17
    2298:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__prologue_saves__>
    229c:	dc 01       	movw	r26, r24
    229e:	2b 01       	movw	r4, r22
    22a0:	fa 01       	movw	r30, r20
    22a2:	9c 91       	ld	r25, X
    22a4:	92 30       	cpi	r25, 0x02	; 2
    22a6:	08 f4       	brcc	.+2      	; 0x22aa <_fpadd_parts+0x1a>
    22a8:	39 c1       	rjmp	.+626    	; 0x251c <_fpadd_parts+0x28c>
    22aa:	eb 01       	movw	r28, r22
    22ac:	88 81       	ld	r24, Y
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	08 f4       	brcc	.+2      	; 0x22b4 <_fpadd_parts+0x24>
    22b2:	33 c1       	rjmp	.+614    	; 0x251a <_fpadd_parts+0x28a>
    22b4:	94 30       	cpi	r25, 0x04	; 4
    22b6:	69 f4       	brne	.+26     	; 0x22d2 <_fpadd_parts+0x42>
    22b8:	84 30       	cpi	r24, 0x04	; 4
    22ba:	09 f0       	breq	.+2      	; 0x22be <_fpadd_parts+0x2e>
    22bc:	2f c1       	rjmp	.+606    	; 0x251c <_fpadd_parts+0x28c>
    22be:	11 96       	adiw	r26, 0x01	; 1
    22c0:	9c 91       	ld	r25, X
    22c2:	11 97       	sbiw	r26, 0x01	; 1
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	98 17       	cp	r25, r24
    22c8:	09 f4       	brne	.+2      	; 0x22cc <_fpadd_parts+0x3c>
    22ca:	28 c1       	rjmp	.+592    	; 0x251c <_fpadd_parts+0x28c>
    22cc:	a7 e0       	ldi	r26, 0x07	; 7
    22ce:	b1 e0       	ldi	r27, 0x01	; 1
    22d0:	25 c1       	rjmp	.+586    	; 0x251c <_fpadd_parts+0x28c>
    22d2:	84 30       	cpi	r24, 0x04	; 4
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <_fpadd_parts+0x48>
    22d6:	21 c1       	rjmp	.+578    	; 0x251a <_fpadd_parts+0x28a>
    22d8:	82 30       	cpi	r24, 0x02	; 2
    22da:	a9 f4       	brne	.+42     	; 0x2306 <_fpadd_parts+0x76>
    22dc:	92 30       	cpi	r25, 0x02	; 2
    22de:	09 f0       	breq	.+2      	; 0x22e2 <_fpadd_parts+0x52>
    22e0:	1d c1       	rjmp	.+570    	; 0x251c <_fpadd_parts+0x28c>
    22e2:	9a 01       	movw	r18, r20
    22e4:	ad 01       	movw	r20, r26
    22e6:	88 e0       	ldi	r24, 0x08	; 8
    22e8:	ea 01       	movw	r28, r20
    22ea:	09 90       	ld	r0, Y+
    22ec:	ae 01       	movw	r20, r28
    22ee:	e9 01       	movw	r28, r18
    22f0:	09 92       	st	Y+, r0
    22f2:	9e 01       	movw	r18, r28
    22f4:	81 50       	subi	r24, 0x01	; 1
    22f6:	c1 f7       	brne	.-16     	; 0x22e8 <_fpadd_parts+0x58>
    22f8:	e2 01       	movw	r28, r4
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	9c 91       	ld	r25, X
    2300:	89 23       	and	r24, r25
    2302:	81 83       	std	Z+1, r24	; 0x01
    2304:	08 c1       	rjmp	.+528    	; 0x2516 <_fpadd_parts+0x286>
    2306:	92 30       	cpi	r25, 0x02	; 2
    2308:	09 f4       	brne	.+2      	; 0x230c <_fpadd_parts+0x7c>
    230a:	07 c1       	rjmp	.+526    	; 0x251a <_fpadd_parts+0x28a>
    230c:	12 96       	adiw	r26, 0x02	; 2
    230e:	2d 90       	ld	r2, X+
    2310:	3c 90       	ld	r3, X
    2312:	13 97       	sbiw	r26, 0x03	; 3
    2314:	eb 01       	movw	r28, r22
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	14 96       	adiw	r26, 0x04	; 4
    231c:	ad 90       	ld	r10, X+
    231e:	bd 90       	ld	r11, X+
    2320:	cd 90       	ld	r12, X+
    2322:	dc 90       	ld	r13, X
    2324:	17 97       	sbiw	r26, 0x07	; 7
    2326:	ec 80       	ldd	r14, Y+4	; 0x04
    2328:	fd 80       	ldd	r15, Y+5	; 0x05
    232a:	0e 81       	ldd	r16, Y+6	; 0x06
    232c:	1f 81       	ldd	r17, Y+7	; 0x07
    232e:	91 01       	movw	r18, r2
    2330:	28 1b       	sub	r18, r24
    2332:	39 0b       	sbc	r19, r25
    2334:	b9 01       	movw	r22, r18
    2336:	37 ff       	sbrs	r19, 7
    2338:	04 c0       	rjmp	.+8      	; 0x2342 <_fpadd_parts+0xb2>
    233a:	66 27       	eor	r22, r22
    233c:	77 27       	eor	r23, r23
    233e:	62 1b       	sub	r22, r18
    2340:	73 0b       	sbc	r23, r19
    2342:	60 32       	cpi	r22, 0x20	; 32
    2344:	71 05       	cpc	r23, r1
    2346:	0c f0       	brlt	.+2      	; 0x234a <_fpadd_parts+0xba>
    2348:	61 c0       	rjmp	.+194    	; 0x240c <_fpadd_parts+0x17c>
    234a:	12 16       	cp	r1, r18
    234c:	13 06       	cpc	r1, r19
    234e:	6c f5       	brge	.+90     	; 0x23aa <_fpadd_parts+0x11a>
    2350:	37 01       	movw	r6, r14
    2352:	48 01       	movw	r8, r16
    2354:	06 2e       	mov	r0, r22
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <_fpadd_parts+0xd0>
    2358:	96 94       	lsr	r9
    235a:	87 94       	ror	r8
    235c:	77 94       	ror	r7
    235e:	67 94       	ror	r6
    2360:	0a 94       	dec	r0
    2362:	d2 f7       	brpl	.-12     	; 0x2358 <_fpadd_parts+0xc8>
    2364:	21 e0       	ldi	r18, 0x01	; 1
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	04 c0       	rjmp	.+8      	; 0x2376 <_fpadd_parts+0xe6>
    236e:	22 0f       	add	r18, r18
    2370:	33 1f       	adc	r19, r19
    2372:	44 1f       	adc	r20, r20
    2374:	55 1f       	adc	r21, r21
    2376:	6a 95       	dec	r22
    2378:	d2 f7       	brpl	.-12     	; 0x236e <_fpadd_parts+0xde>
    237a:	21 50       	subi	r18, 0x01	; 1
    237c:	30 40       	sbci	r19, 0x00	; 0
    237e:	40 40       	sbci	r20, 0x00	; 0
    2380:	50 40       	sbci	r21, 0x00	; 0
    2382:	2e 21       	and	r18, r14
    2384:	3f 21       	and	r19, r15
    2386:	40 23       	and	r20, r16
    2388:	51 23       	and	r21, r17
    238a:	21 15       	cp	r18, r1
    238c:	31 05       	cpc	r19, r1
    238e:	41 05       	cpc	r20, r1
    2390:	51 05       	cpc	r21, r1
    2392:	21 f0       	breq	.+8      	; 0x239c <_fpadd_parts+0x10c>
    2394:	21 e0       	ldi	r18, 0x01	; 1
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	50 e0       	ldi	r21, 0x00	; 0
    239c:	79 01       	movw	r14, r18
    239e:	8a 01       	movw	r16, r20
    23a0:	e6 28       	or	r14, r6
    23a2:	f7 28       	or	r15, r7
    23a4:	08 29       	or	r16, r8
    23a6:	19 29       	or	r17, r9
    23a8:	3c c0       	rjmp	.+120    	; 0x2422 <_fpadd_parts+0x192>
    23aa:	23 2b       	or	r18, r19
    23ac:	d1 f1       	breq	.+116    	; 0x2422 <_fpadd_parts+0x192>
    23ae:	26 0e       	add	r2, r22
    23b0:	37 1e       	adc	r3, r23
    23b2:	35 01       	movw	r6, r10
    23b4:	46 01       	movw	r8, r12
    23b6:	06 2e       	mov	r0, r22
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <_fpadd_parts+0x132>
    23ba:	96 94       	lsr	r9
    23bc:	87 94       	ror	r8
    23be:	77 94       	ror	r7
    23c0:	67 94       	ror	r6
    23c2:	0a 94       	dec	r0
    23c4:	d2 f7       	brpl	.-12     	; 0x23ba <_fpadd_parts+0x12a>
    23c6:	21 e0       	ldi	r18, 0x01	; 1
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <_fpadd_parts+0x148>
    23d0:	22 0f       	add	r18, r18
    23d2:	33 1f       	adc	r19, r19
    23d4:	44 1f       	adc	r20, r20
    23d6:	55 1f       	adc	r21, r21
    23d8:	6a 95       	dec	r22
    23da:	d2 f7       	brpl	.-12     	; 0x23d0 <_fpadd_parts+0x140>
    23dc:	21 50       	subi	r18, 0x01	; 1
    23de:	30 40       	sbci	r19, 0x00	; 0
    23e0:	40 40       	sbci	r20, 0x00	; 0
    23e2:	50 40       	sbci	r21, 0x00	; 0
    23e4:	2a 21       	and	r18, r10
    23e6:	3b 21       	and	r19, r11
    23e8:	4c 21       	and	r20, r12
    23ea:	5d 21       	and	r21, r13
    23ec:	21 15       	cp	r18, r1
    23ee:	31 05       	cpc	r19, r1
    23f0:	41 05       	cpc	r20, r1
    23f2:	51 05       	cpc	r21, r1
    23f4:	21 f0       	breq	.+8      	; 0x23fe <_fpadd_parts+0x16e>
    23f6:	21 e0       	ldi	r18, 0x01	; 1
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	50 e0       	ldi	r21, 0x00	; 0
    23fe:	59 01       	movw	r10, r18
    2400:	6a 01       	movw	r12, r20
    2402:	a6 28       	or	r10, r6
    2404:	b7 28       	or	r11, r7
    2406:	c8 28       	or	r12, r8
    2408:	d9 28       	or	r13, r9
    240a:	0b c0       	rjmp	.+22     	; 0x2422 <_fpadd_parts+0x192>
    240c:	82 15       	cp	r24, r2
    240e:	93 05       	cpc	r25, r3
    2410:	2c f0       	brlt	.+10     	; 0x241c <_fpadd_parts+0x18c>
    2412:	1c 01       	movw	r2, r24
    2414:	aa 24       	eor	r10, r10
    2416:	bb 24       	eor	r11, r11
    2418:	65 01       	movw	r12, r10
    241a:	03 c0       	rjmp	.+6      	; 0x2422 <_fpadd_parts+0x192>
    241c:	ee 24       	eor	r14, r14
    241e:	ff 24       	eor	r15, r15
    2420:	87 01       	movw	r16, r14
    2422:	11 96       	adiw	r26, 0x01	; 1
    2424:	9c 91       	ld	r25, X
    2426:	d2 01       	movw	r26, r4
    2428:	11 96       	adiw	r26, 0x01	; 1
    242a:	8c 91       	ld	r24, X
    242c:	98 17       	cp	r25, r24
    242e:	09 f4       	brne	.+2      	; 0x2432 <_fpadd_parts+0x1a2>
    2430:	45 c0       	rjmp	.+138    	; 0x24bc <_fpadd_parts+0x22c>
    2432:	99 23       	and	r25, r25
    2434:	39 f0       	breq	.+14     	; 0x2444 <_fpadd_parts+0x1b4>
    2436:	a8 01       	movw	r20, r16
    2438:	97 01       	movw	r18, r14
    243a:	2a 19       	sub	r18, r10
    243c:	3b 09       	sbc	r19, r11
    243e:	4c 09       	sbc	r20, r12
    2440:	5d 09       	sbc	r21, r13
    2442:	06 c0       	rjmp	.+12     	; 0x2450 <_fpadd_parts+0x1c0>
    2444:	a6 01       	movw	r20, r12
    2446:	95 01       	movw	r18, r10
    2448:	2e 19       	sub	r18, r14
    244a:	3f 09       	sbc	r19, r15
    244c:	40 0b       	sbc	r20, r16
    244e:	51 0b       	sbc	r21, r17
    2450:	57 fd       	sbrc	r21, 7
    2452:	08 c0       	rjmp	.+16     	; 0x2464 <_fpadd_parts+0x1d4>
    2454:	11 82       	std	Z+1, r1	; 0x01
    2456:	33 82       	std	Z+3, r3	; 0x03
    2458:	22 82       	std	Z+2, r2	; 0x02
    245a:	24 83       	std	Z+4, r18	; 0x04
    245c:	35 83       	std	Z+5, r19	; 0x05
    245e:	46 83       	std	Z+6, r20	; 0x06
    2460:	57 83       	std	Z+7, r21	; 0x07
    2462:	1d c0       	rjmp	.+58     	; 0x249e <_fpadd_parts+0x20e>
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	81 83       	std	Z+1, r24	; 0x01
    2468:	33 82       	std	Z+3, r3	; 0x03
    246a:	22 82       	std	Z+2, r2	; 0x02
    246c:	88 27       	eor	r24, r24
    246e:	99 27       	eor	r25, r25
    2470:	dc 01       	movw	r26, r24
    2472:	82 1b       	sub	r24, r18
    2474:	93 0b       	sbc	r25, r19
    2476:	a4 0b       	sbc	r26, r20
    2478:	b5 0b       	sbc	r27, r21
    247a:	84 83       	std	Z+4, r24	; 0x04
    247c:	95 83       	std	Z+5, r25	; 0x05
    247e:	a6 83       	std	Z+6, r26	; 0x06
    2480:	b7 83       	std	Z+7, r27	; 0x07
    2482:	0d c0       	rjmp	.+26     	; 0x249e <_fpadd_parts+0x20e>
    2484:	22 0f       	add	r18, r18
    2486:	33 1f       	adc	r19, r19
    2488:	44 1f       	adc	r20, r20
    248a:	55 1f       	adc	r21, r21
    248c:	24 83       	std	Z+4, r18	; 0x04
    248e:	35 83       	std	Z+5, r19	; 0x05
    2490:	46 83       	std	Z+6, r20	; 0x06
    2492:	57 83       	std	Z+7, r21	; 0x07
    2494:	82 81       	ldd	r24, Z+2	; 0x02
    2496:	93 81       	ldd	r25, Z+3	; 0x03
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	93 83       	std	Z+3, r25	; 0x03
    249c:	82 83       	std	Z+2, r24	; 0x02
    249e:	24 81       	ldd	r18, Z+4	; 0x04
    24a0:	35 81       	ldd	r19, Z+5	; 0x05
    24a2:	46 81       	ldd	r20, Z+6	; 0x06
    24a4:	57 81       	ldd	r21, Z+7	; 0x07
    24a6:	da 01       	movw	r26, r20
    24a8:	c9 01       	movw	r24, r18
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	a1 09       	sbc	r26, r1
    24ae:	b1 09       	sbc	r27, r1
    24b0:	8f 5f       	subi	r24, 0xFF	; 255
    24b2:	9f 4f       	sbci	r25, 0xFF	; 255
    24b4:	af 4f       	sbci	r26, 0xFF	; 255
    24b6:	bf 43       	sbci	r27, 0x3F	; 63
    24b8:	28 f3       	brcs	.-54     	; 0x2484 <_fpadd_parts+0x1f4>
    24ba:	0b c0       	rjmp	.+22     	; 0x24d2 <_fpadd_parts+0x242>
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	33 82       	std	Z+3, r3	; 0x03
    24c0:	22 82       	std	Z+2, r2	; 0x02
    24c2:	ea 0c       	add	r14, r10
    24c4:	fb 1c       	adc	r15, r11
    24c6:	0c 1d       	adc	r16, r12
    24c8:	1d 1d       	adc	r17, r13
    24ca:	e4 82       	std	Z+4, r14	; 0x04
    24cc:	f5 82       	std	Z+5, r15	; 0x05
    24ce:	06 83       	std	Z+6, r16	; 0x06
    24d0:	17 83       	std	Z+7, r17	; 0x07
    24d2:	83 e0       	ldi	r24, 0x03	; 3
    24d4:	80 83       	st	Z, r24
    24d6:	24 81       	ldd	r18, Z+4	; 0x04
    24d8:	35 81       	ldd	r19, Z+5	; 0x05
    24da:	46 81       	ldd	r20, Z+6	; 0x06
    24dc:	57 81       	ldd	r21, Z+7	; 0x07
    24de:	57 ff       	sbrs	r21, 7
    24e0:	1a c0       	rjmp	.+52     	; 0x2516 <_fpadd_parts+0x286>
    24e2:	c9 01       	movw	r24, r18
    24e4:	aa 27       	eor	r26, r26
    24e6:	97 fd       	sbrc	r25, 7
    24e8:	a0 95       	com	r26
    24ea:	ba 2f       	mov	r27, r26
    24ec:	81 70       	andi	r24, 0x01	; 1
    24ee:	90 70       	andi	r25, 0x00	; 0
    24f0:	a0 70       	andi	r26, 0x00	; 0
    24f2:	b0 70       	andi	r27, 0x00	; 0
    24f4:	56 95       	lsr	r21
    24f6:	47 95       	ror	r20
    24f8:	37 95       	ror	r19
    24fa:	27 95       	ror	r18
    24fc:	82 2b       	or	r24, r18
    24fe:	93 2b       	or	r25, r19
    2500:	a4 2b       	or	r26, r20
    2502:	b5 2b       	or	r27, r21
    2504:	84 83       	std	Z+4, r24	; 0x04
    2506:	95 83       	std	Z+5, r25	; 0x05
    2508:	a6 83       	std	Z+6, r26	; 0x06
    250a:	b7 83       	std	Z+7, r27	; 0x07
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	01 96       	adiw	r24, 0x01	; 1
    2512:	93 83       	std	Z+3, r25	; 0x03
    2514:	82 83       	std	Z+2, r24	; 0x02
    2516:	df 01       	movw	r26, r30
    2518:	01 c0       	rjmp	.+2      	; 0x251c <_fpadd_parts+0x28c>
    251a:	d2 01       	movw	r26, r4
    251c:	cd 01       	movw	r24, r26
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	e2 e1       	ldi	r30, 0x12	; 18
    2524:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__epilogue_restores__>

00002528 <__subsf3>:
    2528:	a0 e2       	ldi	r26, 0x20	; 32
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	ea e9       	ldi	r30, 0x9A	; 154
    252e:	f2 e1       	ldi	r31, 0x12	; 18
    2530:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__prologue_saves__+0x18>
    2534:	69 83       	std	Y+1, r22	; 0x01
    2536:	7a 83       	std	Y+2, r23	; 0x02
    2538:	8b 83       	std	Y+3, r24	; 0x03
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	2d 83       	std	Y+5, r18	; 0x05
    253e:	3e 83       	std	Y+6, r19	; 0x06
    2540:	4f 83       	std	Y+7, r20	; 0x07
    2542:	58 87       	std	Y+8, r21	; 0x08
    2544:	e9 e0       	ldi	r30, 0x09	; 9
    2546:	ee 2e       	mov	r14, r30
    2548:	f1 2c       	mov	r15, r1
    254a:	ec 0e       	add	r14, r28
    254c:	fd 1e       	adc	r15, r29
    254e:	ce 01       	movw	r24, r28
    2550:	01 96       	adiw	r24, 0x01	; 1
    2552:	b7 01       	movw	r22, r14
    2554:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    2558:	8e 01       	movw	r16, r28
    255a:	0f 5e       	subi	r16, 0xEF	; 239
    255c:	1f 4f       	sbci	r17, 0xFF	; 255
    255e:	ce 01       	movw	r24, r28
    2560:	05 96       	adiw	r24, 0x05	; 5
    2562:	b8 01       	movw	r22, r16
    2564:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    2568:	8a 89       	ldd	r24, Y+18	; 0x12
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	89 27       	eor	r24, r25
    256e:	8a 8b       	std	Y+18, r24	; 0x12
    2570:	c7 01       	movw	r24, r14
    2572:	b8 01       	movw	r22, r16
    2574:	ae 01       	movw	r20, r28
    2576:	47 5e       	subi	r20, 0xE7	; 231
    2578:	5f 4f       	sbci	r21, 0xFF	; 255
    257a:	0e 94 48 11 	call	0x2290	; 0x2290 <_fpadd_parts>
    257e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__pack_f>
    2582:	a0 96       	adiw	r28, 0x20	; 32
    2584:	e6 e0       	ldi	r30, 0x06	; 6
    2586:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__epilogue_restores__+0x18>

0000258a <__addsf3>:
    258a:	a0 e2       	ldi	r26, 0x20	; 32
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	eb ec       	ldi	r30, 0xCB	; 203
    2590:	f2 e1       	ldi	r31, 0x12	; 18
    2592:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__prologue_saves__+0x18>
    2596:	69 83       	std	Y+1, r22	; 0x01
    2598:	7a 83       	std	Y+2, r23	; 0x02
    259a:	8b 83       	std	Y+3, r24	; 0x03
    259c:	9c 83       	std	Y+4, r25	; 0x04
    259e:	2d 83       	std	Y+5, r18	; 0x05
    25a0:	3e 83       	std	Y+6, r19	; 0x06
    25a2:	4f 83       	std	Y+7, r20	; 0x07
    25a4:	58 87       	std	Y+8, r21	; 0x08
    25a6:	f9 e0       	ldi	r31, 0x09	; 9
    25a8:	ef 2e       	mov	r14, r31
    25aa:	f1 2c       	mov	r15, r1
    25ac:	ec 0e       	add	r14, r28
    25ae:	fd 1e       	adc	r15, r29
    25b0:	ce 01       	movw	r24, r28
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	b7 01       	movw	r22, r14
    25b6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    25ba:	8e 01       	movw	r16, r28
    25bc:	0f 5e       	subi	r16, 0xEF	; 239
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	ce 01       	movw	r24, r28
    25c2:	05 96       	adiw	r24, 0x05	; 5
    25c4:	b8 01       	movw	r22, r16
    25c6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    25ca:	c7 01       	movw	r24, r14
    25cc:	b8 01       	movw	r22, r16
    25ce:	ae 01       	movw	r20, r28
    25d0:	47 5e       	subi	r20, 0xE7	; 231
    25d2:	5f 4f       	sbci	r21, 0xFF	; 255
    25d4:	0e 94 48 11 	call	0x2290	; 0x2290 <_fpadd_parts>
    25d8:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__pack_f>
    25dc:	a0 96       	adiw	r28, 0x20	; 32
    25de:	e6 e0       	ldi	r30, 0x06	; 6
    25e0:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__epilogue_restores__+0x18>

000025e4 <__mulsf3>:
    25e4:	a0 e2       	ldi	r26, 0x20	; 32
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e8 ef       	ldi	r30, 0xF8	; 248
    25ea:	f2 e1       	ldi	r31, 0x12	; 18
    25ec:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__prologue_saves__>
    25f0:	69 83       	std	Y+1, r22	; 0x01
    25f2:	7a 83       	std	Y+2, r23	; 0x02
    25f4:	8b 83       	std	Y+3, r24	; 0x03
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	2d 83       	std	Y+5, r18	; 0x05
    25fa:	3e 83       	std	Y+6, r19	; 0x06
    25fc:	4f 83       	std	Y+7, r20	; 0x07
    25fe:	58 87       	std	Y+8, r21	; 0x08
    2600:	ce 01       	movw	r24, r28
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	be 01       	movw	r22, r28
    2606:	67 5f       	subi	r22, 0xF7	; 247
    2608:	7f 4f       	sbci	r23, 0xFF	; 255
    260a:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    260e:	ce 01       	movw	r24, r28
    2610:	05 96       	adiw	r24, 0x05	; 5
    2612:	be 01       	movw	r22, r28
    2614:	6f 5e       	subi	r22, 0xEF	; 239
    2616:	7f 4f       	sbci	r23, 0xFF	; 255
    2618:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    261c:	99 85       	ldd	r25, Y+9	; 0x09
    261e:	92 30       	cpi	r25, 0x02	; 2
    2620:	88 f0       	brcs	.+34     	; 0x2644 <__mulsf3+0x60>
    2622:	89 89       	ldd	r24, Y+17	; 0x11
    2624:	82 30       	cpi	r24, 0x02	; 2
    2626:	c8 f0       	brcs	.+50     	; 0x265a <__mulsf3+0x76>
    2628:	94 30       	cpi	r25, 0x04	; 4
    262a:	19 f4       	brne	.+6      	; 0x2632 <__mulsf3+0x4e>
    262c:	82 30       	cpi	r24, 0x02	; 2
    262e:	51 f4       	brne	.+20     	; 0x2644 <__mulsf3+0x60>
    2630:	04 c0       	rjmp	.+8      	; 0x263a <__mulsf3+0x56>
    2632:	84 30       	cpi	r24, 0x04	; 4
    2634:	29 f4       	brne	.+10     	; 0x2640 <__mulsf3+0x5c>
    2636:	92 30       	cpi	r25, 0x02	; 2
    2638:	81 f4       	brne	.+32     	; 0x265a <__mulsf3+0x76>
    263a:	87 e0       	ldi	r24, 0x07	; 7
    263c:	91 e0       	ldi	r25, 0x01	; 1
    263e:	c6 c0       	rjmp	.+396    	; 0x27cc <__mulsf3+0x1e8>
    2640:	92 30       	cpi	r25, 0x02	; 2
    2642:	49 f4       	brne	.+18     	; 0x2656 <__mulsf3+0x72>
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	9a 85       	ldd	r25, Y+10	; 0x0a
    2648:	8a 89       	ldd	r24, Y+18	; 0x12
    264a:	98 13       	cpse	r25, r24
    264c:	21 e0       	ldi	r18, 0x01	; 1
    264e:	2a 87       	std	Y+10, r18	; 0x0a
    2650:	ce 01       	movw	r24, r28
    2652:	09 96       	adiw	r24, 0x09	; 9
    2654:	bb c0       	rjmp	.+374    	; 0x27cc <__mulsf3+0x1e8>
    2656:	82 30       	cpi	r24, 0x02	; 2
    2658:	49 f4       	brne	.+18     	; 0x266c <__mulsf3+0x88>
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	9a 85       	ldd	r25, Y+10	; 0x0a
    265e:	8a 89       	ldd	r24, Y+18	; 0x12
    2660:	98 13       	cpse	r25, r24
    2662:	21 e0       	ldi	r18, 0x01	; 1
    2664:	2a 8b       	std	Y+18, r18	; 0x12
    2666:	ce 01       	movw	r24, r28
    2668:	41 96       	adiw	r24, 0x11	; 17
    266a:	b0 c0       	rjmp	.+352    	; 0x27cc <__mulsf3+0x1e8>
    266c:	2d 84       	ldd	r2, Y+13	; 0x0d
    266e:	3e 84       	ldd	r3, Y+14	; 0x0e
    2670:	4f 84       	ldd	r4, Y+15	; 0x0f
    2672:	58 88       	ldd	r5, Y+16	; 0x10
    2674:	6d 88       	ldd	r6, Y+21	; 0x15
    2676:	7e 88       	ldd	r7, Y+22	; 0x16
    2678:	8f 88       	ldd	r8, Y+23	; 0x17
    267a:	98 8c       	ldd	r9, Y+24	; 0x18
    267c:	ee 24       	eor	r14, r14
    267e:	ff 24       	eor	r15, r15
    2680:	87 01       	movw	r16, r14
    2682:	aa 24       	eor	r10, r10
    2684:	bb 24       	eor	r11, r11
    2686:	65 01       	movw	r12, r10
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	e0 e0       	ldi	r30, 0x00	; 0
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	c1 01       	movw	r24, r2
    2696:	81 70       	andi	r24, 0x01	; 1
    2698:	90 70       	andi	r25, 0x00	; 0
    269a:	89 2b       	or	r24, r25
    269c:	e9 f0       	breq	.+58     	; 0x26d8 <__mulsf3+0xf4>
    269e:	e6 0c       	add	r14, r6
    26a0:	f7 1c       	adc	r15, r7
    26a2:	08 1d       	adc	r16, r8
    26a4:	19 1d       	adc	r17, r9
    26a6:	9a 01       	movw	r18, r20
    26a8:	ab 01       	movw	r20, r22
    26aa:	2a 0d       	add	r18, r10
    26ac:	3b 1d       	adc	r19, r11
    26ae:	4c 1d       	adc	r20, r12
    26b0:	5d 1d       	adc	r21, r13
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a0 e0       	ldi	r26, 0x00	; 0
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e6 14       	cp	r14, r6
    26bc:	f7 04       	cpc	r15, r7
    26be:	08 05       	cpc	r16, r8
    26c0:	19 05       	cpc	r17, r9
    26c2:	20 f4       	brcc	.+8      	; 0x26cc <__mulsf3+0xe8>
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a0 e0       	ldi	r26, 0x00	; 0
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	ba 01       	movw	r22, r20
    26ce:	a9 01       	movw	r20, r18
    26d0:	48 0f       	add	r20, r24
    26d2:	59 1f       	adc	r21, r25
    26d4:	6a 1f       	adc	r22, r26
    26d6:	7b 1f       	adc	r23, r27
    26d8:	aa 0c       	add	r10, r10
    26da:	bb 1c       	adc	r11, r11
    26dc:	cc 1c       	adc	r12, r12
    26de:	dd 1c       	adc	r13, r13
    26e0:	97 fe       	sbrs	r9, 7
    26e2:	08 c0       	rjmp	.+16     	; 0x26f4 <__mulsf3+0x110>
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 e0       	ldi	r26, 0x00	; 0
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	a8 2a       	or	r10, r24
    26ee:	b9 2a       	or	r11, r25
    26f0:	ca 2a       	or	r12, r26
    26f2:	db 2a       	or	r13, r27
    26f4:	31 96       	adiw	r30, 0x01	; 1
    26f6:	e0 32       	cpi	r30, 0x20	; 32
    26f8:	f1 05       	cpc	r31, r1
    26fa:	49 f0       	breq	.+18     	; 0x270e <__mulsf3+0x12a>
    26fc:	66 0c       	add	r6, r6
    26fe:	77 1c       	adc	r7, r7
    2700:	88 1c       	adc	r8, r8
    2702:	99 1c       	adc	r9, r9
    2704:	56 94       	lsr	r5
    2706:	47 94       	ror	r4
    2708:	37 94       	ror	r3
    270a:	27 94       	ror	r2
    270c:	c3 cf       	rjmp	.-122    	; 0x2694 <__mulsf3+0xb0>
    270e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2710:	ea 89       	ldd	r30, Y+18	; 0x12
    2712:	2b 89       	ldd	r18, Y+19	; 0x13
    2714:	3c 89       	ldd	r19, Y+20	; 0x14
    2716:	8b 85       	ldd	r24, Y+11	; 0x0b
    2718:	9c 85       	ldd	r25, Y+12	; 0x0c
    271a:	28 0f       	add	r18, r24
    271c:	39 1f       	adc	r19, r25
    271e:	2e 5f       	subi	r18, 0xFE	; 254
    2720:	3f 4f       	sbci	r19, 0xFF	; 255
    2722:	17 c0       	rjmp	.+46     	; 0x2752 <__mulsf3+0x16e>
    2724:	ca 01       	movw	r24, r20
    2726:	81 70       	andi	r24, 0x01	; 1
    2728:	90 70       	andi	r25, 0x00	; 0
    272a:	89 2b       	or	r24, r25
    272c:	61 f0       	breq	.+24     	; 0x2746 <__mulsf3+0x162>
    272e:	16 95       	lsr	r17
    2730:	07 95       	ror	r16
    2732:	f7 94       	ror	r15
    2734:	e7 94       	ror	r14
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	a0 e0       	ldi	r26, 0x00	; 0
    273c:	b0 e8       	ldi	r27, 0x80	; 128
    273e:	e8 2a       	or	r14, r24
    2740:	f9 2a       	or	r15, r25
    2742:	0a 2b       	or	r16, r26
    2744:	1b 2b       	or	r17, r27
    2746:	76 95       	lsr	r23
    2748:	67 95       	ror	r22
    274a:	57 95       	ror	r21
    274c:	47 95       	ror	r20
    274e:	2f 5f       	subi	r18, 0xFF	; 255
    2750:	3f 4f       	sbci	r19, 0xFF	; 255
    2752:	77 fd       	sbrc	r23, 7
    2754:	e7 cf       	rjmp	.-50     	; 0x2724 <__mulsf3+0x140>
    2756:	0c c0       	rjmp	.+24     	; 0x2770 <__mulsf3+0x18c>
    2758:	44 0f       	add	r20, r20
    275a:	55 1f       	adc	r21, r21
    275c:	66 1f       	adc	r22, r22
    275e:	77 1f       	adc	r23, r23
    2760:	17 fd       	sbrc	r17, 7
    2762:	41 60       	ori	r20, 0x01	; 1
    2764:	ee 0c       	add	r14, r14
    2766:	ff 1c       	adc	r15, r15
    2768:	00 1f       	adc	r16, r16
    276a:	11 1f       	adc	r17, r17
    276c:	21 50       	subi	r18, 0x01	; 1
    276e:	30 40       	sbci	r19, 0x00	; 0
    2770:	40 30       	cpi	r20, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	59 07       	cpc	r21, r25
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	69 07       	cpc	r22, r25
    277a:	90 e4       	ldi	r25, 0x40	; 64
    277c:	79 07       	cpc	r23, r25
    277e:	60 f3       	brcs	.-40     	; 0x2758 <__mulsf3+0x174>
    2780:	2b 8f       	std	Y+27, r18	; 0x1b
    2782:	3c 8f       	std	Y+28, r19	; 0x1c
    2784:	db 01       	movw	r26, r22
    2786:	ca 01       	movw	r24, r20
    2788:	8f 77       	andi	r24, 0x7F	; 127
    278a:	90 70       	andi	r25, 0x00	; 0
    278c:	a0 70       	andi	r26, 0x00	; 0
    278e:	b0 70       	andi	r27, 0x00	; 0
    2790:	80 34       	cpi	r24, 0x40	; 64
    2792:	91 05       	cpc	r25, r1
    2794:	a1 05       	cpc	r26, r1
    2796:	b1 05       	cpc	r27, r1
    2798:	61 f4       	brne	.+24     	; 0x27b2 <__mulsf3+0x1ce>
    279a:	47 fd       	sbrc	r20, 7
    279c:	0a c0       	rjmp	.+20     	; 0x27b2 <__mulsf3+0x1ce>
    279e:	e1 14       	cp	r14, r1
    27a0:	f1 04       	cpc	r15, r1
    27a2:	01 05       	cpc	r16, r1
    27a4:	11 05       	cpc	r17, r1
    27a6:	29 f0       	breq	.+10     	; 0x27b2 <__mulsf3+0x1ce>
    27a8:	40 5c       	subi	r20, 0xC0	; 192
    27aa:	5f 4f       	sbci	r21, 0xFF	; 255
    27ac:	6f 4f       	sbci	r22, 0xFF	; 255
    27ae:	7f 4f       	sbci	r23, 0xFF	; 255
    27b0:	40 78       	andi	r20, 0x80	; 128
    27b2:	1a 8e       	std	Y+26, r1	; 0x1a
    27b4:	fe 17       	cp	r31, r30
    27b6:	11 f0       	breq	.+4      	; 0x27bc <__mulsf3+0x1d8>
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	8a 8f       	std	Y+26, r24	; 0x1a
    27bc:	4d 8f       	std	Y+29, r20	; 0x1d
    27be:	5e 8f       	std	Y+30, r21	; 0x1e
    27c0:	6f 8f       	std	Y+31, r22	; 0x1f
    27c2:	78 a3       	std	Y+32, r23	; 0x20
    27c4:	83 e0       	ldi	r24, 0x03	; 3
    27c6:	89 8f       	std	Y+25, r24	; 0x19
    27c8:	ce 01       	movw	r24, r28
    27ca:	49 96       	adiw	r24, 0x19	; 25
    27cc:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__pack_f>
    27d0:	a0 96       	adiw	r28, 0x20	; 32
    27d2:	e2 e1       	ldi	r30, 0x12	; 18
    27d4:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__epilogue_restores__>

000027d8 <__divsf3>:
    27d8:	a8 e1       	ldi	r26, 0x18	; 24
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	e2 ef       	ldi	r30, 0xF2	; 242
    27de:	f3 e1       	ldi	r31, 0x13	; 19
    27e0:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__prologue_saves__+0x10>
    27e4:	69 83       	std	Y+1, r22	; 0x01
    27e6:	7a 83       	std	Y+2, r23	; 0x02
    27e8:	8b 83       	std	Y+3, r24	; 0x03
    27ea:	9c 83       	std	Y+4, r25	; 0x04
    27ec:	2d 83       	std	Y+5, r18	; 0x05
    27ee:	3e 83       	std	Y+6, r19	; 0x06
    27f0:	4f 83       	std	Y+7, r20	; 0x07
    27f2:	58 87       	std	Y+8, r21	; 0x08
    27f4:	b9 e0       	ldi	r27, 0x09	; 9
    27f6:	eb 2e       	mov	r14, r27
    27f8:	f1 2c       	mov	r15, r1
    27fa:	ec 0e       	add	r14, r28
    27fc:	fd 1e       	adc	r15, r29
    27fe:	ce 01       	movw	r24, r28
    2800:	01 96       	adiw	r24, 0x01	; 1
    2802:	b7 01       	movw	r22, r14
    2804:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    2808:	8e 01       	movw	r16, r28
    280a:	0f 5e       	subi	r16, 0xEF	; 239
    280c:	1f 4f       	sbci	r17, 0xFF	; 255
    280e:	ce 01       	movw	r24, r28
    2810:	05 96       	adiw	r24, 0x05	; 5
    2812:	b8 01       	movw	r22, r16
    2814:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    2818:	29 85       	ldd	r18, Y+9	; 0x09
    281a:	22 30       	cpi	r18, 0x02	; 2
    281c:	08 f4       	brcc	.+2      	; 0x2820 <__divsf3+0x48>
    281e:	7e c0       	rjmp	.+252    	; 0x291c <__divsf3+0x144>
    2820:	39 89       	ldd	r19, Y+17	; 0x11
    2822:	32 30       	cpi	r19, 0x02	; 2
    2824:	10 f4       	brcc	.+4      	; 0x282a <__divsf3+0x52>
    2826:	b8 01       	movw	r22, r16
    2828:	7c c0       	rjmp	.+248    	; 0x2922 <__divsf3+0x14a>
    282a:	8a 85       	ldd	r24, Y+10	; 0x0a
    282c:	9a 89       	ldd	r25, Y+18	; 0x12
    282e:	89 27       	eor	r24, r25
    2830:	8a 87       	std	Y+10, r24	; 0x0a
    2832:	24 30       	cpi	r18, 0x04	; 4
    2834:	11 f0       	breq	.+4      	; 0x283a <__divsf3+0x62>
    2836:	22 30       	cpi	r18, 0x02	; 2
    2838:	31 f4       	brne	.+12     	; 0x2846 <__divsf3+0x6e>
    283a:	23 17       	cp	r18, r19
    283c:	09 f0       	breq	.+2      	; 0x2840 <__divsf3+0x68>
    283e:	6e c0       	rjmp	.+220    	; 0x291c <__divsf3+0x144>
    2840:	67 e0       	ldi	r22, 0x07	; 7
    2842:	71 e0       	ldi	r23, 0x01	; 1
    2844:	6e c0       	rjmp	.+220    	; 0x2922 <__divsf3+0x14a>
    2846:	34 30       	cpi	r19, 0x04	; 4
    2848:	39 f4       	brne	.+14     	; 0x2858 <__divsf3+0x80>
    284a:	1d 86       	std	Y+13, r1	; 0x0d
    284c:	1e 86       	std	Y+14, r1	; 0x0e
    284e:	1f 86       	std	Y+15, r1	; 0x0f
    2850:	18 8a       	std	Y+16, r1	; 0x10
    2852:	1c 86       	std	Y+12, r1	; 0x0c
    2854:	1b 86       	std	Y+11, r1	; 0x0b
    2856:	04 c0       	rjmp	.+8      	; 0x2860 <__divsf3+0x88>
    2858:	32 30       	cpi	r19, 0x02	; 2
    285a:	21 f4       	brne	.+8      	; 0x2864 <__divsf3+0x8c>
    285c:	84 e0       	ldi	r24, 0x04	; 4
    285e:	89 87       	std	Y+9, r24	; 0x09
    2860:	b7 01       	movw	r22, r14
    2862:	5f c0       	rjmp	.+190    	; 0x2922 <__divsf3+0x14a>
    2864:	2b 85       	ldd	r18, Y+11	; 0x0b
    2866:	3c 85       	ldd	r19, Y+12	; 0x0c
    2868:	8b 89       	ldd	r24, Y+19	; 0x13
    286a:	9c 89       	ldd	r25, Y+20	; 0x14
    286c:	28 1b       	sub	r18, r24
    286e:	39 0b       	sbc	r19, r25
    2870:	3c 87       	std	Y+12, r19	; 0x0c
    2872:	2b 87       	std	Y+11, r18	; 0x0b
    2874:	ed 84       	ldd	r14, Y+13	; 0x0d
    2876:	fe 84       	ldd	r15, Y+14	; 0x0e
    2878:	0f 85       	ldd	r16, Y+15	; 0x0f
    287a:	18 89       	ldd	r17, Y+16	; 0x10
    287c:	ad 88       	ldd	r10, Y+21	; 0x15
    287e:	be 88       	ldd	r11, Y+22	; 0x16
    2880:	cf 88       	ldd	r12, Y+23	; 0x17
    2882:	d8 8c       	ldd	r13, Y+24	; 0x18
    2884:	ea 14       	cp	r14, r10
    2886:	fb 04       	cpc	r15, r11
    2888:	0c 05       	cpc	r16, r12
    288a:	1d 05       	cpc	r17, r13
    288c:	40 f4       	brcc	.+16     	; 0x289e <__divsf3+0xc6>
    288e:	ee 0c       	add	r14, r14
    2890:	ff 1c       	adc	r15, r15
    2892:	00 1f       	adc	r16, r16
    2894:	11 1f       	adc	r17, r17
    2896:	21 50       	subi	r18, 0x01	; 1
    2898:	30 40       	sbci	r19, 0x00	; 0
    289a:	3c 87       	std	Y+12, r19	; 0x0c
    289c:	2b 87       	std	Y+11, r18	; 0x0b
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	50 e0       	ldi	r21, 0x00	; 0
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	a0 e0       	ldi	r26, 0x00	; 0
    28ac:	b0 e4       	ldi	r27, 0x40	; 64
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	70 e0       	ldi	r23, 0x00	; 0
    28b2:	ea 14       	cp	r14, r10
    28b4:	fb 04       	cpc	r15, r11
    28b6:	0c 05       	cpc	r16, r12
    28b8:	1d 05       	cpc	r17, r13
    28ba:	40 f0       	brcs	.+16     	; 0x28cc <__divsf3+0xf4>
    28bc:	28 2b       	or	r18, r24
    28be:	39 2b       	or	r19, r25
    28c0:	4a 2b       	or	r20, r26
    28c2:	5b 2b       	or	r21, r27
    28c4:	ea 18       	sub	r14, r10
    28c6:	fb 08       	sbc	r15, r11
    28c8:	0c 09       	sbc	r16, r12
    28ca:	1d 09       	sbc	r17, r13
    28cc:	b6 95       	lsr	r27
    28ce:	a7 95       	ror	r26
    28d0:	97 95       	ror	r25
    28d2:	87 95       	ror	r24
    28d4:	ee 0c       	add	r14, r14
    28d6:	ff 1c       	adc	r15, r15
    28d8:	00 1f       	adc	r16, r16
    28da:	11 1f       	adc	r17, r17
    28dc:	6f 5f       	subi	r22, 0xFF	; 255
    28de:	7f 4f       	sbci	r23, 0xFF	; 255
    28e0:	6f 31       	cpi	r22, 0x1F	; 31
    28e2:	71 05       	cpc	r23, r1
    28e4:	31 f7       	brne	.-52     	; 0x28b2 <__divsf3+0xda>
    28e6:	da 01       	movw	r26, r20
    28e8:	c9 01       	movw	r24, r18
    28ea:	8f 77       	andi	r24, 0x7F	; 127
    28ec:	90 70       	andi	r25, 0x00	; 0
    28ee:	a0 70       	andi	r26, 0x00	; 0
    28f0:	b0 70       	andi	r27, 0x00	; 0
    28f2:	80 34       	cpi	r24, 0x40	; 64
    28f4:	91 05       	cpc	r25, r1
    28f6:	a1 05       	cpc	r26, r1
    28f8:	b1 05       	cpc	r27, r1
    28fa:	61 f4       	brne	.+24     	; 0x2914 <__divsf3+0x13c>
    28fc:	27 fd       	sbrc	r18, 7
    28fe:	0a c0       	rjmp	.+20     	; 0x2914 <__divsf3+0x13c>
    2900:	e1 14       	cp	r14, r1
    2902:	f1 04       	cpc	r15, r1
    2904:	01 05       	cpc	r16, r1
    2906:	11 05       	cpc	r17, r1
    2908:	29 f0       	breq	.+10     	; 0x2914 <__divsf3+0x13c>
    290a:	20 5c       	subi	r18, 0xC0	; 192
    290c:	3f 4f       	sbci	r19, 0xFF	; 255
    290e:	4f 4f       	sbci	r20, 0xFF	; 255
    2910:	5f 4f       	sbci	r21, 0xFF	; 255
    2912:	20 78       	andi	r18, 0x80	; 128
    2914:	2d 87       	std	Y+13, r18	; 0x0d
    2916:	3e 87       	std	Y+14, r19	; 0x0e
    2918:	4f 87       	std	Y+15, r20	; 0x0f
    291a:	58 8b       	std	Y+16, r21	; 0x10
    291c:	be 01       	movw	r22, r28
    291e:	67 5f       	subi	r22, 0xF7	; 247
    2920:	7f 4f       	sbci	r23, 0xFF	; 255
    2922:	cb 01       	movw	r24, r22
    2924:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__pack_f>
    2928:	68 96       	adiw	r28, 0x18	; 24
    292a:	ea e0       	ldi	r30, 0x0A	; 10
    292c:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__epilogue_restores__+0x10>

00002930 <__eqsf2>:
    2930:	a8 e1       	ldi	r26, 0x18	; 24
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	ee e9       	ldi	r30, 0x9E	; 158
    2936:	f4 e1       	ldi	r31, 0x14	; 20
    2938:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__prologue_saves__+0x18>
    293c:	69 83       	std	Y+1, r22	; 0x01
    293e:	7a 83       	std	Y+2, r23	; 0x02
    2940:	8b 83       	std	Y+3, r24	; 0x03
    2942:	9c 83       	std	Y+4, r25	; 0x04
    2944:	2d 83       	std	Y+5, r18	; 0x05
    2946:	3e 83       	std	Y+6, r19	; 0x06
    2948:	4f 83       	std	Y+7, r20	; 0x07
    294a:	58 87       	std	Y+8, r21	; 0x08
    294c:	89 e0       	ldi	r24, 0x09	; 9
    294e:	e8 2e       	mov	r14, r24
    2950:	f1 2c       	mov	r15, r1
    2952:	ec 0e       	add	r14, r28
    2954:	fd 1e       	adc	r15, r29
    2956:	ce 01       	movw	r24, r28
    2958:	01 96       	adiw	r24, 0x01	; 1
    295a:	b7 01       	movw	r22, r14
    295c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    2960:	8e 01       	movw	r16, r28
    2962:	0f 5e       	subi	r16, 0xEF	; 239
    2964:	1f 4f       	sbci	r17, 0xFF	; 255
    2966:	ce 01       	movw	r24, r28
    2968:	05 96       	adiw	r24, 0x05	; 5
    296a:	b8 01       	movw	r22, r16
    296c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	82 30       	cpi	r24, 0x02	; 2
    2974:	40 f0       	brcs	.+16     	; 0x2986 <__eqsf2+0x56>
    2976:	89 89       	ldd	r24, Y+17	; 0x11
    2978:	82 30       	cpi	r24, 0x02	; 2
    297a:	28 f0       	brcs	.+10     	; 0x2986 <__eqsf2+0x56>
    297c:	c7 01       	movw	r24, r14
    297e:	b8 01       	movw	r22, r16
    2980:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__fpcmp_parts_f>
    2984:	01 c0       	rjmp	.+2      	; 0x2988 <__eqsf2+0x58>
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	68 96       	adiw	r28, 0x18	; 24
    298a:	e6 e0       	ldi	r30, 0x06	; 6
    298c:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__epilogue_restores__+0x18>

00002990 <__gtsf2>:
    2990:	a8 e1       	ldi	r26, 0x18	; 24
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	ee ec       	ldi	r30, 0xCE	; 206
    2996:	f4 e1       	ldi	r31, 0x14	; 20
    2998:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__prologue_saves__+0x18>
    299c:	69 83       	std	Y+1, r22	; 0x01
    299e:	7a 83       	std	Y+2, r23	; 0x02
    29a0:	8b 83       	std	Y+3, r24	; 0x03
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	2d 83       	std	Y+5, r18	; 0x05
    29a6:	3e 83       	std	Y+6, r19	; 0x06
    29a8:	4f 83       	std	Y+7, r20	; 0x07
    29aa:	58 87       	std	Y+8, r21	; 0x08
    29ac:	89 e0       	ldi	r24, 0x09	; 9
    29ae:	e8 2e       	mov	r14, r24
    29b0:	f1 2c       	mov	r15, r1
    29b2:	ec 0e       	add	r14, r28
    29b4:	fd 1e       	adc	r15, r29
    29b6:	ce 01       	movw	r24, r28
    29b8:	01 96       	adiw	r24, 0x01	; 1
    29ba:	b7 01       	movw	r22, r14
    29bc:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    29c0:	8e 01       	movw	r16, r28
    29c2:	0f 5e       	subi	r16, 0xEF	; 239
    29c4:	1f 4f       	sbci	r17, 0xFF	; 255
    29c6:	ce 01       	movw	r24, r28
    29c8:	05 96       	adiw	r24, 0x05	; 5
    29ca:	b8 01       	movw	r22, r16
    29cc:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    29d0:	89 85       	ldd	r24, Y+9	; 0x09
    29d2:	82 30       	cpi	r24, 0x02	; 2
    29d4:	40 f0       	brcs	.+16     	; 0x29e6 <__gtsf2+0x56>
    29d6:	89 89       	ldd	r24, Y+17	; 0x11
    29d8:	82 30       	cpi	r24, 0x02	; 2
    29da:	28 f0       	brcs	.+10     	; 0x29e6 <__gtsf2+0x56>
    29dc:	c7 01       	movw	r24, r14
    29de:	b8 01       	movw	r22, r16
    29e0:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__fpcmp_parts_f>
    29e4:	01 c0       	rjmp	.+2      	; 0x29e8 <__gtsf2+0x58>
    29e6:	8f ef       	ldi	r24, 0xFF	; 255
    29e8:	68 96       	adiw	r28, 0x18	; 24
    29ea:	e6 e0       	ldi	r30, 0x06	; 6
    29ec:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__epilogue_restores__+0x18>

000029f0 <__gesf2>:
    29f0:	a8 e1       	ldi	r26, 0x18	; 24
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	ee ef       	ldi	r30, 0xFE	; 254
    29f6:	f4 e1       	ldi	r31, 0x14	; 20
    29f8:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__prologue_saves__+0x18>
    29fc:	69 83       	std	Y+1, r22	; 0x01
    29fe:	7a 83       	std	Y+2, r23	; 0x02
    2a00:	8b 83       	std	Y+3, r24	; 0x03
    2a02:	9c 83       	std	Y+4, r25	; 0x04
    2a04:	2d 83       	std	Y+5, r18	; 0x05
    2a06:	3e 83       	std	Y+6, r19	; 0x06
    2a08:	4f 83       	std	Y+7, r20	; 0x07
    2a0a:	58 87       	std	Y+8, r21	; 0x08
    2a0c:	89 e0       	ldi	r24, 0x09	; 9
    2a0e:	e8 2e       	mov	r14, r24
    2a10:	f1 2c       	mov	r15, r1
    2a12:	ec 0e       	add	r14, r28
    2a14:	fd 1e       	adc	r15, r29
    2a16:	ce 01       	movw	r24, r28
    2a18:	01 96       	adiw	r24, 0x01	; 1
    2a1a:	b7 01       	movw	r22, r14
    2a1c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    2a20:	8e 01       	movw	r16, r28
    2a22:	0f 5e       	subi	r16, 0xEF	; 239
    2a24:	1f 4f       	sbci	r17, 0xFF	; 255
    2a26:	ce 01       	movw	r24, r28
    2a28:	05 96       	adiw	r24, 0x05	; 5
    2a2a:	b8 01       	movw	r22, r16
    2a2c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    2a30:	89 85       	ldd	r24, Y+9	; 0x09
    2a32:	82 30       	cpi	r24, 0x02	; 2
    2a34:	40 f0       	brcs	.+16     	; 0x2a46 <__gesf2+0x56>
    2a36:	89 89       	ldd	r24, Y+17	; 0x11
    2a38:	82 30       	cpi	r24, 0x02	; 2
    2a3a:	28 f0       	brcs	.+10     	; 0x2a46 <__gesf2+0x56>
    2a3c:	c7 01       	movw	r24, r14
    2a3e:	b8 01       	movw	r22, r16
    2a40:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__fpcmp_parts_f>
    2a44:	01 c0       	rjmp	.+2      	; 0x2a48 <__gesf2+0x58>
    2a46:	8f ef       	ldi	r24, 0xFF	; 255
    2a48:	68 96       	adiw	r28, 0x18	; 24
    2a4a:	e6 e0       	ldi	r30, 0x06	; 6
    2a4c:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__epilogue_restores__+0x18>

00002a50 <__fixsfsi>:
    2a50:	ac e0       	ldi	r26, 0x0C	; 12
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	ee e2       	ldi	r30, 0x2E	; 46
    2a56:	f5 e1       	ldi	r31, 0x15	; 21
    2a58:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x20>
    2a5c:	69 83       	std	Y+1, r22	; 0x01
    2a5e:	7a 83       	std	Y+2, r23	; 0x02
    2a60:	8b 83       	std	Y+3, r24	; 0x03
    2a62:	9c 83       	std	Y+4, r25	; 0x04
    2a64:	ce 01       	movw	r24, r28
    2a66:	01 96       	adiw	r24, 0x01	; 1
    2a68:	be 01       	movw	r22, r28
    2a6a:	6b 5f       	subi	r22, 0xFB	; 251
    2a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6e:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__unpack_f>
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	82 30       	cpi	r24, 0x02	; 2
    2a76:	61 f1       	breq	.+88     	; 0x2ad0 <__fixsfsi+0x80>
    2a78:	82 30       	cpi	r24, 0x02	; 2
    2a7a:	50 f1       	brcs	.+84     	; 0x2ad0 <__fixsfsi+0x80>
    2a7c:	84 30       	cpi	r24, 0x04	; 4
    2a7e:	21 f4       	brne	.+8      	; 0x2a88 <__fixsfsi+0x38>
    2a80:	8e 81       	ldd	r24, Y+6	; 0x06
    2a82:	88 23       	and	r24, r24
    2a84:	51 f1       	breq	.+84     	; 0x2ada <__fixsfsi+0x8a>
    2a86:	2e c0       	rjmp	.+92     	; 0x2ae4 <__fixsfsi+0x94>
    2a88:	2f 81       	ldd	r18, Y+7	; 0x07
    2a8a:	38 85       	ldd	r19, Y+8	; 0x08
    2a8c:	37 fd       	sbrc	r19, 7
    2a8e:	20 c0       	rjmp	.+64     	; 0x2ad0 <__fixsfsi+0x80>
    2a90:	6e 81       	ldd	r22, Y+6	; 0x06
    2a92:	2f 31       	cpi	r18, 0x1F	; 31
    2a94:	31 05       	cpc	r19, r1
    2a96:	1c f0       	brlt	.+6      	; 0x2a9e <__fixsfsi+0x4e>
    2a98:	66 23       	and	r22, r22
    2a9a:	f9 f0       	breq	.+62     	; 0x2ada <__fixsfsi+0x8a>
    2a9c:	23 c0       	rjmp	.+70     	; 0x2ae4 <__fixsfsi+0x94>
    2a9e:	8e e1       	ldi	r24, 0x1E	; 30
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	82 1b       	sub	r24, r18
    2aa4:	93 0b       	sbc	r25, r19
    2aa6:	29 85       	ldd	r18, Y+9	; 0x09
    2aa8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2aaa:	4b 85       	ldd	r20, Y+11	; 0x0b
    2aac:	5c 85       	ldd	r21, Y+12	; 0x0c
    2aae:	04 c0       	rjmp	.+8      	; 0x2ab8 <__fixsfsi+0x68>
    2ab0:	56 95       	lsr	r21
    2ab2:	47 95       	ror	r20
    2ab4:	37 95       	ror	r19
    2ab6:	27 95       	ror	r18
    2ab8:	8a 95       	dec	r24
    2aba:	d2 f7       	brpl	.-12     	; 0x2ab0 <__fixsfsi+0x60>
    2abc:	66 23       	and	r22, r22
    2abe:	b1 f0       	breq	.+44     	; 0x2aec <__fixsfsi+0x9c>
    2ac0:	50 95       	com	r21
    2ac2:	40 95       	com	r20
    2ac4:	30 95       	com	r19
    2ac6:	21 95       	neg	r18
    2ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aca:	4f 4f       	sbci	r20, 0xFF	; 255
    2acc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ace:	0e c0       	rjmp	.+28     	; 0x2aec <__fixsfsi+0x9c>
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e0       	ldi	r20, 0x00	; 0
    2ad6:	50 e0       	ldi	r21, 0x00	; 0
    2ad8:	09 c0       	rjmp	.+18     	; 0x2aec <__fixsfsi+0x9c>
    2ada:	2f ef       	ldi	r18, 0xFF	; 255
    2adc:	3f ef       	ldi	r19, 0xFF	; 255
    2ade:	4f ef       	ldi	r20, 0xFF	; 255
    2ae0:	5f e7       	ldi	r21, 0x7F	; 127
    2ae2:	04 c0       	rjmp	.+8      	; 0x2aec <__fixsfsi+0x9c>
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	50 e8       	ldi	r21, 0x80	; 128
    2aec:	b9 01       	movw	r22, r18
    2aee:	ca 01       	movw	r24, r20
    2af0:	2c 96       	adiw	r28, 0x0c	; 12
    2af2:	e2 e0       	ldi	r30, 0x02	; 2
    2af4:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x20>

00002af8 <__floatunsisf>:
    2af8:	a8 e0       	ldi	r26, 0x08	; 8
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	e2 e8       	ldi	r30, 0x82	; 130
    2afe:	f5 e1       	ldi	r31, 0x15	; 21
    2b00:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__prologue_saves__+0x10>
    2b04:	7b 01       	movw	r14, r22
    2b06:	8c 01       	movw	r16, r24
    2b08:	61 15       	cp	r22, r1
    2b0a:	71 05       	cpc	r23, r1
    2b0c:	81 05       	cpc	r24, r1
    2b0e:	91 05       	cpc	r25, r1
    2b10:	19 f4       	brne	.+6      	; 0x2b18 <__floatunsisf+0x20>
    2b12:	82 e0       	ldi	r24, 0x02	; 2
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	60 c0       	rjmp	.+192    	; 0x2bd8 <__floatunsisf+0xe0>
    2b18:	83 e0       	ldi	r24, 0x03	; 3
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	8e e1       	ldi	r24, 0x1E	; 30
    2b1e:	c8 2e       	mov	r12, r24
    2b20:	d1 2c       	mov	r13, r1
    2b22:	dc 82       	std	Y+4, r13	; 0x04
    2b24:	cb 82       	std	Y+3, r12	; 0x03
    2b26:	ed 82       	std	Y+5, r14	; 0x05
    2b28:	fe 82       	std	Y+6, r15	; 0x06
    2b2a:	0f 83       	std	Y+7, r16	; 0x07
    2b2c:	18 87       	std	Y+8, r17	; 0x08
    2b2e:	c8 01       	movw	r24, r16
    2b30:	b7 01       	movw	r22, r14
    2b32:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__clzsi2>
    2b36:	fc 01       	movw	r30, r24
    2b38:	31 97       	sbiw	r30, 0x01	; 1
    2b3a:	f7 ff       	sbrs	r31, 7
    2b3c:	3b c0       	rjmp	.+118    	; 0x2bb4 <__floatunsisf+0xbc>
    2b3e:	22 27       	eor	r18, r18
    2b40:	33 27       	eor	r19, r19
    2b42:	2e 1b       	sub	r18, r30
    2b44:	3f 0b       	sbc	r19, r31
    2b46:	57 01       	movw	r10, r14
    2b48:	68 01       	movw	r12, r16
    2b4a:	02 2e       	mov	r0, r18
    2b4c:	04 c0       	rjmp	.+8      	; 0x2b56 <__floatunsisf+0x5e>
    2b4e:	d6 94       	lsr	r13
    2b50:	c7 94       	ror	r12
    2b52:	b7 94       	ror	r11
    2b54:	a7 94       	ror	r10
    2b56:	0a 94       	dec	r0
    2b58:	d2 f7       	brpl	.-12     	; 0x2b4e <__floatunsisf+0x56>
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	a0 e0       	ldi	r26, 0x00	; 0
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	04 c0       	rjmp	.+8      	; 0x2b74 <__floatunsisf+0x7c>
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	aa 1f       	adc	r26, r26
    2b72:	bb 1f       	adc	r27, r27
    2b74:	2a 95       	dec	r18
    2b76:	d2 f7       	brpl	.-12     	; 0x2b6c <__floatunsisf+0x74>
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	a1 09       	sbc	r26, r1
    2b7c:	b1 09       	sbc	r27, r1
    2b7e:	8e 21       	and	r24, r14
    2b80:	9f 21       	and	r25, r15
    2b82:	a0 23       	and	r26, r16
    2b84:	b1 23       	and	r27, r17
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	a1 05       	cpc	r26, r1
    2b8a:	b1 05       	cpc	r27, r1
    2b8c:	21 f0       	breq	.+8      	; 0x2b96 <__floatunsisf+0x9e>
    2b8e:	41 e0       	ldi	r20, 0x01	; 1
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	60 e0       	ldi	r22, 0x00	; 0
    2b94:	70 e0       	ldi	r23, 0x00	; 0
    2b96:	4a 29       	or	r20, r10
    2b98:	5b 29       	or	r21, r11
    2b9a:	6c 29       	or	r22, r12
    2b9c:	7d 29       	or	r23, r13
    2b9e:	4d 83       	std	Y+5, r20	; 0x05
    2ba0:	5e 83       	std	Y+6, r21	; 0x06
    2ba2:	6f 83       	std	Y+7, r22	; 0x07
    2ba4:	78 87       	std	Y+8, r23	; 0x08
    2ba6:	8e e1       	ldi	r24, 0x1E	; 30
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	8e 1b       	sub	r24, r30
    2bac:	9f 0b       	sbc	r25, r31
    2bae:	9c 83       	std	Y+4, r25	; 0x04
    2bb0:	8b 83       	std	Y+3, r24	; 0x03
    2bb2:	12 c0       	rjmp	.+36     	; 0x2bd8 <__floatunsisf+0xe0>
    2bb4:	30 97       	sbiw	r30, 0x00	; 0
    2bb6:	81 f0       	breq	.+32     	; 0x2bd8 <__floatunsisf+0xe0>
    2bb8:	0e 2e       	mov	r0, r30
    2bba:	04 c0       	rjmp	.+8      	; 0x2bc4 <__floatunsisf+0xcc>
    2bbc:	ee 0c       	add	r14, r14
    2bbe:	ff 1c       	adc	r15, r15
    2bc0:	00 1f       	adc	r16, r16
    2bc2:	11 1f       	adc	r17, r17
    2bc4:	0a 94       	dec	r0
    2bc6:	d2 f7       	brpl	.-12     	; 0x2bbc <__floatunsisf+0xc4>
    2bc8:	ed 82       	std	Y+5, r14	; 0x05
    2bca:	fe 82       	std	Y+6, r15	; 0x06
    2bcc:	0f 83       	std	Y+7, r16	; 0x07
    2bce:	18 87       	std	Y+8, r17	; 0x08
    2bd0:	ce 1a       	sub	r12, r30
    2bd2:	df 0a       	sbc	r13, r31
    2bd4:	dc 82       	std	Y+4, r13	; 0x04
    2bd6:	cb 82       	std	Y+3, r12	; 0x03
    2bd8:	1a 82       	std	Y+2, r1	; 0x02
    2bda:	ce 01       	movw	r24, r28
    2bdc:	01 96       	adiw	r24, 0x01	; 1
    2bde:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__pack_f>
    2be2:	28 96       	adiw	r28, 0x08	; 8
    2be4:	ea e0       	ldi	r30, 0x0A	; 10
    2be6:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__epilogue_restores__+0x10>

00002bea <__clzsi2>:
    2bea:	ef 92       	push	r14
    2bec:	ff 92       	push	r15
    2bee:	0f 93       	push	r16
    2bf0:	1f 93       	push	r17
    2bf2:	7b 01       	movw	r14, r22
    2bf4:	8c 01       	movw	r16, r24
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	e8 16       	cp	r14, r24
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	f8 06       	cpc	r15, r24
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	08 07       	cpc	r16, r24
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	18 07       	cpc	r17, r24
    2c06:	88 f4       	brcc	.+34     	; 0x2c2a <__clzsi2+0x40>
    2c08:	8f ef       	ldi	r24, 0xFF	; 255
    2c0a:	e8 16       	cp	r14, r24
    2c0c:	f1 04       	cpc	r15, r1
    2c0e:	01 05       	cpc	r16, r1
    2c10:	11 05       	cpc	r17, r1
    2c12:	31 f0       	breq	.+12     	; 0x2c20 <__clzsi2+0x36>
    2c14:	28 f0       	brcs	.+10     	; 0x2c20 <__clzsi2+0x36>
    2c16:	88 e0       	ldi	r24, 0x08	; 8
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	a0 e0       	ldi	r26, 0x00	; 0
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	17 c0       	rjmp	.+46     	; 0x2c4e <__clzsi2+0x64>
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	a0 e0       	ldi	r26, 0x00	; 0
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	12 c0       	rjmp	.+36     	; 0x2c4e <__clzsi2+0x64>
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	e8 16       	cp	r14, r24
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	f8 06       	cpc	r15, r24
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	08 07       	cpc	r16, r24
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	18 07       	cpc	r17, r24
    2c3a:	28 f0       	brcs	.+10     	; 0x2c46 <__clzsi2+0x5c>
    2c3c:	88 e1       	ldi	r24, 0x18	; 24
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a0 e0       	ldi	r26, 0x00	; 0
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	04 c0       	rjmp	.+8      	; 0x2c4e <__clzsi2+0x64>
    2c46:	80 e1       	ldi	r24, 0x10	; 16
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	a0 e0       	ldi	r26, 0x00	; 0
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	20 e2       	ldi	r18, 0x20	; 32
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	28 1b       	sub	r18, r24
    2c58:	39 0b       	sbc	r19, r25
    2c5a:	4a 0b       	sbc	r20, r26
    2c5c:	5b 0b       	sbc	r21, r27
    2c5e:	04 c0       	rjmp	.+8      	; 0x2c68 <__clzsi2+0x7e>
    2c60:	16 95       	lsr	r17
    2c62:	07 95       	ror	r16
    2c64:	f7 94       	ror	r15
    2c66:	e7 94       	ror	r14
    2c68:	8a 95       	dec	r24
    2c6a:	d2 f7       	brpl	.-12     	; 0x2c60 <__clzsi2+0x76>
    2c6c:	f7 01       	movw	r30, r14
    2c6e:	e1 5f       	subi	r30, 0xF1	; 241
    2c70:	fe 4f       	sbci	r31, 0xFE	; 254
    2c72:	80 81       	ld	r24, Z
    2c74:	28 1b       	sub	r18, r24
    2c76:	31 09       	sbc	r19, r1
    2c78:	41 09       	sbc	r20, r1
    2c7a:	51 09       	sbc	r21, r1
    2c7c:	c9 01       	movw	r24, r18
    2c7e:	1f 91       	pop	r17
    2c80:	0f 91       	pop	r16
    2c82:	ff 90       	pop	r15
    2c84:	ef 90       	pop	r14
    2c86:	08 95       	ret

00002c88 <__pack_f>:
    2c88:	df 92       	push	r13
    2c8a:	ef 92       	push	r14
    2c8c:	ff 92       	push	r15
    2c8e:	0f 93       	push	r16
    2c90:	1f 93       	push	r17
    2c92:	fc 01       	movw	r30, r24
    2c94:	e4 80       	ldd	r14, Z+4	; 0x04
    2c96:	f5 80       	ldd	r15, Z+5	; 0x05
    2c98:	06 81       	ldd	r16, Z+6	; 0x06
    2c9a:	17 81       	ldd	r17, Z+7	; 0x07
    2c9c:	d1 80       	ldd	r13, Z+1	; 0x01
    2c9e:	80 81       	ld	r24, Z
    2ca0:	82 30       	cpi	r24, 0x02	; 2
    2ca2:	48 f4       	brcc	.+18     	; 0x2cb6 <__pack_f+0x2e>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	a0 e1       	ldi	r26, 0x10	; 16
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	e8 2a       	or	r14, r24
    2cae:	f9 2a       	or	r15, r25
    2cb0:	0a 2b       	or	r16, r26
    2cb2:	1b 2b       	or	r17, r27
    2cb4:	a5 c0       	rjmp	.+330    	; 0x2e00 <__pack_f+0x178>
    2cb6:	84 30       	cpi	r24, 0x04	; 4
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <__pack_f+0x34>
    2cba:	9f c0       	rjmp	.+318    	; 0x2dfa <__pack_f+0x172>
    2cbc:	82 30       	cpi	r24, 0x02	; 2
    2cbe:	21 f4       	brne	.+8      	; 0x2cc8 <__pack_f+0x40>
    2cc0:	ee 24       	eor	r14, r14
    2cc2:	ff 24       	eor	r15, r15
    2cc4:	87 01       	movw	r16, r14
    2cc6:	05 c0       	rjmp	.+10     	; 0x2cd2 <__pack_f+0x4a>
    2cc8:	e1 14       	cp	r14, r1
    2cca:	f1 04       	cpc	r15, r1
    2ccc:	01 05       	cpc	r16, r1
    2cce:	11 05       	cpc	r17, r1
    2cd0:	19 f4       	brne	.+6      	; 0x2cd8 <__pack_f+0x50>
    2cd2:	e0 e0       	ldi	r30, 0x00	; 0
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	96 c0       	rjmp	.+300    	; 0x2e04 <__pack_f+0x17c>
    2cd8:	62 81       	ldd	r22, Z+2	; 0x02
    2cda:	73 81       	ldd	r23, Z+3	; 0x03
    2cdc:	9f ef       	ldi	r25, 0xFF	; 255
    2cde:	62 38       	cpi	r22, 0x82	; 130
    2ce0:	79 07       	cpc	r23, r25
    2ce2:	0c f0       	brlt	.+2      	; 0x2ce6 <__pack_f+0x5e>
    2ce4:	5b c0       	rjmp	.+182    	; 0x2d9c <__pack_f+0x114>
    2ce6:	22 e8       	ldi	r18, 0x82	; 130
    2ce8:	3f ef       	ldi	r19, 0xFF	; 255
    2cea:	26 1b       	sub	r18, r22
    2cec:	37 0b       	sbc	r19, r23
    2cee:	2a 31       	cpi	r18, 0x1A	; 26
    2cf0:	31 05       	cpc	r19, r1
    2cf2:	2c f0       	brlt	.+10     	; 0x2cfe <__pack_f+0x76>
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e0       	ldi	r20, 0x00	; 0
    2cfa:	50 e0       	ldi	r21, 0x00	; 0
    2cfc:	2a c0       	rjmp	.+84     	; 0x2d52 <__pack_f+0xca>
    2cfe:	b8 01       	movw	r22, r16
    2d00:	a7 01       	movw	r20, r14
    2d02:	02 2e       	mov	r0, r18
    2d04:	04 c0       	rjmp	.+8      	; 0x2d0e <__pack_f+0x86>
    2d06:	76 95       	lsr	r23
    2d08:	67 95       	ror	r22
    2d0a:	57 95       	ror	r21
    2d0c:	47 95       	ror	r20
    2d0e:	0a 94       	dec	r0
    2d10:	d2 f7       	brpl	.-12     	; 0x2d06 <__pack_f+0x7e>
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	a0 e0       	ldi	r26, 0x00	; 0
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	04 c0       	rjmp	.+8      	; 0x2d24 <__pack_f+0x9c>
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	aa 1f       	adc	r26, r26
    2d22:	bb 1f       	adc	r27, r27
    2d24:	2a 95       	dec	r18
    2d26:	d2 f7       	brpl	.-12     	; 0x2d1c <__pack_f+0x94>
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	a1 09       	sbc	r26, r1
    2d2c:	b1 09       	sbc	r27, r1
    2d2e:	8e 21       	and	r24, r14
    2d30:	9f 21       	and	r25, r15
    2d32:	a0 23       	and	r26, r16
    2d34:	b1 23       	and	r27, r17
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	a1 05       	cpc	r26, r1
    2d3a:	b1 05       	cpc	r27, r1
    2d3c:	21 f0       	breq	.+8      	; 0x2d46 <__pack_f+0xbe>
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	a0 e0       	ldi	r26, 0x00	; 0
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	9a 01       	movw	r18, r20
    2d48:	ab 01       	movw	r20, r22
    2d4a:	28 2b       	or	r18, r24
    2d4c:	39 2b       	or	r19, r25
    2d4e:	4a 2b       	or	r20, r26
    2d50:	5b 2b       	or	r21, r27
    2d52:	da 01       	movw	r26, r20
    2d54:	c9 01       	movw	r24, r18
    2d56:	8f 77       	andi	r24, 0x7F	; 127
    2d58:	90 70       	andi	r25, 0x00	; 0
    2d5a:	a0 70       	andi	r26, 0x00	; 0
    2d5c:	b0 70       	andi	r27, 0x00	; 0
    2d5e:	80 34       	cpi	r24, 0x40	; 64
    2d60:	91 05       	cpc	r25, r1
    2d62:	a1 05       	cpc	r26, r1
    2d64:	b1 05       	cpc	r27, r1
    2d66:	39 f4       	brne	.+14     	; 0x2d76 <__pack_f+0xee>
    2d68:	27 ff       	sbrs	r18, 7
    2d6a:	09 c0       	rjmp	.+18     	; 0x2d7e <__pack_f+0xf6>
    2d6c:	20 5c       	subi	r18, 0xC0	; 192
    2d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d70:	4f 4f       	sbci	r20, 0xFF	; 255
    2d72:	5f 4f       	sbci	r21, 0xFF	; 255
    2d74:	04 c0       	rjmp	.+8      	; 0x2d7e <__pack_f+0xf6>
    2d76:	21 5c       	subi	r18, 0xC1	; 193
    2d78:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7a:	4f 4f       	sbci	r20, 0xFF	; 255
    2d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d7e:	e0 e0       	ldi	r30, 0x00	; 0
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	20 30       	cpi	r18, 0x00	; 0
    2d84:	a0 e0       	ldi	r26, 0x00	; 0
    2d86:	3a 07       	cpc	r19, r26
    2d88:	a0 e0       	ldi	r26, 0x00	; 0
    2d8a:	4a 07       	cpc	r20, r26
    2d8c:	a0 e4       	ldi	r26, 0x40	; 64
    2d8e:	5a 07       	cpc	r21, r26
    2d90:	10 f0       	brcs	.+4      	; 0x2d96 <__pack_f+0x10e>
    2d92:	e1 e0       	ldi	r30, 0x01	; 1
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	79 01       	movw	r14, r18
    2d98:	8a 01       	movw	r16, r20
    2d9a:	27 c0       	rjmp	.+78     	; 0x2dea <__pack_f+0x162>
    2d9c:	60 38       	cpi	r22, 0x80	; 128
    2d9e:	71 05       	cpc	r23, r1
    2da0:	64 f5       	brge	.+88     	; 0x2dfa <__pack_f+0x172>
    2da2:	fb 01       	movw	r30, r22
    2da4:	e1 58       	subi	r30, 0x81	; 129
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	d8 01       	movw	r26, r16
    2daa:	c7 01       	movw	r24, r14
    2dac:	8f 77       	andi	r24, 0x7F	; 127
    2dae:	90 70       	andi	r25, 0x00	; 0
    2db0:	a0 70       	andi	r26, 0x00	; 0
    2db2:	b0 70       	andi	r27, 0x00	; 0
    2db4:	80 34       	cpi	r24, 0x40	; 64
    2db6:	91 05       	cpc	r25, r1
    2db8:	a1 05       	cpc	r26, r1
    2dba:	b1 05       	cpc	r27, r1
    2dbc:	39 f4       	brne	.+14     	; 0x2dcc <__pack_f+0x144>
    2dbe:	e7 fe       	sbrs	r14, 7
    2dc0:	0d c0       	rjmp	.+26     	; 0x2ddc <__pack_f+0x154>
    2dc2:	80 e4       	ldi	r24, 0x40	; 64
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	a0 e0       	ldi	r26, 0x00	; 0
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	04 c0       	rjmp	.+8      	; 0x2dd4 <__pack_f+0x14c>
    2dcc:	8f e3       	ldi	r24, 0x3F	; 63
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	a0 e0       	ldi	r26, 0x00	; 0
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	e8 0e       	add	r14, r24
    2dd6:	f9 1e       	adc	r15, r25
    2dd8:	0a 1f       	adc	r16, r26
    2dda:	1b 1f       	adc	r17, r27
    2ddc:	17 ff       	sbrs	r17, 7
    2dde:	05 c0       	rjmp	.+10     	; 0x2dea <__pack_f+0x162>
    2de0:	16 95       	lsr	r17
    2de2:	07 95       	ror	r16
    2de4:	f7 94       	ror	r15
    2de6:	e7 94       	ror	r14
    2de8:	31 96       	adiw	r30, 0x01	; 1
    2dea:	87 e0       	ldi	r24, 0x07	; 7
    2dec:	16 95       	lsr	r17
    2dee:	07 95       	ror	r16
    2df0:	f7 94       	ror	r15
    2df2:	e7 94       	ror	r14
    2df4:	8a 95       	dec	r24
    2df6:	d1 f7       	brne	.-12     	; 0x2dec <__pack_f+0x164>
    2df8:	05 c0       	rjmp	.+10     	; 0x2e04 <__pack_f+0x17c>
    2dfa:	ee 24       	eor	r14, r14
    2dfc:	ff 24       	eor	r15, r15
    2dfe:	87 01       	movw	r16, r14
    2e00:	ef ef       	ldi	r30, 0xFF	; 255
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	6e 2f       	mov	r22, r30
    2e06:	67 95       	ror	r22
    2e08:	66 27       	eor	r22, r22
    2e0a:	67 95       	ror	r22
    2e0c:	90 2f       	mov	r25, r16
    2e0e:	9f 77       	andi	r25, 0x7F	; 127
    2e10:	d7 94       	ror	r13
    2e12:	dd 24       	eor	r13, r13
    2e14:	d7 94       	ror	r13
    2e16:	8e 2f       	mov	r24, r30
    2e18:	86 95       	lsr	r24
    2e1a:	49 2f       	mov	r20, r25
    2e1c:	46 2b       	or	r20, r22
    2e1e:	58 2f       	mov	r21, r24
    2e20:	5d 29       	or	r21, r13
    2e22:	b7 01       	movw	r22, r14
    2e24:	ca 01       	movw	r24, r20
    2e26:	1f 91       	pop	r17
    2e28:	0f 91       	pop	r16
    2e2a:	ff 90       	pop	r15
    2e2c:	ef 90       	pop	r14
    2e2e:	df 90       	pop	r13
    2e30:	08 95       	ret

00002e32 <__unpack_f>:
    2e32:	fc 01       	movw	r30, r24
    2e34:	db 01       	movw	r26, r22
    2e36:	40 81       	ld	r20, Z
    2e38:	51 81       	ldd	r21, Z+1	; 0x01
    2e3a:	22 81       	ldd	r18, Z+2	; 0x02
    2e3c:	62 2f       	mov	r22, r18
    2e3e:	6f 77       	andi	r22, 0x7F	; 127
    2e40:	70 e0       	ldi	r23, 0x00	; 0
    2e42:	22 1f       	adc	r18, r18
    2e44:	22 27       	eor	r18, r18
    2e46:	22 1f       	adc	r18, r18
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	89 2f       	mov	r24, r25
    2e4c:	88 0f       	add	r24, r24
    2e4e:	82 2b       	or	r24, r18
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	99 1f       	adc	r25, r25
    2e56:	99 27       	eor	r25, r25
    2e58:	99 1f       	adc	r25, r25
    2e5a:	11 96       	adiw	r26, 0x01	; 1
    2e5c:	9c 93       	st	X, r25
    2e5e:	11 97       	sbiw	r26, 0x01	; 1
    2e60:	21 15       	cp	r18, r1
    2e62:	31 05       	cpc	r19, r1
    2e64:	a9 f5       	brne	.+106    	; 0x2ed0 <__unpack_f+0x9e>
    2e66:	41 15       	cp	r20, r1
    2e68:	51 05       	cpc	r21, r1
    2e6a:	61 05       	cpc	r22, r1
    2e6c:	71 05       	cpc	r23, r1
    2e6e:	11 f4       	brne	.+4      	; 0x2e74 <__unpack_f+0x42>
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	37 c0       	rjmp	.+110    	; 0x2ee2 <__unpack_f+0xb0>
    2e74:	82 e8       	ldi	r24, 0x82	; 130
    2e76:	9f ef       	ldi	r25, 0xFF	; 255
    2e78:	13 96       	adiw	r26, 0x03	; 3
    2e7a:	9c 93       	st	X, r25
    2e7c:	8e 93       	st	-X, r24
    2e7e:	12 97       	sbiw	r26, 0x02	; 2
    2e80:	9a 01       	movw	r18, r20
    2e82:	ab 01       	movw	r20, r22
    2e84:	67 e0       	ldi	r22, 0x07	; 7
    2e86:	22 0f       	add	r18, r18
    2e88:	33 1f       	adc	r19, r19
    2e8a:	44 1f       	adc	r20, r20
    2e8c:	55 1f       	adc	r21, r21
    2e8e:	6a 95       	dec	r22
    2e90:	d1 f7       	brne	.-12     	; 0x2e86 <__unpack_f+0x54>
    2e92:	83 e0       	ldi	r24, 0x03	; 3
    2e94:	8c 93       	st	X, r24
    2e96:	0d c0       	rjmp	.+26     	; 0x2eb2 <__unpack_f+0x80>
    2e98:	22 0f       	add	r18, r18
    2e9a:	33 1f       	adc	r19, r19
    2e9c:	44 1f       	adc	r20, r20
    2e9e:	55 1f       	adc	r21, r21
    2ea0:	12 96       	adiw	r26, 0x02	; 2
    2ea2:	8d 91       	ld	r24, X+
    2ea4:	9c 91       	ld	r25, X
    2ea6:	13 97       	sbiw	r26, 0x03	; 3
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	13 96       	adiw	r26, 0x03	; 3
    2eac:	9c 93       	st	X, r25
    2eae:	8e 93       	st	-X, r24
    2eb0:	12 97       	sbiw	r26, 0x02	; 2
    2eb2:	20 30       	cpi	r18, 0x00	; 0
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	38 07       	cpc	r19, r24
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	48 07       	cpc	r20, r24
    2ebc:	80 e4       	ldi	r24, 0x40	; 64
    2ebe:	58 07       	cpc	r21, r24
    2ec0:	58 f3       	brcs	.-42     	; 0x2e98 <__unpack_f+0x66>
    2ec2:	14 96       	adiw	r26, 0x04	; 4
    2ec4:	2d 93       	st	X+, r18
    2ec6:	3d 93       	st	X+, r19
    2ec8:	4d 93       	st	X+, r20
    2eca:	5c 93       	st	X, r21
    2ecc:	17 97       	sbiw	r26, 0x07	; 7
    2ece:	08 95       	ret
    2ed0:	2f 3f       	cpi	r18, 0xFF	; 255
    2ed2:	31 05       	cpc	r19, r1
    2ed4:	79 f4       	brne	.+30     	; 0x2ef4 <__unpack_f+0xc2>
    2ed6:	41 15       	cp	r20, r1
    2ed8:	51 05       	cpc	r21, r1
    2eda:	61 05       	cpc	r22, r1
    2edc:	71 05       	cpc	r23, r1
    2ede:	19 f4       	brne	.+6      	; 0x2ee6 <__unpack_f+0xb4>
    2ee0:	84 e0       	ldi	r24, 0x04	; 4
    2ee2:	8c 93       	st	X, r24
    2ee4:	08 95       	ret
    2ee6:	64 ff       	sbrs	r22, 4
    2ee8:	03 c0       	rjmp	.+6      	; 0x2ef0 <__unpack_f+0xbe>
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	8c 93       	st	X, r24
    2eee:	12 c0       	rjmp	.+36     	; 0x2f14 <__unpack_f+0xe2>
    2ef0:	1c 92       	st	X, r1
    2ef2:	10 c0       	rjmp	.+32     	; 0x2f14 <__unpack_f+0xe2>
    2ef4:	2f 57       	subi	r18, 0x7F	; 127
    2ef6:	30 40       	sbci	r19, 0x00	; 0
    2ef8:	13 96       	adiw	r26, 0x03	; 3
    2efa:	3c 93       	st	X, r19
    2efc:	2e 93       	st	-X, r18
    2efe:	12 97       	sbiw	r26, 0x02	; 2
    2f00:	83 e0       	ldi	r24, 0x03	; 3
    2f02:	8c 93       	st	X, r24
    2f04:	87 e0       	ldi	r24, 0x07	; 7
    2f06:	44 0f       	add	r20, r20
    2f08:	55 1f       	adc	r21, r21
    2f0a:	66 1f       	adc	r22, r22
    2f0c:	77 1f       	adc	r23, r23
    2f0e:	8a 95       	dec	r24
    2f10:	d1 f7       	brne	.-12     	; 0x2f06 <__unpack_f+0xd4>
    2f12:	70 64       	ori	r23, 0x40	; 64
    2f14:	14 96       	adiw	r26, 0x04	; 4
    2f16:	4d 93       	st	X+, r20
    2f18:	5d 93       	st	X+, r21
    2f1a:	6d 93       	st	X+, r22
    2f1c:	7c 93       	st	X, r23
    2f1e:	17 97       	sbiw	r26, 0x07	; 7
    2f20:	08 95       	ret

00002f22 <__fpcmp_parts_f>:
    2f22:	1f 93       	push	r17
    2f24:	dc 01       	movw	r26, r24
    2f26:	fb 01       	movw	r30, r22
    2f28:	9c 91       	ld	r25, X
    2f2a:	92 30       	cpi	r25, 0x02	; 2
    2f2c:	08 f4       	brcc	.+2      	; 0x2f30 <__fpcmp_parts_f+0xe>
    2f2e:	47 c0       	rjmp	.+142    	; 0x2fbe <__fpcmp_parts_f+0x9c>
    2f30:	80 81       	ld	r24, Z
    2f32:	82 30       	cpi	r24, 0x02	; 2
    2f34:	08 f4       	brcc	.+2      	; 0x2f38 <__fpcmp_parts_f+0x16>
    2f36:	43 c0       	rjmp	.+134    	; 0x2fbe <__fpcmp_parts_f+0x9c>
    2f38:	94 30       	cpi	r25, 0x04	; 4
    2f3a:	51 f4       	brne	.+20     	; 0x2f50 <__fpcmp_parts_f+0x2e>
    2f3c:	11 96       	adiw	r26, 0x01	; 1
    2f3e:	1c 91       	ld	r17, X
    2f40:	84 30       	cpi	r24, 0x04	; 4
    2f42:	99 f5       	brne	.+102    	; 0x2faa <__fpcmp_parts_f+0x88>
    2f44:	81 81       	ldd	r24, Z+1	; 0x01
    2f46:	68 2f       	mov	r22, r24
    2f48:	70 e0       	ldi	r23, 0x00	; 0
    2f4a:	61 1b       	sub	r22, r17
    2f4c:	71 09       	sbc	r23, r1
    2f4e:	3f c0       	rjmp	.+126    	; 0x2fce <__fpcmp_parts_f+0xac>
    2f50:	84 30       	cpi	r24, 0x04	; 4
    2f52:	21 f0       	breq	.+8      	; 0x2f5c <__fpcmp_parts_f+0x3a>
    2f54:	92 30       	cpi	r25, 0x02	; 2
    2f56:	31 f4       	brne	.+12     	; 0x2f64 <__fpcmp_parts_f+0x42>
    2f58:	82 30       	cpi	r24, 0x02	; 2
    2f5a:	b9 f1       	breq	.+110    	; 0x2fca <__fpcmp_parts_f+0xa8>
    2f5c:	81 81       	ldd	r24, Z+1	; 0x01
    2f5e:	88 23       	and	r24, r24
    2f60:	89 f1       	breq	.+98     	; 0x2fc4 <__fpcmp_parts_f+0xa2>
    2f62:	2d c0       	rjmp	.+90     	; 0x2fbe <__fpcmp_parts_f+0x9c>
    2f64:	11 96       	adiw	r26, 0x01	; 1
    2f66:	1c 91       	ld	r17, X
    2f68:	11 97       	sbiw	r26, 0x01	; 1
    2f6a:	82 30       	cpi	r24, 0x02	; 2
    2f6c:	f1 f0       	breq	.+60     	; 0x2faa <__fpcmp_parts_f+0x88>
    2f6e:	81 81       	ldd	r24, Z+1	; 0x01
    2f70:	18 17       	cp	r17, r24
    2f72:	d9 f4       	brne	.+54     	; 0x2faa <__fpcmp_parts_f+0x88>
    2f74:	12 96       	adiw	r26, 0x02	; 2
    2f76:	2d 91       	ld	r18, X+
    2f78:	3c 91       	ld	r19, X
    2f7a:	13 97       	sbiw	r26, 0x03	; 3
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	82 17       	cp	r24, r18
    2f82:	93 07       	cpc	r25, r19
    2f84:	94 f0       	brlt	.+36     	; 0x2faa <__fpcmp_parts_f+0x88>
    2f86:	28 17       	cp	r18, r24
    2f88:	39 07       	cpc	r19, r25
    2f8a:	bc f0       	brlt	.+46     	; 0x2fba <__fpcmp_parts_f+0x98>
    2f8c:	14 96       	adiw	r26, 0x04	; 4
    2f8e:	8d 91       	ld	r24, X+
    2f90:	9d 91       	ld	r25, X+
    2f92:	0d 90       	ld	r0, X+
    2f94:	bc 91       	ld	r27, X
    2f96:	a0 2d       	mov	r26, r0
    2f98:	24 81       	ldd	r18, Z+4	; 0x04
    2f9a:	35 81       	ldd	r19, Z+5	; 0x05
    2f9c:	46 81       	ldd	r20, Z+6	; 0x06
    2f9e:	57 81       	ldd	r21, Z+7	; 0x07
    2fa0:	28 17       	cp	r18, r24
    2fa2:	39 07       	cpc	r19, r25
    2fa4:	4a 07       	cpc	r20, r26
    2fa6:	5b 07       	cpc	r21, r27
    2fa8:	18 f4       	brcc	.+6      	; 0x2fb0 <__fpcmp_parts_f+0x8e>
    2faa:	11 23       	and	r17, r17
    2fac:	41 f0       	breq	.+16     	; 0x2fbe <__fpcmp_parts_f+0x9c>
    2fae:	0a c0       	rjmp	.+20     	; 0x2fc4 <__fpcmp_parts_f+0xa2>
    2fb0:	82 17       	cp	r24, r18
    2fb2:	93 07       	cpc	r25, r19
    2fb4:	a4 07       	cpc	r26, r20
    2fb6:	b5 07       	cpc	r27, r21
    2fb8:	40 f4       	brcc	.+16     	; 0x2fca <__fpcmp_parts_f+0xa8>
    2fba:	11 23       	and	r17, r17
    2fbc:	19 f0       	breq	.+6      	; 0x2fc4 <__fpcmp_parts_f+0xa2>
    2fbe:	61 e0       	ldi	r22, 0x01	; 1
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
    2fc2:	05 c0       	rjmp	.+10     	; 0x2fce <__fpcmp_parts_f+0xac>
    2fc4:	6f ef       	ldi	r22, 0xFF	; 255
    2fc6:	7f ef       	ldi	r23, 0xFF	; 255
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <__fpcmp_parts_f+0xac>
    2fca:	60 e0       	ldi	r22, 0x00	; 0
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	cb 01       	movw	r24, r22
    2fd0:	1f 91       	pop	r17
    2fd2:	08 95       	ret

00002fd4 <__eewr_word>:
    2fd4:	df 92       	push	r13
    2fd6:	ef 92       	push	r14
    2fd8:	ff 92       	push	r15
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	d7 2e       	mov	r13, r23
    2fe0:	7a 01       	movw	r14, r20
    2fe2:	8c 01       	movw	r16, r24
    2fe4:	fa 01       	movw	r30, r20
    2fe6:	09 95       	icall
    2fe8:	c8 01       	movw	r24, r16
    2fea:	01 96       	adiw	r24, 0x01	; 1
    2fec:	6d 2d       	mov	r22, r13
    2fee:	f7 01       	movw	r30, r14
    2ff0:	09 95       	icall
    2ff2:	1f 91       	pop	r17
    2ff4:	0f 91       	pop	r16
    2ff6:	ff 90       	pop	r15
    2ff8:	ef 90       	pop	r14
    2ffa:	df 90       	pop	r13
    2ffc:	08 95       	ret

00002ffe <__udivmodhi4>:
    2ffe:	aa 1b       	sub	r26, r26
    3000:	bb 1b       	sub	r27, r27
    3002:	51 e1       	ldi	r21, 0x11	; 17
    3004:	07 c0       	rjmp	.+14     	; 0x3014 <__udivmodhi4_ep>

00003006 <__udivmodhi4_loop>:
    3006:	aa 1f       	adc	r26, r26
    3008:	bb 1f       	adc	r27, r27
    300a:	a6 17       	cp	r26, r22
    300c:	b7 07       	cpc	r27, r23
    300e:	10 f0       	brcs	.+4      	; 0x3014 <__udivmodhi4_ep>
    3010:	a6 1b       	sub	r26, r22
    3012:	b7 0b       	sbc	r27, r23

00003014 <__udivmodhi4_ep>:
    3014:	88 1f       	adc	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	5a 95       	dec	r21
    301a:	a9 f7       	brne	.-22     	; 0x3006 <__udivmodhi4_loop>
    301c:	80 95       	com	r24
    301e:	90 95       	com	r25
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	08 95       	ret

00003026 <__divmodsi4>:
    3026:	97 fb       	bst	r25, 7
    3028:	09 2e       	mov	r0, r25
    302a:	05 26       	eor	r0, r21
    302c:	0e d0       	rcall	.+28     	; 0x304a <__divmodsi4_neg1>
    302e:	57 fd       	sbrc	r21, 7
    3030:	04 d0       	rcall	.+8      	; 0x303a <__divmodsi4_neg2>
    3032:	14 d0       	rcall	.+40     	; 0x305c <__udivmodsi4>
    3034:	0a d0       	rcall	.+20     	; 0x304a <__divmodsi4_neg1>
    3036:	00 1c       	adc	r0, r0
    3038:	38 f4       	brcc	.+14     	; 0x3048 <__divmodsi4_exit>

0000303a <__divmodsi4_neg2>:
    303a:	50 95       	com	r21
    303c:	40 95       	com	r20
    303e:	30 95       	com	r19
    3040:	21 95       	neg	r18
    3042:	3f 4f       	sbci	r19, 0xFF	; 255
    3044:	4f 4f       	sbci	r20, 0xFF	; 255
    3046:	5f 4f       	sbci	r21, 0xFF	; 255

00003048 <__divmodsi4_exit>:
    3048:	08 95       	ret

0000304a <__divmodsi4_neg1>:
    304a:	f6 f7       	brtc	.-4      	; 0x3048 <__divmodsi4_exit>
    304c:	90 95       	com	r25
    304e:	80 95       	com	r24
    3050:	70 95       	com	r23
    3052:	61 95       	neg	r22
    3054:	7f 4f       	sbci	r23, 0xFF	; 255
    3056:	8f 4f       	sbci	r24, 0xFF	; 255
    3058:	9f 4f       	sbci	r25, 0xFF	; 255
    305a:	08 95       	ret

0000305c <__udivmodsi4>:
    305c:	a1 e2       	ldi	r26, 0x21	; 33
    305e:	1a 2e       	mov	r1, r26
    3060:	aa 1b       	sub	r26, r26
    3062:	bb 1b       	sub	r27, r27
    3064:	fd 01       	movw	r30, r26
    3066:	0d c0       	rjmp	.+26     	; 0x3082 <__udivmodsi4_ep>

00003068 <__udivmodsi4_loop>:
    3068:	aa 1f       	adc	r26, r26
    306a:	bb 1f       	adc	r27, r27
    306c:	ee 1f       	adc	r30, r30
    306e:	ff 1f       	adc	r31, r31
    3070:	a2 17       	cp	r26, r18
    3072:	b3 07       	cpc	r27, r19
    3074:	e4 07       	cpc	r30, r20
    3076:	f5 07       	cpc	r31, r21
    3078:	20 f0       	brcs	.+8      	; 0x3082 <__udivmodsi4_ep>
    307a:	a2 1b       	sub	r26, r18
    307c:	b3 0b       	sbc	r27, r19
    307e:	e4 0b       	sbc	r30, r20
    3080:	f5 0b       	sbc	r31, r21

00003082 <__udivmodsi4_ep>:
    3082:	66 1f       	adc	r22, r22
    3084:	77 1f       	adc	r23, r23
    3086:	88 1f       	adc	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	1a 94       	dec	r1
    308c:	69 f7       	brne	.-38     	; 0x3068 <__udivmodsi4_loop>
    308e:	60 95       	com	r22
    3090:	70 95       	com	r23
    3092:	80 95       	com	r24
    3094:	90 95       	com	r25
    3096:	9b 01       	movw	r18, r22
    3098:	ac 01       	movw	r20, r24
    309a:	bd 01       	movw	r22, r26
    309c:	cf 01       	movw	r24, r30
    309e:	08 95       	ret

000030a0 <__prologue_saves__>:
    30a0:	2f 92       	push	r2
    30a2:	3f 92       	push	r3
    30a4:	4f 92       	push	r4
    30a6:	5f 92       	push	r5
    30a8:	6f 92       	push	r6
    30aa:	7f 92       	push	r7
    30ac:	8f 92       	push	r8
    30ae:	9f 92       	push	r9
    30b0:	af 92       	push	r10
    30b2:	bf 92       	push	r11
    30b4:	cf 92       	push	r12
    30b6:	df 92       	push	r13
    30b8:	ef 92       	push	r14
    30ba:	ff 92       	push	r15
    30bc:	0f 93       	push	r16
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	ca 1b       	sub	r28, r26
    30ca:	db 0b       	sbc	r29, r27
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	de bf       	out	0x3e, r29	; 62
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	cd bf       	out	0x3d, r28	; 61
    30d6:	09 94       	ijmp

000030d8 <__epilogue_restores__>:
    30d8:	2a 88       	ldd	r2, Y+18	; 0x12
    30da:	39 88       	ldd	r3, Y+17	; 0x11
    30dc:	48 88       	ldd	r4, Y+16	; 0x10
    30de:	5f 84       	ldd	r5, Y+15	; 0x0f
    30e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    30e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    30e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    30e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    30e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    30ea:	b9 84       	ldd	r11, Y+9	; 0x09
    30ec:	c8 84       	ldd	r12, Y+8	; 0x08
    30ee:	df 80       	ldd	r13, Y+7	; 0x07
    30f0:	ee 80       	ldd	r14, Y+6	; 0x06
    30f2:	fd 80       	ldd	r15, Y+5	; 0x05
    30f4:	0c 81       	ldd	r16, Y+4	; 0x04
    30f6:	1b 81       	ldd	r17, Y+3	; 0x03
    30f8:	aa 81       	ldd	r26, Y+2	; 0x02
    30fa:	b9 81       	ldd	r27, Y+1	; 0x01
    30fc:	ce 0f       	add	r28, r30
    30fe:	d1 1d       	adc	r29, r1
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	ed 01       	movw	r28, r26
    310c:	08 95       	ret
    310e:	11 f4       	brne	.+4      	; 0x3114 <__epilogue_restores__+0x3c>
    3110:	0e f4       	brtc	.+2      	; 0x3114 <__epilogue_restores__+0x3c>
    3112:	4d c0       	rjmp	.+154    	; 0x31ae <__fp_nan>
    3114:	3e c0       	rjmp	.+124    	; 0x3192 <__fp_mpack>

00003116 <sqrt>:
    3116:	5d d0       	rcall	.+186    	; 0x31d2 <__fp_splitA>
    3118:	d0 f3       	brcs	.-12     	; 0x310e <__epilogue_restores__+0x36>
    311a:	99 23       	and	r25, r25
    311c:	d9 f3       	breq	.-10     	; 0x3114 <__epilogue_restores__+0x3c>
    311e:	ce f3       	brts	.-14     	; 0x3112 <__epilogue_restores__+0x3a>
    3120:	9f 57       	subi	r25, 0x7F	; 127
    3122:	55 0b       	sbc	r21, r21
    3124:	87 ff       	sbrs	r24, 7
    3126:	46 d0       	rcall	.+140    	; 0x31b4 <__fp_norm2>
    3128:	00 24       	eor	r0, r0
    312a:	a0 e6       	ldi	r26, 0x60	; 96
    312c:	40 ea       	ldi	r20, 0xA0	; 160
    312e:	90 01       	movw	r18, r0
    3130:	80 58       	subi	r24, 0x80	; 128
    3132:	56 95       	lsr	r21
    3134:	97 95       	ror	r25
    3136:	28 f4       	brcc	.+10     	; 0x3142 <sqrt+0x2c>
    3138:	80 5c       	subi	r24, 0xC0	; 192
    313a:	66 0f       	add	r22, r22
    313c:	77 1f       	adc	r23, r23
    313e:	88 1f       	adc	r24, r24
    3140:	20 f0       	brcs	.+8      	; 0x314a <sqrt+0x34>
    3142:	26 17       	cp	r18, r22
    3144:	37 07       	cpc	r19, r23
    3146:	48 07       	cpc	r20, r24
    3148:	30 f4       	brcc	.+12     	; 0x3156 <sqrt+0x40>
    314a:	62 1b       	sub	r22, r18
    314c:	73 0b       	sbc	r23, r19
    314e:	84 0b       	sbc	r24, r20
    3150:	20 29       	or	r18, r0
    3152:	31 29       	or	r19, r1
    3154:	4a 2b       	or	r20, r26
    3156:	a6 95       	lsr	r26
    3158:	17 94       	ror	r1
    315a:	07 94       	ror	r0
    315c:	20 25       	eor	r18, r0
    315e:	31 25       	eor	r19, r1
    3160:	4a 27       	eor	r20, r26
    3162:	58 f7       	brcc	.-42     	; 0x313a <sqrt+0x24>
    3164:	66 0f       	add	r22, r22
    3166:	77 1f       	adc	r23, r23
    3168:	88 1f       	adc	r24, r24
    316a:	20 f0       	brcs	.+8      	; 0x3174 <sqrt+0x5e>
    316c:	26 17       	cp	r18, r22
    316e:	37 07       	cpc	r19, r23
    3170:	48 07       	cpc	r20, r24
    3172:	30 f4       	brcc	.+12     	; 0x3180 <sqrt+0x6a>
    3174:	62 0b       	sbc	r22, r18
    3176:	73 0b       	sbc	r23, r19
    3178:	84 0b       	sbc	r24, r20
    317a:	20 0d       	add	r18, r0
    317c:	31 1d       	adc	r19, r1
    317e:	41 1d       	adc	r20, r1
    3180:	a0 95       	com	r26
    3182:	81 f7       	brne	.-32     	; 0x3164 <sqrt+0x4e>
    3184:	b9 01       	movw	r22, r18
    3186:	84 2f       	mov	r24, r20
    3188:	91 58       	subi	r25, 0x81	; 129
    318a:	88 0f       	add	r24, r24
    318c:	96 95       	lsr	r25
    318e:	87 95       	ror	r24
    3190:	08 95       	ret

00003192 <__fp_mpack>:
    3192:	9f 3f       	cpi	r25, 0xFF	; 255
    3194:	31 f0       	breq	.+12     	; 0x31a2 <__fp_mpack_finite+0xc>

00003196 <__fp_mpack_finite>:
    3196:	91 50       	subi	r25, 0x01	; 1
    3198:	20 f4       	brcc	.+8      	; 0x31a2 <__fp_mpack_finite+0xc>
    319a:	87 95       	ror	r24
    319c:	77 95       	ror	r23
    319e:	67 95       	ror	r22
    31a0:	b7 95       	ror	r27
    31a2:	88 0f       	add	r24, r24
    31a4:	91 1d       	adc	r25, r1
    31a6:	96 95       	lsr	r25
    31a8:	87 95       	ror	r24
    31aa:	97 f9       	bld	r25, 7
    31ac:	08 95       	ret

000031ae <__fp_nan>:
    31ae:	9f ef       	ldi	r25, 0xFF	; 255
    31b0:	80 ec       	ldi	r24, 0xC0	; 192
    31b2:	08 95       	ret

000031b4 <__fp_norm2>:
    31b4:	91 50       	subi	r25, 0x01	; 1
    31b6:	50 40       	sbci	r21, 0x00	; 0
    31b8:	66 0f       	add	r22, r22
    31ba:	77 1f       	adc	r23, r23
    31bc:	88 1f       	adc	r24, r24
    31be:	d2 f7       	brpl	.-12     	; 0x31b4 <__fp_norm2>
    31c0:	08 95       	ret

000031c2 <__fp_split3>:
    31c2:	57 fd       	sbrc	r21, 7
    31c4:	90 58       	subi	r25, 0x80	; 128
    31c6:	44 0f       	add	r20, r20
    31c8:	55 1f       	adc	r21, r21
    31ca:	59 f0       	breq	.+22     	; 0x31e2 <__fp_splitA+0x10>
    31cc:	5f 3f       	cpi	r21, 0xFF	; 255
    31ce:	71 f0       	breq	.+28     	; 0x31ec <__fp_splitA+0x1a>
    31d0:	47 95       	ror	r20

000031d2 <__fp_splitA>:
    31d2:	88 0f       	add	r24, r24
    31d4:	97 fb       	bst	r25, 7
    31d6:	99 1f       	adc	r25, r25
    31d8:	61 f0       	breq	.+24     	; 0x31f2 <__fp_splitA+0x20>
    31da:	9f 3f       	cpi	r25, 0xFF	; 255
    31dc:	79 f0       	breq	.+30     	; 0x31fc <__fp_splitA+0x2a>
    31de:	87 95       	ror	r24
    31e0:	08 95       	ret
    31e2:	12 16       	cp	r1, r18
    31e4:	13 06       	cpc	r1, r19
    31e6:	14 06       	cpc	r1, r20
    31e8:	55 1f       	adc	r21, r21
    31ea:	f2 cf       	rjmp	.-28     	; 0x31d0 <__fp_split3+0xe>
    31ec:	46 95       	lsr	r20
    31ee:	f1 df       	rcall	.-30     	; 0x31d2 <__fp_splitA>
    31f0:	08 c0       	rjmp	.+16     	; 0x3202 <__fp_splitA+0x30>
    31f2:	16 16       	cp	r1, r22
    31f4:	17 06       	cpc	r1, r23
    31f6:	18 06       	cpc	r1, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	f1 cf       	rjmp	.-30     	; 0x31de <__fp_splitA+0xc>
    31fc:	86 95       	lsr	r24
    31fe:	71 05       	cpc	r23, r1
    3200:	61 05       	cpc	r22, r1
    3202:	08 94       	sec
    3204:	08 95       	ret

00003206 <_exit>:
    3206:	f8 94       	cli

00003208 <__stop_program>:
    3208:	ff cf       	rjmp	.-2      	; 0x3208 <__stop_program>
