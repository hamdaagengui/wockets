<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<style type="text/css">
	.cmenu {margin: 0; padding: 0.3em; list-style-type: none; background-color: white;}
	.cmenu hr {border: 0; border-bottom: 1px solid grey; margin: 3px 0px 3px 0px;}
	.cmenu div {font-size: 12px; border: 1 !important;}
	.cmenu div:hover {font-weight:bold;}
</style>

<link rel="stylesheet" href="jquery/jquery.tooltip.css" />

<script language="javascript" type="text/javascript" src="jquery/jquery.js"></script>
<script language="javascript" type="text/javascript" src="jquery/jquery.flot.js"></script>
<script language="javascript" type="text/javascript" src="jquery/jquery.flot.selection.js"></script>
<script language="javascript" type="text/javascript" src="jquery/jquery.dimensions.js"></script>
<script language="javascript" type="text/javascript" src="jquery/jquery.tooltip.js"></script>
<script language="javascript" type="text/javascript" src="jquery/jquery.rightClick.js"></script>

<script language="javascript" type="text/javascript">

// color array for assigning colours to annotations.

// currently just six colors, need to add more or code a limitation.
var colorPalette = ['ffa0ff', 'c0ffff', 'ffff00', 'a0ff00', 'c0a080', '60c0ff'];
var colorPaletteDark = ['404040','980000','666600','9900CC','FF6600','990099'];

var currentRangeType = 0;
var currentOverviewRange;
var currentOverviewRangeType = 1;
var currentSelectedRange = 0;
var lastVisibleTagX = 0;
var currentOverview;

var currentSubject = 0;

// for handling zoom event
var currentPlotOptions;
var currentPlotData;
var currentPlot;
var loadedRange;
var recallSelectedEvent = false;
var selectedRangeFlag = false;

var hoverX = 0;

// for getting comments.
var commentStart = 0;
var commentEnd = 0;

var absCommentStart = 0;
var absCommentEnd = 0;

// global vars
var _mouseOverContext = false;      // is the mouse over the context menu?

var controlFlagForShiftingPlot = true;

// define parameter list, but the simplist way is to define an enumeration
var paramList = ['score', 'annotation','usageData'];
var showHideLabelArray = [];

function process(start_unixtime, end_unixtime, subject_id, query_range_type, overview)
{
	$.getJSON("http://wockets.scripts.mit.edu/getData.php", { start_unixtime: start_unixtime, end_unixtime: end_unixtime, reqRange: query_range_type, subjectid: subject_id, score: showHideLabelArray[0], annotation: showHideLabelArray[1], usageData: showHideLabelArray[2] },function(data){
		currentRangeType = query_range_type;
		currentSubject = subject_id;
		plotChart(data, overview);
	});
}

function plotChart(plotData, overview){

	var markings = makeMarkings(plotData);
	
    var options = {
        xaxis: { monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], 
		mode: "time", ticks: 5, labelWidth: 120, timeformat: "%b %d %y<br>%H:%M %P" },
        selection: { mode: "x" },
		lines: {show: true},
		grid: { markings: markings, hoverable: true, clickable: true},
		legend: {
			position: "nw"
		}, 
		
    };
	
	currentPlotOptions = options;
	currentPlotData = plotData;
	
	var plot = $.plot($("#placeholder"), plotData.numeric, options);
	currentPlot = plot;
    
	
	// bind the loaded range with the selected range when something is selected.
	// causing a minor problem: once panned out of range, all panning will require a call to the server.
	if(currentSelectedRange != 0){
		loadedRange = currentSelectedRange;
		
	}else{ // when the plot first starts
		loadedRange = currentOverviewRange;
		loadedRange.yaxis.from =  plot.getAxes().yaxis.min;
		loadedRange.yaxis.to = plot.getAxes().yaxis.max;
	}
	
	//plotMetaData(plot, $("#placeholder"), plotData, loadedRange);
	plotAnnotation(plot, $("#placeholder"), plotData, loadedRange);
	plotRangeAnnotation(plot, $("#placeholder"), plotData, loadedRange);

	
	// overview needs redrawing, independent of loaded range.
	
	if(overview == null){
	
		overview = $.plot($("#overview"), plotData.numeric, {
			series: {
				lines: { show: true, lineWidth: 1 },
				shadowSize: 3
			},
			xaxis: { mode: "time", timeformat: "%m/%d<br>%y"},
			yaxis: { ticks: [], autoscaleMargin: 0.1 },
			selection: { mode: "x" },
			grid: {markings: markings},
			legend: {
				show: false
			}
		});
		
		//plotMetaData(overview, $("#overview"), plotData, currentOverviewRange);
		
		currentOverview = overview;
		
	}
	
	panSelection(plot);
	
	
	$("#placeholder").bind("plothover", function (event, pos, item) {
		//$("#temp").text(pos.x.toFixed(0));
		
		// for getting comments. 
		hoverX = pos.x.toFixed(0);
		
		// for hovering over labels. 
		var currentX = window.event.clientX - 5;
		try{
			if(Math.abs(currentX - lastVisibleTagX) > 3)
				document.getElementById(lastVisibleTagX).style.visibility = 'hidden';
		}catch(err){
			$("#temp").text(err);
		}
		
		try{
			document.getElementById(currentX).style.visibility = 'visible';
			lastVisibleTagX = currentX;
		}catch(err){
			$("#temp").text(err);
		}
	});
	
	// clear last event binding.
	$("#placeholder").unbind("plotselected");
	
	$("#placeholder").bind("plotselected", function (event, ranges) {
									
		currentSelectedRange = ranges;
		ZoomSelection(currentSelectedRange);
		

    });
	
	
	// select overview for panning, after binding, of course.
	if(currentSelectedRange != 0){
		currentOverview.setSelection(currentSelectedRange);
		controlFlagForShiftingPlot = true;
		
	}else{
		currentOverview.setSelection(loadedRange,true);
	}
	
	// set the context menu to go away when clicked elsewhere.
	
	/*
	$('#placeholder').click(function(){
		if(!_mouseOverContext)
			CloseContext();
	});
	*/
	
	$('#placeholder').unbind('dblclick');
	
	$('#placeholder').dblclick(function() {
		ZoomToOverviewRange();
	});	
	
	
	// show labels
	/*
	$('#placeholder').mousemove(function() {
		var currentX = window.event.clientX - 5;
		try{
			if(Math.abs(currentX - lastVisibleTagX) > 3)
				document.getElementById(lastVisibleTagX).style.visibility = 'hidden';
		}catch(err){
			$("#temp").text(err);
		}
		
		try{
			document.getElementById(currentX).style.visibility = 'visible';
			lastVisibleTagX = currentX;
		}catch(err){
			$("#temp").text(err);
		}
				
		//$('#temp').text('X=' + window.event.clientX +  ' Y=' + window.event.clientY);
	});
	*/
	/*
	$('#placeholder').unbind('rightClick');
	
	// right click to reset zoom.
	$('#placeholder').rightClick(function() {
		currentSelectedRange = 0;
		ZoomSelection(currentOverviewRange);
	});
	*/
	
	// clear last event binding. 
	$("#overview").unbind("plotselected");
    $("#overview").bind("plotselected", function (event, ranges) {
        plot.setSelection(ranges);
    });
	
}

function checkPlotRange(ranges)
{
	var new_range = ranges.xaxis.to - ranges.xaxis.from;
	
	// one month
	if(new_range > 30*24*60*60*1000){
		return 2;
	}else if(new_range > 24*60*60*1000){
		return 1;
	}else{
		return 0;
	}
}

function ZoomSelection(ranges){
		
		var plotData = currentPlotData;
		var options = currentPlotOptions;
		
		// do the zooming
        plot = $.plot($("#placeholder"), plotData.numeric,
                      $.extend(true, {}, options, {
                          xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to }
                      }));
		
		currentPlot = plot;
		
		var rangeType = checkPlotRange(ranges);
		
		if(((currentOverviewRange.xaxis.from > ranges.xaxis.from) || (currentOverviewRange.xaxis.to < ranges.xaxis.to)) && controlFlagForShiftingPlot)
		{
			var halfOfOverviewRange = (currentOverviewRange.xaxis.to - currentOverviewRange.xaxis.from)/3;
			
			if(currentOverviewRange.xaxis.from > ranges.xaxis.from)
			{
				var newOverviewRange = {xaxis: {from: currentOverviewRange.xaxis.from-halfOfOverviewRange, to: currentOverviewRange.xaxis.to-halfOfOverviewRange}};
				currentOverviewRange = newOverviewRange;
				process(newOverviewRange.xaxis.from, newOverviewRange.xaxis.to, currentSubject, currentOverviewRangeType, null);
				
			}else
			{
				var newOverviewRange = {xaxis: {from: currentOverviewRange.xaxis.from+halfOfOverviewRange, to: currentOverviewRange.xaxis.to+halfOfOverviewRange}};
				currentOverviewRange = newOverviewRange;
				process(newOverviewRange.xaxis.from, newOverviewRange.xaxis.to, currentSubject, currentOverviewRangeType, null);
			}
			
			controlFlagForShiftingPlot = false;
			
		}else if((loadedRange.xaxis.from > ranges.xaxis.from) || (loadedRange.xaxis.to < ranges.xaxis.to))
		{
			process(ranges.xaxis.from, ranges.xaxis.to, currentSubject, rangeType, overview);
			return;
		}
		
		if(rangeType != currentRangeType)
		{
			currentRangeType = rangeType;
			process(ranges.xaxis.from, ranges.xaxis.to, currentSubject, rangeType, overview);
			return;	
		}
		
		//plotMetaData(plot, $("#placeholder"), plotData, ranges);
		plotAnnotation(plot, $("#placeholder"), plotData, ranges);
		plotRangeAnnotation(plot, $("#placeholder"), plotData, loadedRange);
		
		
        // don't fire event on the overview to prevent eternal loop
        currentOverview.setSelection(ranges, true);

}

function panSelection(plot)
{
	$("#setSelectionLeft").unbind("click");
	
	// set plotting selection (move left/right button)
	$("#setSelectionLeft").click(function () {
		var ranges = currentOverview.getSelection();
		
		currentOverview.setSelection({ x1:(ranges.xaxis.from-((ranges.xaxis.to-ranges.xaxis.from)/3)), x2: ranges.xaxis.to-((ranges.xaxis.to-ranges.xaxis.from)/3)});
	});
	
	$("#setSelectionRight").unbind("click");
	
	$("#setSelectionRight").click(function () {
        var ranges = currentOverview.getSelection();
		currentOverview.setSelection({ x1:(ranges.xaxis.from+((ranges.xaxis.to-ranges.xaxis.from)/3)), x2: ranges.xaxis.to+((ranges.xaxis.to-ranges.xaxis.from)/3)});
		
    });

}

function makeMarkings(plotData)
{
	var markings = [];
	
	try{
		for(annotIndex in plotData.annotation)
		{
			for(i in plotData.annotation[annotIndex].data)
			{
				//$("#temp").text(plotData.annotation[annotIndex].label);
				
				var entryTime = plotData.annotation[annotIndex].data[i][0];
				var nextMarkingIndex = parseInt(i)+(annotIndex*plotData.annotation[annotIndex].data.length);
				markings[nextMarkingIndex] = { color: colorPalette[annotIndex], lineWidth: 2, xaxis: { from: entryTime, to: entryTime }};
				
			}
		}
	}catch(err){
		return null;
	}
	return markings;
}

// plot meta data.

function plotMetaData(plot, plotElem, plotData, ranges)
{
	//$("#temp").text(plotData.meta.checkedTime);
	
	var o1 = plot.pointOffset({ x: plotData.meta.checkedTime, y: -360});
	var o2 = plot.pointOffset({ x: plotData.meta.uploadedTime, y: -460});
	
	var poff = plot.getPlotOffset();
	var absoluteRight = (poff.left + plot.width());
	
	// checked/unchecked data.
	
	if(o1.left > absoluteRight)
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+ (poff.top + plot.height() - 12)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="' + o1.left + '" height="4" align="center" valign="middle" bgcolor="#00CC33"></td><td align="center" valign="middle" bgcolor="#000000"></td></tr></table></div>');
	}else if(o1.left > 0)
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+ (poff.top + plot.height() - 12)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="' + o1.left + '" height="4" align="center" valign="middle" bgcolor="#00CC33"></td><td align="center" valign="middle" bgcolor="#FF6666"></td></tr></table></div>');
	}else
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+ (poff.top + plot.height() - 12)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="1" height="4" align="center" valign="middle" bgcolor="#000000"></td><td align="center" valign="middle" bgcolor="#FF6666"></td></tr></table></div>');
	}
	
	// uploaded/unuploaded data
	
	if(o2.left > absoluteRight)
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+(poff.top + plot.height() - 7)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="' + o2.left + '" height="4" align="center" valign="middle" bgcolor="#000000"></td><td align="center" valign="middle" bgcolor="#C0C0C0"></td></tr></table></div>');
	}else if(o2.left > 0)
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+(poff.top + plot.height() - 7)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="' + o2.left + '" height="4" align="center" valign="middle" bgcolor="#000000"></td><td align="center" valign="middle" bgcolor="#C0C0C0"></td></tr></table></div>');
	}else
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+(poff.top + plot.height() - 7)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="1" height="4" align="center" valign="middle" bgcolor="#000000"></td><td align="center" valign="middle" bgcolor="#C0C0C0"></td></tr></table></div>');
	}
	
}

// Plot notes that shows on plot as blocks.

function plotRangeAnnotation(plot, plotElem, plotData, ranges)
{
	
	var commentHistory = new Array();
	var commentIndex = 0;
	
	try{
		for(annotIndex in plotData.onplotnotes)
		{
			for(i in plotData.onplotnotes[annotIndex].data)
			{
				var startUnixTime = plotData.onplotnotes[annotIndex].data[i][0];
				var endUnixTime = plotData.onplotnotes[annotIndex].data[i][1];
				var usageInfo = plotData.onplotnotes[annotIndex].data[i][2];
				var noteID = "note-" + plotData.onplotnotes[annotIndex].data[i][3];
				
				var startTimeOffset = plot.pointOffset({ x: startUnixTime, y: ranges.yaxis.to});
				var endTimeOffset = plot.pointOffset({ x: endUnixTime, y: ranges.yaxis.to});
				
				var eventDuration = endTimeOffset.left - startTimeOffset.left;
				var plotOffset = plot.getPlotOffset();
				var plotWidth = plot.width();
				var rightSidePlot = plotOffset.left + plot.width();
				
				// determine row to plot, return the row number.
				var row = commentRowToPlot(commentHistory, startTimeOffset, endTimeOffset);
				var rowHeight = 5;
				
				// Notes, thin line version. 
				if((startTimeOffset.left >= plotOffset.left) && (endTimeOffset.left <= (rightSidePlot))){
					plotElem.append('<div id="' + noteID + '" title="'+usageInfo+'" align="center" style="border:1px;height:'+rowHeight+';width:'+eventDuration+'px;background-color:#' 
					+ colorPaletteDark[1] + ';opacity:0.80;padding:2px;position:absolute;left:' + (startTimeOffset.left) 
					+ 'px;top:' + (plotOffset.top + rowHeight*row) + 'px;color:#666;font-size:12px;font-family:Arial"></div>');
					
					commentHistory.push({startTimeOffset: startTimeOffset, endTimeOffset: endTimeOffset, usedSlot: row });
					
				}else if((startTimeOffset.left >= plotOffset.left) && (startTimeOffset.left <= rightSidePlot) && (endTimeOffset.left >= (rightSidePlot))){
					plotElem.append('<div id="' + noteID + '" title="'+usageInfo+'" align="center" style="border:1px;height:'+rowHeight+';width:'+(rightSidePlot - startTimeOffset.left)
					+'px;background-color:#' + colorPaletteDark[1] + ';opacity:0.80;padding:2px;position:absolute;left:' 
					+ (startTimeOffset.left) + 'px;top:' + (plotOffset.top + rowHeight*row) + 'px;color:#666;font-size:12px;font-family:Arial"></div>');
					
					commentHistory.push({startTimeOffset: startTimeOffset, endTimeOffset: endTimeOffset, usedSlot: row });
					
				}else if((startTimeOffset.left <= plotOffset.left) && (endTimeOffset.left <= (rightSidePlot)) && (endTimeOffset.left >= plotOffset.left)){
					plotElem.append('<div id="' + noteID + '" title="'+usageInfo+'" align="center" style="border:1px;height:'+rowHeight+';width:'+(endTimeOffset.left - plotOffset.left)
					+'px;background-color:#' + colorPaletteDark[1] + ';opacity:0.80;padding:2px;position:absolute;left:' 
					+ plotOffset.left + 'px;top:' + (plotOffset.top + rowHeight*row) + 'px;color:#666;font-size:12px;font-family:Arial"></div>');
									
					commentHistory.push({startTimeOffset: startTimeOffset, endTimeOffset: endTimeOffset, usedSlot: row });
					
				}else if((startTimeOffset.left <= plotOffset.left) && (endTimeOffset.left >= (rightSidePlot))){
					plotElem.append('<div id="' + noteID + '" title="'+usageInfo+'" align="center" style="border:1px;height:'+rowHeight+';width:'+(plot.width())
					+'px;background-color:#' + colorPaletteDark[1] + ';opacity:0.80;padding:2px;position:absolute;left:' 
					+ plotOffset.left + 'px;top:' + (plotOffset.top + rowHeight*row) + 'px;color:#666;font-size:12px;font-family:Arial"></div>');

					commentHistory.push({startTimeOffset: startTimeOffset, endTimeOffset: endTimeOffset, usedSlot: row });
				}
				
				//$("#temp").text(startUnixTime+" "+endUnixTime+" "+noteType+" "+notes);
			}
		}
		
		// add the temp tooltip here.
		$("div[id^='note-']").tooltip({ 
		    track: true, 
		    delay: 0, 
		    showURL: false, 
		    showBody: " - ", 
		    opacity: 0.95
		});
	
	}catch(err){
		//alert("no recent data");
	}	
}

function commentRowToPlot(commentHistory, startTimeOffset, endTimeOffset){
	
	var rowCount = 0;
	
	var overlappingSlotsUsed = new Array();
	var slotCounter = 0;
	
	if(commentHistory.length == 0){
		return rowCount;
	}else{
		for (i in commentHistory) {
			var historyComment = commentHistory[i];
			if((historyComment.startTimeOffset.left <= startTimeOffset.left) && (historyComment.endTimeOffset.left >= startTimeOffset.left)){
				overlappingSlotsUsed[commentHistory[i].usedSlot] = 1;
			}else if((historyComment.startTimeOffset.left <= endTimeOffset.left) && (historyComment.endTimeOffset.left >= endTimeOffset.left)){
				overlappingSlotsUsed[commentHistory[i].usedSlot] = 1;
			}else if((historyComment.startTimeOffset.left >= startTimeOffset.left) && (historyComment.endTimeOffset.left <= endTimeOffset.left)){
				overlappingSlotsUsed[commentHistory[i].usedSlot] = 1;
			}
		}
		
		// find first available row for insertion
		while(overlappingSlotsUsed[rowCount]==1){
			rowCount++;
		}
		
		return rowCount;
	}
}


// Plot annotation.

function plotAnnotation(plot, plotElem, plotData, ranges)
{
	try{
		for(annotIndex in plotData.annotation)
		{
			for(i in plotData.annotation[annotIndex].data)
			{
				var entryTime = plotData.annotation[annotIndex].data[i][0];
				
				if((entryTime >= ranges.xaxis.from)&&( entryTime <= ranges.xaxis.to)){

					var o = plot.pointOffset({ x: entryTime, y: ranges.yaxis.from + Math.random()*(ranges.yaxis.to-ranges.yaxis.from)*0.85});

					plotElem.append('<div id="' + o.left + '" align="left" style="border:1px;background-color:#' + colorPalette[annotIndex] 
					+ ';opacity:0.80;padding:2px;position:absolute;left:' + (o.left +5) + 'px;top:' + (o.top - 15) 
					+ 'px;color:#666;font-size:12px;font-family:Arial;visibility:hidden">'+ plotData.annotation[annotIndex].label 
					+ ': ' + plotData.annotation[annotIndex].data[i][1] +'</div>');
					
					
					// draw a little arrow on top of the last label to demonstrate
					// canvas drawing
					var ctx = plot.getCanvas().getContext("2d");
					ctx.beginPath();
					o.left += 4;
					ctx.moveTo(o.left - 5, o.top);
					ctx.lineTo(o.left - 5, o.top - 10);
					ctx.lineTo(o.left - 15, o.top - 5);
					ctx.lineTo(o.left - 5, o.top);
					ctx.fillStyle = "#" + colorPalette[annotIndex];
					ctx.fill();
				}
			}
		}
	}catch(err){
		//alert("no recent data");
	}
}

// for debuggig ajax calls.

$.ajaxSetup({"error":function(XMLHttpRequest,textStatus, errorThrown) {   
      alert(textStatus);
      alert(errorThrown);
      alert(XMLHttpRequest.responseText);
}});

$(document).ajaxStart(function(){
	$("#ajaxStatus").text("loading...");
});

$(document).ajaxComplete(function(){
	
	$("#ajaxStatus").text("plot ready.");
});

// managing overview range
function MM_selectSubject(targ,selObj,restore){ 
	//eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'");
	
	if(currentSelectedRange != 0 ){
		process(currentSelectedRange.xaxis.from, currentSelectedRange.xaxis.to, selObj.options[selObj.selectedIndex].value, currentRangeType, null);
	}else{
		process(loadedRange.xaxis.from, loadedRange.xaxis.to, selObj.options[selObj.selectedIndex].value, currentRangeType, null);
	}
	
	if (restore) selObj.selectedIndex=0;
}

// managing selected subject
function MM_selectDateRange(targ,selObj,restore){ 
	
	currentSelectedRange = 0;
	var current_unixtime = new Date().getTime() - 60*60*5*1000;
	switch(selObj.selectedIndex)
	{
		case 0:
			currentOverviewRangeType = 0;
			break;
		case 1:
			currentOverviewRangeType = 1;
			break;
		case 2:
			currentOverviewRangeType = 1;
			break;
		case 3:
			currentOverviewRangeType = 1;
			break;
		case 4:
			currentOverviewRangeType = 2;
			break;
		case 5:
			currentOverviewRangeType = 2;
			break;
		case 6:
			currentOverviewRangeType = 2;
			break;
	
	}
	
	process(current_unixtime-selObj.options[selObj.selectedIndex].value,current_unixtime, currentSubject, currentOverviewRangeType, null);
	
	if (restore) selObj.selectedIndex=0;
}


// get the last one day.
function onSystemLoad()
{
	// load subjectInfo
	loadSubjectInfo();

	// set default request parameter list
	showHideLabelArray[0] = true; // set show score to true;
	showHideLabelArray[1] = false; // set show annotation to true;
	showHideLabelArray[2] = true; // set show usage data to true;
	
	// put UTC GMT
	var current_unixtime = new Date().getTime() - 60*60*4*1000;
	//var current_unixtime = new Date().getTime() + 60*60*19*1000;
	
	// a month
	currentOverviewRange = {xaxis: {from: current_unixtime-86400000, to: current_unixtime}, yaxis: {from: null, to: null}};
	
	process(current_unixtime-86400000, current_unixtime, currentSubject, 1, null);
}

function loadSubjectInfo(){
	$.getJSON("http://wockets.scripts.mit.edu/subjectsInfo.php", function(data){
		
		var subjectSelectDiv = document.getElementById('subjectSelectDiv');
		tmpStr = "Select Subject";
		tmpStr += '<select name="selectSubject" id="selectSubject" onchange="MM_selectSubject(\'parent\',this,0)">';
		
		for(i in data){
			
			tmpStr += '<option value="'+data[i].id+'">'+data[i].nickname+'</option>';
			
		}
		
		tmpStr += '</select>';
		subjectSelectDiv.innerHTML = tmpStr;
	});
}

// checkbox actions. Every check will issue a new call to the server
function alteredPlotDisplay()
{
	//add your new element here.
	for (var i in paramList) 
	{
		//documentElementList[i] = document.getElementById(paramList[i]);
		var checkElem = document.getElementById(paramList[i]);
		showHideLabelArray[i] = checkElem.checked;
	}
	
	// refresh the chart
	if(currentSelectedRange != 0 ){
		process(currentSelectedRange.xaxis.from, currentSelectedRange.xaxis.to, currentSubject, currentRangeType, currentOverview);
	}else{
		process(loadedRange.xaxis.from, loadedRange.xaxis.to, currentSubject, currentRangeType, currentOverview);
	}
}

</script>
<title>Wockets Transmission Server</title>
</head>

<body onload="onSystemLoad()">
	
<h1>Wockets Test Bed</h1>
Show Transmission Data
<input type="checkbox" id="score" onchange="alteredPlotDisplay()" checked="checked"/>
Show Activity Annotation
<input type="checkbox" id="usageData" onchange="alteredPlotDisplay()" checked="checked"/>
Show Other
<input type="checkbox" id="annotation" onchange="alteredPlotDisplay()"/>
<br />
Show data from the last 
<select name="jumpMenu" id="jumpMenu" onchange="MM_selectDateRange('parent',this,0)">
    <option value="86400000" selected="selected">1 day</option>
    <option value="259200000">3 days</option>
    <option value="604800000">1 week</option>
    <option value="2592000000">1 month</option>
    <option value="7776000000">3 months</option>
    <option value="31536000000">1 year</option>
    <option value="63072000000">2 years</option>
</select>
<div id="subjectSelectDiv"></div>

<div id="placeholder" style="width:800px;height:300px;"></div>
<table border="0">
<tr>
	<td><input id="setSelectionLeft" type="button" value="Pan Left"/></td>
	<td><div id="overview" style="width:640px;height:100px"></div></td>
	<td><input id="setSelectionRight" type="button" value="Pan Right"/></td>
</tr>
</table>
<div id="ajaxStatus" align="right" style="position:absolute;width:100px;left:700px;top:80px"></div>

<div id="divContext" style="border: 2px solid blue; display: none; position: absolute">
<ul class="cmenu">
    <li><div>Add Note: <input type="text" name="commentTextBox" id="commentTextBox" width="30" onkeypress="onCommentEntered(event)"/></div></li>
    <li><div id="markTrash">Mark As Trash</div></li>
    <hr/>
    <li><div id="zoomSelection">Zoom Selection</div></li>
    <li><div id="zoomToOverview">Zoom To Overview Range</div></li>
    <hr/>
    <li><div id="cancel">Cancel</div></li>
</ul>
</div>
</body>

<script language="javascript" type="text/javascript">

function ZoomToOverviewRange(){
	var overviewRange = {xaxis: {from: currentOverview.getAxes().xaxis.min, to: currentOverview.getAxes().xaxis.max}};
	currentOverview.setSelection(overviewRange);
}

</script>
</html>
