<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<style type="text/css">
	.cmenu {margin: 0; padding: 0.3em; list-style-type: none; background-color: white;}
	.cmenu hr {border: 0; border-bottom: 1px solid grey; margin: 3px 0px 3px 0px;}
	.cmenu div {font-size: 12px; border: 1 !important;}
	.cmenu div:hover {font-weight:bold;}
</style>

<link rel="stylesheet" href="jquery/jquery.tooltip.css" />

<script language="javascript" type="text/javascript" src="config.js"></script>
<script language="javascript" type="text/javascript" src="jquery/jquery.js"></script>
<script language="javascript" type="text/javascript" src="jquery/jquery.flot.js"></script>
<script language="javascript" type="text/javascript" src="jquery/jquery.flot.selection.js"></script>
<script language="javascript" type="text/javascript" src="jquery/jquery.dimensions.js"></script>
<script language="javascript" type="text/javascript" src="jquery/jquery.tooltip.js"></script>
<script language="javascript" type="text/javascript" src="jquery/jquery.rightClick.js"></script>
<script language="javascript" type="text/javascript" src="jquery/javascript_cookies.js"></script>

<script language="javascript" type="text/javascript">

// color array for assigning colours to annotations.

// currently just six colors, need to add more or code a limitation.
var colorPalette = ['33CC66', 'ffa0ff', 'a0ff00', 'c0a080', '60c0ff'];
//var colorPalette = ['FF6600','404040','980000','666600','9900CC','990099', 'CC0066'];
var colorPaletteDark = ['404040','980000','666600','9900CC','FF6600','990099', 'CC0066'];

var currentRangeType = new Array();
var currentOverviewRange;
var currentOverviewRangeType = 1;
var currentSelectedRange = 0;
var lastVisibleTagX = 0;
var lastVisibleTagXSubjectId = 0;
var lastPlot = 0; // used to get plotOffsets.

// for handling zoom event
var currentPlotOptions = new Array();
var currentPlotData = new Array();
var loadedRange;

// subject count = should be populated by the subject amount query in the beginning.
var subjectInfoList = new Array();
var subjectReorderTable = new Array();
var problemUnresolvedSubjectsList = new Array();
var unverifiedSubjectsList = new Array();

// define parameter list, but the simplist way is to define an enumeration
var paramList = ['activity', 'simpleFoodTracking', 'onplotnotes', 'weightTracking', 'fileUploadEventTracking'];
var currentSelectedParam = 'activity';

// first time load flag, for getting the user information first.
var usersLoaded = false;

// define global max values for plots.
var maxNumeric = 250; // for global color scaling. Can't be exact because the plots are loaded in parallel.

function process(start_unixtime, end_unixtime, subject_id, query_range_type)
{
	$.getJSON(hostURL+"/mainPlotServer.php", { start_unixtime: start_unixtime, end_unixtime: end_unixtime, reqRange: query_range_type, subjectid: subject_id, currentParam: currentSelectedParam, project: currentProject },function(data){
		currentRangeType[subject_id] = query_range_type;
		plotChart(data, subject_id);
	});
}

function plotChart(plotData, subject_id){
	
	var markings = makeMarkings(subject_id, plotData);
	addReorderCue(subject_id, plotData);
	
    var options = {
        xaxis: { ticks: [], mode: "time"},
		yaxis: { ticks: []},
        selection: { mode: "x"},
		lines: {show: false},
		grid: {markings: markings, hoverable: true},
		legend: {
			show: false,
			position: "se"
		}
    };
	
	currentPlotOptions[subject_id] = options;
	currentPlotData[subject_id] = plotData;
	
	var plot = $.plot($("#plot-"+subject_id), plotData.numeric, options);
	lastPlot = plot;
	
	// bind the loaded range with the selected range when something is selected.
	// causing a minor problem: once panned out of range, all panning will require a call to the server.
	if(currentSelectedRange != 0){
		loadedRange = currentSelectedRange;
		
	}else{ // when the plot first starts
		loadedRange = currentOverviewRange;
		loadedRange.yaxis.from =  plot.getAxes().yaxis.min;
		loadedRange.yaxis.to = plot.getAxes().yaxis.max;
	}
	
	//plotMetaData(plot, $("#plot-"+subject_id), plotData, loadedRange);
	plotAnnotation(plot, $("#plot-"+subject_id), plotData, loadedRange, subject_id);
	plotRangeAnnotation(plot, $("#plot-"+subject_id), plotData, loadedRange);
	
	$("#plot-"+subject_id).bind("plothover", function (event, pos, item) {
		
		// for getting comments. 
		// hoverX = pos.x.toFixed(0);
		
		var plotElem = document.getElementById("plot-"+subject_id);
		var offset = plotElem.offsetLeft;
		
		// for hovering over labels. 
		var currentX = window.event.clientX - offset;
		
		try{
			if(Math.abs(currentX - lastVisibleTagX) > 3)
				document.getElementById(subject_id+"-"+lastVisibleTagX).style.visibility = 'hidden';
		}catch(err){
			$("#temp").text(err);
		}
		
		try{
			document.getElementById(subject_id+"-"+currentX).style.visibility = 'visible';
			lastVisibleTagX = currentX;
			lastVisibleTagXSubjectId = subject_id;
		}catch(err){
			$("#temp").text(err);
		}
	});
	
	// clear last event binding. 
	$("#plot-"+subject_id).unbind("plotselected");
	
	$("#plot-"+subject_id).bind("plotselected", function (event, ranges) {
		
		currentSelectedRange = ranges;
		changeTitleBar(ranges.xaxis.from, ranges.xaxis.to);
		
		for(var i=0; i<subjectInfoList.length; i++){
			ZoomSelection(subjectInfoList[i].id, currentSelectedRange);
		}
    });
	
	$("#plot-"+subject_id).unbind('dblclick');
	
	// double click to show details.
	$("#plot-"+subject_id).dblclick(function() {
		
		window.open(hostURL+"/subjectDetails.htm?subjectId="+subject_id);

	});
	
	$("#plot-"+subject_id).unbind('rightClick');
	
	// right click to reset zoom.
	$("#plot-"+subject_id).rightClick(function() {
		
		changeTitleBar(currentOverviewRange.xaxis.from, currentOverviewRange.xaxis.to);
		
		for(var i=0; i<subjectInfoList.length; i++){
			ZoomSelection(subjectInfoList[i].id, currentOverviewRange);
		}
	});
	
}

function findMax(plotNumeric){
	var maxVal = 0;
	for(annotIndex in plotNumeric)
	{
		for(i in plotNumeric[annotIndex].data)
		{
			if(plotNumeric[annotIndex].data[i][1] > maxVal)
				maxVal = plotNumeric[annotIndex].data[i][1];
		}
	}
	
	return maxVal;
}

// simple object to help reorder plots.
function ReorderObject(sub_id, value, timeLeft){
	this.indexInSubjectInfoList = sub_id;
	this.reorderCue = value;
	this.timeLeftTillNextCheck = timeLeft;
}

function compareValues(a, b) {
	return b.reorderCue - a.reorderCue;
}

function createPlotLists(indexInSubjectInfoList, reorderCue){
	
	// put -5 GMT daylight saving
	var current_unixtime = new Date().getTime() - 60*60*4*1000;
	
	if(subjectInfoList[indexInSubjectInfoList].flagged_with_unresolved_problems=='1'){				
		var dataRecheckInterval = parseInt(subjectInfoList[indexInSubjectInfoList].data_recheck_interval)*3600000;
		var dataLastCheckTime = parseInt(subjectInfoList[indexInSubjectInfoList].data_last_check_datetime);
	
		if(dataLastCheckTime!=0){
			
			var timeSinceLastCheck = current_unixtime - dataLastCheckTime;
			var nextCheckIn = dataRecheckInterval - timeSinceLastCheck;
			
			if(nextCheckIn <= 0){
				problemUnresolvedSubjectsList.push(new ReorderObject(indexInSubjectInfoList, reorderCue, "NOW"));
			}else{
				if(nextCheckIn<86400000){
					var hoursLeft = Math.floor(nextCheckIn/3600000);
					if(hoursLeft==0){
						problemUnresolvedSubjectsList.push(new ReorderObject(indexInSubjectInfoList, reorderCue, "< 1 hour"));
					}else{
						problemUnresolvedSubjectsList.push(new ReorderObject(indexInSubjectInfoList, reorderCue, hoursLeft + " hours"));
					}
				}else{
					var daysLeft = Math.floor(nextCheckIn/86400000);
					if(daysLeft == 1){
						problemUnresolvedSubjectsList.push(new ReorderObject(indexInSubjectInfoList, reorderCue, daysLeft+" day"));
					}else{
						problemUnresolvedSubjectsList.push(new ReorderObject(indexInSubjectInfoList, reorderCue, daysLeft+" days"));
					}
				}
			}
			
		}else{
			problemUnresolvedSubjectsList.push(new ReorderObject(indexInSubjectInfoList, reorderCue, "NOW"));
		}
	}else{
		var dataRecheckInterval = parseInt(subjectInfoList[indexInSubjectInfoList].data_recheck_interval)*3600000;
		var dataLastCheckTime = parseInt(subjectInfoList[indexInSubjectInfoList].data_last_check_datetime);
	
		if(dataLastCheckTime!=0){
			
			var timeSinceLastCheck = current_unixtime - dataLastCheckTime;
			var nextCheckIn = dataRecheckInterval - timeSinceLastCheck;
			
			if(nextCheckIn <= 0){

				unverifiedSubjectsList.push(indexInSubjectInfoList);
			}else{
			
				if(nextCheckIn<86400000){
					var hoursLeft = Math.floor(nextCheckIn/3600000);
					if(hoursLeft==0){
						subjectReorderTable.push(new ReorderObject(indexInSubjectInfoList, reorderCue, "< 1 hour"));
					}else{
						subjectReorderTable.push(new ReorderObject(indexInSubjectInfoList, reorderCue, hoursLeft + " hours"));
					}
				}else{
					var daysLeft = Math.floor(nextCheckIn/86400000);
					if(daysLeft == 1){
						subjectReorderTable.push(new ReorderObject(indexInSubjectInfoList, reorderCue, daysLeft+" day"));
					}else{
						subjectReorderTable.push(new ReorderObject(indexInSubjectInfoList, reorderCue, daysLeft+" days"));
					}
					
				}
			}
			
		}else{
			unverifiedSubjectsList.push(indexInSubjectInfoList);
		}
	}
}

function addReorderCue(subject_id, plotData){
	
	var indexInSubjectInfoList = -1;
	for(i in subjectInfoList){
		if(subjectInfoList[i].id==subject_id){
			indexInSubjectInfoList = i;
			break;
		}
	}
	
	if(indexInSubjectInfoList == -1)
		alert("Can't find subject");
	
	try{
		for(annotIndex in plotData.numeric)
		{
			// the data amount in numeric plotData is not just the two ends inserted to hold the plot.
			if(plotData.numeric[annotIndex].data.length == 2)
				break;
			
			createPlotLists(indexInSubjectInfoList, plotData.numeric[annotIndex].reorderCue);
		}
		
		for(annotIndex in plotData.annotation)
		{
			if(plotData.annotation[annotIndex].length == 0)
				break;
			
			createPlotLists(indexInSubjectInfoList, plotData.annotation[annotIndex].reorderCue);
		}
		
		for(annotIndex in plotData.rangeAnnotation)
		{
			if(plotData.rangeAnnotation[annotIndex].length == 0)
				break;
			
			createPlotLists(indexInSubjectInfoList, plotData.rangeAnnotation[annotIndex].reorderCue);
		}
	}catch(err){}
	
}

function makeMarkings(subject_id, plotData)
{
	var markings = [];
	
	try{
		
		//var maxVal = findMax(plotData.numeric);
		var maxVal = maxNumeric;
		var valStep = maxVal/255;
		
		for(annotIndex in plotData.numeric)
		{
			for(i in plotData.numeric[annotIndex].data)
			{
				
				var entryTime = plotData.numeric[annotIndex].data[i][0];
				var numericValue = plotData.numeric[annotIndex].data[i][1];
				var colorStepInt = parseInt(255 - numericValue/valStep);
				var colorIndVal = 0;
				
				if(colorStepInt >= 0)
					colorIndVal = colorStepInt.toString(16).toUpperCase();
				else
					colorIndVal = "0";
				
				var colorVal = colorIndVal+colorIndVal+colorIndVal;
				
				var nextMarkingIndex = parseInt(i)+(annotIndex*plotData.numeric[annotIndex].data.length);
				
				var extendedRange = 0;
				
				switch(currentRangeType[subject_id]){
					case 0:
						extendedRange = 0;
						break;
					case 1:
						extendedRange = 60*60*1000;
						break;
					case 2:
						extendedRange = 24*60*60*1000;
						break;
				}
				
				var endTime = parseInt(entryTime) + parseInt(extendedRange) +'';
				
				markings[nextMarkingIndex] = { color: colorVal, lineWidth: 1, xaxis: { from: entryTime, to: endTime}};
			}
		}
		
		for(annotIndex in plotData.annotation)
		{
			for(i in plotData.annotation[annotIndex].data)
			{
				//$("#temp").text(plotData.annotation[annotIndex].label);
				
				var entryTime = plotData.annotation[annotIndex].data[i][0];
				var nextMarkingIndex = parseInt(i)+(annotIndex*plotData.annotation[annotIndex].data.length);
				markings[nextMarkingIndex] = { color: colorPalette[annotIndex], lineWidth: 3, xaxis: { from: entryTime, to: entryTime }};
								
			}
		}
	}catch(err){
		return null;
	}
	return markings;
}

function checkPlotRange(ranges)
{
	var new_range = ranges.xaxis.to - ranges.xaxis.from;
	
	// one month
	if(new_range > 30*24*60*60*1000){
		return 2;
	}else if(new_range > 24*60*60*1000){
		return 1;
	}else{
		return 0;
	}
}

function ZoomSelection(subject_id, ranges){

		var plotData = currentPlotData[subject_id];
		var options = currentPlotOptions[subject_id];
		
		// do the zooming
        plot = $.plot($("#plot-"+subject_id), plotData.numeric,
                      $.extend(true, {}, options, {
                          xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to }
                      }));
		
		var rangeType = checkPlotRange(ranges);
		
		if(rangeType != currentRangeType[subject_id])
		{
			currentRangeType[subject_id] = rangeType;
			process(ranges.xaxis.from, ranges.xaxis.to, subject_id, rangeType);
			return;	
		}
		
		//plotMetaData(plot, $("#plot-"+subject_id), plotData, ranges);
		plotAnnotation(plot, $("#plot-"+subject_id), plotData, ranges, subject_id);
		plotRangeAnnotation(plot, $("#plot-"+subject_id), plotData, loadedRange);

}

// plot meta data.

function plotMetaData(plot, plotElem, plotData, ranges)
{
	//$("#temp").text(plotData.meta.checkedTime);
	
	var o1 = plot.pointOffset({ x: plotData.meta.checkedTime, y: -360});
	var o2 = plot.pointOffset({ x: plotData.meta.uploadedTime, y: -460});
	
	var poff = plot.getPlotOffset();
	var absoluteRight = (poff.left + plot.width());
	
	// checked/unchecked data.
	
	if(o1.left > absoluteRight)
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+ (poff.top + plot.height() - 12)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="' + o1.left + '" height="4" align="center" valign="middle" bgcolor="#00CC33"></td><td align="center" valign="middle" bgcolor="#000000"></td></tr></table></div>');
	}else if(o1.left > 0)
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+ (poff.top + plot.height() - 12)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="' + o1.left + '" height="4" align="center" valign="middle" bgcolor="#00CC33"></td><td align="center" valign="middle" bgcolor="#FF6666"></td></tr></table></div>');
	}else
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+ (poff.top + plot.height() - 12)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="1" height="4" align="center" valign="middle" bgcolor="#000000"></td><td align="center" valign="middle" bgcolor="#FF6666"></td></tr></table></div>');
	}
	
	// uploaded/unuploaded data
	
	if(o2.left > absoluteRight)
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+(poff.top + plot.height() - 7)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="' + o2.left + '" height="4" align="center" valign="middle" bgcolor="#000000"></td><td align="center" valign="middle" bgcolor="#C0C0C0"></td></tr></table></div>');
	}else if(o2.left > 0)
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+(poff.top + plot.height() - 7)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="' + o2.left + '" height="4" align="center" valign="middle" bgcolor="#000000"></td><td align="center" valign="middle" bgcolor="#C0C0C0"></td></tr></table></div>');
	}else
	{
		plotElem.append('<div align="left" style="opacity:0.80;position:absolute;left:' + (poff.left) + 'px;top:'+(poff.top + plot.height() - 7)+'px"><table width="' + plot.width() + '" border="0"><tr><td width="1" height="4" align="center" valign="middle" bgcolor="#000000"></td><td align="center" valign="middle" bgcolor="#C0C0C0"></td></tr></table></div>');
	}
	
	
}

// Plot notes that shows on plot as blocks.

function plotRangeAnnotation(plot, plotElem, plotData, ranges)
{
	var commentHistory = new Array();
	var commentIndex = 0;
	
	try{
		for(annotIndex in plotData.rangeAnnotation)
		{
			for(i in plotData.rangeAnnotation[annotIndex].data)
			{
				var startUnixTime = plotData.rangeAnnotation[annotIndex].data[i][0];
				var endUnixTime = plotData.rangeAnnotation[annotIndex].data[i][1];
				var noteType = plotData.rangeAnnotation[annotIndex].data[i][2];
				var notes = plotData.rangeAnnotation[annotIndex].data[i][3];
				var reviewerID = parseInt(plotData.rangeAnnotation[annotIndex].data[i][4]) % colorPaletteDark.length;
				var reviewerName = plotData.rangeAnnotation[annotIndex].data[i][5];
				var noteID = "note-" + plotData.rangeAnnotation[annotIndex].data[i][6];
				
				var startTimeOffset = plot.pointOffset({ x: startUnixTime, y: ranges.yaxis.to});
				var endTimeOffset = plot.pointOffset({ x: endUnixTime, y: ranges.yaxis.to});
				
				var eventDuration = endTimeOffset.left - startTimeOffset.left;
				var plotOffset = plot.getPlotOffset();
				var plotWidth = plot.width();
				var rightSidePlot = plotOffset.left + plot.width();
				
				// determine row to plot, return the row number.
				var row = commentRowToPlot(commentHistory, startTimeOffset, endTimeOffset);
				var rowHeight = 5;
				
				// Notes, thin line version. 
				if((startTimeOffset.left > plotOffset.left) && (endTimeOffset.left < (rightSidePlot))){
					plotElem.append('<div id="' + noteID + '" title="Reviewer '+ reviewerName + ': '+ notes +'" align="center" style="border:1px;height:'+rowHeight+';width:'+eventDuration+'px;background-color:#' 
					+ colorPaletteDark[reviewerID] + ';opacity:0.80;padding:2px;position:absolute;left:' + (startTimeOffset.left) 
					+ 'px;top:' + (plotOffset.top + rowHeight*row) + 'px;color:#666;font-size:12px;font-family:Arial"></div>');
					
					commentHistory.push({startTimeOffset: startTimeOffset, endTimeOffset: endTimeOffset, usedSlot: row });
					
				}else if((startTimeOffset.left > plotOffset.left) && (startTimeOffset.left < rightSidePlot) && (endTimeOffset.left > (rightSidePlot))){
					plotElem.append('<div id="' + noteID + '" title="Reviewer '+ reviewerName + ': '+ notes +'" align="center" style="border:1px;height:'+rowHeight+';width:'+(rightSidePlot - startTimeOffset.left)
					+'px;background-color:#' + colorPaletteDark[reviewerID] + ';opacity:0.80;padding:2px;position:absolute;left:' 
					+ (startTimeOffset.left) + 'px;top:' + (plotOffset.top + rowHeight*row) + 'px;color:#666;font-size:12px;font-family:Arial"></div>');
					
					commentHistory.push({startTimeOffset: startTimeOffset, endTimeOffset: endTimeOffset, usedSlot: row });
					
				}else if((startTimeOffset.left < plotOffset.left) && (endTimeOffset.left < (rightSidePlot)) && (endTimeOffset.left > plotOffset.left)){
					plotElem.append('<div id="' + noteID + '" title="Reviewer '+ reviewerName + ': '+ notes +'" align="center" style="border:1px;height:'+rowHeight+';width:'+(startTimeOffset.left - plotOffset.left)
					+'px;background-color:#' + colorPaletteDark[reviewerID] + ';opacity:0.80;padding:2px;position:absolute;left:' 
					+ plotOffset.left + 'px;top:' + (plotOffset.top + rowHeight*row) + 'px;color:#666;font-size:12px;font-family:Arial"></div>');
									
					commentHistory.push({startTimeOffset: startTimeOffset, endTimeOffset: endTimeOffset, usedSlot: row });
					
				}else if((startTimeOffset.left < plotOffset.left) && (endTimeOffset.left > (rightSidePlot))){
					plotElem.append('<div id="' + noteID + '" title="Reviewer '+ reviewerName + ': '+ notes +'" align="center" style="border:1px;height:'+rowHeight+';width:'+(plot.width())
					+'px;background-color:#' + colorPaletteDark[reviewerID] + ';opacity:0.80;padding:2px;position:absolute;left:' 
					+ plotOffset.left + 'px;top:' + (plotOffset.top + rowHeight*row) + 'px;color:#666;font-size:12px;font-family:Arial"></div>');

					commentHistory.push({startTimeOffset: startTimeOffset, endTimeOffset: endTimeOffset, usedSlot: row });
				}else{
					continue;
				}
				
				addToolTips(noteID);
				
				/*
				 * Notes, text version, not so good, overlaps.
				 * 
				if((startTimeOffset.left > plotOffset.left) && (endTimeOffset.left < (rightSidePlot))){
					plotElem.append('<div align="center" style="border:1px;width:'+eventDuration+'px;background-color:#' 
					+ colorPalette[reviewerID] + ';opacity:0.80;padding:2px;position:absolute;left:' + (startTimeOffset.left) 
					+ 'px;top:' + (plotOffset.top) + 'px;color:#666;font-size:12px;font-family:Arial">'+ notes +'</div>');
				}else if((startTimeOffset.left > plotOffset.left) && (endTimeOffset.left > (rightSidePlot))){
					plotElem.append('<div align="center" style="border:1px;width:'+(rightSidePlot - startTimeOffset.left)
					+'px;background-color:#' + colorPalette[reviewerID] + ';opacity:0.80;padding:2px;position:absolute;left:' 
					+ (startTimeOffset.left) + 'px;top:' + (plotOffset.top) + 'px;color:#666;font-size:12px;font-family:Arial">'+ notes +'</div>');
				}else if((startTimeOffset.left < plotOffset.left) && (endTimeOffset.left < (rightSidePlot))){
					plotElem.append('<div align="center" style="border:1px;width:'+(startTimeOffset.left - plotOffset.left)
					+'px;background-color:#' + colorPalette[reviewerID] + ';opacity:0.80;padding:2px;position:absolute;left:' 
					+ plotOffset.left + 'px;top:' + (plotOffset.top) + 'px;color:#666;font-size:12px;font-family:Arial">'+ notes +'</div>');
				}else if((startTimeOffset.left < plotOffset.left) && (endTimeOffset.left > (rightSidePlot))){
					plotElem.append('<div align="center" style="border:1px;width:'+(plot.width())
					+'px;background-color:#' + colorPalette[reviewerID] + ';opacity:0.80;padding:2px;position:absolute;left:' 
					+ plotOffset.left + 'px;top:' + (plotOffset.top) + 'px;color:#666;font-size:12px;font-family:Arial">'+ notes +'</div>');
				}
				*/
				
				//$("#temp").text(startUnixTime+" "+endUnixTime+" "+noteType+" "+notes);
			}
		}
		
		// add the temp tooltip here.
		/*
		$("div[id^='note-']").tooltip({ 
		    track: true, 
		    delay: 0, 
		    showURL: false, 
		    showBody: " - ", 
		    opacity: 0.95
		});
		*/
	
	}catch(err){
		//alert("no recent data");
	}	
}

function addToolTips(noteID){
	$("#"+noteID).tooltip({ 
	    track: true, 
	    delay: 0, 
	    showURL: false, 
	    showBody: " - ", 
	    opacity: 0.95
	});
}

function commentRowToPlot(commentHistory, startTimeOffset, endTimeOffset){
	
	var rowCount = 0;
	
	var overlappingSlotsUsed = new Array();
	var slotCounter = 0;
	
	if(commentHistory.length == 0){
		return rowCount;
	}else{
		for (i in commentHistory) {
			var historyComment = commentHistory[i];
			if((historyComment.startTimeOffset.left < startTimeOffset.left) && (historyComment.endTimeOffset.left > startTimeOffset.left)){
				overlappingSlotsUsed[commentHistory[i].usedSlot] = 1;
			}else if((historyComment.startTimeOffset.left < endTimeOffset.left) && (historyComment.endTimeOffset.left > endTimeOffset.left)){
				overlappingSlotsUsed[commentHistory[i].usedSlot] = 1;
			}else if((historyComment.startTimeOffset.left > startTimeOffset.left) && (historyComment.endTimeOffset.left < endTimeOffset.left)){
				overlappingSlotsUsed[commentHistory[i].usedSlot] = 1;
			}
		}
		
		// find first available row for insertion
		while(overlappingSlotsUsed[rowCount]==1){
			rowCount++;
		}
		
		return rowCount;
	}
}

// Plot annotation.

function plotAnnotation(plot, plotElem,  plotData, ranges, subject_id)
{
	try{
		for(annotIndex in plotData.annotation)
		{
			for(i in plotData.annotation[annotIndex].data)
			{
				var entryTime = plotData.annotation[annotIndex].data[i][0];
				
				if((entryTime >= ranges.xaxis.from)&&( entryTime <= ranges.xaxis.to)){

					var o = plot.pointOffset({ x: entryTime, y: ranges.yaxis.from + Math.random()*(ranges.yaxis.to-ranges.yaxis.from)*0.85});

					plotElem.append('<div id="' + subject_id + '-' + o.left + '" align="left" style="border:1px;background-color:#' + colorPalette[annotIndex] 
					+ ';opacity:0.80;padding:2px;position:absolute;left:' + (o.left) + 'px;top:' + (o.top - 15) 
					+ 'px;color:#666;font-size:12px;font-family:Arial;visibility:hidden">'+ plotData.annotation[annotIndex].label 
					+ ': ' + plotData.annotation[annotIndex].data[i][1] +'</div>');
					
					
					// draw a little arrow on top of the last label to demonstrate
					/*
						var ctx = plot.getCanvas().getContext("2d");
						ctx.beginPath();
						o.left += 4;
						ctx.moveTo(o.left - 5, o.top);
						ctx.lineTo(o.left - 5, o.top - 10);
						ctx.lineTo(o.left - 15, o.top - 5);
						ctx.lineTo(o.left - 5, o.top);
						ctx.fillStyle = "#" + colorPalette[annotIndex];
						ctx.fill();
					*/
				}
			}
		}
	}catch(err){
		//alert("no recent data");
	}
}

// for debuggig ajax calls.

$.ajaxSetup({"error":function(XMLHttpRequest,textStatus, errorThrown) { 
      alert(textStatus);
      alert(errorThrown);
      alert(XMLHttpRequest.responseText);
}});

$(document).ajaxStart(function(){
  	toggleLoadingScreen(true);
});

$(document).ajaxComplete(function(){
	
	if(!usersLoaded){
		usersLoaded = true;
		loadPlots();
	}

});

$(document).ajaxStop(function() {
	// check if the reorder table's size is the same as subject count
	// it means that all subjects's data are loaded.
  	reorderResults();
  	toggleLoadingScreen(false);
});

function toggleLoadingScreen(loadingScreen){
	
	//hide load screen for debugging.
	//loadingScreen = false;
	if(loadingScreen){
		
  		// show content
		var mainContent = document.getElementById('mainContent');
		mainContent.style.visibility = 'hidden';
	
  		// hide loading screen
		var loadingIcon = document.getElementById('loading');
		loadingIcon.style.visibility = 'visible';
  		
	}else{
		
  		// show content
		var mainContent = document.getElementById('mainContent');
		mainContent.style.visibility = 'visible';
	
  		// hide loading screen
		var loadingIcon = document.getElementById('loading');
		loadingIcon.style.visibility = 'hidden';
	
	}
}

// reorder plots in the table.
function reorderResults(){
	
	var problemUnresolvedSubjectsOffset = 110;
	var unverifiedSubjectsOffset = 0;
	var verifiedSubjectsOffset = 0;
	
	problemUnresolvedSubjectsList.sort(compareValues);
	
	var problem_title = document.getElementById("problem-title");
	var checkin_title1 = document.getElementById("checkin-title1");
	var uid_title1 = document.getElementById("uid-title1");
	var appVersion_title1 = document.getElementById("version-title1");
	var plot_title1 = document.getElementById("plot-title1");
	
	problem_title.style.top = problemUnresolvedSubjectsOffset - 60 + 'px';
	checkin_title1.style.top = problemUnresolvedSubjectsOffset - 20 + 'px';
	uid_title1.style.top = problemUnresolvedSubjectsOffset - 20 + 'px';
	appVersion_title1.style.top = problemUnresolvedSubjectsOffset - 20 + 'px';
	plot_title1.style.top = problemUnresolvedSubjectsOffset + 'px';
		
	// for the problem unresolved subjects
	for(i in problemUnresolvedSubjectsList){
		
		// plot the table elements
		var checkin = document.getElementById("checkin-"+subjectInfoList[problemUnresolvedSubjectsList[i].indexInSubjectInfoList].id);
		var uid = document.getElementById("uid-"+subjectInfoList[problemUnresolvedSubjectsList[i].indexInSubjectInfoList].id);
		var appVersion = document.getElementById("version-"+subjectInfoList[problemUnresolvedSubjectsList[i].indexInSubjectInfoList].id);
		
		checkin.innerHTML = problemUnresolvedSubjectsList[i].timeLeftTillNextCheck;
		appVersion.innerHTML = subjectInfoList[problemUnresolvedSubjectsList[i].indexInSubjectInfoList].app_version;
		uid.innerHTML = subjectInfoList[problemUnresolvedSubjectsList[i].indexInSubjectInfoList].id;

		checkin.style.top = (problemUnresolvedSubjectsOffset + 20 + 55*i) + 'px';
		checkin.style.left = 10 + 'px';
		
		uid.style.top = (problemUnresolvedSubjectsOffset + 20 + 55*i) + 'px';
		uid.style.left = 80 + 'px';
		
		appVersion.style.top = (problemUnresolvedSubjectsOffset + 20 + 55*i) + 'px';
		appVersion.style.left = 750 + 'px';
		
		var plotElem = document.getElementById("plot-"+subjectInfoList[problemUnresolvedSubjectsList[i].indexInSubjectInfoList].id);
		plotElem.style.top = (problemUnresolvedSubjectsOffset + 55*i) + 'px';
		plotElem.style.left = 130 + 'px';
		
		unverifiedSubjectsOffset = problemUnresolvedSubjectsOffset + 55*i+140;
	}
	
	if(problemUnresolvedSubjectsList.length == 0){
		unverifiedSubjectsOffset = problemUnresolvedSubjectsOffset+140;
	}
	
	// clear the problem unresolved list.
	problemUnresolvedSubjectsList.length = 0;
	
	
	// for unverified subjects
	
	var unverified_title = document.getElementById("unverified-title");
	var checkin_title2 = document.getElementById("checkin-title2");
	var uid_title2 = document.getElementById("uid-title2");
	var appVersion_title2 = document.getElementById("version-title2");
	var plot_title2 = document.getElementById("plot-title2");
	
	unverified_title.style.top = unverifiedSubjectsOffset - 60 + 'px';
	checkin_title2.style.top = unverifiedSubjectsOffset - 20 + 'px';
	uid_title2.style.top = unverifiedSubjectsOffset - 20 + 'px';
	appVersion_title2.style.top = unverifiedSubjectsOffset - 20 + 'px';
	plot_title2.style.top = unverifiedSubjectsOffset + 'px';
	
	for(i in unverifiedSubjectsList){
	
		// plot the table elements
		var checkin = document.getElementById("checkin-"+subjectInfoList[unverifiedSubjectsList[i]].id);
		var uid = document.getElementById("uid-"+subjectInfoList[unverifiedSubjectsList[i]].id);
		var appVersion = document.getElementById("version-"+subjectInfoList[unverifiedSubjectsList[i]].id);
		
		checkin.innerHTML = "NOW";
		appVersion.innerHTML = subjectInfoList[unverifiedSubjectsList[i]].app_version;
		uid.innerHTML = subjectInfoList[unverifiedSubjectsList[i]].id;

		checkin.style.top = (unverifiedSubjectsOffset + 20 + 55*i) + 'px';
		checkin.style.left = 10 + 'px';
		
		uid.style.top = (unverifiedSubjectsOffset + 20 + 55*i) + 'px';
		uid.style.left = 80 + 'px';
		
		appVersion.style.top = (unverifiedSubjectsOffset + 20 + 55*i) + 'px';
		appVersion.style.left = 750 + 'px';
		
		var plotElem = document.getElementById("plot-"+subjectInfoList[unverifiedSubjectsList[i]].id);
		plotElem.style.top = (unverifiedSubjectsOffset + 55*i) + 'px';
		plotElem.style.left = 130 + 'px';
		
		verifiedSubjectsOffset = unverifiedSubjectsOffset+55*i+140;
	}
	
	if(unverifiedSubjectsList.length == 0){
		verifiedSubjectsOffset = unverifiedSubjectsOffset+140;
	}

	
	unverifiedSubjectsList.length = 0;
	
	
	// for the verified subjects.
	var verified_title = document.getElementById("verified-title");
	var checkin_title3 = document.getElementById("checkin-title3");
	var uid_title3 = document.getElementById("uid-title3");
	var appVersion_title3 = document.getElementById("version-title3");
	var plot_title3 = document.getElementById("plot-title3");
	
	verified_title.style.top = verifiedSubjectsOffset - 60 + 'px';
	checkin_title3.style.top = verifiedSubjectsOffset - 20 + 'px';
	uid_title3.style.top = verifiedSubjectsOffset - 20 + 'px';
	appVersion_title3.style.top = verifiedSubjectsOffset - 20 + 'px';
	plot_title3.style.top = verifiedSubjectsOffset + 'px';
	
	subjectReorderTable.sort(compareValues);
	
	for(i in subjectReorderTable){
			
		// plot the table elements
		var checkin = document.getElementById("checkin-"+subjectInfoList[subjectReorderTable[i].indexInSubjectInfoList].id);
		var uid = document.getElementById("uid-"+subjectInfoList[subjectReorderTable[i].indexInSubjectInfoList].id);
		var appVersion = document.getElementById("version-"+subjectInfoList[subjectReorderTable[i].indexInSubjectInfoList].id);
		
		checkin.innerHTML = subjectReorderTable[i].timeLeftTillNextCheck;
		appVersion.innerHTML = subjectInfoList[subjectReorderTable[i].indexInSubjectInfoList].app_version;
		uid.innerHTML = subjectInfoList[subjectReorderTable[i].indexInSubjectInfoList].id;

		checkin.style.top = (verifiedSubjectsOffset + 20 + 55*i) + 'px';
		checkin.style.left = 10 + 'px';
		
		uid.style.top = (verifiedSubjectsOffset + 20 + 55*i) + 'px';
		uid.style.left = 80 + 'px';
		
		appVersion.style.top = (verifiedSubjectsOffset + 20 + 55*i) + 'px';
		appVersion.style.left = 750 + 'px';
		
		var plotElem = document.getElementById("plot-"+subjectInfoList[subjectReorderTable[i].indexInSubjectInfoList].id);
		plotElem.style.top = (verifiedSubjectsOffset + 55*i) + 'px';
		plotElem.style.left = 130 + 'px';
		
	}

  	toggleLoadingScreen(false);
	
	switch(currentRangeType[subjectInfoList[0].id]){
		case 0:
			$("#dataGranularity").text("Data: showing everything");
			break;
		case 1:
			$("#dataGranularity").text("Data: summarized by hour");
			break;
		case 2:
			$("#dataGranularity").text("Data: summarized by day");
			break;
	}
	
	
	// clear the reorder table
	subjectReorderTable.length = 0;

}

// managing selected subject
function MM_selectDateRange(targ,selObj,restore){ 
	
	currentSelectedRange = 0;
	var current_unixtime = new Date().getTime() - 60*60*4*1000;
	switch(selObj.selectedIndex)
	{
		case 0:
			currentOverviewRangeType = 0;
			break;
		case 1:
			currentOverviewRangeType = 1;
			break;
		case 2:
			currentOverviewRangeType = 1;
			break;
		case 3:
			currentOverviewRangeType = 1;
			break;
		case 4:
			currentOverviewRangeType = 2;
			break;
		case 5:
			currentOverviewRangeType = 2;
			break;
		case 6:
			currentOverviewRangeType = 2;
			break;
	}
	
	var start_unixtime = current_unixtime-selObj.options[selObj.selectedIndex].value,current_unixtime;
	var end_unixtime = current_unixtime;
	
	changeTitleBar(start_unixtime, end_unixtime);
	
	currentOverviewRange = {xaxis: {from: start_unixtime, to: end_unixtime}, yaxis: {from: null, to: null}};
	
	for(var i=0; i<subjectInfoList.length; i++){
		process(start_unixtime,end_unixtime, subjectInfoList[i].id, currentOverviewRangeType);
	}
	
	if (restore) selObj.selectedIndex=0;
}

function onSystemLoad(){
	subjectInfoList = findSubjectInformation();
	if (Get_Cookie( 'username' )){
		var upperRightCorner = document.getElementById("loginName");
		upperRightCorner.innerHTML = 'logged in as '+Get_Cookie('username') + '<br><a href="accountManagement.htm">Config</a>';
	}else{
		alert("YOU ARE NOT LOGGED IN! GO AWAY!");
	}
		
	
}

// get the last one day
function loadPlots()
{
	// put -5 GMT
	var current_unixtime = new Date().getTime() - 60*60*4*1000;
	
	// plot the table elements
	var checkin = document.getElementById('checkin');
	var uid = document.getElementById('uid');
	var appVersion = document.getElementById('version');
	
	var checkinHTML = '<div id="checkin-title1" style="left:10px;height:60px;font-size:14px;font-family:Arial;position:absolute;top:50px;text-align:center">Check</div>';
	var uidHTML = '<div id="uid-title1" style="left:70px;height:60px;font-size:14px;font-family:Arial;position:absolute;top:50px">Sbj.</div>';
	var appVersionHTML = '<div id="version-title1" style="left:750px;height:60px;font-size:14px;font-family:Arial;position:absolute;top:50px">Ver.</div>';
	
	checkinHTML += '<div id="checkin-title2" style="left:10px;height:60px;font-size:14px;font-family:Arial;position:absolute;top:50px;text-align:center">Check</div>';
	uidHTML += '<div id="uid-title2" style="left:70px;height:60px;font-size:14px;font-family:Arial;position:absolute;top:50px">Sbj.</div>';
	appVersionHTML += '<div id="version-title2" style="left:750px;height:60px;font-size:14px;font-family:Arial;position:absolute;top:50px">Ver.</div>';
	
	checkinHTML += '<div id="checkin-title3" style="left:10px;height:60px;font-size:14px;font-family:Arial;position:absolute;top:50px;text-align:center">Check</div>';
	uidHTML += '<div id="uid-title3" style="left:70px;height:60px;font-size:14px;font-family:Arial;position:absolute;top:50px">Sbj.</div>';
	appVersionHTML += '<div id="version-title3" style="left:750px;height:60px;font-size:14px;font-family:Arial;position:absolute;top:50px">Ver.</div>';
	
	// title
	//var elementContent = '<div id="plots-title" style="width:800px;height:1px;position:absolute;top:1px"><hr/><h1>Subjects with Data Verified Recently</h1></div>'; 
	var elementContent = '<div id="plot-title1" style="width:600px;height:1px;position:absolute;top:70px;left:130px"></div>';
	elementContent += '<div id="plot-title2" style="width:600px;height:1px;position:absolute;top:70px;left:130px"></div>';
	elementContent += '<div id="plot-title3" style="width:600px;height:1px;position:absolute;top:70px;left:130px"></div>';
	
	// a month
	currentOverviewRange = {xaxis: {from: current_unixtime-2592000000, to: current_unixtime}, yaxis: {from: null, to: null}};
	
	var plots = document.getElementById('plots');
	
	for(var i=0; i<subjectInfoList.length; i++){
		
		//if((subjectInfoList[i].flagged_with_unresolved_problems == 0) && subjectInfoList[i].)
		
		elementContent += '<div id="plot-' + subjectInfoList[i].id + '" style="width:600px;height:60px;position:absolute;top:'+(80 + 70*i)+'px"></div>';
		checkinHTML += '<div id="checkin-' + subjectInfoList[i].id + '" style="height:60px;font-size:14px;font-family:Arial;position:absolute;top:'+(80 + 70*i)+'px"></div>';
		uidHTML += '<div id="uid-' + subjectInfoList[i].id + '" style="height:60px;font-size:14px;font-family:Arial;position:absolute;top:'+(80 + 70*i)+'px"></div>';
		appVersionHTML += '<div id="version-' + subjectInfoList[i].id + '" style="height:60px;font-size:14px;font-family:Arial;position:absolute;top:'+(80 + 70*i)+'px"></div>';
		plots.innerHTML = elementContent;
		
		// a month
		process(current_unixtime-2592000000, current_unixtime, subjectInfoList[i].id, 1);
	}
	
	// fill in the inner HTML after populated.
	checkin.innerHTML = checkinHTML;
	uid.innerHTML = uidHTML;
	appVersion.innerHTML = appVersionHTML;
	
	changeTitleBar(current_unixtime-2592000000, current_unixtime);
	
}

function SubjectInfo(id, app_version, flagged_with_unresolved_problems, data_last_check_datetime, data_recheck_interval){
	this.id = id;
	this.app_version = app_version;
	this.flagged_with_unresolved_problems = flagged_with_unresolved_problems;
	this.data_last_check_datetime = data_last_check_datetime;
	this.data_recheck_interval = data_recheck_interval;
}

function findSubjectInformation(){
	var tempSubjectInfoList = new Array();
	
	$.getJSON(hostURL+"/activeSubjects.php", { project: currentProject }, function(data){
		
		for(i in data){
			tempSubjectInfoList.push(new SubjectInfo(data[i].id, data[i].appVersion, data[i].unresolvedProblems, data[i].dataLastChecked, data[i].dataRecheckInterval))
		}
		
	});
	
	return tempSubjectInfoList;
}

function changeTitleBar(start_unixtime, end_unixtime){
	var options = {
        xaxis: { monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], 
				 mode: "time", ticks: 5, labelWidth: 120, timeformat: "%b %d %y<br>%H:%M %P"},
		yaxis: { ticks: []},
		lines: { show: true},
    };
	
	var plotData = [[start_unixtime, 0],[end_unixtime, 0]];
	
	$.plot($("#plot-title1"), [plotData], options);
	$.plot($("#plot-title2"), [plotData], options);
	$.plot($("#plot-title3"), [plotData], options);
	
}

function MM_selectParam(targ,selObj,restore){ 
	currentSelectedParam = selObj.options[selObj.selectedIndex].value;
	
	for(var i=0; i<subjectInfoList.length; i++){
		process(currentOverviewRange.xaxis.from, currentOverviewRange.xaxis.to, subjectInfoList[i].id, currentRangeType[subjectInfoList[i].id]);
	}
	
	if (restore) selObj.selectedIndex=0;
}

</script>
<title>City Project Main Site</title>
</head>

<body onload="onSystemLoad()">

<div id="loading" style="position:absolute; top:150px; left: 170px"><img src="images/loading.gif" alt="Loading, please wait..." /></div>

Data from last
<select name="jumpMenu" id="jumpMenu" onchange="MM_selectDateRange('parent',this,0)">
    <option value="86400000">1 day</option>
    <option value="259200000">3 days</option>
    <option value="604800000">1 week</option>
    <option value="2592000000" selected="selected">1 month</option>
    <option value="7776000000">3 months</option>
    <option value="31536000000">1 year</option>
    <option value="63072000000">2 years</option>
</select>
Show and order by
<select name="jumpMenu" id="jumpMenu" onchange="MM_selectParam('parent',this,0)">
    <option value="activity">Activity</option>
    <option value="simpleFoodTracking">Simple Food Tracking</option>
    <option value="onplotnotes">On-plot Notes</option>
    <option value="weightTracking">Weight Tracking</option>
    <option value="fileUploadEventTracking">File Upload Event Tracking</option>
</select>

<div id="mainContent" style="visibility: hidden">

<div id="problem-title" style="width:300px;left:10px;font-size:18px;font-family:Arial;position:absolute;top:50px;">Problem Identified and Unresolved</div>
<div id="unverified-title" style="width:300px;left:10px;font-size:18px;font-family:Arial;position:absolute;top:50px;">Require Checking NOW</div>
<div id="verified-title" style="width:300px;left:10px;font-size:18px;font-family:Arial;position:absolute;top:50px;">Recently Checked</div>

<div id="checkin"></div>
<div id="uid"></div>
<div id="plots"></div>
<div id="version"></div>

<div id="dataGranularity" align="right" style="position:absolute;width:190px;left:470px;top:8px"></div>
<div id="loginName" align="right" style="position:absolute;width:140px;left:660px;top:8px; text-align:right"></div>
</div>

</body>
</html>
