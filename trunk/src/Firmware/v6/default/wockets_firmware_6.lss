
wockets_firmware_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00003190  00003244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003190  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00003797  0080010c  0080010c  00003250  2**0
                  ALLOC
  3 .eeprom       00000023  00810000  00810000  00003250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000a08  00000000  00000000  00003274  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000275  00000000  00000000  00003c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000080  00000000  00000000  00003ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000d54  00000000  00000000  00003f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002ba2  00000000  00000000  00004cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000082f  00000000  00000000  00007867  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000029eb  00000000  00000000  00008096  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000460  00000000  00000000  0000aa84  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000b59  00000000  00000000  0000aee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001171  00000000  00000000  0000ba3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  0000cbae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_pubtypes 000000b6  00000000  00000000  0000cbde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
       4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      2c:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_11>
      30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      54:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      58:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      5c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      60:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      64:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      68:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      6c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      70:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      74:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      78:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      7c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      80:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      84:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      88:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      8c:	b2 11       	cpse	r27, r2
      8e:	b2 11       	cpse	r27, r2
      90:	b2 11       	cpse	r27, r2
      92:	b2 11       	cpse	r27, r2
      94:	b2 11       	cpse	r27, r2
      96:	b4 11       	cpse	r27, r4
      98:	b2 11       	cpse	r27, r2
      9a:	ba 11       	cpse	r27, r10
      9c:	b2 11       	cpse	r27, r2
      9e:	b4 11       	cpse	r27, r4
      a0:	b2 11       	cpse	r27, r2
      a2:	b4 11       	cpse	r27, r4
      a4:	b2 11       	cpse	r27, r2
      a6:	b4 11       	cpse	r27, r4
      a8:	b2 11       	cpse	r27, r2
      aa:	b2 11       	cpse	r27, r2
      ac:	b2 11       	cpse	r27, r2
      ae:	b2 11       	cpse	r27, r2
      b0:	b2 11       	cpse	r27, r2
      b2:	b4 11       	cpse	r27, r4
      b4:	b2 11       	cpse	r27, r2
      b6:	ba 11       	cpse	r27, r10
      b8:	b2 11       	cpse	r27, r2
      ba:	b2 11       	cpse	r27, r2
      bc:	b2 11       	cpse	r27, r2
      be:	b8 11       	cpse	r27, r8
      c0:	b4 11       	cpse	r27, r4
      c2:	b6 11       	cpse	r27, r6
      c4:	b4 11       	cpse	r27, r4
      c6:	b2 11       	cpse	r27, r2
      c8:	b2 11       	cpse	r27, r2
      ca:	9c 12       	cpse	r9, r28
      cc:	ca 12       	cpse	r12, r26
      ce:	8b 13       	cpse	r24, r27
      d0:	4c 17       	cp	r20, r28
      d2:	b9 12       	cpse	r11, r25
      d4:	bf 12       	cpse	r11, r31
      d6:	00 15       	cp	r16, r0
      d8:	3b 14       	cp	r3, r11
      da:	85 13       	cpse	r24, r21
      dc:	cf 13       	cpse	r28, r31
      de:	52 17       	cp	r21, r18
      e0:	60 17       	cp	r22, r16
      e2:	77 13       	cpse	r23, r23
      e4:	7d 13       	cpse	r23, r29
      e6:	4f 17       	cp	r20, r31
      e8:	97 12       	cpse	r9, r23
      ea:	8e 12       	cpse	r8, r30
      ec:	94 12       	cpse	r9, r20
      ee:	fb 13       	cpse	r31, r27
      f0:	04 14       	cp	r0, r4
      f2:	70 15       	cp	r23, r0
      f4:	e3 15       	cp	r30, r3
      f6:	aa 16       	cp	r10, r26
      f8:	af 16       	cp	r10, r31
      fa:	b4 16       	cp	r11, r20
      fc:	41 12       	cpse	r4, r17
      fe:	13 14       	cp	r1, r3
     100:	f0 11       	cpse	r31, r0
     102:	e8 16       	cp	r14, r24
     104:	42 17       	cp	r20, r18
     106:	0d 14       	cp	r0, r13

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d0 e4       	ldi	r29, 0x40	; 64
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
     114:	11 e0       	ldi	r17, 0x01	; 1
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	e0 e9       	ldi	r30, 0x90	; 144
     11c:	f1 e3       	ldi	r31, 0x31	; 49
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0b bf       	out	0x3b, r16	; 59
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x14>
     124:	07 90       	elpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	ac 30       	cpi	r26, 0x0C	; 12
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x10>

0000012e <__do_clear_bss>:
     12e:	18 e3       	ldi	r17, 0x38	; 56
     130:	ac e0       	ldi	r26, 0x0C	; 12
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	a3 3a       	cpi	r26, 0xA3	; 163
     13a:	b1 07       	cpc	r27, r17
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
     13e:	0e 94 88 04 	call	0x910	; 0x910 <main>
     142:	0c 94 c6 18 	jmp	0x318c	; 0x318c <_exit>

00000146 <__bad_interrupt>:
     146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <ComputeByte>:
{
    int i;
    unsigned short data;
	// Xor'ing inCrc with inData
    data = (unsigned short)(inCrc ^ inData);
    data <<= 8;
     14a:	36 2f       	mov	r19, r22
     14c:	38 27       	eor	r19, r24
     14e:	20 e0       	ldi	r18, 0x00	; 0
     150:	88 e0       	ldi	r24, 0x08	; 8
     152:	90 e0       	ldi	r25, 0x00	; 0
    for (i = 0; i < 8; i++)
   	{
        if ((data & 0x8000) != 0)
        	data = (unsigned short)(data ^ POLYNOMIAL);
     154:	40 e8       	ldi	r20, 0x80	; 128
     156:	53 e8       	ldi	r21, 0x83	; 131
	// Xor'ing inCrc with inData
    data = (unsigned short)(inCrc ^ inData);
    data <<= 8;
    for (i = 0; i < 8; i++)
   	{
        if ((data & 0x8000) != 0)
     158:	37 ff       	sbrs	r19, 7
     15a:	02 c0       	rjmp	.+4      	; 0x160 <ComputeByte+0x16>
        	data = (unsigned short)(data ^ POLYNOMIAL);
     15c:	24 27       	eor	r18, r20
     15e:	35 27       	eor	r19, r21
    	data = (unsigned short)(data << 1);
     160:	22 0f       	add	r18, r18
     162:	33 1f       	adc	r19, r19
     164:	01 97       	sbiw	r24, 0x01	; 1
    int i;
    unsigned short data;
	// Xor'ing inCrc with inData
    data = (unsigned short)(inCrc ^ inData);
    data <<= 8;
    for (i = 0; i < 8; i++)
     166:	c1 f7       	brne	.-16     	; 0x158 <ComputeByte+0xe>
        if ((data & 0x8000) != 0)
        	data = (unsigned short)(data ^ POLYNOMIAL);
    	data = (unsigned short)(data << 1);
    }
	return (unsigned char)(data >> 8);
}
     168:	83 2f       	mov	r24, r19
     16a:	08 95       	ret

0000016c <ComputeCRC8>:

/* Compute CRC for one byte*/ 
unsigned char ComputeCRC8(unsigned char crc, unsigned char *data, int len)
{
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	7a 01       	movw	r14, r20
	for (int i = 0; (i < len); i++)
     17a:	06 2f       	mov	r16, r22
     17c:	17 2f       	mov	r17, r23
     17e:	c0 e0       	ldi	r28, 0x00	; 0
     180:	d0 e0       	ldi	r29, 0x00	; 0
     182:	06 c0       	rjmp	.+12     	; 0x190 <ComputeCRC8+0x24>
    	crc = ComputeByte(crc, *(data+i));
     184:	f8 01       	movw	r30, r16
     186:	61 91       	ld	r22, Z+
     188:	8f 01       	movw	r16, r30
     18a:	0e 94 a5 00 	call	0x14a	; 0x14a <ComputeByte>
}

/* Compute CRC for one byte*/ 
unsigned char ComputeCRC8(unsigned char crc, unsigned char *data, int len)
{
	for (int i = 0; (i < len); i++)
     18e:	21 96       	adiw	r28, 0x01	; 1
     190:	ce 15       	cp	r28, r14
     192:	df 05       	cpc	r29, r15
     194:	bc f3       	brlt	.-18     	; 0x184 <ComputeCRC8+0x18>
    	crc = ComputeByte(crc, *(data+i));
    return crc;
}
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	1f 91       	pop	r17
     19c:	0f 91       	pop	r16
     19e:	ff 90       	pop	r15
     1a0:	ef 90       	pop	r14
     1a2:	08 95       	ret

000001a4 <CRC16>:

/* Compute CRC for two bytes of data or unsigned short*/   
unsigned short CRC16(unsigned char *buf, int len )
{
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	fc 01       	movw	r30, r24
	unsigned short crc = 0;
     1aa:	40 e0       	ldi	r20, 0x00	; 0
     1ac:	50 e0       	ldi	r21, 0x00	; 0
	while( len-- ) {
		int i;
		crc ^= *(char *)buf++ << 8;
		for( i = 0; i < 8; ++i ) {
			if( crc & 0x8000 )
				crc = (crc << 1) ^ 0x1021;
     1ae:	c1 e2       	ldi	r28, 0x21	; 33
     1b0:	d0 e1       	ldi	r29, 0x10	; 16

/* Compute CRC for two bytes of data or unsigned short*/   
unsigned short CRC16(unsigned char *buf, int len )
{
	unsigned short crc = 0;
	while( len-- ) {
     1b2:	12 c0       	rjmp	.+36     	; 0x1d8 <CRC16+0x34>
		int i;
		crc ^= *(char *)buf++ << 8;
     1b4:	31 91       	ld	r19, Z+
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	42 27       	eor	r20, r18
     1ba:	53 27       	eor	r21, r19
     1bc:	88 e0       	ldi	r24, 0x08	; 8
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	da 01       	movw	r26, r20
     1c2:	aa 0f       	add	r26, r26
     1c4:	bb 1f       	adc	r27, r27
		for( i = 0; i < 8; ++i ) {
			if( crc & 0x8000 )
     1c6:	57 ff       	sbrs	r21, 7
     1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <CRC16+0x2e>
				crc = (crc << 1) ^ 0x1021;
     1ca:	ad 01       	movw	r20, r26
     1cc:	4c 27       	eor	r20, r28
     1ce:	5d 27       	eor	r21, r29
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <CRC16+0x30>
			else
				crc = crc << 1;
     1d2:	ad 01       	movw	r20, r26
     1d4:	01 97       	sbiw	r24, 0x01	; 1
{
	unsigned short crc = 0;
	while( len-- ) {
		int i;
		crc ^= *(char *)buf++ << 8;
		for( i = 0; i < 8; ++i ) {
     1d6:	a1 f7       	brne	.-24     	; 0x1c0 <CRC16+0x1c>

/* Compute CRC for two bytes of data or unsigned short*/   
unsigned short CRC16(unsigned char *buf, int len )
{
	unsigned short crc = 0;
	while( len-- ) {
     1d8:	61 50       	subi	r22, 0x01	; 1
     1da:	70 40       	sbci	r23, 0x00	; 0
     1dc:	8f ef       	ldi	r24, 0xFF	; 255
     1de:	6f 3f       	cpi	r22, 0xFF	; 255
     1e0:	78 07       	cpc	r23, r24
     1e2:	41 f7       	brne	.-48     	; 0x1b4 <CRC16+0x10>
			else
				crc = crc << 1;
		}
	}
	return crc;
}
     1e4:	ca 01       	movw	r24, r20
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <_send_pdu>:
/* This function sends the raw data to the phone.
Sending a PDU, in an uncompressed mode, requires 10bits per axis. In typical scenarios, the accelerometer 
on the body is not moving or is moving slightly, it is therefore redundant to send the 10bits. Instead, if 
the difference between consecutive values, the differential data, is less than 32 (2^5), the differential
value is sent in compress mode within 5 bits*/
static __inline__ void _send_pdu(unsigned short x, unsigned short y, unsigned short z) {	
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	ec 01       	movw	r28, r24
     1fa:	8b 01       	movw	r16, r22
     1fc:	7a 01       	movw	r14, r20
	if(compress) {
     1fe:	80 91 25 01 	lds	r24, 0x0125
     202:	88 23       	and	r24, r24
     204:	09 f4       	brne	.+2      	; 0x208 <_send_pdu+0x1c>
     206:	75 c0       	rjmp	.+234    	; 0x2f2 <_send_pdu+0x106>
		deltasign = 0x00;
     208:	10 92 71 38 	sts	0x3871, r1
		if (x > prevx) {
     20c:	80 91 69 0c 	lds	r24, 0x0C69
     210:	90 91 6a 0c 	lds	r25, 0x0C6A
     214:	8c 17       	cp	r24, r28
     216:	9d 07       	cpc	r25, r29
     218:	40 f4       	brcc	.+16     	; 0x22a <_send_pdu+0x3e>
			deltasign |= 0x01; //The first bit from right: sign of difference value in x axis
     21a:	21 e0       	ldi	r18, 0x01	; 1
     21c:	20 93 71 38 	sts	0x3871, r18
			diffx = x - prevx;
     220:	9e 01       	movw	r18, r28
     222:	28 1b       	sub	r18, r24
     224:	39 0b       	sbc	r19, r25
     226:	c9 01       	movw	r24, r18
     228:	02 c0       	rjmp	.+4      	; 0x22e <_send_pdu+0x42>
		}
		else
			diffx = prevx - x;
     22a:	8c 1b       	sub	r24, r28
     22c:	9d 0b       	sbc	r25, r29
     22e:	90 93 66 0c 	sts	0x0C66, r25
     232:	80 93 65 0c 	sts	0x0C65, r24
		
		if (y > prevy) {
     236:	80 91 6d 0c 	lds	r24, 0x0C6D
     23a:	90 91 6e 0c 	lds	r25, 0x0C6E
     23e:	80 17       	cp	r24, r16
     240:	91 07       	cpc	r25, r17
     242:	50 f4       	brcc	.+20     	; 0x258 <_send_pdu+0x6c>
			deltasign |= 0x02; //The Second bit from right: sign of difference value in y axis
     244:	20 91 71 38 	lds	r18, 0x3871
     248:	22 60       	ori	r18, 0x02	; 2
     24a:	20 93 71 38 	sts	0x3871, r18
			diffy = y - prevy;
     24e:	98 01       	movw	r18, r16
     250:	28 1b       	sub	r18, r24
     252:	39 0b       	sbc	r19, r25
     254:	c9 01       	movw	r24, r18
     256:	02 c0       	rjmp	.+4      	; 0x25c <_send_pdu+0x70>
		}
		else
			diffy = prevy - y;   
     258:	80 1b       	sub	r24, r16
     25a:	91 0b       	sbc	r25, r17
     25c:	90 93 6c 0c 	sts	0x0C6C, r25
     260:	80 93 6b 0c 	sts	0x0C6B, r24
		
		if (z > prevz) {
     264:	80 91 63 38 	lds	r24, 0x3863
     268:	90 91 64 38 	lds	r25, 0x3864
     26c:	8e 15       	cp	r24, r14
     26e:	9f 05       	cpc	r25, r15
     270:	50 f4       	brcc	.+20     	; 0x286 <_send_pdu+0x9a>
			deltasign |= 0x04; //The third bit from right: sign of difference value in z axis
     272:	20 91 71 38 	lds	r18, 0x3871
     276:	24 60       	ori	r18, 0x04	; 4
     278:	20 93 71 38 	sts	0x3871, r18
			diffz = z - prevz;
     27c:	97 01       	movw	r18, r14
     27e:	28 1b       	sub	r18, r24
     280:	39 0b       	sbc	r19, r25
     282:	c9 01       	movw	r24, r18
     284:	02 c0       	rjmp	.+4      	; 0x28a <_send_pdu+0x9e>
		}
		else
			diffz = prevz - z;
     286:	8e 19       	sub	r24, r14
     288:	9f 09       	sbc	r25, r15
     28a:	90 93 62 38 	sts	0x3862, r25
     28e:	80 93 61 38 	sts	0x3861, r24
		
		if ((diffx < 32) && (diffy < 32) && (diffz < 32))			
     292:	80 91 65 0c 	lds	r24, 0x0C65
     296:	90 91 66 0c 	lds	r25, 0x0C66
     29a:	80 32       	cpi	r24, 0x20	; 32
     29c:	91 05       	cpc	r25, r1
     29e:	18 f5       	brcc	.+70     	; 0x2e6 <_send_pdu+0xfa>
     2a0:	e0 91 6b 0c 	lds	r30, 0x0C6B
     2a4:	f0 91 6c 0c 	lds	r31, 0x0C6C
     2a8:	e0 32       	cpi	r30, 0x20	; 32
     2aa:	f1 05       	cpc	r31, r1
     2ac:	e0 f4       	brcc	.+56     	; 0x2e6 <_send_pdu+0xfa>
     2ae:	20 91 61 38 	lds	r18, 0x3861
     2b2:	30 91 62 38 	lds	r19, 0x3862
     2b6:	20 32       	cpi	r18, 0x20	; 32
     2b8:	31 05       	cpc	r19, r1
     2ba:	a8 f4       	brcc	.+42     	; 0x2e6 <_send_pdu+0xfa>
			_send_compressed_pdu((diffx | ((deltasign &0x01)<<5)), (diffy | ((deltasign &0x02)<<4)), 
     2bc:	40 91 71 38 	lds	r20, 0x3871
     2c0:	54 2f       	mov	r21, r20
     2c2:	51 70       	andi	r21, 0x01	; 1
     2c4:	52 95       	swap	r21
     2c6:	55 0f       	add	r21, r21
     2c8:	50 7e       	andi	r21, 0xE0	; 224
     2ca:	64 2f       	mov	r22, r20
     2cc:	62 70       	andi	r22, 0x02	; 2
     2ce:	62 95       	swap	r22
     2d0:	60 7f       	andi	r22, 0xF0	; 240
     2d2:	6e 2b       	or	r22, r30
     2d4:	44 70       	andi	r20, 0x04	; 4
     2d6:	44 0f       	add	r20, r20
     2d8:	44 0f       	add	r20, r20
     2da:	44 0f       	add	r20, r20
     2dc:	42 2b       	or	r20, r18
     2de:	85 2b       	or	r24, r21
     2e0:	0e 94 9c 10 	call	0x2138	; 0x2138 <_send_compressed_pdu>
     2e4:	0c c0       	rjmp	.+24     	; 0x2fe <_send_pdu+0x112>
			(diffz | ((deltasign &0x04)<<3)));
		else
			_send_uncompressed_pdu(x, y, z);
     2e6:	ce 01       	movw	r24, r28
     2e8:	b8 01       	movw	r22, r16
     2ea:	a7 01       	movw	r20, r14
     2ec:	0e 94 4f 10 	call	0x209e	; 0x209e <_send_uncompressed_pdu>
     2f0:	06 c0       	rjmp	.+12     	; 0x2fe <_send_pdu+0x112>
	}
	else {
	 	_send_uncompressed_pdu(x, y, z);
     2f2:	ce 01       	movw	r24, r28
     2f4:	0e 94 4f 10 	call	0x209e	; 0x209e <_send_uncompressed_pdu>
		compress = 1;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 25 01 	sts	0x0125, r24
	}
	prevx = x;
     2fe:	d0 93 6a 0c 	sts	0x0C6A, r29
     302:	c0 93 69 0c 	sts	0x0C69, r28
	prevy = y;
     306:	10 93 6e 0c 	sts	0x0C6E, r17
     30a:	00 93 6d 0c 	sts	0x0C6D, r16
	prevz = z;
     30e:	f0 92 64 38 	sts	0x3864, r15
     312:	e0 92 63 38 	sts	0x3863, r14
}
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	08 95       	ret

00000324 <Filter>:
//--------------------------------------Filter-------------------------------------

// Averaging the accelerometer values of each axis in one miniute for producing the activity count 
unsigned short Filter(unsigned short data,int axis) {
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	9c 01       	movw	r18, r24
     32e:	fb 01       	movw	r30, r22
	 unsigned short mean = 0;
	 int j=0;                
     for (; (j < _SAMPLING_RATE); j++) {
     330:	60 91 06 01 	lds	r22, 0x0106
     334:	c6 2f       	mov	r28, r22
     336:	d0 e0       	ldi	r29, 0x00	; 0
	prevz = z;
}
//--------------------------------------Filter-------------------------------------

// Averaging the accelerometer values of each axis in one miniute for producing the activity count 
unsigned short Filter(unsigned short data,int axis) {
     338:	8c e2       	ldi	r24, 0x2C	; 44
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	e8 9f       	mul	r30, r24
     33e:	d0 01       	movw	r26, r0
     340:	e9 9f       	mul	r30, r25
     342:	b0 0d       	add	r27, r0
     344:	f8 9f       	mul	r31, r24
     346:	b0 0d       	add	r27, r0
     348:	11 24       	eor	r1, r1
     34a:	af 51       	subi	r26, 0x1F	; 31
     34c:	b7 4f       	sbci	r27, 0xF7	; 247
	 unsigned short mean = 0;
	 int j=0;                
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
}
//--------------------------------------Filter-------------------------------------

// Averaging the accelerometer values of each axis in one miniute for producing the activity count 
unsigned short Filter(unsigned short data,int axis) {
	 unsigned short mean = 0;
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	90 e0       	ldi	r25, 0x00	; 0
	 int j=0;                
     for (; (j < _SAMPLING_RATE); j++) {
     356:	0d c0       	rjmp	.+26     	; 0x372 <Filter+0x4e>
	 	  mean += xv[axis][j];	//Initializing the xv is not required because, the activity count is 
     358:	0d 91       	ld	r16, X+
     35a:	1c 91       	ld	r17, X
     35c:	11 97       	sbiw	r26, 0x01	; 1
     35e:	80 0f       	add	r24, r16
     360:	91 1f       	adc	r25, r17
		  						//calculated and saved only once per minute when xv is filled with 
								//valid accelerometer data
          xv[axis][j] = xv[axis][j + 1];		  		  
     362:	4f 5f       	subi	r20, 0xFF	; 255
     364:	5f 4f       	sbci	r21, 0xFF	; 255
     366:	12 96       	adiw	r26, 0x02	; 2
     368:	0d 91       	ld	r16, X+
     36a:	1c 91       	ld	r17, X
     36c:	13 97       	sbiw	r26, 0x03	; 3
     36e:	0d 93       	st	X+, r16
     370:	1d 93       	st	X+, r17

// Averaging the accelerometer values of each axis in one miniute for producing the activity count 
unsigned short Filter(unsigned short data,int axis) {
	 unsigned short mean = 0;
	 int j=0;                
     for (; (j < _SAMPLING_RATE); j++) {
     372:	4c 17       	cp	r20, r28
     374:	5d 07       	cpc	r21, r29
     376:	84 f3       	brlt	.-32     	; 0x358 <Filter+0x34>
	 	  mean += xv[axis][j];	//Initializing the xv is not required because, the activity count is 
		  						//calculated and saved only once per minute when xv is filled with 
								//valid accelerometer data
          xv[axis][j] = xv[axis][j + 1];		  		  
	 }
	 mean = mean / _SAMPLING_RATE;
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	0e 94 44 18 	call	0x3088	; 0x3088 <__udivmodhi4>
     xv[axis][j] = data;
     37e:	86 e9       	ldi	r24, 0x96	; 150
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	e8 9f       	mul	r30, r24
     384:	d0 01       	movw	r26, r0
     386:	e9 9f       	mul	r30, r25
     388:	b0 0d       	add	r27, r0
     38a:	f8 9f       	mul	r31, r24
     38c:	b0 0d       	add	r27, r0
     38e:	11 24       	eor	r1, r1
     390:	ac 0f       	add	r26, r28
     392:	bd 1f       	adc	r27, r29
     394:	aa 0f       	add	r26, r26
     396:	bb 1f       	adc	r27, r27
     398:	af 51       	subi	r26, 0x1F	; 31
     39a:	b7 4f       	sbci	r27, 0xF7	; 247
     39c:	11 96       	adiw	r26, 0x01	; 1
     39e:	3c 93       	st	X, r19
     3a0:	2e 93       	st	-X, r18
     				 
	 if (data > mean)
     3a2:	62 17       	cp	r22, r18
     3a4:	73 07       	cpc	r23, r19
     3a6:	18 f4       	brcc	.+6      	; 0x3ae <Filter+0x8a>
	 	return (data - mean);
     3a8:	26 1b       	sub	r18, r22
     3aa:	37 0b       	sbc	r19, r23
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <Filter+0x92>
	 else
	 	return (mean - data);      
     3ae:	cb 01       	movw	r24, r22
     3b0:	82 1b       	sub	r24, r18
     3b2:	93 0b       	sbc	r25, r19
     3b4:	9c 01       	movw	r18, r24
}
     3b6:	c9 01       	movw	r24, r18
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	08 95       	ret

000003c2 <do_sampling>:

//-----------------------------------do_sampling----------------------------------------
/* Sampling the accelerometer 
Sampling procedure is done in various parts of the code to ensure that the interups are 
acknowledeged close enough to their occurances*/
void do_sampling(){
     3c2:	cf 92       	push	r12
     3c4:	df 92       	push	r13
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
	
	sampleFlag = 0;
     3d2:	10 92 26 01 	sts	0x0126, r1
    
	//sample the accelerometer
	x = _atmega_a2dConvert10bit(ADC0);		
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 4e 0a 	call	0x149c	; 0x149c <_atmega_a2dConvert10bit>
     3dc:	90 93 43 01 	sts	0x0143, r25
     3e0:	80 93 42 01 	sts	0x0142, r24
	y = _atmega_a2dConvert10bit(ADC1);
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 4e 0a 	call	0x149c	; 0x149c <_atmega_a2dConvert10bit>
     3ea:	90 93 45 01 	sts	0x0145, r25
     3ee:	80 93 44 01 	sts	0x0144, r24
	z = _atmega_a2dConvert10bit(ADC2);
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	0e 94 4e 0a 	call	0x149c	; 0x149c <_atmega_a2dConvert10bit>
     3f8:	90 93 47 01 	sts	0x0147, r25
     3fc:	80 93 46 01 	sts	0x0146, r24
	x = y = z = i;
	i++;*/
	//---------------

	//Filter the raw accelerometer data and compute the vector of magnitude (Activity count)
	vmag += Filter(x, 0) + Filter(y, 1) + Filter(z, 2);
     400:	e0 90 6c 38 	lds	r14, 0x386C
     404:	f0 90 6d 38 	lds	r15, 0x386D
     408:	00 91 6e 38 	lds	r16, 0x386E
     40c:	10 91 6f 38 	lds	r17, 0x386F
     410:	80 91 42 01 	lds	r24, 0x0142
     414:	90 91 43 01 	lds	r25, 0x0143
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	0e 94 92 01 	call	0x324	; 0x324 <Filter>
     420:	6c 01       	movw	r12, r24
     422:	80 91 44 01 	lds	r24, 0x0144
     426:	90 91 45 01 	lds	r25, 0x0145
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	0e 94 92 01 	call	0x324	; 0x324 <Filter>
     432:	ec 01       	movw	r28, r24
     434:	80 91 46 01 	lds	r24, 0x0146
     438:	90 91 47 01 	lds	r25, 0x0147
     43c:	62 e0       	ldi	r22, 0x02	; 2
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	0e 94 92 01 	call	0x324	; 0x324 <Filter>
     444:	cc 0d       	add	r28, r12
     446:	dd 1d       	adc	r29, r13
     448:	c8 0f       	add	r28, r24
     44a:	d9 1f       	adc	r29, r25
     44c:	be 01       	movw	r22, r28
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	6e 0d       	add	r22, r14
     454:	7f 1d       	adc	r23, r15
     456:	80 1f       	adc	r24, r16
     458:	91 1f       	adc	r25, r17
     45a:	60 93 6c 38 	sts	0x386C, r22
     45e:	70 93 6d 38 	sts	0x386D, r23
     462:	80 93 6e 38 	sts	0x386E, r24
     466:	90 93 6f 38 	sts	0x386F, r25
		
	//for calculating the activity count, skip the first samples to make sure the buffer is clean	
	if (_wPC > _SAMPLING_RATE) {							
     46a:	20 91 4f 01 	lds	r18, 0x014F
     46e:	30 91 50 01 	lds	r19, 0x0150
     472:	40 91 51 01 	lds	r20, 0x0151
     476:	50 91 52 01 	lds	r21, 0x0152
     47a:	e0 90 06 01 	lds	r14, 0x0106
     47e:	ff 24       	eor	r15, r15
     480:	00 e0       	ldi	r16, 0x00	; 0
     482:	10 e0       	ldi	r17, 0x00	; 0
     484:	e2 16       	cp	r14, r18
     486:	f3 06       	cpc	r15, r19
     488:	04 07       	cpc	r16, r20
     48a:	15 07       	cpc	r17, r21
     48c:	08 f0       	brcs	.+2      	; 0x490 <do_sampling+0xce>
     48e:	87 c0       	rjmp	.+270    	; 0x59e <do_sampling+0x1dc>
		if (summary_count == 0) {			// calculate the activity count only once per miniute
     490:	20 91 67 0c 	lds	r18, 0x0C67
     494:	30 91 68 0c 	lds	r19, 0x0C68
     498:	21 15       	cp	r18, r1
     49a:	31 05       	cpc	r19, r1
     49c:	09 f0       	breq	.+2      	; 0x4a0 <do_sampling+0xde>
     49e:	78 c0       	rjmp	.+240    	; 0x590 <do_sampling+0x1ce>
			vmag = vmag / AC_SCALING;	// vmag is scaled in order to prevent the overflow 			
     4a0:	20 91 00 01 	lds	r18, 0x0100
     4a4:	30 91 01 01 	lds	r19, 0x0101
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__udivmodsi4>
			if (vmag > AC_CEILING)
     4b0:	60 91 02 01 	lds	r22, 0x0102
     4b4:	70 91 03 01 	lds	r23, 0x0103
     4b8:	cb 01       	movw	r24, r22
     4ba:	a0 e0       	ldi	r26, 0x00	; 0
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	e0 91 1f 01 	lds	r30, 0x011F
     4c2:	f0 91 20 01 	lds	r31, 0x0120
     4c6:	82 17       	cp	r24, r18
     4c8:	93 07       	cpc	r25, r19
     4ca:	a4 07       	cpc	r26, r20
     4cc:	b5 07       	cpc	r27, r21
     4ce:	38 f4       	brcc	.+14     	; 0x4de <do_sampling+0x11c>
				acount[ci] = AC_CEILING;// the maximum possible value of activity counts (size: two bytes)	
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	e0 5a       	subi	r30, 0xA0	; 160
     4d6:	fe 4f       	sbci	r31, 0xFE	; 254
     4d8:	71 83       	std	Z+1, r23	; 0x01
     4da:	60 83       	st	Z, r22
     4dc:	06 c0       	rjmp	.+12     	; 0x4ea <do_sampling+0x128>
			else
				acount[ci] = (unsigned short) vmag; 
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	e0 5a       	subi	r30, 0xA0	; 160
     4e4:	fe 4f       	sbci	r31, 0xFE	; 254
     4e6:	31 83       	std	Z+1, r19	; 0x01
     4e8:	20 83       	st	Z, r18
	 		
			vmag = 0;
     4ea:	10 92 6c 38 	sts	0x386C, r1
     4ee:	10 92 6d 38 	sts	0x386D, r1
     4f2:	10 92 6e 38 	sts	0x386E, r1
     4f6:	10 92 6f 38 	sts	0x386F, r1
			++ci;
     4fa:	80 91 1f 01 	lds	r24, 0x011F
     4fe:	90 91 20 01 	lds	r25, 0x0120
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	90 93 20 01 	sts	0x0120, r25
     508:	80 93 1f 01 	sts	0x011F, r24

			if (ci == AC_BUFFER_SIZE)
     50c:	23 e0       	ldi	r18, 0x03	; 3
     50e:	80 3c       	cpi	r24, 0xC0	; 192
     510:	92 07       	cpc	r25, r18
     512:	21 f4       	brne	.+8      	; 0x51c <do_sampling+0x15a>
				ci = 0;
     514:	10 92 20 01 	sts	0x0120, r1
     518:	10 92 1f 01 	sts	0x011F, r1
			cseq++;	// if the activity counts for the first 16 hours are full then increment the c sequence	
     51c:	80 91 17 01 	lds	r24, 0x0117
     520:	90 91 18 01 	lds	r25, 0x0118
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	90 93 18 01 	sts	0x0118, r25
     52a:	80 93 17 01 	sts	0x0117, r24
			 
			if (ci == si) {
     52e:	e0 91 1f 01 	lds	r30, 0x011F
     532:	f0 91 20 01 	lds	r31, 0x0120
     536:	80 91 21 01 	lds	r24, 0x0121
     53a:	90 91 22 01 	lds	r25, 0x0122
     53e:	e8 17       	cp	r30, r24
     540:	f9 07       	cpc	r31, r25
     542:	b9 f4       	brne	.+46     	; 0x572 <do_sampling+0x1b0>
				si++;
     544:	cf 01       	movw	r24, r30
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	90 93 22 01 	sts	0x0122, r25
     54c:	80 93 21 01 	sts	0x0121, r24
				if (si == AC_BUFFER_SIZE)
     550:	23 e0       	ldi	r18, 0x03	; 3
     552:	80 3c       	cpi	r24, 0xC0	; 192
     554:	92 07       	cpc	r25, r18
     556:	21 f4       	brne	.+8      	; 0x560 <do_sampling+0x19e>
					si = 0;
     558:	10 92 22 01 	sts	0x0122, r1
     55c:	10 92 21 01 	sts	0x0121, r1
				sseq++;
     560:	80 91 19 01 	lds	r24, 0x0119
     564:	90 91 1a 01 	lds	r25, 0x011A
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	90 93 1a 01 	sts	0x011A, r25
     56e:	80 93 19 01 	sts	0x0119, r24
			}
			acount[ci] = 0;
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	e0 5a       	subi	r30, 0xA0	; 160
     578:	fe 4f       	sbci	r31, 0xFE	; 254
     57a:	11 82       	std	Z+1, r1	; 0x01
     57c:	10 82       	st	Z, r1
			summary_count = AC_NUMS;	// 1 minute Summary counter is associated with activity counts 
     57e:	80 91 15 01 	lds	r24, 0x0115
     582:	90 91 16 01 	lds	r25, 0x0116
     586:	90 93 68 0c 	sts	0x0C68, r25
     58a:	80 93 67 0c 	sts	0x0C67, r24
     58e:	14 c0       	rjmp	.+40     	; 0x5b8 <do_sampling+0x1f6>
		}
		else
			summary_count--;
     590:	21 50       	subi	r18, 0x01	; 1
     592:	30 40       	sbci	r19, 0x00	; 0
     594:	30 93 68 0c 	sts	0x0C68, r19
     598:	20 93 67 0c 	sts	0x0C67, r18
     59c:	0d c0       	rjmp	.+26     	; 0x5b8 <do_sampling+0x1f6>
	}
	else if (_wPC == 40)				// discard the first 40 samples for the vmag  				
     59e:	28 32       	cpi	r18, 0x28	; 40
     5a0:	31 05       	cpc	r19, r1
     5a2:	41 05       	cpc	r20, r1
     5a4:	51 05       	cpc	r21, r1
     5a6:	41 f4       	brne	.+16     	; 0x5b8 <do_sampling+0x1f6>
		vmag = 0;
     5a8:	10 92 6c 38 	sts	0x386C, r1
     5ac:	10 92 6d 38 	sts	0x386D, r1
     5b0:	10 92 6e 38 	sts	0x386E, r1
     5b4:	10 92 6f 38 	sts	0x386F, r1

	//Save the raw data in the RAM 
	m_SET_X(data[dataIndex], x, dataSubindex);
     5b8:	20 91 10 01 	lds	r18, 0x0110
     5bc:	21 30       	cpi	r18, 0x01	; 1
     5be:	31 f1       	breq	.+76     	; 0x60c <do_sampling+0x24a>
     5c0:	21 30       	cpi	r18, 0x01	; 1
     5c2:	30 f0       	brcs	.+12     	; 0x5d0 <do_sampling+0x20e>
     5c4:	22 30       	cpi	r18, 0x02	; 2
     5c6:	c9 f1       	breq	.+114    	; 0x63a <do_sampling+0x278>
     5c8:	23 30       	cpi	r18, 0x03	; 3
     5ca:	09 f0       	breq	.+2      	; 0x5ce <do_sampling+0x20c>
     5cc:	74 c0       	rjmp	.+232    	; 0x6b6 <do_sampling+0x2f4>
     5ce:	54 c0       	rjmp	.+168    	; 0x678 <do_sampling+0x2b6>
     5d0:	40 91 0e 01 	lds	r20, 0x010E
     5d4:	50 91 0f 01 	lds	r21, 0x010F
     5d8:	80 91 42 01 	lds	r24, 0x0142
     5dc:	90 91 43 01 	lds	r25, 0x0143
     5e0:	fa 01       	movw	r30, r20
     5e2:	74 e0       	ldi	r23, 0x04	; 4
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	7a 95       	dec	r23
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <do_sampling+0x222>
     5ec:	e4 1b       	sub	r30, r20
     5ee:	f5 0b       	sbc	r31, r21
     5f0:	e1 59       	subi	r30, 0x91	; 145
     5f2:	f3 4f       	sbci	r31, 0xF3	; 243
     5f4:	ac 01       	movw	r20, r24
     5f6:	56 95       	lsr	r21
     5f8:	47 95       	ror	r20
     5fa:	56 95       	lsr	r21
     5fc:	47 95       	ror	r20
     5fe:	40 83       	st	Z, r20
     600:	82 95       	swap	r24
     602:	88 0f       	add	r24, r24
     604:	88 0f       	add	r24, r24
     606:	80 7c       	andi	r24, 0xC0	; 192
     608:	81 83       	std	Z+1, r24	; 0x01
     60a:	60 c0       	rjmp	.+192    	; 0x6cc <do_sampling+0x30a>
     60c:	80 91 0e 01 	lds	r24, 0x010E
     610:	90 91 0f 01 	lds	r25, 0x010F
     614:	30 91 42 01 	lds	r19, 0x0142
     618:	40 91 43 01 	lds	r20, 0x0143
     61c:	fc 01       	movw	r30, r24
     61e:	54 e0       	ldi	r21, 0x04	; 4
     620:	ee 0f       	add	r30, r30
     622:	ff 1f       	adc	r31, r31
     624:	5a 95       	dec	r21
     626:	e1 f7       	brne	.-8      	; 0x620 <do_sampling+0x25e>
     628:	e8 1b       	sub	r30, r24
     62a:	f9 0b       	sbc	r31, r25
     62c:	e1 59       	subi	r30, 0x91	; 145
     62e:	f3 4f       	sbci	r31, 0xF3	; 243
     630:	83 81       	ldd	r24, Z+3	; 0x03
     632:	84 2b       	or	r24, r20
     634:	83 83       	std	Z+3, r24	; 0x03
     636:	34 83       	std	Z+4, r19	; 0x04
     638:	68 c0       	rjmp	.+208    	; 0x70a <do_sampling+0x348>
     63a:	40 91 0e 01 	lds	r20, 0x010E
     63e:	50 91 0f 01 	lds	r21, 0x010F
     642:	80 91 42 01 	lds	r24, 0x0142
     646:	90 91 43 01 	lds	r25, 0x0143
     64a:	fa 01       	movw	r30, r20
     64c:	34 e0       	ldi	r19, 0x04	; 4
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	3a 95       	dec	r19
     654:	e1 f7       	brne	.-8      	; 0x64e <do_sampling+0x28c>
     656:	e4 1b       	sub	r30, r20
     658:	f5 0b       	sbc	r31, r21
     65a:	e1 59       	subi	r30, 0x91	; 145
     65c:	f3 4f       	sbci	r31, 0xF3	; 243
     65e:	ac 01       	movw	r20, r24
     660:	96 e0       	ldi	r25, 0x06	; 6
     662:	56 95       	lsr	r21
     664:	47 95       	ror	r20
     666:	9a 95       	dec	r25
     668:	e1 f7       	brne	.-8      	; 0x662 <do_sampling+0x2a0>
     66a:	37 81       	ldd	r19, Z+7	; 0x07
     66c:	34 2b       	or	r19, r20
     66e:	37 83       	std	Z+7, r19	; 0x07
     670:	88 0f       	add	r24, r24
     672:	88 0f       	add	r24, r24
     674:	80 87       	std	Z+8, r24	; 0x08
     676:	67 c0       	rjmp	.+206    	; 0x746 <do_sampling+0x384>
     678:	40 91 0e 01 	lds	r20, 0x010E
     67c:	50 91 0f 01 	lds	r21, 0x010F
     680:	80 91 42 01 	lds	r24, 0x0142
     684:	90 91 43 01 	lds	r25, 0x0143
     688:	fa 01       	movw	r30, r20
     68a:	04 e0       	ldi	r16, 0x04	; 4
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	0a 95       	dec	r16
     692:	e1 f7       	brne	.-8      	; 0x68c <do_sampling+0x2ca>
     694:	e4 1b       	sub	r30, r20
     696:	f5 0b       	sbc	r31, r21
     698:	e1 59       	subi	r30, 0x91	; 145
     69a:	f3 4f       	sbci	r31, 0xF3	; 243
     69c:	ac 01       	movw	r20, r24
     69e:	14 e0       	ldi	r17, 0x04	; 4
     6a0:	56 95       	lsr	r21
     6a2:	47 95       	ror	r20
     6a4:	1a 95       	dec	r17
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <do_sampling+0x2de>
     6a8:	33 85       	ldd	r19, Z+11	; 0x0b
     6aa:	34 2b       	or	r19, r20
     6ac:	33 87       	std	Z+11, r19	; 0x0b
     6ae:	82 95       	swap	r24
     6b0:	80 7f       	andi	r24, 0xF0	; 240
     6b2:	84 87       	std	Z+12, r24	; 0x0c
     6b4:	5f c0       	rjmp	.+190    	; 0x774 <do_sampling+0x3b2>
	m_SET_Y(data[dataIndex], y, dataSubindex);
     6b6:	21 30       	cpi	r18, 0x01	; 1
     6b8:	41 f1       	breq	.+80     	; 0x70a <do_sampling+0x348>
     6ba:	21 30       	cpi	r18, 0x01	; 1
     6bc:	38 f0       	brcs	.+14     	; 0x6cc <do_sampling+0x30a>
     6be:	22 30       	cpi	r18, 0x02	; 2
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <do_sampling+0x302>
     6c2:	41 c0       	rjmp	.+130    	; 0x746 <do_sampling+0x384>
     6c4:	23 30       	cpi	r18, 0x03	; 3
     6c6:	09 f0       	breq	.+2      	; 0x6ca <do_sampling+0x308>
     6c8:	74 c0       	rjmp	.+232    	; 0x7b2 <do_sampling+0x3f0>
     6ca:	54 c0       	rjmp	.+168    	; 0x774 <do_sampling+0x3b2>
     6cc:	40 91 0e 01 	lds	r20, 0x010E
     6d0:	50 91 0f 01 	lds	r21, 0x010F
     6d4:	80 91 44 01 	lds	r24, 0x0144
     6d8:	90 91 45 01 	lds	r25, 0x0145
     6dc:	fa 01       	movw	r30, r20
     6de:	b4 e0       	ldi	r27, 0x04	; 4
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ba 95       	dec	r27
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <do_sampling+0x31e>
     6e8:	e4 1b       	sub	r30, r20
     6ea:	f5 0b       	sbc	r31, r21
     6ec:	e1 59       	subi	r30, 0x91	; 145
     6ee:	f3 4f       	sbci	r31, 0xF3	; 243
     6f0:	ac 01       	movw	r20, r24
     6f2:	a4 e0       	ldi	r26, 0x04	; 4
     6f4:	56 95       	lsr	r21
     6f6:	47 95       	ror	r20
     6f8:	aa 95       	dec	r26
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <do_sampling+0x332>
     6fc:	31 81       	ldd	r19, Z+1	; 0x01
     6fe:	34 2b       	or	r19, r20
     700:	31 83       	std	Z+1, r19	; 0x01
     702:	82 95       	swap	r24
     704:	80 7f       	andi	r24, 0xF0	; 240
     706:	82 83       	std	Z+2, r24	; 0x02
     708:	5f c0       	rjmp	.+190    	; 0x7c8 <do_sampling+0x406>
     70a:	40 91 0e 01 	lds	r20, 0x010E
     70e:	50 91 0f 01 	lds	r21, 0x010F
     712:	80 91 44 01 	lds	r24, 0x0144
     716:	90 91 45 01 	lds	r25, 0x0145
     71a:	fa 01       	movw	r30, r20
     71c:	74 e0       	ldi	r23, 0x04	; 4
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	7a 95       	dec	r23
     724:	e1 f7       	brne	.-8      	; 0x71e <do_sampling+0x35c>
     726:	e4 1b       	sub	r30, r20
     728:	f5 0b       	sbc	r31, r21
     72a:	e1 59       	subi	r30, 0x91	; 145
     72c:	f3 4f       	sbci	r31, 0xF3	; 243
     72e:	ac 01       	movw	r20, r24
     730:	56 95       	lsr	r21
     732:	47 95       	ror	r20
     734:	56 95       	lsr	r21
     736:	47 95       	ror	r20
     738:	45 83       	std	Z+5, r20	; 0x05
     73a:	82 95       	swap	r24
     73c:	88 0f       	add	r24, r24
     73e:	88 0f       	add	r24, r24
     740:	80 7c       	andi	r24, 0xC0	; 192
     742:	86 83       	std	Z+6, r24	; 0x06
     744:	60 c0       	rjmp	.+192    	; 0x806 <do_sampling+0x444>
     746:	80 91 0e 01 	lds	r24, 0x010E
     74a:	90 91 0f 01 	lds	r25, 0x010F
     74e:	30 91 44 01 	lds	r19, 0x0144
     752:	40 91 45 01 	lds	r20, 0x0145
     756:	fc 01       	movw	r30, r24
     758:	54 e0       	ldi	r21, 0x04	; 4
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	5a 95       	dec	r21
     760:	e1 f7       	brne	.-8      	; 0x75a <do_sampling+0x398>
     762:	e8 1b       	sub	r30, r24
     764:	f9 0b       	sbc	r31, r25
     766:	e1 59       	subi	r30, 0x91	; 145
     768:	f3 4f       	sbci	r31, 0xF3	; 243
     76a:	80 85       	ldd	r24, Z+8	; 0x08
     76c:	84 2b       	or	r24, r20
     76e:	80 87       	std	Z+8, r24	; 0x08
     770:	31 87       	std	Z+9, r19	; 0x09
     772:	68 c0       	rjmp	.+208    	; 0x844 <do_sampling+0x482>
     774:	40 91 0e 01 	lds	r20, 0x010E
     778:	50 91 0f 01 	lds	r21, 0x010F
     77c:	80 91 44 01 	lds	r24, 0x0144
     780:	90 91 45 01 	lds	r25, 0x0145
     784:	fa 01       	movw	r30, r20
     786:	34 e0       	ldi	r19, 0x04	; 4
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	3a 95       	dec	r19
     78e:	e1 f7       	brne	.-8      	; 0x788 <do_sampling+0x3c6>
     790:	e4 1b       	sub	r30, r20
     792:	f5 0b       	sbc	r31, r21
     794:	e1 59       	subi	r30, 0x91	; 145
     796:	f3 4f       	sbci	r31, 0xF3	; 243
     798:	ac 01       	movw	r20, r24
     79a:	96 e0       	ldi	r25, 0x06	; 6
     79c:	56 95       	lsr	r21
     79e:	47 95       	ror	r20
     7a0:	9a 95       	dec	r25
     7a2:	e1 f7       	brne	.-8      	; 0x79c <do_sampling+0x3da>
     7a4:	34 85       	ldd	r19, Z+12	; 0x0c
     7a6:	34 2b       	or	r19, r20
     7a8:	34 87       	std	Z+12, r19	; 0x0c
     7aa:	88 0f       	add	r24, r24
     7ac:	88 0f       	add	r24, r24
     7ae:	85 87       	std	Z+13, r24	; 0x0d
     7b0:	67 c0       	rjmp	.+206    	; 0x880 <do_sampling+0x4be>
	m_SET_Z(data[dataIndex], z, dataSubindex);
     7b2:	21 30       	cpi	r18, 0x01	; 1
     7b4:	41 f1       	breq	.+80     	; 0x806 <do_sampling+0x444>
     7b6:	21 30       	cpi	r18, 0x01	; 1
     7b8:	38 f0       	brcs	.+14     	; 0x7c8 <do_sampling+0x406>
     7ba:	22 30       	cpi	r18, 0x02	; 2
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <do_sampling+0x3fe>
     7be:	42 c0       	rjmp	.+132    	; 0x844 <do_sampling+0x482>
     7c0:	23 30       	cpi	r18, 0x03	; 3
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <do_sampling+0x404>
     7c4:	73 c0       	rjmp	.+230    	; 0x8ac <do_sampling+0x4ea>
     7c6:	5c c0       	rjmp	.+184    	; 0x880 <do_sampling+0x4be>
     7c8:	40 91 0e 01 	lds	r20, 0x010E
     7cc:	50 91 0f 01 	lds	r21, 0x010F
     7d0:	80 91 46 01 	lds	r24, 0x0146
     7d4:	90 91 47 01 	lds	r25, 0x0147
     7d8:	fa 01       	movw	r30, r20
     7da:	04 e0       	ldi	r16, 0x04	; 4
     7dc:	ee 0f       	add	r30, r30
     7de:	ff 1f       	adc	r31, r31
     7e0:	0a 95       	dec	r16
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <do_sampling+0x41a>
     7e4:	e4 1b       	sub	r30, r20
     7e6:	f5 0b       	sbc	r31, r21
     7e8:	e1 59       	subi	r30, 0x91	; 145
     7ea:	f3 4f       	sbci	r31, 0xF3	; 243
     7ec:	ac 01       	movw	r20, r24
     7ee:	16 e0       	ldi	r17, 0x06	; 6
     7f0:	56 95       	lsr	r21
     7f2:	47 95       	ror	r20
     7f4:	1a 95       	dec	r17
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <do_sampling+0x42e>
     7f8:	32 81       	ldd	r19, Z+2	; 0x02
     7fa:	34 2b       	or	r19, r20
     7fc:	32 83       	std	Z+2, r19	; 0x02
     7fe:	88 0f       	add	r24, r24
     800:	88 0f       	add	r24, r24
     802:	83 83       	std	Z+3, r24	; 0x03
     804:	53 c0       	rjmp	.+166    	; 0x8ac <do_sampling+0x4ea>
     806:	40 91 0e 01 	lds	r20, 0x010E
     80a:	50 91 0f 01 	lds	r21, 0x010F
     80e:	80 91 46 01 	lds	r24, 0x0146
     812:	90 91 47 01 	lds	r25, 0x0147
     816:	fa 01       	movw	r30, r20
     818:	b4 e0       	ldi	r27, 0x04	; 4
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	ba 95       	dec	r27
     820:	e1 f7       	brne	.-8      	; 0x81a <do_sampling+0x458>
     822:	e4 1b       	sub	r30, r20
     824:	f5 0b       	sbc	r31, r21
     826:	e1 59       	subi	r30, 0x91	; 145
     828:	f3 4f       	sbci	r31, 0xF3	; 243
     82a:	ac 01       	movw	r20, r24
     82c:	a4 e0       	ldi	r26, 0x04	; 4
     82e:	56 95       	lsr	r21
     830:	47 95       	ror	r20
     832:	aa 95       	dec	r26
     834:	e1 f7       	brne	.-8      	; 0x82e <do_sampling+0x46c>
     836:	36 81       	ldd	r19, Z+6	; 0x06
     838:	34 2b       	or	r19, r20
     83a:	36 83       	std	Z+6, r19	; 0x06
     83c:	82 95       	swap	r24
     83e:	80 7f       	andi	r24, 0xF0	; 240
     840:	87 83       	std	Z+7, r24	; 0x07
     842:	34 c0       	rjmp	.+104    	; 0x8ac <do_sampling+0x4ea>
     844:	40 91 0e 01 	lds	r20, 0x010E
     848:	50 91 0f 01 	lds	r21, 0x010F
     84c:	80 91 46 01 	lds	r24, 0x0146
     850:	90 91 47 01 	lds	r25, 0x0147
     854:	fa 01       	movw	r30, r20
     856:	74 e0       	ldi	r23, 0x04	; 4
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	7a 95       	dec	r23
     85e:	e1 f7       	brne	.-8      	; 0x858 <do_sampling+0x496>
     860:	e4 1b       	sub	r30, r20
     862:	f5 0b       	sbc	r31, r21
     864:	e1 59       	subi	r30, 0x91	; 145
     866:	f3 4f       	sbci	r31, 0xF3	; 243
     868:	ac 01       	movw	r20, r24
     86a:	56 95       	lsr	r21
     86c:	47 95       	ror	r20
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	42 87       	std	Z+10, r20	; 0x0a
     874:	82 95       	swap	r24
     876:	88 0f       	add	r24, r24
     878:	88 0f       	add	r24, r24
     87a:	80 7c       	andi	r24, 0xC0	; 192
     87c:	83 87       	std	Z+11, r24	; 0x0b
     87e:	16 c0       	rjmp	.+44     	; 0x8ac <do_sampling+0x4ea>
     880:	80 91 0e 01 	lds	r24, 0x010E
     884:	90 91 0f 01 	lds	r25, 0x010F
     888:	30 91 46 01 	lds	r19, 0x0146
     88c:	40 91 47 01 	lds	r20, 0x0147
     890:	fc 01       	movw	r30, r24
     892:	54 e0       	ldi	r21, 0x04	; 4
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	5a 95       	dec	r21
     89a:	e1 f7       	brne	.-8      	; 0x894 <do_sampling+0x4d2>
     89c:	e8 1b       	sub	r30, r24
     89e:	f9 0b       	sbc	r31, r25
     8a0:	e1 59       	subi	r30, 0x91	; 145
     8a2:	f3 4f       	sbci	r31, 0xF3	; 243
     8a4:	85 85       	ldd	r24, Z+13	; 0x0d
     8a6:	84 2b       	or	r24, r20
     8a8:	85 87       	std	Z+13, r24	; 0x0d
     8aa:	36 87       	std	Z+14, r19	; 0x0e

	dataSubindex++;
     8ac:	2f 5f       	subi	r18, 0xFF	; 255
     8ae:	20 93 10 01 	sts	0x0110, r18
	if (dataSubindex >= 4) {	
     8b2:	24 30       	cpi	r18, 0x04	; 4
     8b4:	20 f1       	brcs	.+72     	; 0x8fe <do_sampling+0x53c>
	 	dataSubindex = 0;
     8b6:	10 92 10 01 	sts	0x0110, r1
		if (_wTM != _WTM_Continuous){ 
     8ba:	80 91 4e 01 	lds	r24, 0x014E
     8be:	88 23       	and	r24, r24
     8c0:	f1 f0       	breq	.+60     	; 0x8fe <do_sampling+0x53c>
			dataIndex++;
     8c2:	80 91 0e 01 	lds	r24, 0x010E
     8c6:	90 91 0f 01 	lds	r25, 0x010F
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	90 93 0f 01 	sts	0x010F, r25
     8d0:	80 93 0e 01 	sts	0x010E, r24
			if (dataIndex >= DATA_SIZE)
     8d4:	22 e0       	ldi	r18, 0x02	; 2
     8d6:	8e 3e       	cpi	r24, 0xEE	; 238
     8d8:	92 07       	cpc	r25, r18
     8da:	20 f0       	brcs	.+8      	; 0x8e4 <do_sampling+0x522>
				dataIndex = 0;
     8dc:	10 92 0f 01 	sts	0x010F, r1
     8e0:	10 92 0e 01 	sts	0x010E, r1

			if (batch_counter < (DATA_SIZE - 1))
     8e4:	80 91 0c 01 	lds	r24, 0x010C
     8e8:	90 91 0d 01 	lds	r25, 0x010D
     8ec:	22 e0       	ldi	r18, 0x02	; 2
     8ee:	8d 3e       	cpi	r24, 0xED	; 237
     8f0:	92 07       	cpc	r25, r18
     8f2:	28 f4       	brcc	.+10     	; 0x8fe <do_sampling+0x53c>
				batch_counter++;
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	90 93 0d 01 	sts	0x010D, r25
     8fa:	80 93 0c 01 	sts	0x010C, r24
		}
	}
}	
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	08 95       	ret

00000910 <main>:


//----------------------------------- Main function ----------------------------------------------
int main() {
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29

   // If the wocket is docked, waits for 10 seconds
	if (_is_docked()) {
     916:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_is_docked>
     91a:	88 23       	and	r24, r24
     91c:	69 f4       	brne	.+26     	; 0x938 <main+0x28>
     91e:	11 c0       	rjmp	.+34     	; 0x942 <main+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     920:	ef e0       	ldi	r30, 0x0F	; 15
     922:	f7 e2       	ldi	r31, 0x27	; 39
     924:	31 97       	sbiw	r30, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <main+0x14>
     928:	00 c0       	rjmp	.+0      	; 0x92a <main+0x1a>
     92a:	00 00       	nop
     92c:	21 50       	subi	r18, 0x01	; 1
     92e:	30 40       	sbci	r19, 0x00	; 0
		for(int j = 0;(j < 10);j++)			
			for(int i = 0;(i < 200);i++)
     930:	b9 f7       	brne	.-18     	; 0x920 <main+0x10>
     932:	01 97       	sbiw	r24, 0x01	; 1
//----------------------------------- Main function ----------------------------------------------
int main() {

   // If the wocket is docked, waits for 10 seconds
	if (_is_docked()) {
		for(int j = 0;(j < 10);j++)			
     934:	19 f4       	brne	.+6      	; 0x93c <main+0x2c>
     936:	05 c0       	rjmp	.+10     	; 0x942 <main+0x32>

//----------------------------------- Main function ----------------------------------------------
int main() {

   // If the wocket is docked, waits for 10 seconds
	if (_is_docked()) {
     938:	8a e0       	ldi	r24, 0x0A	; 10
     93a:	90 e0       	ldi	r25, 0x00	; 0
	}
}	


//----------------------------------- Main function ----------------------------------------------
int main() {
     93c:	28 ec       	ldi	r18, 0xC8	; 200
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	ef cf       	rjmp	.-34     	; 0x920 <main+0x10>
			for(int i = 0;(i < 200);i++)
				_delay_ms(5);
	}

	// Blink green for 5 seconds	
	_wocket_initialize();
     942:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_wocket_initialize>

	summary_count = _SAMPLING_RATE * 60;
     946:	90 91 06 01 	lds	r25, 0x0106
     94a:	8c e3       	ldi	r24, 0x3C	; 60
     94c:	98 9f       	mul	r25, r24
     94e:	c0 01       	movw	r24, r0
     950:	11 24       	eor	r1, r1
     952:	90 93 68 0c 	sts	0x0C68, r25
     956:	80 93 67 0c 	sts	0x0C67, r24
	AC_NUMS = _SAMPLING_RATE * 60;
     95a:	90 93 16 01 	sts	0x0116, r25
     95e:	80 93 15 01 	sts	0x0115, r24

	/*Functions used for optimizing power by shutting down different peripherals. 
	These functions are part of the external dependencies provided by AVR software power.h*/
	power_adc_disable();
     962:	80 91 64 00 	lds	r24, 0x0064
     966:	81 60       	ori	r24, 0x01	; 1
     968:	80 93 64 00 	sts	0x0064, r24
  	power_spi_disable();
     96c:	80 91 64 00 	lds	r24, 0x0064
     970:	84 60       	ori	r24, 0x04	; 4
     972:	80 93 64 00 	sts	0x0064, r24
  	power_timer0_disable();
     976:	80 91 64 00 	lds	r24, 0x0064
     97a:	80 62       	ori	r24, 0x20	; 32
     97c:	80 93 64 00 	sts	0x0064, r24
  	power_timer1_disable();
     980:	80 91 64 00 	lds	r24, 0x0064
     984:	88 60       	ori	r24, 0x08	; 8
     986:	80 93 64 00 	sts	0x0064, r24
  	power_twi_disable();
     98a:	80 91 64 00 	lds	r24, 0x0064
     98e:	80 68       	ori	r24, 0x80	; 128
     990:	80 93 64 00 	sts	0x0064, r24
				}											
		
		        // if the wocket was just connected, confirm the wocket transmission mode 
				if (justconnected == 1)	{
					_send_wtm();
					justconnected = 2;
     994:	12 e0       	ldi	r17, 0x02	; 2
  	power_twi_disable();

	//Loop indefinitely
	while(1){

		if(sampleFlag){		// Sample flag is turned ON in the timer 2 ISR (OVR)\
     996:	80 91 26 01 	lds	r24, 0x0126
     99a:	88 23       	and	r24, r24
     99c:	09 f4       	brne	.+2      	; 0x9a0 <main+0x90>
     99e:	20 c3       	rjmp	.+1600   	; 0xfe0 <main+0x6d0>
		    
			//turn on adc and micro controller on board	
			power_adc_enable();
     9a0:	80 91 64 00 	lds	r24, 0x0064
     9a4:	8e 7f       	andi	r24, 0xFE	; 254
     9a6:	80 93 64 00 	sts	0x0064, r24
			_atmega_adc_turn_on();
     9aa:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_atmega_adc_turn_on>
			
			do_sampling(); // To prevent data loss, sampling is done in the "main loop" instead of the 
     9ae:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <do_sampling>
			               //"Interrupt Service Routine"				
		
			if (_wTM == _WTM_Continuous) { //Countinuous Mode
     9b2:	80 91 4e 01 	lds	r24, 0x014E
     9b6:	88 23       	and	r24, r24
     9b8:	09 f0       	breq	.+2      	; 0x9bc <main+0xac>
     9ba:	29 c1       	rjmp	.+594    	; 0xc0e <main+0x2fe>
				//Fetching raw data	
				switch(dataSubindex) {
     9bc:	80 91 10 01 	lds	r24, 0x0110
     9c0:	81 30       	cpi	r24, 0x01	; 1
     9c2:	51 f0       	breq	.+20     	; 0x9d8 <main+0xc8>
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	08 f4       	brcc	.+2      	; 0x9ca <main+0xba>
     9c8:	bf c0       	rjmp	.+382    	; 0xb48 <main+0x238>
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <main+0xc0>
     9ce:	44 c0       	rjmp	.+136    	; 0xa58 <main+0x148>
     9d0:	83 30       	cpi	r24, 0x03	; 3
     9d2:	09 f0       	breq	.+2      	; 0x9d6 <main+0xc6>
     9d4:	fc c0       	rjmp	.+504    	; 0xbce <main+0x2be>
     9d6:	7b c0       	rjmp	.+246    	; 0xace <main+0x1be>
					case 1:
							m_GET_X(x, data[dataIndex].byte1,  data[dataIndex].byte2,  0);
     9d8:	80 91 0e 01 	lds	r24, 0x010E
     9dc:	90 91 0f 01 	lds	r25, 0x010F
     9e0:	fc 01       	movw	r30, r24
     9e2:	74 e0       	ldi	r23, 0x04	; 4
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	7a 95       	dec	r23
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <main+0xd4>
     9ec:	e8 1b       	sub	r30, r24
     9ee:	f9 0b       	sbc	r31, r25
     9f0:	e1 59       	subi	r30, 0x91	; 145
     9f2:	f3 4f       	sbci	r31, 0xF3	; 243
     9f4:	21 81       	ldd	r18, Z+1	; 0x01
     9f6:	82 2f       	mov	r24, r18
     9f8:	82 95       	swap	r24
     9fa:	86 95       	lsr	r24
     9fc:	86 95       	lsr	r24
     9fe:	83 70       	andi	r24, 0x03	; 3
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	40 81       	ld	r20, Z
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	44 0f       	add	r20, r20
     a08:	55 1f       	adc	r21, r21
     a0a:	44 0f       	add	r20, r20
     a0c:	55 1f       	adc	r21, r21
     a0e:	84 2b       	or	r24, r20
     a10:	95 2b       	or	r25, r21
     a12:	90 93 43 01 	sts	0x0143, r25
     a16:	80 93 42 01 	sts	0x0142, r24
							m_GET_Y(y, data[dataIndex].byte2,  data[dataIndex].byte3,  0);
     a1a:	82 81       	ldd	r24, Z+2	; 0x02
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	2f 73       	andi	r18, 0x3F	; 63
     a20:	30 70       	andi	r19, 0x00	; 0
     a22:	54 e0       	ldi	r21, 0x04	; 4
     a24:	22 0f       	add	r18, r18
     a26:	33 1f       	adc	r19, r19
     a28:	5a 95       	dec	r21
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <main+0x114>
     a2c:	48 2f       	mov	r20, r24
     a2e:	42 95       	swap	r20
     a30:	4f 70       	andi	r20, 0x0F	; 15
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	24 2b       	or	r18, r20
     a36:	35 2b       	or	r19, r21
     a38:	30 93 45 01 	sts	0x0145, r19
     a3c:	20 93 44 01 	sts	0x0144, r18
							m_GET_Z(z, data[dataIndex].byte3,  data[dataIndex].byte4,  0);
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	8f 70       	andi	r24, 0x0F	; 15
     a44:	90 70       	andi	r25, 0x00	; 0
     a46:	46 e0       	ldi	r20, 0x06	; 6
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	4a 95       	dec	r20
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <main+0x138>
     a50:	23 81       	ldd	r18, Z+3	; 0x03
     a52:	26 95       	lsr	r18
     a54:	26 95       	lsr	r18
     a56:	b4 c0       	rjmp	.+360    	; 0xbc0 <main+0x2b0>
							break;
					case 2:
							m_GET_X(x, data[dataIndex].byte4,  data[dataIndex].byte5,  1);
     a58:	80 91 0e 01 	lds	r24, 0x010E
     a5c:	90 91 0f 01 	lds	r25, 0x010F
     a60:	fc 01       	movw	r30, r24
     a62:	34 e0       	ldi	r19, 0x04	; 4
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	3a 95       	dec	r19
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <main+0x154>
     a6c:	e8 1b       	sub	r30, r24
     a6e:	f9 0b       	sbc	r31, r25
     a70:	e1 59       	subi	r30, 0x91	; 145
     a72:	f3 4f       	sbci	r31, 0xF3	; 243
     a74:	83 81       	ldd	r24, Z+3	; 0x03
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	83 70       	andi	r24, 0x03	; 3
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	98 2f       	mov	r25, r24
     a7e:	88 27       	eor	r24, r24
     a80:	24 81       	ldd	r18, Z+4	; 0x04
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	82 2b       	or	r24, r18
     a86:	93 2b       	or	r25, r19
     a88:	90 93 43 01 	sts	0x0143, r25
     a8c:	80 93 42 01 	sts	0x0142, r24
							m_GET_Y(y, data[dataIndex].byte6,  data[dataIndex].byte7,  1);
     a90:	86 81       	ldd	r24, Z+6	; 0x06
     a92:	28 2f       	mov	r18, r24
     a94:	22 95       	swap	r18
     a96:	26 95       	lsr	r18
     a98:	26 95       	lsr	r18
     a9a:	23 70       	andi	r18, 0x03	; 3
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	45 81       	ldd	r20, Z+5	; 0x05
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	44 0f       	add	r20, r20
     aa4:	55 1f       	adc	r21, r21
     aa6:	44 0f       	add	r20, r20
     aa8:	55 1f       	adc	r21, r21
     aaa:	24 2b       	or	r18, r20
     aac:	35 2b       	or	r19, r21
     aae:	30 93 45 01 	sts	0x0145, r19
     ab2:	20 93 44 01 	sts	0x0144, r18
							m_GET_Z(z, data[dataIndex].byte7,  data[dataIndex].byte8,  1);
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	8f 73       	andi	r24, 0x3F	; 63
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	a4 e0       	ldi	r26, 0x04	; 4
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	aa 95       	dec	r26
     ac4:	e1 f7       	brne	.-8      	; 0xabe <main+0x1ae>
     ac6:	27 81       	ldd	r18, Z+7	; 0x07
     ac8:	22 95       	swap	r18
     aca:	2f 70       	andi	r18, 0x0F	; 15
     acc:	79 c0       	rjmp	.+242    	; 0xbc0 <main+0x2b0>
							break;
					case 3:
							m_GET_X(x, data[dataIndex].byte8,  data[dataIndex].byte9,  2);
     ace:	80 91 0e 01 	lds	r24, 0x010E
     ad2:	90 91 0f 01 	lds	r25, 0x010F
     ad6:	fc 01       	movw	r30, r24
     ad8:	74 e0       	ldi	r23, 0x04	; 4
     ada:	ee 0f       	add	r30, r30
     adc:	ff 1f       	adc	r31, r31
     ade:	7a 95       	dec	r23
     ae0:	e1 f7       	brne	.-8      	; 0xada <main+0x1ca>
     ae2:	e8 1b       	sub	r30, r24
     ae4:	f9 0b       	sbc	r31, r25
     ae6:	e1 59       	subi	r30, 0x91	; 145
     ae8:	f3 4f       	sbci	r31, 0xF3	; 243
     aea:	40 85       	ldd	r20, Z+8	; 0x08
     aec:	24 2f       	mov	r18, r20
     aee:	26 95       	lsr	r18
     af0:	26 95       	lsr	r18
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	87 81       	ldd	r24, Z+7	; 0x07
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	8f 70       	andi	r24, 0x0F	; 15
     afa:	90 70       	andi	r25, 0x00	; 0
     afc:	66 e0       	ldi	r22, 0x06	; 6
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	6a 95       	dec	r22
     b04:	e1 f7       	brne	.-8      	; 0xafe <main+0x1ee>
     b06:	28 2b       	or	r18, r24
     b08:	39 2b       	or	r19, r25
     b0a:	30 93 43 01 	sts	0x0143, r19
     b0e:	20 93 42 01 	sts	0x0142, r18
							m_GET_Y(y, data[dataIndex].byte9,  data[dataIndex].byte10, 2);
     b12:	84 2f       	mov	r24, r20
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	83 70       	andi	r24, 0x03	; 3
     b18:	90 70       	andi	r25, 0x00	; 0
     b1a:	98 2f       	mov	r25, r24
     b1c:	88 27       	eor	r24, r24
     b1e:	21 85       	ldd	r18, Z+9	; 0x09
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	82 2b       	or	r24, r18
     b24:	93 2b       	or	r25, r19
     b26:	90 93 45 01 	sts	0x0145, r25
     b2a:	80 93 44 01 	sts	0x0144, r24
							m_GET_Z(z, data[dataIndex].byte11, data[dataIndex].byte12, 2);
     b2e:	83 85       	ldd	r24, Z+11	; 0x0b
     b30:	82 95       	swap	r24
     b32:	86 95       	lsr	r24
     b34:	86 95       	lsr	r24
     b36:	83 70       	andi	r24, 0x03	; 3
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	22 85       	ldd	r18, Z+10	; 0x0a
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	3d c0       	rjmp	.+122    	; 0xbc2 <main+0x2b2>
							break;
					case 0:
							m_GET_X(x, data[dataIndex].byte12, data[dataIndex].byte13, 3);
     b48:	80 91 0e 01 	lds	r24, 0x010E
     b4c:	90 91 0f 01 	lds	r25, 0x010F
     b50:	fc 01       	movw	r30, r24
     b52:	24 e0       	ldi	r18, 0x04	; 4
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	2a 95       	dec	r18
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <main+0x244>
     b5c:	e8 1b       	sub	r30, r24
     b5e:	f9 0b       	sbc	r31, r25
     b60:	e1 59       	subi	r30, 0x91	; 145
     b62:	f3 4f       	sbci	r31, 0xF3	; 243
     b64:	84 85       	ldd	r24, Z+12	; 0x0c
     b66:	48 2f       	mov	r20, r24
     b68:	42 95       	swap	r20
     b6a:	4f 70       	andi	r20, 0x0F	; 15
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	23 85       	ldd	r18, Z+11	; 0x0b
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	2f 73       	andi	r18, 0x3F	; 63
     b74:	30 70       	andi	r19, 0x00	; 0
     b76:	b4 e0       	ldi	r27, 0x04	; 4
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	ba 95       	dec	r27
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <main+0x268>
     b80:	42 2b       	or	r20, r18
     b82:	53 2b       	or	r21, r19
     b84:	50 93 43 01 	sts	0x0143, r21
     b88:	40 93 42 01 	sts	0x0142, r20
							m_GET_Y(y, data[dataIndex].byte13, data[dataIndex].byte14, 3);
     b8c:	45 85       	ldd	r20, Z+13	; 0x0d
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	8f 70       	andi	r24, 0x0F	; 15
     b92:	90 70       	andi	r25, 0x00	; 0
     b94:	a6 e0       	ldi	r26, 0x06	; 6
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	aa 95       	dec	r26
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <main+0x286>
     b9e:	24 2f       	mov	r18, r20
     ba0:	26 95       	lsr	r18
     ba2:	26 95       	lsr	r18
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	82 2b       	or	r24, r18
     ba8:	93 2b       	or	r25, r19
     baa:	90 93 45 01 	sts	0x0145, r25
     bae:	80 93 44 01 	sts	0x0144, r24
							m_GET_Z(z, data[dataIndex].byte14, data[dataIndex].byte15, 3);
     bb2:	84 2f       	mov	r24, r20
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	83 70       	andi	r24, 0x03	; 3
     bb8:	90 70       	andi	r25, 0x00	; 0
     bba:	98 2f       	mov	r25, r24
     bbc:	88 27       	eor	r24, r24
     bbe:	26 85       	ldd	r18, Z+14	; 0x0e
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	82 2b       	or	r24, r18
     bc4:	93 2b       	or	r25, r19
     bc6:	90 93 47 01 	sts	0x0147, r25
     bca:	80 93 46 01 	sts	0x0146, r24
							break;
				}											
		
		        // if the wocket was just connected, confirm the wocket transmission mode 
				if (justconnected == 1)	{
     bce:	80 91 2e 01 	lds	r24, 0x012E
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	21 f4       	brne	.+8      	; 0xbde <main+0x2ce>
					_send_wtm();
     bd6:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_send_wtm>
					justconnected = 2;
     bda:	10 93 2e 01 	sts	0x012E, r17
				}		

				//Sending raw data: In continous mode all raw data are sent without compressing
				_send_uncompressed_pdu(x, y, z);
     bde:	60 91 44 01 	lds	r22, 0x0144
     be2:	70 91 45 01 	lds	r23, 0x0145
     be6:	40 91 46 01 	lds	r20, 0x0146
     bea:	50 91 47 01 	lds	r21, 0x0147
     bee:	80 91 42 01 	lds	r24, 0x0142
     bf2:	90 91 43 01 	lds	r25, 0x0143
     bf6:	0e 94 4f 10 	call	0x209e	; 0x209e <_send_uncompressed_pdu>

				//sample and send the battery level
				battery = _atmega_a2dConvert10bit(ADC7); 
     bfa:	87 e0       	ldi	r24, 0x07	; 7
     bfc:	0e 94 4e 0a 	call	0x149c	; 0x149c <_atmega_a2dConvert10bit>
     c00:	90 93 6a 38 	sts	0x386A, r25
     c04:	80 93 69 38 	sts	0x3869, r24
				//_send_bl(battery);
				_receive_data();
     c08:	0e 94 83 11 	call	0x2306	; 0x2306 <_receive_data>
     c0c:	bf c1       	rjmp	.+894    	; 0xf8c <main+0x67c>
			}
			
			else { //Bursty modes			
				if (connected) {			// check for the BT connection
     c0e:	80 91 29 01 	lds	r24, 0x0129
     c12:	88 23       	and	r24, r24
     c14:	09 f4       	brne	.+2      	; 0xc18 <main+0x308>
     c16:	b4 c1       	rjmp	.+872    	; 0xf80 <main+0x670>
					if (shutdown_flag == 0)	
     c18:	80 91 32 01 	lds	r24, 0x0132
     c1c:	88 23       	and	r24, r24
     c1e:	11 f4       	brne	.+4      	; 0xc24 <main+0x314>
						_greenled_turn_on();
     c20:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_greenled_turn_on>

					if (_wTM == _WTM_Continuous) // Skips sending the recent batch of raw data if transfer mode is changed 
     c24:	80 91 4e 01 	lds	r24, 0x014E
     c28:	88 23       	and	r24, r24
     c2a:	09 f4       	brne	.+2      	; 0xc2e <main+0x31e>
     c2c:	b4 ce       	rjmp	.-664    	; 0x996 <main+0x86>
     c2e:	8f e0       	ldi	r24, 0x0F	; 15
     c30:	97 e2       	ldi	r25, 0x27	; 39
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <main+0x322>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <main+0x328>
     c38:	00 00       	nop
						continue;                   					
                   
				    _delay_ms(5);
					_receive_data();
     c3a:	0e 94 83 11 	call	0x2306	; 0x2306 <_receive_data>
     c3e:	c4 e6       	ldi	r28, 0x64	; 100
     c40:	d0 e0       	ldi	r29, 0x00	; 0
					Instead, we delay the transmission of the actual data (activity counts or raw data) 
					by sending padding bytes. The decoder software on the phone ignores the (0xff) bytes
					received by the phone.*/

					for (int ixz = 0; (ixz < 100); ixz++) {                                                                                
       					_bluetooth_transmit_uart0_byte(0xff); // The decoder on the phone ignores these packets 
     c42:	8f ef       	ldi	r24, 0xFF	; 255
     c44:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
							
						if (sampleFlag)
     c48:	80 91 26 01 	lds	r24, 0x0126
     c4c:	88 23       	and	r24, r24
     c4e:	11 f0       	breq	.+4      	; 0xc54 <main+0x344>
							do_sampling();
     c50:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <do_sampling>
     c54:	21 97       	sbiw	r28, 0x01	; 1
					the wockets does not have the capability to allow flow control using RTS/CTS. 
					Instead, we delay the transmission of the actual data (activity counts or raw data) 
					by sending padding bytes. The decoder software on the phone ignores the (0xff) bytes
					received by the phone.*/

					for (int ixz = 0; (ixz < 100); ixz++) {                                                                                
     c56:	a9 f7       	brne	.-22     	; 0xc42 <main+0x332>
							do_sampling();
					} 
				    //------------------------------------------------------------------										
					//_send_sr();			// Send the sampling rate to the phone 				 
					//_send_wtm();		    // Send the wocket transmission mode to the phone					
					battery = _atmega_a2dConvert10bit(ADC7); 
     c58:	87 e0       	ldi	r24, 0x07	; 7
     c5a:	0e 94 4e 0a 	call	0x149c	; 0x149c <_atmega_a2dConvert10bit>
     c5e:	90 93 6a 38 	sts	0x386A, r25
     c62:	80 93 69 38 	sts	0x3869, r24
					_send_bl(battery);		//sample and send the battery level										
     c66:	0e 94 3f 11 	call	0x227e	; 0x227e <_send_bl>
					_send_acs();			// Send the Activity counts information 
     c6a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_send_acs>
					
					rawTail = dataIndex;
     c6e:	20 91 0e 01 	lds	r18, 0x010E
     c72:	30 91 0f 01 	lds	r19, 0x010F
     c76:	30 93 14 01 	sts	0x0114, r19
     c7a:	20 93 13 01 	sts	0x0113, r18
					if (batch_counter == (DATA_SIZE - 1)) //in case of memory overflow
     c7e:	80 91 0c 01 	lds	r24, 0x010C
     c82:	90 91 0d 01 	lds	r25, 0x010D
     c86:	e2 e0       	ldi	r30, 0x02	; 2
     c88:	8d 3e       	cpi	r24, 0xED	; 237
     c8a:	9e 07       	cpc	r25, r30
     c8c:	31 f4       	brne	.+12     	; 0xc9a <main+0x38a>
						rawHead = dataIndex + 1;
     c8e:	2f 5f       	subi	r18, 0xFF	; 255
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	30 93 12 01 	sts	0x0112, r19
     c96:	20 93 11 01 	sts	0x0111, r18
					/*if (rawTail - rawHead >= 0)
						batch_counter = rawTail - rawHead;
					else 
						batch_counter = DATA_SIZE - rawHead - 1 + rawTail;*/
					_send_batch_count(batch_counter * 4);	// Send the number of raw data packets that are going to be sent 
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	0e 94 ca 10 	call	0x2194	; 0x2194 <_send_batch_count>
					batch_counter = 0;
     ca6:	10 92 0d 01 	sts	0x010D, r1
     caa:	10 92 0c 01 	sts	0x010C, r1
					
					while(rawHead != rawTail) { //Send raw data from Circular buffer
     cae:	25 c1       	rjmp	.+586    	; 0xefa <main+0x5ea>
					
						m_GET_X(x, data[rawHead].byte1,  data[rawHead].byte2,  0);
     cb0:	fc 01       	movw	r30, r24
     cb2:	54 e0       	ldi	r21, 0x04	; 4
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	5a 95       	dec	r21
     cba:	e1 f7       	brne	.-8      	; 0xcb4 <main+0x3a4>
     cbc:	e8 1b       	sub	r30, r24
     cbe:	f9 0b       	sbc	r31, r25
     cc0:	e1 59       	subi	r30, 0x91	; 145
     cc2:	f3 4f       	sbci	r31, 0xF3	; 243
     cc4:	61 81       	ldd	r22, Z+1	; 0x01
     cc6:	86 2f       	mov	r24, r22
     cc8:	82 95       	swap	r24
     cca:	86 95       	lsr	r24
     ccc:	86 95       	lsr	r24
     cce:	83 70       	andi	r24, 0x03	; 3
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	20 81       	ld	r18, Z
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	22 0f       	add	r18, r18
     cdc:	33 1f       	adc	r19, r19
     cde:	82 2b       	or	r24, r18
     ce0:	93 2b       	or	r25, r19
     ce2:	90 93 43 01 	sts	0x0143, r25
     ce6:	80 93 42 01 	sts	0x0142, r24
						m_GET_Y(y, data[rawHead].byte2,  data[rawHead].byte3,  0);
     cea:	42 81       	ldd	r20, Z+2	; 0x02
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	6f 73       	andi	r22, 0x3F	; 63
     cf0:	70 70       	andi	r23, 0x00	; 0
     cf2:	b4 e0       	ldi	r27, 0x04	; 4
     cf4:	66 0f       	add	r22, r22
     cf6:	77 1f       	adc	r23, r23
     cf8:	ba 95       	dec	r27
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <main+0x3e4>
     cfc:	24 2f       	mov	r18, r20
     cfe:	22 95       	swap	r18
     d00:	2f 70       	andi	r18, 0x0F	; 15
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	62 2b       	or	r22, r18
     d06:	73 2b       	or	r23, r19
     d08:	70 93 45 01 	sts	0x0145, r23
     d0c:	60 93 44 01 	sts	0x0144, r22
						m_GET_Z(z, data[rawHead].byte3,  data[rawHead].byte4,  0);
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	4f 70       	andi	r20, 0x0F	; 15
     d14:	50 70       	andi	r21, 0x00	; 0
     d16:	a6 e0       	ldi	r26, 0x06	; 6
     d18:	44 0f       	add	r20, r20
     d1a:	55 1f       	adc	r21, r21
     d1c:	aa 95       	dec	r26
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <main+0x408>
     d20:	23 81       	ldd	r18, Z+3	; 0x03
     d22:	26 95       	lsr	r18
     d24:	26 95       	lsr	r18
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	42 2b       	or	r20, r18
     d2a:	53 2b       	or	r21, r19
     d2c:	50 93 47 01 	sts	0x0147, r21
     d30:	40 93 46 01 	sts	0x0146, r20
						_send_pdu(x, y, z);
     d34:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_send_pdu>

						m_GET_X(x, data[rawHead].byte4,  data[rawHead].byte5,  1);
     d38:	80 91 11 01 	lds	r24, 0x0111
     d3c:	90 91 12 01 	lds	r25, 0x0112
     d40:	fc 01       	movw	r30, r24
     d42:	74 e0       	ldi	r23, 0x04	; 4
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	7a 95       	dec	r23
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <main+0x434>
     d4c:	e8 1b       	sub	r30, r24
     d4e:	f9 0b       	sbc	r31, r25
     d50:	e1 59       	subi	r30, 0x91	; 145
     d52:	f3 4f       	sbci	r31, 0xF3	; 243
     d54:	83 81       	ldd	r24, Z+3	; 0x03
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	83 70       	andi	r24, 0x03	; 3
     d5a:	90 70       	andi	r25, 0x00	; 0
     d5c:	98 2f       	mov	r25, r24
     d5e:	88 27       	eor	r24, r24
     d60:	24 81       	ldd	r18, Z+4	; 0x04
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	82 2b       	or	r24, r18
     d66:	93 2b       	or	r25, r19
     d68:	90 93 43 01 	sts	0x0143, r25
     d6c:	80 93 42 01 	sts	0x0142, r24
						m_GET_Y(y, data[rawHead].byte6,  data[rawHead].byte7,  1);
     d70:	46 81       	ldd	r20, Z+6	; 0x06
     d72:	64 2f       	mov	r22, r20
     d74:	62 95       	swap	r22
     d76:	66 95       	lsr	r22
     d78:	66 95       	lsr	r22
     d7a:	63 70       	andi	r22, 0x03	; 3
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	25 81       	ldd	r18, Z+5	; 0x05
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	22 0f       	add	r18, r18
     d84:	33 1f       	adc	r19, r19
     d86:	22 0f       	add	r18, r18
     d88:	33 1f       	adc	r19, r19
     d8a:	62 2b       	or	r22, r18
     d8c:	73 2b       	or	r23, r19
     d8e:	70 93 45 01 	sts	0x0145, r23
     d92:	60 93 44 01 	sts	0x0144, r22
						m_GET_Z(z, data[rawHead].byte7,  data[rawHead].byte8,  1);
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	4f 73       	andi	r20, 0x3F	; 63
     d9a:	50 70       	andi	r21, 0x00	; 0
     d9c:	34 e0       	ldi	r19, 0x04	; 4
     d9e:	44 0f       	add	r20, r20
     da0:	55 1f       	adc	r21, r21
     da2:	3a 95       	dec	r19
     da4:	e1 f7       	brne	.-8      	; 0xd9e <main+0x48e>
     da6:	27 81       	ldd	r18, Z+7	; 0x07
     da8:	22 95       	swap	r18
     daa:	2f 70       	andi	r18, 0x0F	; 15
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	42 2b       	or	r20, r18
     db0:	53 2b       	or	r21, r19
     db2:	50 93 47 01 	sts	0x0147, r21
     db6:	40 93 46 01 	sts	0x0146, r20
						_send_pdu(x, y, z);
     dba:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_send_pdu>

						m_GET_X(x, data[rawHead].byte8,  data[rawHead].byte9,  2);
     dbe:	80 91 11 01 	lds	r24, 0x0111
     dc2:	90 91 12 01 	lds	r25, 0x0112
     dc6:	fc 01       	movw	r30, r24
     dc8:	24 e0       	ldi	r18, 0x04	; 4
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	2a 95       	dec	r18
     dd0:	e1 f7       	brne	.-8      	; 0xdca <main+0x4ba>
     dd2:	e8 1b       	sub	r30, r24
     dd4:	f9 0b       	sbc	r31, r25
     dd6:	e1 59       	subi	r30, 0x91	; 145
     dd8:	f3 4f       	sbci	r31, 0xF3	; 243
     dda:	60 85       	ldd	r22, Z+8	; 0x08
     ddc:	86 2f       	mov	r24, r22
     dde:	86 95       	lsr	r24
     de0:	86 95       	lsr	r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	27 81       	ldd	r18, Z+7	; 0x07
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	2f 70       	andi	r18, 0x0F	; 15
     dea:	30 70       	andi	r19, 0x00	; 0
     dec:	b6 e0       	ldi	r27, 0x06	; 6
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	ba 95       	dec	r27
     df4:	e1 f7       	brne	.-8      	; 0xdee <main+0x4de>
     df6:	82 2b       	or	r24, r18
     df8:	93 2b       	or	r25, r19
     dfa:	90 93 43 01 	sts	0x0143, r25
     dfe:	80 93 42 01 	sts	0x0142, r24
						m_GET_Y(y, data[rawHead].byte9,  data[rawHead].byte10, 2);
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	63 70       	andi	r22, 0x03	; 3
     e06:	70 70       	andi	r23, 0x00	; 0
     e08:	76 2f       	mov	r23, r22
     e0a:	66 27       	eor	r22, r22
     e0c:	21 85       	ldd	r18, Z+9	; 0x09
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	62 2b       	or	r22, r18
     e12:	73 2b       	or	r23, r19
     e14:	70 93 45 01 	sts	0x0145, r23
     e18:	60 93 44 01 	sts	0x0144, r22
						m_GET_Z(z, data[rawHead].byte11, data[rawHead].byte12, 2);
     e1c:	43 85       	ldd	r20, Z+11	; 0x0b
     e1e:	42 95       	swap	r20
     e20:	46 95       	lsr	r20
     e22:	46 95       	lsr	r20
     e24:	43 70       	andi	r20, 0x03	; 3
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	22 85       	ldd	r18, Z+10	; 0x0a
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	22 0f       	add	r18, r18
     e2e:	33 1f       	adc	r19, r19
     e30:	22 0f       	add	r18, r18
     e32:	33 1f       	adc	r19, r19
     e34:	42 2b       	or	r20, r18
     e36:	53 2b       	or	r21, r19
     e38:	50 93 47 01 	sts	0x0147, r21
     e3c:	40 93 46 01 	sts	0x0146, r20
						_send_pdu(x, y, z);
     e40:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_send_pdu>

						m_GET_X(x, data[rawHead].byte12, data[rawHead].byte13, 3);
     e44:	80 91 11 01 	lds	r24, 0x0111
     e48:	90 91 12 01 	lds	r25, 0x0112
     e4c:	fc 01       	movw	r30, r24
     e4e:	54 e0       	ldi	r21, 0x04	; 4
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	5a 95       	dec	r21
     e56:	e1 f7       	brne	.-8      	; 0xe50 <main+0x540>
     e58:	e8 1b       	sub	r30, r24
     e5a:	f9 0b       	sbc	r31, r25
     e5c:	e1 59       	subi	r30, 0x91	; 145
     e5e:	f3 4f       	sbci	r31, 0xF3	; 243
     e60:	64 85       	ldd	r22, Z+12	; 0x0c
     e62:	86 2f       	mov	r24, r22
     e64:	82 95       	swap	r24
     e66:	8f 70       	andi	r24, 0x0F	; 15
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	23 85       	ldd	r18, Z+11	; 0x0b
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	2f 73       	andi	r18, 0x3F	; 63
     e70:	30 70       	andi	r19, 0x00	; 0
     e72:	44 e0       	ldi	r20, 0x04	; 4
     e74:	22 0f       	add	r18, r18
     e76:	33 1f       	adc	r19, r19
     e78:	4a 95       	dec	r20
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <main+0x564>
     e7c:	82 2b       	or	r24, r18
     e7e:	93 2b       	or	r25, r19
     e80:	90 93 43 01 	sts	0x0143, r25
     e84:	80 93 42 01 	sts	0x0142, r24
						m_GET_Y(y, data[rawHead].byte13, data[rawHead].byte14, 3);
     e88:	45 85       	ldd	r20, Z+13	; 0x0d
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	6f 70       	andi	r22, 0x0F	; 15
     e8e:	70 70       	andi	r23, 0x00	; 0
     e90:	36 e0       	ldi	r19, 0x06	; 6
     e92:	66 0f       	add	r22, r22
     e94:	77 1f       	adc	r23, r23
     e96:	3a 95       	dec	r19
     e98:	e1 f7       	brne	.-8      	; 0xe92 <main+0x582>
     e9a:	24 2f       	mov	r18, r20
     e9c:	26 95       	lsr	r18
     e9e:	26 95       	lsr	r18
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	62 2b       	or	r22, r18
     ea4:	73 2b       	or	r23, r19
     ea6:	70 93 45 01 	sts	0x0145, r23
     eaa:	60 93 44 01 	sts	0x0144, r22
						m_GET_Z(z, data[rawHead].byte14, data[rawHead].byte15, 3);
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	43 70       	andi	r20, 0x03	; 3
     eb2:	50 70       	andi	r21, 0x00	; 0
     eb4:	54 2f       	mov	r21, r20
     eb6:	44 27       	eor	r20, r20
     eb8:	26 85       	ldd	r18, Z+14	; 0x0e
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	42 2b       	or	r20, r18
     ebe:	53 2b       	or	r21, r19
     ec0:	50 93 47 01 	sts	0x0147, r21
     ec4:	40 93 46 01 	sts	0x0146, r20
						_send_pdu(x, y, z);
     ec8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_send_pdu>

						rawHead++;
     ecc:	80 91 11 01 	lds	r24, 0x0111
     ed0:	90 91 12 01 	lds	r25, 0x0112
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	90 93 12 01 	sts	0x0112, r25
     eda:	80 93 11 01 	sts	0x0111, r24

						if (rawHead == DATA_SIZE)
     ede:	f2 e0       	ldi	r31, 0x02	; 2
     ee0:	8e 3e       	cpi	r24, 0xEE	; 238
     ee2:	9f 07       	cpc	r25, r31
     ee4:	21 f4       	brne	.+8      	; 0xeee <main+0x5de>
							rawHead = 0;
     ee6:	10 92 12 01 	sts	0x0112, r1
     eea:	10 92 11 01 	sts	0x0111, r1

						//_receive_data();

						if (sampleFlag)
     eee:	80 91 26 01 	lds	r24, 0x0126
     ef2:	88 23       	and	r24, r24
     ef4:	11 f0       	breq	.+4      	; 0xefa <main+0x5ea>
							do_sampling();							
     ef6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <do_sampling>
					else 
						batch_counter = DATA_SIZE - rawHead - 1 + rawTail;*/
					_send_batch_count(batch_counter * 4);	// Send the number of raw data packets that are going to be sent 
					batch_counter = 0;
					
					while(rawHead != rawTail) { //Send raw data from Circular buffer
     efa:	80 91 11 01 	lds	r24, 0x0111
     efe:	90 91 12 01 	lds	r25, 0x0112
     f02:	20 91 13 01 	lds	r18, 0x0113
     f06:	30 91 14 01 	lds	r19, 0x0114
     f0a:	82 17       	cp	r24, r18
     f0c:	93 07       	cpc	r25, r19
     f0e:	09 f0       	breq	.+2      	; 0xf12 <main+0x602>
     f10:	cf ce       	rjmp	.-610    	; 0xcb0 <main+0x3a0>

						if (sampleFlag)
							do_sampling();							
					}					
					
					_send_end_batch();	//tell phone/PC that all data for this minute has been sent 
     f12:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <_send_end_batch>
					//------------------------------------------------------------------

					seconds_passed = 0;
     f16:	10 92 28 01 	sts	0x0128, r1
     f1a:	10 92 27 01 	sts	0x0127, r1
					while (seconds_passed < 400) {//The delay provided here helps to not lose the sent data from the phone
     f1e:	13 c0       	rjmp	.+38     	; 0xf46 <main+0x636>
     f20:	ef e0       	ldi	r30, 0x0F	; 15
     f22:	f7 e2       	ldi	r31, 0x27	; 39
     f24:	31 97       	sbiw	r30, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <main+0x614>
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <main+0x61a>
     f2a:	00 00       	nop
						_delay_ms(5);
						seconds_passed++;
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	90 93 28 01 	sts	0x0128, r25
     f32:	80 93 27 01 	sts	0x0127, r24
						_receive_data();
     f36:	0e 94 83 11 	call	0x2306	; 0x2306 <_receive_data>

						if (sampleFlag)
     f3a:	80 91 26 01 	lds	r24, 0x0126
     f3e:	88 23       	and	r24, r24
     f40:	11 f0       	breq	.+4      	; 0xf46 <main+0x636>
							do_sampling();
     f42:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <do_sampling>
					
					_send_end_batch();	//tell phone/PC that all data for this minute has been sent 
					//------------------------------------------------------------------

					seconds_passed = 0;
					while (seconds_passed < 400) {//The delay provided here helps to not lose the sent data from the phone
     f46:	80 91 27 01 	lds	r24, 0x0127
     f4a:	90 91 28 01 	lds	r25, 0x0128
     f4e:	f1 e0       	ldi	r31, 0x01	; 1
     f50:	80 39       	cpi	r24, 0x90	; 144
     f52:	9f 07       	cpc	r25, r31
     f54:	28 f3       	brcs	.-54     	; 0xf20 <main+0x610>
						if (sampleFlag)
							do_sampling();
					} 

					//Don't turn off the radio if a request to switch mode has been received
					if ((_wTM == _WTM_Continuous) && (shutdown_flag == 0))
     f56:	80 91 4e 01 	lds	r24, 0x014E
     f5a:	88 23       	and	r24, r24
     f5c:	39 f4       	brne	.+14     	; 0xf6c <main+0x65c>
     f5e:	80 91 32 01 	lds	r24, 0x0132
     f62:	88 23       	and	r24, r24
     f64:	19 f4       	brne	.+6      	; 0xf6c <main+0x65c>
						_bluetooth_turn_on();	
     f66:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_bluetooth_turn_on>
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <main+0x660>
					else
						_bluetooth_turn_off();		
     f6c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_bluetooth_turn_off>
					
					command_counter = 0;
     f70:	10 92 37 01 	sts	0x0137, r1
					seconds_disconnected = 0;
     f74:	10 92 2b 01 	sts	0x012B, r1
     f78:	10 92 2a 01 	sts	0x012A, r1
					_greenled_turn_off();
     f7c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_greenled_turn_off>

				} // End if (connected)
				if (sampleFlag)
     f80:	80 91 26 01 	lds	r24, 0x0126
     f84:	88 23       	and	r24, r24
     f86:	11 f0       	breq	.+4      	; 0xf8c <main+0x67c>
					do_sampling();
     f88:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <do_sampling>

			} // End else (_wTM==_WTM_Continuous) => _wTM is bursty 

			_atmega_adc_turn_off();
     f8c:	0e 94 de 09 	call	0x13bc	; 0x13bc <_atmega_adc_turn_off>
			power_adc_disable();
     f90:	80 91 64 00 	lds	r24, 0x0064
     f94:	81 60       	ori	r24, 0x01	; 1
     f96:	80 93 64 00 	sts	0x0064, r24

			if(_wTM==_WTM_Continuous){
     f9a:	80 91 4e 01 	lds	r24, 0x014E
     f9e:	88 23       	and	r24, r24
     fa0:	e9 f4       	brne	.+58     	; 0xfdc <main+0x6cc>
				if ((dataSubindex == 0) && (!connected))
     fa2:	80 91 10 01 	lds	r24, 0x0110
     fa6:	88 23       	and	r24, r24
     fa8:	69 f4       	brne	.+26     	; 0xfc4 <main+0x6b4>
     faa:	80 91 29 01 	lds	r24, 0x0129
     fae:	88 23       	and	r24, r24
     fb0:	49 f4       	brne	.+18     	; 0xfc4 <main+0x6b4>
					dataIndex++;
     fb2:	80 91 0e 01 	lds	r24, 0x010E
     fb6:	90 91 0f 01 	lds	r25, 0x010F
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	90 93 0f 01 	sts	0x010F, r25
     fc0:	80 93 0e 01 	sts	0x010E, r24
				if (dataIndex == DATA_SIZE)
     fc4:	80 91 0e 01 	lds	r24, 0x010E
     fc8:	90 91 0f 01 	lds	r25, 0x010F
     fcc:	22 e0       	ldi	r18, 0x02	; 2
     fce:	8e 3e       	cpi	r24, 0xEE	; 238
     fd0:	92 07       	cpc	r25, r18
     fd2:	21 f4       	brne	.+8      	; 0xfdc <main+0x6cc>
					dataIndex = 0;
     fd4:	10 92 0f 01 	sts	0x010F, r1
     fd8:	10 92 0e 01 	sts	0x010E, r1
			}

			connected = 0;			
     fdc:	10 92 29 01 	sts	0x0129, r1
		}// Endof the First if (sampleFlag)	
		
		   
			cli();				// Clear interruptions and set the system to sleep mode
     fe0:	f8 94       	cli
			set_sleep_mode(SLEEP_MODE_IDLE);
     fe2:	83 b7       	in	r24, 0x33	; 51
     fe4:	81 7f       	andi	r24, 0xF1	; 241
     fe6:	83 bf       	out	0x33, r24	; 51
			// Built in functionality to enable interrupts and shutdown of the cpu to save power 
    		sleep_enable();		// sleep.h 
     fe8:	83 b7       	in	r24, 0x33	; 51
     fea:	81 60       	ori	r24, 0x01	; 1
     fec:	83 bf       	out	0x33, r24	; 51
    		sei();				// interrupt.h
     fee:	78 94       	sei
    		sleep_cpu();		// sleep.h 
     ff0:	88 95       	sleep
    		sleep_disable();	// sleep.h 	
     ff2:	83 b7       	in	r24, 0x33	; 51
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	83 bf       	out	0x33, r24	; 51
     ff8:	ce cc       	rjmp	.-1636   	; 0x996 <main+0x86>

00000ffa <__vector_11>:



//------------------------ Interrupt service routine for Timer 2------------------------------------
ISR(TIMER2_OVF_vect)
{	
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	0b b6       	in	r0, 0x3b	; 59
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	1f 93       	push	r17
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
	if (_is_docked()) // Has the wocket been connected to the charger/programmer more than one minitue?		
    1022:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_is_docked>
    1026:	20 91 2f 01 	lds	r18, 0x012F
    102a:	88 23       	and	r24, r24
    102c:	09 f4       	brne	.+2      	; 0x1030 <__vector_11+0x36>
    102e:	43 c0       	rjmp	.+134    	; 0x10b6 <__vector_11+0xbc>
	{
		dockcounter++;		 
    1030:	80 91 30 01 	lds	r24, 0x0130
    1034:	90 91 31 01 	lds	r25, 0x0131
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	90 93 31 01 	sts	0x0131, r25
    103e:	80 93 30 01 	sts	0x0130, r24
		if ((!isdocked)&& (dockcounter > (_SAMPLING_RATE * 60))){				
    1042:	22 23       	and	r18, r18
    1044:	09 f0       	breq	.+2      	; 0x1048 <__vector_11+0x4e>
    1046:	59 c1       	rjmp	.+690    	; 0x12fa <__vector_11+0x300>
    1048:	30 91 06 01 	lds	r19, 0x0106
    104c:	2c e3       	ldi	r18, 0x3C	; 60
    104e:	32 9f       	mul	r19, r18
    1050:	90 01       	movw	r18, r0
    1052:	11 24       	eor	r1, r1
    1054:	28 17       	cp	r18, r24
    1056:	39 07       	cpc	r19, r25
    1058:	08 f0       	brcs	.+2      	; 0x105c <__vector_11+0x62>
    105a:	4f c1       	rjmp	.+670    	; 0x12fa <__vector_11+0x300>
			ci   = 0;
    105c:	10 92 20 01 	sts	0x0120, r1
    1060:	10 92 1f 01 	sts	0x011F, r1
			si   = 0;
    1064:	10 92 22 01 	sts	0x0122, r1
    1068:	10 92 21 01 	sts	0x0121, r1
			cseq = 0; 
    106c:	10 92 18 01 	sts	0x0118, r1
    1070:	10 92 17 01 	sts	0x0117, r1
			sseq = 0;		
    1074:	10 92 1a 01 	sts	0x011A, r1
    1078:	10 92 19 01 	sts	0x0119, r1
			_bluetooth_turn_off();
    107c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_bluetooth_turn_off>
			isdocked = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	80 93 2f 01 	sts	0x012F, r24
			if (shutdown_flag == 1){
    1086:	80 91 32 01 	lds	r24, 0x0132
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	09 f0       	breq	.+2      	; 0x1090 <__vector_11+0x96>
    108e:	35 c1       	rjmp	.+618    	; 0x12fa <__vector_11+0x300>
				//_wocket_initialize();
				_bluetooth_turn_on();
    1090:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_bluetooth_turn_on>
				shutdown_flag = 0;
    1094:	10 92 32 01 	sts	0x0132, r1
				_yellowled_turn_on();
    1098:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_yellowled_turn_on>
    109c:	88 ec       	ldi	r24, 0xC8	; 200
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	ef e1       	ldi	r30, 0x1F	; 31
    10a2:	fe e4       	ldi	r31, 0x4E	; 78
    10a4:	31 97       	sbiw	r30, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <__vector_11+0xaa>
    10a8:	00 c0       	rjmp	.+0      	; 0x10aa <__vector_11+0xb0>
    10aa:	00 00       	nop
    10ac:	01 97       	sbiw	r24, 0x01	; 1
				for(int i = 0;(i < 200);i++)
    10ae:	c1 f7       	brne	.-16     	; 0x10a0 <__vector_11+0xa6>
					_delay_ms(10);
				_yellowled_turn_off();
    10b0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <_yellowled_turn_off>
    10b4:	22 c1       	rjmp	.+580    	; 0x12fa <__vector_11+0x300>
			}
							
		}
		return;
	} else {
		dockcounter = 0;
    10b6:	10 92 31 01 	sts	0x0131, r1
    10ba:	10 92 30 01 	sts	0x0130, r1
		if (isdocked) {
    10be:	22 23       	and	r18, r18
    10c0:	21 f0       	breq	.+8      	; 0x10ca <__vector_11+0xd0>
			_bluetooth_turn_on();
    10c2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_bluetooth_turn_on>
			isdocked = 0;			
    10c6:	10 92 2f 01 	sts	0x012F, r1
		}
	}

	if ((connected == 0)&& (shutdown_flag == 0)){
    10ca:	80 91 29 01 	lds	r24, 0x0129
    10ce:	88 23       	and	r24, r24
    10d0:	21 f5       	brne	.+72     	; 0x111a <__vector_11+0x120>
    10d2:	80 91 32 01 	lds	r24, 0x0132
    10d6:	88 23       	and	r24, r24
    10d8:	01 f5       	brne	.+64     	; 0x111a <__vector_11+0x120>
		blink_counter++;
    10da:	80 91 65 38 	lds	r24, 0x3865
    10de:	90 91 66 38 	lds	r25, 0x3866
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	90 93 66 38 	sts	0x3866, r25
    10e8:	80 93 65 38 	sts	0x3865, r24
		if (blink_counter == (_SAMPLING_RATE * 5))		// ON period
    10ec:	30 91 06 01 	lds	r19, 0x0106
    10f0:	25 e0       	ldi	r18, 0x05	; 5
    10f2:	32 9f       	mul	r19, r18
    10f4:	90 01       	movw	r18, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	82 17       	cp	r24, r18
    10fa:	93 07       	cpc	r25, r19
    10fc:	19 f4       	brne	.+6      	; 0x1104 <__vector_11+0x10a>
			_greenled_turn_on();
    10fe:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_greenled_turn_on>
    1102:	0b c0       	rjmp	.+22     	; 0x111a <__vector_11+0x120>
		else if (blink_counter == ((_SAMPLING_RATE * 5) + 10)) { 	// OFF period
    1104:	26 5f       	subi	r18, 0xF6	; 246
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	82 17       	cp	r24, r18
    110a:	93 07       	cpc	r25, r19
    110c:	31 f4       	brne	.+12     	; 0x111a <__vector_11+0x120>
			_greenled_turn_off();
    110e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_greenled_turn_off>
			blink_counter = 0;
    1112:	10 92 66 38 	sts	0x3866, r1
    1116:	10 92 65 38 	sts	0x3865, r1
		}
	}

	// Adjusting the counter for the sampling rate 
	//REFER to _wocket_initialize_timer2_interrupt in the wocket.c	
 	if (interrupt_reps == 0) {	
    111a:	80 91 2d 01 	lds	r24, 0x012D
    111e:	88 23       	and	r24, r24
    1120:	89 f4       	brne	.+34     	; 0x1144 <__vector_11+0x14a>
		interrupt_reps = _wTCNT2_reps;
    1122:	80 91 07 01 	lds	r24, 0x0107
    1126:	80 93 2d 01 	sts	0x012D, r24
		TCNT2 = _wTCNT2;
    112a:	80 91 4c 01 	lds	r24, 0x014C
    112e:	80 93 b2 00 	sts	0x00B2, r24
		interrupt_reps--;
		return;
	}
	
	// When this flag is set, accelerometer should be sampled
	sampleFlag = 1;
    1132:	11 e0       	ldi	r17, 0x01	; 1
    1134:	10 93 26 01 	sts	0x0126, r17

	if (_wTM == _WTM_Continuous) {
    1138:	80 91 4e 01 	lds	r24, 0x014E
    113c:	88 23       	and	r24, r24
    113e:	09 f0       	breq	.+2      	; 0x1142 <__vector_11+0x148>
    1140:	52 c0       	rjmp	.+164    	; 0x11e6 <__vector_11+0x1ec>
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <__vector_11+0x168>
 	if (interrupt_reps == 0) {	
		interrupt_reps = _wTCNT2_reps;
		TCNT2 = _wTCNT2;
	}
	else { //otherwise wait
		if (interrupt_reps == 1)	
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	19 f4       	brne	.+6      	; 0x114e <__vector_11+0x154>
			TCNT2 = _wTCNT2_last;	
    1148:	80 91 4d 01 	lds	r24, 0x014D
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <__vector_11+0x158>
		else		
			TCNT2 = _wTCNT2;					
    114e:	80 91 4c 01 	lds	r24, 0x014C
    1152:	80 93 b2 00 	sts	0x00B2, r24
		interrupt_reps--;
    1156:	80 91 2d 01 	lds	r24, 0x012D
    115a:	81 50       	subi	r24, 0x01	; 1
    115c:	80 93 2d 01 	sts	0x012D, r24
		return;
    1160:	cc c0       	rjmp	.+408    	; 0x12fa <__vector_11+0x300>
	
	// When this flag is set, accelerometer should be sampled
	sampleFlag = 1;

	if (_wTM == _WTM_Continuous) {
		_wPC++;
    1162:	80 91 4f 01 	lds	r24, 0x014F
    1166:	90 91 50 01 	lds	r25, 0x0150
    116a:	a0 91 51 01 	lds	r26, 0x0151
    116e:	b0 91 52 01 	lds	r27, 0x0152
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	a1 1d       	adc	r26, r1
    1176:	b1 1d       	adc	r27, r1
    1178:	80 93 4f 01 	sts	0x014F, r24
    117c:	90 93 50 01 	sts	0x0150, r25
    1180:	a0 93 51 01 	sts	0x0151, r26
    1184:	b0 93 52 01 	sts	0x0152, r27
		// Section of the code to indicate that the wocket got connected
		if (!_bluetooth_is_connected()){
    1188:	0e 94 18 0b 	call	0x1630	; 0x1630 <_bluetooth_is_connected>
    118c:	88 23       	and	r24, r24
    118e:	29 f4       	brne	.+10     	; 0x119a <__vector_11+0x1a0>
			justconnected = 0;
    1190:	10 92 2e 01 	sts	0x012E, r1
			compress = 0;
    1194:	10 92 25 01 	sts	0x0125, r1
			return;		
    1198:	b0 c0       	rjmp	.+352    	; 0x12fa <__vector_11+0x300>
		}
		else if (justconnected == 0)
    119a:	80 91 2e 01 	lds	r24, 0x012E
    119e:	88 23       	and	r24, r24
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <__vector_11+0x1ac>
			justconnected = 1;
    11a2:	10 93 2e 01 	sts	0x012E, r17

		if (_wShutdownTimer != _DEFAULT_SHUTDOWN)
    11a6:	80 91 5b 01 	lds	r24, 0x015B
    11aa:	90 91 5c 01 	lds	r25, 0x015C
    11ae:	a0 91 5d 01 	lds	r26, 0x015D
    11b2:	b0 91 5e 01 	lds	r27, 0x015E
    11b6:	20 91 57 01 	lds	r18, 0x0157
    11ba:	30 91 58 01 	lds	r19, 0x0158
    11be:	40 91 59 01 	lds	r20, 0x0159
    11c2:	50 91 5a 01 	lds	r21, 0x015A
    11c6:	28 17       	cp	r18, r24
    11c8:	39 07       	cpc	r19, r25
    11ca:	4a 07       	cpc	r20, r26
    11cc:	5b 07       	cpc	r21, r27
    11ce:	41 f0       	breq	.+16     	; 0x11e0 <__vector_11+0x1e6>
			_wShutdownTimer  = _DEFAULT_SHUTDOWN;
    11d0:	80 93 57 01 	sts	0x0157, r24
    11d4:	90 93 58 01 	sts	0x0158, r25
    11d8:	a0 93 59 01 	sts	0x0159, r26
    11dc:	b0 93 5a 01 	sts	0x015A, r27

		_receive_data();
    11e0:	0e 94 83 11 	call	0x2306	; 0x2306 <_receive_data>
    11e4:	8a c0       	rjmp	.+276    	; 0x12fa <__vector_11+0x300>
	}

	else if (_wTM == _WTM_Burst_60)	{
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	09 f0       	breq	.+2      	; 0x11ec <__vector_11+0x1f2>
    11ea:	87 c0       	rjmp	.+270    	; 0x12fa <__vector_11+0x300>
		//This only works for Timer1,doesn't have any effect for this timer (Timer2)
		if (_wPDT != 0)
    11ec:	80 91 85 38 	lds	r24, 0x3885
    11f0:	88 23       	and	r24, r24
    11f2:	99 f0       	breq	.+38     	; 0x121a <__vector_11+0x220>
			_wShutdownTimer--;
    11f4:	80 91 57 01 	lds	r24, 0x0157
    11f8:	90 91 58 01 	lds	r25, 0x0158
    11fc:	a0 91 59 01 	lds	r26, 0x0159
    1200:	b0 91 5a 01 	lds	r27, 0x015A
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	a1 09       	sbc	r26, r1
    1208:	b1 09       	sbc	r27, r1
    120a:	80 93 57 01 	sts	0x0157, r24
    120e:	90 93 58 01 	sts	0x0158, r25
    1212:	a0 93 59 01 	sts	0x0159, r26
    1216:	b0 93 5a 01 	sts	0x015A, r27

		_wPC++;
    121a:	80 91 4f 01 	lds	r24, 0x014F
    121e:	90 91 50 01 	lds	r25, 0x0150
    1222:	a0 91 51 01 	lds	r26, 0x0151
    1226:	b0 91 52 01 	lds	r27, 0x0152
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	a1 1d       	adc	r26, r1
    122e:	b1 1d       	adc	r27, r1
    1230:	80 93 4f 01 	sts	0x014F, r24
    1234:	90 93 50 01 	sts	0x0150, r25
    1238:	a0 93 51 01 	sts	0x0151, r26
    123c:	b0 93 52 01 	sts	0x0152, r27
		
		 // Turns the Bluetooth ON approximately every 45 seconds after the previous transmission 
		if (!_bluetooth_is_connected()) {			
    1240:	0e 94 18 0b 	call	0x1630	; 0x1630 <_bluetooth_is_connected>
    1244:	88 23       	and	r24, r24
    1246:	99 f5       	brne	.+102    	; 0x12ae <__vector_11+0x2b4>
			compress = 0; 
    1248:	10 92 25 01 	sts	0x0125, r1

			if (seconds_disconnected < (_SAMPLING_RATE * 45)) // 45 Sec
    124c:	80 91 2a 01 	lds	r24, 0x012A
    1250:	90 91 2b 01 	lds	r25, 0x012B
    1254:	30 91 06 01 	lds	r19, 0x0106
    1258:	2d e2       	ldi	r18, 0x2D	; 45
    125a:	32 9f       	mul	r19, r18
    125c:	90 01       	movw	r18, r0
    125e:	11 24       	eor	r1, r1
    1260:	82 17       	cp	r24, r18
    1262:	93 07       	cpc	r25, r19
    1264:	30 f4       	brcc	.+12     	; 0x1272 <__vector_11+0x278>
				seconds_disconnected++;
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	90 93 2b 01 	sts	0x012B, r25
    126c:	80 93 2a 01 	sts	0x012A, r24
    1270:	44 c0       	rjmp	.+136    	; 0x12fa <__vector_11+0x300>
			else if (seconds_disconnected == (_SAMPLING_RATE * 45))	{
    1272:	82 17       	cp	r24, r18
    1274:	93 07       	cpc	r25, r19
    1276:	09 f0       	breq	.+2      	; 0x127a <__vector_11+0x280>
    1278:	40 c0       	rjmp	.+128    	; 0x12fa <__vector_11+0x300>
				//before turning on the bluetooth make sure the receive buffer is flushed
				_receive_uart0_flush();
    127a:	0e 94 22 0b 	call	0x1644	; 0x1644 <_receive_uart0_flush>
				if (shutdown_flag == 0)
    127e:	80 91 32 01 	lds	r24, 0x0132
    1282:	88 23       	and	r24, r24
    1284:	11 f4       	brne	.+4      	; 0x128a <__vector_11+0x290>
					_bluetooth_turn_on();		
    1286:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_bluetooth_turn_on>
				seconds_disconnected = (_SAMPLING_RATE * 45) + 1;			
    128a:	90 91 06 01 	lds	r25, 0x0106
    128e:	8d e2       	ldi	r24, 0x2D	; 45
    1290:	98 9f       	mul	r25, r24
    1292:	c0 01       	movw	r24, r0
    1294:	11 24       	eor	r1, r1
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	90 93 2b 01 	sts	0x012B, r25
    129c:	80 93 2a 01 	sts	0x012A, r24
    12a0:	8f e1       	ldi	r24, 0x1F	; 31
    12a2:	9e e4       	ldi	r25, 0x4E	; 78
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <__vector_11+0x2aa>
    12a8:	00 c0       	rjmp	.+0      	; 0x12aa <__vector_11+0x2b0>
    12aa:	00 00       	nop
    12ac:	26 c0       	rjmp	.+76     	; 0x12fa <__vector_11+0x300>

			return;	
		}

		//reset shutdown timer if connected
		if ((_wPDT != 0) && (_wShutdownTimer != _DEFAULT_SHUTDOWN))
    12ae:	80 91 85 38 	lds	r24, 0x3885
    12b2:	88 23       	and	r24, r24
    12b4:	e9 f0       	breq	.+58     	; 0x12f0 <__vector_11+0x2f6>
    12b6:	80 91 5b 01 	lds	r24, 0x015B
    12ba:	90 91 5c 01 	lds	r25, 0x015C
    12be:	a0 91 5d 01 	lds	r26, 0x015D
    12c2:	b0 91 5e 01 	lds	r27, 0x015E
    12c6:	20 91 57 01 	lds	r18, 0x0157
    12ca:	30 91 58 01 	lds	r19, 0x0158
    12ce:	40 91 59 01 	lds	r20, 0x0159
    12d2:	50 91 5a 01 	lds	r21, 0x015A
    12d6:	28 17       	cp	r18, r24
    12d8:	39 07       	cpc	r19, r25
    12da:	4a 07       	cpc	r20, r26
    12dc:	5b 07       	cpc	r21, r27
    12de:	41 f0       	breq	.+16     	; 0x12f0 <__vector_11+0x2f6>
			_wShutdownTimer = _DEFAULT_SHUTDOWN;
    12e0:	80 93 57 01 	sts	0x0157, r24
    12e4:	90 93 58 01 	sts	0x0158, r25
    12e8:	a0 93 59 01 	sts	0x0159, r26
    12ec:	b0 93 5a 01 	sts	0x015A, r27

		_receive_data();		
    12f0:	0e 94 83 11 	call	0x2306	; 0x2306 <_receive_data>
		connected = 1;		
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 29 01 	sts	0x0129, r24
	}
}
    12fa:	ff 91       	pop	r31
    12fc:	ef 91       	pop	r30
    12fe:	bf 91       	pop	r27
    1300:	af 91       	pop	r26
    1302:	9f 91       	pop	r25
    1304:	8f 91       	pop	r24
    1306:	7f 91       	pop	r23
    1308:	6f 91       	pop	r22
    130a:	5f 91       	pop	r21
    130c:	4f 91       	pop	r20
    130e:	3f 91       	pop	r19
    1310:	2f 91       	pop	r18
    1312:	1f 91       	pop	r17
    1314:	0f 90       	pop	r0
    1316:	0b be       	out	0x3b, r0	; 59
    1318:	0f 90       	pop	r0
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	0f 90       	pop	r0
    131e:	1f 90       	pop	r1
    1320:	18 95       	reti

00001322 <_atmega_set_adc_clock>:
/* Local Function Definitions */


/* Different prescalars are made available if the Sampling rate is changed*/
void _atmega_set_adc_clock(unsigned char prescalar){
        if (prescalar==ADC_PRESCALAR_2){
    1322:	88 23       	and	r24, r24
    1324:	21 f4       	brne	.+8      	; 0x132e <_atmega_set_adc_clock+0xc>
                ADCSRA &= ~((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
    1326:	80 91 7a 00 	lds	r24, 0x007A
    132a:	88 7f       	andi	r24, 0xF8	; 248
    132c:	36 c0       	rjmp	.+108    	; 0x139a <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_4){
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	49 f4       	brne	.+18     	; 0x1344 <_atmega_set_adc_clock+0x22>
                ADCSRA &= ~((1 << ADPS2) | (1 << ADPS0));
    1332:	80 91 7a 00 	lds	r24, 0x007A
    1336:	8a 7f       	andi	r24, 0xFA	; 250
    1338:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= (1 << ADPS1);
    133c:	80 91 7a 00 	lds	r24, 0x007A
    1340:	82 60       	ori	r24, 0x02	; 2
    1342:	2b c0       	rjmp	.+86     	; 0x139a <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_8){
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	49 f4       	brne	.+18     	; 0x135a <_atmega_set_adc_clock+0x38>
                ADCSRA &= ~(1 << ADPS2);
    1348:	80 91 7a 00 	lds	r24, 0x007A
    134c:	8b 7f       	andi	r24, 0xFB	; 251
    134e:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= ((1 << ADPS1) |(1 << ADPS0)) ;
    1352:	80 91 7a 00 	lds	r24, 0x007A
    1356:	83 60       	ori	r24, 0x03	; 3
    1358:	20 c0       	rjmp	.+64     	; 0x139a <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_16){
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	49 f4       	brne	.+18     	; 0x1370 <_atmega_set_adc_clock+0x4e>
                ADCSRA &= ~((1 << ADPS1) |(1 << ADPS0));
    135e:	80 91 7a 00 	lds	r24, 0x007A
    1362:	8c 7f       	andi	r24, 0xFC	; 252
    1364:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= (1 << ADPS2);
    1368:	80 91 7a 00 	lds	r24, 0x007A
    136c:	84 60       	ori	r24, 0x04	; 4
    136e:	15 c0       	rjmp	.+42     	; 0x139a <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_32){
    1370:	84 30       	cpi	r24, 0x04	; 4
    1372:	49 f4       	brne	.+18     	; 0x1386 <_atmega_set_adc_clock+0x64>
                ADCSRA &= ~(1 << ADPS1);
    1374:	80 91 7a 00 	lds	r24, 0x007A
    1378:	8d 7f       	andi	r24, 0xFD	; 253
    137a:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= ((1 << ADPS2)|(1 << ADPS0));
    137e:	80 91 7a 00 	lds	r24, 0x007A
    1382:	85 60       	ori	r24, 0x05	; 5
    1384:	0a c0       	rjmp	.+20     	; 0x139a <_atmega_set_adc_clock+0x78>
        }else if (prescalar==ADC_PRESCALAR_64){
    1386:	85 30       	cpi	r24, 0x05	; 5
    1388:	59 f4       	brne	.+22     	; 0x13a0 <_atmega_set_adc_clock+0x7e>
                ADCSRA &= ~(1 << ADPS0);
    138a:	80 91 7a 00 	lds	r24, 0x007A
    138e:	8e 7f       	andi	r24, 0xFE	; 254
    1390:	80 93 7a 00 	sts	0x007A, r24
                ADCSRA |= ((1 << ADPS2)|(1 << ADPS1));
    1394:	80 91 7a 00 	lds	r24, 0x007A
    1398:	86 60       	ori	r24, 0x06	; 6
    139a:	80 93 7a 00 	sts	0x007A, r24
    139e:	08 95       	ret
        }else if (prescalar==ADC_PRESCALAR_128){            
    13a0:	86 30       	cpi	r24, 0x06	; 6
    13a2:	29 f4       	brne	.+10     	; 0x13ae <_atmega_set_adc_clock+0x8c>
                ADCSRA |= ((1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0));
    13a4:	80 91 7a 00 	lds	r24, 0x007A
    13a8:	87 60       	ori	r24, 0x07	; 7
    13aa:	80 93 7a 00 	sts	0x007A, r24
    13ae:	08 95       	ret

000013b0 <_atmega_adc_turn_on>:

/* Function to turn ON the adc by setting ADEN*/
void _atmega_adc_turn_on()
{

	sbi(ADCSRA,ADEN);
    13b0:	ea e7       	ldi	r30, 0x7A	; 122
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	80 68       	ori	r24, 0x80	; 128
    13b8:	80 83       	st	Z, r24
}
    13ba:	08 95       	ret

000013bc <_atmega_adc_turn_off>:

/* Function to turn OFF the adc by clearinging ADEN*/
void _atmega_adc_turn_off()
{
	cbi(ADCSRA,ADEN);
    13bc:	ea e7       	ldi	r30, 0x7A	; 122
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8f 77       	andi	r24, 0x7F	; 127
    13c4:	80 83       	st	Z, r24
}
    13c6:	08 95       	ret

000013c8 <_atmega_select_adc>:

/* Function to select adc channels*/
void _atmega_select_adc(unsigned char channel){
        if (channel==ADC0){
    13c8:	88 23       	and	r24, r24
    13ca:	21 f4       	brne	.+8      	; 0x13d4 <_atmega_select_adc+0xc>
                cbi(ADMUX,0);
    13cc:	80 91 7c 00 	lds	r24, 0x007C
    13d0:	8e 7f       	andi	r24, 0xFE	; 254
    13d2:	05 c0       	rjmp	.+10     	; 0x13de <_atmega_select_adc+0x16>
                cbi(ADMUX,1);
                cbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }
        else if (channel==ADC1){
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	71 f4       	brne	.+28     	; 0x13f4 <_atmega_select_adc+0x2c>
                sbi(ADMUX,0);
    13d8:	80 91 7c 00 	lds	r24, 0x007C
    13dc:	81 60       	ori	r24, 0x01	; 1
    13de:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,1);
    13e2:	80 91 7c 00 	lds	r24, 0x007C
    13e6:	8d 7f       	andi	r24, 0xFD	; 253
    13e8:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,2);
    13ec:	80 91 7c 00 	lds	r24, 0x007C
    13f0:	8b 7f       	andi	r24, 0xFB	; 251
    13f2:	2b c0       	rjmp	.+86     	; 0x144a <_atmega_select_adc+0x82>
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC2){
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	21 f4       	brne	.+8      	; 0x1400 <_atmega_select_adc+0x38>
                cbi(ADMUX,0);
    13f8:	80 91 7c 00 	lds	r24, 0x007C
    13fc:	8e 7f       	andi	r24, 0xFE	; 254
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <_atmega_select_adc+0x42>
                sbi(ADMUX,1);
                cbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC3){
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	49 f4       	brne	.+18     	; 0x1416 <_atmega_select_adc+0x4e>
                sbi(ADMUX,0);
    1404:	80 91 7c 00 	lds	r24, 0x007C
    1408:	81 60       	ori	r24, 0x01	; 1
    140a:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,1);
    140e:	80 91 7c 00 	lds	r24, 0x007C
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	e9 cf       	rjmp	.-46     	; 0x13e8 <_atmega_select_adc+0x20>
                cbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC4){
    1416:	84 30       	cpi	r24, 0x04	; 4
    1418:	49 f4       	brne	.+18     	; 0x142c <_atmega_select_adc+0x64>
                cbi(ADMUX,0);
    141a:	80 91 7c 00 	lds	r24, 0x007C
    141e:	8e 7f       	andi	r24, 0xFE	; 254
    1420:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,1);
    1424:	80 91 7c 00 	lds	r24, 0x007C
    1428:	8d 7f       	andi	r24, 0xFD	; 253
    142a:	0a c0       	rjmp	.+20     	; 0x1440 <_atmega_select_adc+0x78>
                sbi(ADMUX,2);
                cbi(ADMUX,3);
                cbi(ADMUX,4);
        }else if (channel==ADC6)
    142c:	86 30       	cpi	r24, 0x06	; 6
    142e:	d1 f4       	brne	.+52     	; 0x1464 <_atmega_select_adc+0x9c>
        {
                cbi(ADMUX,0);
    1430:	80 91 7c 00 	lds	r24, 0x007C
    1434:	8e 7f       	andi	r24, 0xFE	; 254
    1436:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,1);
    143a:	80 91 7c 00 	lds	r24, 0x007C
    143e:	82 60       	ori	r24, 0x02	; 2
    1440:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,2);
    1444:	80 91 7c 00 	lds	r24, 0x007C
    1448:	84 60       	ori	r24, 0x04	; 4
    144a:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,3);
    144e:	80 91 7c 00 	lds	r24, 0x007C
    1452:	87 7f       	andi	r24, 0xF7	; 247
    1454:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,4);
    1458:	80 91 7c 00 	lds	r24, 0x007C
    145c:	8f 7e       	andi	r24, 0xEF	; 239
    145e:	80 93 7c 00 	sts	0x007C, r24
    1462:	08 95       	ret
        }
        else if (channel==ADC7)
    1464:	87 30       	cpi	r24, 0x07	; 7
    1466:	c9 f4       	brne	.+50     	; 0x149a <_atmega_select_adc+0xd2>
        {
                sbi(ADMUX,0);
    1468:	80 91 7c 00 	lds	r24, 0x007C
    146c:	81 60       	ori	r24, 0x01	; 1
    146e:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,1);
    1472:	80 91 7c 00 	lds	r24, 0x007C
    1476:	82 60       	ori	r24, 0x02	; 2
    1478:	80 93 7c 00 	sts	0x007C, r24
                sbi(ADMUX,2);
    147c:	80 91 7c 00 	lds	r24, 0x007C
    1480:	84 60       	ori	r24, 0x04	; 4
    1482:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,3);
    1486:	80 91 7c 00 	lds	r24, 0x007C
    148a:	87 7f       	andi	r24, 0xF7	; 247
    148c:	80 93 7c 00 	sts	0x007C, r24
                cbi(ADMUX,4);
    1490:	80 91 7c 00 	lds	r24, 0x007C
    1494:	8f 7e       	andi	r24, 0xEF	; 239
    1496:	80 93 7c 00 	sts	0x007C, r24
    149a:	08 95       	ret

0000149c <_atmega_a2dConvert10bit>:

/* Function to select 10 bit adc convertion*/
unsigned short _atmega_a2dConvert10bit(unsigned char channel){
	
	// Select channel
	_atmega_select_adc(channel);
    149c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_atmega_select_adc>
	

	//Start ADC Conversion
	sbi(ADCSRA, ADIF);   // clear hardware "conversion complete" flag 
    14a0:	80 91 7a 00 	lds	r24, 0x007A
    14a4:	80 61       	ori	r24, 0x10	; 16
    14a6:	80 93 7a 00 	sts	0x007A, r24
	sbi(ADCSRA,ADSC);
    14aa:	80 91 7a 00 	lds	r24, 0x007A
    14ae:	80 64       	ori	r24, 0x40	; 64
    14b0:	80 93 7a 00 	sts	0x007A, r24
	
	// ADSC is 1 while converting, 0 when it is done
	while(bit_is_set(ADCSRA, ADSC)); 
    14b4:	80 91 7a 00 	lds	r24, 0x007A
    14b8:	86 fd       	sbrc	r24, 6
    14ba:	fc cf       	rjmp	.-8      	; 0x14b4 <_atmega_a2dConvert10bit+0x18>

	return ((ADCL)|((ADCH)<<8));
    14bc:	20 91 78 00 	lds	r18, 0x0078
    14c0:	30 91 79 00 	lds	r19, 0x0079
    14c4:	93 2f       	mov	r25, r19
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	28 2b       	or	r18, r24
    14cc:	39 2b       	or	r19, r25
}
    14ce:	c9 01       	movw	r24, r18
    14d0:	08 95       	ret

000014d2 <_atmega_initialize_uart0>:
	
*/
void _atmega_initialize_uart0(unsigned int baud, unsigned char mode)
{
        /* Set baud rate */
        UBRR0H = (unsigned char)(baud>>8);
    14d2:	90 93 c5 00 	sts	0x00C5, r25
        UBRR0L = (unsigned char)baud;
    14d6:	80 93 c4 00 	sts	0x00C4, r24
        /* Enable receiver and/or transmitter */
		switch(mode)
    14da:	66 23       	and	r22, r22
    14dc:	19 f0       	breq	.+6      	; 0x14e4 <_atmega_initialize_uart0+0x12>
    14de:	61 30       	cpi	r22, 0x01	; 1
    14e0:	29 f4       	brne	.+10     	; 0x14ec <_atmega_initialize_uart0+0x1a>
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <_atmega_initialize_uart0+0x16>
		{
			case TX_UART_MODE:
        		UCSR0B = (1<<TXEN0);
    14e4:	88 e0       	ldi	r24, 0x08	; 8
    14e6:	03 c0       	rjmp	.+6      	; 0x14ee <_atmega_initialize_uart0+0x1c>
				break;
			case RX_UART_MODE:
        		UCSR0B = (1<<RXEN0);
    14e8:	80 e1       	ldi	r24, 0x10	; 16
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <_atmega_initialize_uart0+0x1c>
				break;
			default:
        		UCSR0B = (1<<TXEN0)|(1<<RXEN0);
    14ec:	88 e1       	ldi	r24, 0x18	; 24
    14ee:	80 93 c1 00 	sts	0x00C1, r24
		}
        /* Set frame format: 8data, 2stop bit */
        UCSR0C = (3<<UCSZ00);//| (3<<UCSZ01) ;  //change 1 to 0 and &
    14f2:	86 e0       	ldi	r24, 0x06	; 6
    14f4:	80 93 c2 00 	sts	0x00C2, r24
}
    14f8:	08 95       	ret

000014fa <_atmega_initialize_uart1>:
	
*/
void _atmega_initialize_uart1(unsigned int baud, unsigned char mode)
{
        /* Set baud rate */
        UBRR1H = (unsigned char)(baud>>8);
    14fa:	90 93 cd 00 	sts	0x00CD, r25
        UBRR1L = (unsigned char)baud;
    14fe:	80 93 cc 00 	sts	0x00CC, r24
        /* Enable receiver and transmitter */
		switch(mode)
    1502:	66 23       	and	r22, r22
    1504:	19 f0       	breq	.+6      	; 0x150c <_atmega_initialize_uart1+0x12>
    1506:	61 30       	cpi	r22, 0x01	; 1
    1508:	29 f4       	brne	.+10     	; 0x1514 <_atmega_initialize_uart1+0x1a>
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <_atmega_initialize_uart1+0x16>
		{
			case TX_UART_MODE:
        		UCSR1B = (1<<TXEN1);
    150c:	88 e0       	ldi	r24, 0x08	; 8
    150e:	03 c0       	rjmp	.+6      	; 0x1516 <_atmega_initialize_uart1+0x1c>
				break;
			case RX_UART_MODE:
        		UCSR1B = (1<<RXEN1);
    1510:	80 e1       	ldi	r24, 0x10	; 16
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <_atmega_initialize_uart1+0x1c>
				break;
			default:
        		UCSR1B = (1<<TXEN1)|(1<<RXEN1);
    1514:	88 e1       	ldi	r24, 0x18	; 24
    1516:	80 93 c9 00 	sts	0x00C9, r24
				break;
		}        
        /* Set frame format: 8data, 2stop bit */
        UCSR1C =(3<<UCSZ10);  //change 1 to 0 and &
    151a:	86 e0       	ldi	r24, 0x06	; 6
    151c:	80 93 ca 00 	sts	0x00CA, r24
}
    1520:	08 95       	ret

00001522 <_atmega_disable_JTAG>:
*/
void _atmega_disable_JTAG(void)
{
	unsigned char sreg;

	sreg = SREG;
    1522:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1524:	f8 94       	cli
	MCUCR |= ( 1 <<JTD );
    1526:	85 b7       	in	r24, 0x35	; 53
    1528:	80 68       	ori	r24, 0x80	; 128
    152a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= ( 1 <<JTD );
    152c:	85 b7       	in	r24, 0x35	; 53
    152e:	80 68       	ori	r24, 0x80	; 128
    1530:	85 bf       	out	0x35, r24	; 53
	SREG = sreg;
    1532:	9f bf       	out	0x3f, r25	; 63
}
    1534:	08 95       	ret

00001536 <_atmega_set_timer2_prescalar>:

/* Setting prescalar for the timer 2 whose interrupts are used to sample data regularly at 40 Hz */
void _atmega_set_timer2_prescalar(unsigned char prescalar)
{
	switch(prescalar)
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	b1 f0       	breq	.+44     	; 0x1566 <_atmega_set_timer2_prescalar+0x30>
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	28 f4       	brcc	.+10     	; 0x1548 <_atmega_set_timer2_prescalar+0x12>
    153e:	88 23       	and	r24, r24
    1540:	51 f0       	breq	.+20     	; 0x1556 <_atmega_set_timer2_prescalar+0x20>
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	01 f5       	brne	.+64     	; 0x1586 <_atmega_set_timer2_prescalar+0x50>
    1546:	0b c0       	rjmp	.+22     	; 0x155e <_atmega_set_timer2_prescalar+0x28>
    1548:	84 30       	cpi	r24, 0x04	; 4
    154a:	a9 f0       	breq	.+42     	; 0x1576 <_atmega_set_timer2_prescalar+0x40>
    154c:	84 30       	cpi	r24, 0x04	; 4
    154e:	78 f0       	brcs	.+30     	; 0x156e <_atmega_set_timer2_prescalar+0x38>
    1550:	85 30       	cpi	r24, 0x05	; 5
    1552:	c9 f4       	brne	.+50     	; 0x1586 <_atmega_set_timer2_prescalar+0x50>
    1554:	14 c0       	rjmp	.+40     	; 0x157e <_atmega_set_timer2_prescalar+0x48>
	{
		case CPU_CLK_PRESCALAR_NONE:
			TCCR2B |= (1 << CS20);
    1556:	80 91 b1 00 	lds	r24, 0x00B1
    155a:	81 60       	ori	r24, 0x01	; 1
    155c:	17 c0       	rjmp	.+46     	; 0x158c <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_8:
			TCCR2B |= (1 << CS21); 
    155e:	80 91 b1 00 	lds	r24, 0x00B1
    1562:	82 60       	ori	r24, 0x02	; 2
    1564:	13 c0       	rjmp	.+38     	; 0x158c <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_32:
			TCCR2B |= ((1 << CS20) | (1 << CS21));
    1566:	80 91 b1 00 	lds	r24, 0x00B1
    156a:	83 60       	ori	r24, 0x03	; 3
    156c:	0f c0       	rjmp	.+30     	; 0x158c <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_64:
			TCCR2B |= (1 << CS22) ;
    156e:	80 91 b1 00 	lds	r24, 0x00B1
    1572:	84 60       	ori	r24, 0x04	; 4
    1574:	0b c0       	rjmp	.+22     	; 0x158c <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_128:
			TCCR2B |= ((1 << CS20) |(1 << CS22));
    1576:	80 91 b1 00 	lds	r24, 0x00B1
    157a:	85 60       	ori	r24, 0x05	; 5
    157c:	07 c0       	rjmp	.+14     	; 0x158c <_atmega_set_timer2_prescalar+0x56>
			break;
		case CPU_CLK_PRESCALAR_256:
			TCCR2B |= ((1 << CS22) |(1 << CS21));
    157e:	80 91 b1 00 	lds	r24, 0x00B1
    1582:	86 60       	ori	r24, 0x06	; 6
    1584:	03 c0       	rjmp	.+6      	; 0x158c <_atmega_set_timer2_prescalar+0x56>
			break;
		default:
			TCCR2B |= ((1 << CS20) |(1 << CS21) | (1 << CS22)); 
    1586:	80 91 b1 00 	lds	r24, 0x00B1
    158a:	87 60       	ori	r24, 0x07	; 7
    158c:	80 93 b1 00 	sts	0x00B1, r24
    1590:	08 95       	ret

00001592 <_atmega_enable_timer2>:
*/
void _atmega_enable_timer2(unsigned char timer_prescalar)
{

	// Setup the prescaler to 1024		 
	_atmega_set_timer2_prescalar(timer_prescalar);
    1592:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_atmega_set_timer2_prescalar>
	// Set the counter to 0
	TCNT2=0;
    1596:	10 92 b2 00 	sts	0x00B2, r1
	//Enable the overflow interrupt
	TIMSK2 |= (1 << TOIE2); // Enable CTC interrupt
    159a:	e0 e7       	ldi	r30, 0x70	; 112
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	81 60       	ori	r24, 0x01	; 1
    15a2:	80 83       	st	Z, r24
	// Enable global interrupts
	sei(); 
    15a4:	78 94       	sei
}
    15a6:	08 95       	ret

000015a8 <_atmega_disable_timer2>:
	
*/
void _atmega_disable_timer2(void)
{	
	//disable timer interrupt
	TIMSK2=0;
    15a8:	10 92 70 00 	sts	0x0070, r1
	// reset counter unit
	TCCR2B=0;
    15ac:	10 92 b1 00 	sts	0x00B1, r1
}
    15b0:	08 95       	ret

000015b2 <_atmega_reset>:

/* Watch dog timer is enabled to reset the mcu */

void _atmega_reset(void)
{   
		_atmega_disable_timer2();            
    15b2:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_atmega_disable_timer2>
        cli(); //irq's off
    15b6:	f8 94       	cli
        wdt_enable(WDTO_15MS); //wd on,15ms
    15b8:	28 e0       	ldi	r18, 0x08	; 8
    15ba:	88 e1       	ldi	r24, 0x18	; 24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	a8 95       	wdr
    15c4:	80 93 60 00 	sts	0x0060, r24
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	20 93 60 00 	sts	0x0060, r18
    15ce:	ff cf       	rjmp	.-2      	; 0x15ce <_atmega_reset+0x1c>

000015d0 <_atmega_disable_watchdog>:
	This has to be done at the begining of an application
	
*/
void _atmega_disable_watchdog(void)
{
	MCUSR = 0;
    15d0:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    15d2:	88 e1       	ldi	r24, 0x18	; 24
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	80 93 60 00 	sts	0x0060, r24
    15dc:	10 92 60 00 	sts	0x0060, r1
    15e0:	0f be       	out	0x3f, r0	; 63
}
    15e2:	08 95       	ret

000015e4 <_bluetooth_turn_on>:
	
*/
void _bluetooth_turn_on(void)
{
	// Set the direction of TX pin as output
	sbi(DDRD,OUT_BT_TXD);
    15e4:	51 9a       	sbi	0x0a, 1	; 10

	// Set the direction of the RESET pin as output and high
	sbi(DDRD,OUT_BT_RESET_N);	
    15e6:	52 9a       	sbi	0x0a, 2	; 10
	sbi(PORTD,OUT_BT_RESET_N);  
    15e8:	5a 9a       	sbi	0x0b, 2	; 11

	// Set the direction of the switch pin as output and low
	sbi(DDRB,OUT_BT_SW_N);
    15ea:	24 9a       	sbi	0x04, 4	; 4
	cbi(PORTB,OUT_BT_SW_N);
    15ec:	2c 98       	cbi	0x05, 4	; 5

	// Set the status of the bluetooth to true
	sbi(atmega_status, BIT0_BLUETOOTH_STATUS);
    15ee:	80 91 70 38 	lds	r24, 0x3870
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	80 93 70 38 	sts	0x3870, r24
}
    15f8:	08 95       	ret

000015fa <_bluetooth_turn_off>:
	
*/
void _bluetooth_turn_off(void)
{
	// Set the direction of TX, RESET and switch pins as input
	cbi(DDRD,OUT_BT_TXD);
    15fa:	51 98       	cbi	0x0a, 1	; 10
	cbi(DDRD,OUT_BT_RESET_N);
    15fc:	52 98       	cbi	0x0a, 2	; 10
	cbi(DDRB,OUT_BT_SW_N);		 
    15fe:	24 98       	cbi	0x04, 4	; 4

	// Set the status of bluetooth to false
	cbi(atmega_status, BIT0_BLUETOOTH_STATUS);
    1600:	80 91 70 38 	lds	r24, 0x3870
    1604:	8e 7f       	andi	r24, 0xFE	; 254
    1606:	80 93 70 38 	sts	0x3870, r24
}
    160a:	08 95       	ret

0000160c <_bluetooth_reset>:
}

/* Reset Bluetooth */
void _bluetooth_reset(void)
{
	_bluetooth_turn_off();
    160c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_bluetooth_turn_off>
    1610:	8f ef       	ldi	r24, 0xFF	; 255
    1612:	ef e0       	ldi	r30, 0x0F	; 15
    1614:	f7 e2       	ldi	r31, 0x27	; 39
    1616:	31 97       	sbiw	r30, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <_bluetooth_reset+0xa>
    161a:	00 c0       	rjmp	.+0      	; 0x161c <_bluetooth_reset+0x10>
    161c:	00 00       	nop
    161e:	81 50       	subi	r24, 0x01	; 1
	for (unsigned char i=0;(i<255);i++)
    1620:	c1 f7       	brne	.-16     	; 0x1612 <_bluetooth_reset+0x6>
		_delay_ms(5);
	_bluetooth_turn_on();
    1622:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_bluetooth_turn_on>

}
    1626:	08 95       	ret

00001628 <_is_bluetooth_on>:
	
*/

unsigned char _is_bluetooth_on(void)
{
	return ((atmega_status>>BIT0_BLUETOOTH_STATUS) & 0x01);
    1628:	80 91 70 38 	lds	r24, 0x3870
}
    162c:	81 70       	andi	r24, 0x01	; 1
    162e:	08 95       	ret

00001630 <_bluetooth_is_connected>:

/* check if RN-41 is connected to phone via bluetooth*/
unsigned char _bluetooth_is_connected(void){

#ifdef _VERSION==3
        return (0x01 & (PINA>>IN_BT_CONNECT));
    1630:	80 b1       	in	r24, 0x00	; 0
    1632:	82 95       	swap	r24
#else
        return (0x01 & (PIND>>IN_BT_CONNECT));
#endif
}
    1634:	81 70       	andi	r24, 0x01	; 1
    1636:	08 95       	ret

00001638 <_bluetooth_is_discoverable>:

/* check if RN-41 is discoverable*/
unsigned char _bluetooth_is_discoverable(void){

#ifdef _VERSION==3
        return (0x01 & (PINA>>IN_BT_DISC));
    1638:	80 b1       	in	r24, 0x00	; 0
    163a:	82 95       	swap	r24
    163c:	86 95       	lsr	r24
    163e:	86 95       	lsr	r24
#else
         return (0x01 & (PIND>>IN_BT_DISC));
#endif
}
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	08 95       	ret

00001644 <_receive_uart0_flush>:

/* Clearing the receive register of the UART0*/
void _receive_uart0_flush( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
    1644:	02 c0       	rjmp	.+4      	; 0x164a <_receive_uart0_flush+0x6>
    1646:	80 91 c6 00 	lds	r24, 0x00C6
    164a:	80 91 c0 00 	lds	r24, 0x00C0
    164e:	87 fd       	sbrc	r24, 7
    1650:	fa cf       	rjmp	.-12     	; 0x1646 <_receive_uart0_flush+0x2>
}
    1652:	08 95       	ret

00001654 <_bluetooth_receive_uart0_byte>:

/* Receive data from the UART0*/
unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
    1654:	20 91 c0 00 	lds	r18, 0x00C0
    1658:	27 fd       	sbrc	r18, 7
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <_bluetooth_receive_uart0_byte+0x10>
    165c:	20 91 c0 00 	lds	r18, 0x00C0
    1660:	27 ff       	sbrs	r18, 7
    1662:	06 c0       	rjmp	.+12     	; 0x1670 <_bluetooth_receive_uart0_byte+0x1c>
   {
   		if (count++==1) return 0; //timed out
   		//	_delay_ms(1);
   }     /*  Wait for incoming data   */

   *data=UDR0;
    1664:	20 91 c6 00 	lds	r18, 0x00C6
    1668:	fc 01       	movw	r30, r24
    166a:	20 83       	st	Z, r18

   return 1;/* Return success*/
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	08 95       	ret
unsigned char _bluetooth_receive_uart0_byte(unsigned char *data)
  {
  	int count=0;
   while ( !(UCSR0A &  (1<<RXC0)) )
   {
   		if (count++==1) return 0; //timed out
    1670:	80 e0       	ldi	r24, 0x00	; 0
   }     /*  Wait for incoming data   */

   *data=UDR0;

   return 1;/* Return success*/
  }
    1672:	08 95       	ret

00001674 <_bluetooth_transmit_uart0_byte>:

/* Transmit data via UART0*/
void _bluetooth_transmit_uart0_byte( unsigned char data )
{
  while ( !(UCSR0A & (1<<UDRE0)) );        /* Wait for   empty transmit buffer */
    1674:	90 91 c0 00 	lds	r25, 0x00C0
    1678:	95 ff       	sbrs	r25, 5
    167a:	fc cf       	rjmp	.-8      	; 0x1674 <_bluetooth_transmit_uart0_byte>
  UCSR0A=UCSR0A & 0xdf;
    167c:	90 91 c0 00 	lds	r25, 0x00C0
    1680:	9f 7d       	andi	r25, 0xDF	; 223
    1682:	90 93 c0 00 	sts	0x00C0, r25
  
  UDR0 =  data;  /* Start transmission   */
    1686:	80 93 c6 00 	sts	0x00C6, r24
   
}
    168a:	08 95       	ret

0000168c <_bluetooth_get_baud_rate>:
	return 0;
}

/* Get baud rate */
unsigned char _bluetooth_get_baud_rate()
{
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	0f 92       	push	r0
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
	unsigned char attempts=0;
	unsigned char baudrate=0;
    169c:	19 82       	std	Y+1, r1	; 0x01
}

/* Get baud rate */
unsigned char _bluetooth_get_baud_rate()
{
	unsigned char attempts=0;
    169e:	ff 24       	eor	r15, r15
		_bluetooth_transmit_uart0_byte(13);
		_delay_ms(5);


		attempts++;
 		if ((attempts>=255) || (_bluetooth_receive_uart0_byte(&baudrate)==0))
    16a0:	8e 01       	movw	r16, r28
    16a2:	0f 5f       	subi	r16, 0xFF	; 255
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255


		//for (int i=0;(i<100);i++)
		//	_bluetooth_receive_uart0_byte(&aByte);

		_bluetooth_transmit_uart0_byte(13);
    16a6:	8d e0       	ldi	r24, 0x0D	; 13
    16a8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    16ac:	8f e0       	ldi	r24, 0x0F	; 15
    16ae:	97 e2       	ldi	r25, 0x27	; 39
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <_bluetooth_get_baud_rate+0x24>
    16b4:	00 c0       	rjmp	.+0      	; 0x16b6 <_bluetooth_get_baud_rate+0x2a>
    16b6:	00 00       	nop
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(13);
    16b8:	8d e0       	ldi	r24, 0x0D	; 13
    16ba:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>


		_bluetooth_transmit_uart0_byte('G');
    16be:	87 e4       	ldi	r24, 0x47	; 71
    16c0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    16c4:	8f e0       	ldi	r24, 0x0F	; 15
    16c6:	97 e2       	ldi	r25, 0x27	; 39
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <_bluetooth_get_baud_rate+0x3c>
    16cc:	00 c0       	rjmp	.+0      	; 0x16ce <_bluetooth_get_baud_rate+0x42>
    16ce:	00 00       	nop
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte('U');		
    16d0:	85 e5       	ldi	r24, 0x55	; 85
    16d2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    16d6:	8f e0       	ldi	r24, 0x0F	; 15
    16d8:	97 e2       	ldi	r25, 0x27	; 39
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <_bluetooth_get_baud_rate+0x4e>
    16de:	00 c0       	rjmp	.+0      	; 0x16e0 <_bluetooth_get_baud_rate+0x54>
    16e0:	00 00       	nop
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(13);
    16e2:	8d e0       	ldi	r24, 0x0D	; 13
    16e4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    16e8:	8f e0       	ldi	r24, 0x0F	; 15
    16ea:	97 e2       	ldi	r25, 0x27	; 39
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <_bluetooth_get_baud_rate+0x60>
    16f0:	00 c0       	rjmp	.+0      	; 0x16f2 <_bluetooth_get_baud_rate+0x66>
    16f2:	00 00       	nop
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(13);
    16f4:	8d e0       	ldi	r24, 0x0D	; 13
    16f6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    16fa:	8f e0       	ldi	r24, 0x0F	; 15
    16fc:	97 e2       	ldi	r25, 0x27	; 39
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <_bluetooth_get_baud_rate+0x72>
    1702:	00 c0       	rjmp	.+0      	; 0x1704 <_bluetooth_get_baud_rate+0x78>
    1704:	00 00       	nop
		_delay_ms(5);


		attempts++;
    1706:	f3 94       	inc	r15
 		if ((attempts>=255) || (_bluetooth_receive_uart0_byte(&baudrate)==0))
    1708:	9f 2d       	mov	r25, r15
    170a:	9f 3f       	cpi	r25, 0xFF	; 255
    170c:	91 f0       	breq	.+36     	; 0x1732 <_bluetooth_get_baud_rate+0xa6>
    170e:	c8 01       	movw	r24, r16
    1710:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_bluetooth_receive_uart0_byte>
    1714:	88 23       	and	r24, r24
    1716:	39 f6       	brne	.-114    	; 0x16a6 <_bluetooth_get_baud_rate+0x1a>
    1718:	14 c0       	rjmp	.+40     	; 0x1742 <_bluetooth_get_baud_rate+0xb6>
	if (attempts<255)
	{	
		switch(baudrate)
		{
			case '2':
				baudrate=ATMEGA_BAUD_2400;
    171a:	8f ec       	ldi	r24, 0xCF	; 207
    171c:	09 c0       	rjmp	.+18     	; 0x1730 <_bluetooth_get_baud_rate+0xa4>
				break;
			case '4':
				baudrate=ATMEGA_BAUD_4800;
    171e:	87 e6       	ldi	r24, 0x67	; 103
    1720:	07 c0       	rjmp	.+14     	; 0x1730 <_bluetooth_get_baud_rate+0xa4>
				break;
			case '9':
				baudrate=ATMEGA_BAUD_9600;
    1722:	83 e3       	ldi	r24, 0x33	; 51
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <_bluetooth_get_baud_rate+0xa4>
				break;
			case '1':
				baudrate=ATMEGA_BAUD_115200;
    1726:	83 e0       	ldi	r24, 0x03	; 3
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <_bluetooth_get_baud_rate+0xa4>
				break;
			case '5':
				baudrate=ATMEGA_BAUD_57600;
    172a:	88 e0       	ldi	r24, 0x08	; 8
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <_bluetooth_get_baud_rate+0xa4>
				break;
			default:
				baudrate=ATMEGA_BAUD_38400;
    172e:	8c e0       	ldi	r24, 0x0C	; 12
    1730:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
	}
	
	return baudrate;
}
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	0f 90       	pop	r0
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	08 95       	ret
			break;

	}
	if (attempts<255)
	{	
		switch(baudrate)
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	84 33       	cpi	r24, 0x34	; 52
    1746:	59 f3       	breq	.-42     	; 0x171e <_bluetooth_get_baud_rate+0x92>
    1748:	85 33       	cpi	r24, 0x35	; 53
    174a:	28 f4       	brcc	.+10     	; 0x1756 <_bluetooth_get_baud_rate+0xca>
    174c:	81 33       	cpi	r24, 0x31	; 49
    174e:	59 f3       	breq	.-42     	; 0x1726 <_bluetooth_get_baud_rate+0x9a>
    1750:	82 33       	cpi	r24, 0x32	; 50
    1752:	69 f7       	brne	.-38     	; 0x172e <_bluetooth_get_baud_rate+0xa2>
    1754:	e2 cf       	rjmp	.-60     	; 0x171a <_bluetooth_get_baud_rate+0x8e>
    1756:	85 33       	cpi	r24, 0x35	; 53
    1758:	41 f3       	breq	.-48     	; 0x172a <_bluetooth_get_baud_rate+0x9e>
    175a:	89 33       	cpi	r24, 0x39	; 57
    175c:	41 f7       	brne	.-48     	; 0x172e <_bluetooth_get_baud_rate+0xa2>
    175e:	e1 cf       	rjmp	.-62     	; 0x1722 <_bluetooth_get_baud_rate+0x96>

00001760 <_bluetooth_set_baud_rate>:

}

/* Set baud rate _atmega_initialize() sets the baud rate to 38.4K*/
unsigned char _bluetooth_set_baud_rate(unsigned char baudrate)
{
    1760:	cf 92       	push	r12
    1762:	df 92       	push	r13
    1764:	ef 92       	push	r14
    1766:	ff 92       	push	r15
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	0f 92       	push	r0
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	d8 2e       	mov	r13, r24
	unsigned char attempts=0;
	unsigned char aByte=0;
    1778:	19 82       	std	Y+1, r1	; 0x01
}

/* Set baud rate _atmega_initialize() sets the baud rate to 38.4K*/
unsigned char _bluetooth_set_baud_rate(unsigned char baudrate)
{
	unsigned char attempts=0;
    177a:	cc 24       	eor	r12, r12
	unsigned char aByte=0;

	while(1)  
	{   
		for (int i=0;(i<100);i++)
			_bluetooth_receive_uart0_byte(&aByte);
    177c:	7e 01       	movw	r14, r28
    177e:	08 94       	sec
    1780:	e1 1c       	adc	r14, r1
    1782:	f1 1c       	adc	r15, r1
}

/* Set baud rate _atmega_initialize() sets the baud rate to 38.4K*/
unsigned char _bluetooth_set_baud_rate(unsigned char baudrate)
{
	unsigned char attempts=0;
    1784:	04 e6       	ldi	r16, 0x64	; 100
    1786:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char aByte=0;

	while(1)  
	{   
		for (int i=0;(i<100);i++)
			_bluetooth_receive_uart0_byte(&aByte);
    1788:	c7 01       	movw	r24, r14
    178a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_bluetooth_receive_uart0_byte>
    178e:	01 50       	subi	r16, 0x01	; 1
    1790:	10 40       	sbci	r17, 0x00	; 0
	unsigned char attempts=0;
	unsigned char aByte=0;

	while(1)  
	{   
		for (int i=0;(i<100);i++)
    1792:	d1 f7       	brne	.-12     	; 0x1788 <_bluetooth_set_baud_rate+0x28>
			_bluetooth_receive_uart0_byte(&aByte);

		_bluetooth_transmit_uart0_byte(13);
    1794:	8d e0       	ldi	r24, 0x0D	; 13
    1796:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    179a:	8f e0       	ldi	r24, 0x0F	; 15
    179c:	97 e2       	ldi	r25, 0x27	; 39
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <_bluetooth_set_baud_rate+0x3e>
    17a2:	00 c0       	rjmp	.+0      	; 0x17a4 <_bluetooth_set_baud_rate+0x44>
    17a4:	00 00       	nop
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(13);
    17a6:	8d e0       	ldi	r24, 0x0D	; 13
    17a8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>

		_bluetooth_transmit_uart0_byte('S');
    17ac:	83 e5       	ldi	r24, 0x53	; 83
    17ae:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    17b2:	8f e0       	ldi	r24, 0x0F	; 15
    17b4:	97 e2       	ldi	r25, 0x27	; 39
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <_bluetooth_set_baud_rate+0x56>
    17ba:	00 c0       	rjmp	.+0      	; 0x17bc <_bluetooth_set_baud_rate+0x5c>
    17bc:	00 00       	nop
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte('U');
    17be:	85 e5       	ldi	r24, 0x55	; 85
    17c0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    17c4:	8f e0       	ldi	r24, 0x0F	; 15
    17c6:	97 e2       	ldi	r25, 0x27	; 39
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <_bluetooth_set_baud_rate+0x68>
    17cc:	00 c0       	rjmp	.+0      	; 0x17ce <_bluetooth_set_baud_rate+0x6e>
    17ce:	00 00       	nop
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(',');
    17d0:	8c e2       	ldi	r24, 0x2C	; 44
    17d2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    17d6:	8f e0       	ldi	r24, 0x0F	; 15
    17d8:	97 e2       	ldi	r25, 0x27	; 39
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <_bluetooth_set_baud_rate+0x7a>
    17de:	00 c0       	rjmp	.+0      	; 0x17e0 <_bluetooth_set_baud_rate+0x80>
    17e0:	00 00       	nop
		_delay_ms(5);
		switch(baudrate){
    17e2:	9d 2d       	mov	r25, r13
    17e4:	9c 30       	cpi	r25, 0x0C	; 12
    17e6:	69 f1       	breq	.+90     	; 0x1842 <_bluetooth_set_baud_rate+0xe2>
    17e8:	9d 30       	cpi	r25, 0x0D	; 13
    17ea:	60 f4       	brcc	.+24     	; 0x1804 <_bluetooth_set_baud_rate+0xa4>
    17ec:	91 30       	cpi	r25, 0x01	; 1
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <_bluetooth_set_baud_rate+0x92>
    17f0:	45 c0       	rjmp	.+138    	; 0x187c <_bluetooth_set_baud_rate+0x11c>
    17f2:	91 30       	cpi	r25, 0x01	; 1
    17f4:	08 f4       	brcc	.+2      	; 0x17f8 <_bluetooth_set_baud_rate+0x98>
    17f6:	47 c0       	rjmp	.+142    	; 0x1886 <_bluetooth_set_baud_rate+0x126>
    17f8:	93 30       	cpi	r25, 0x03	; 3
    17fa:	d9 f1       	breq	.+118    	; 0x1872 <_bluetooth_set_baud_rate+0x112>
    17fc:	98 30       	cpi	r25, 0x08	; 8
    17fe:	09 f0       	breq	.+2      	; 0x1802 <_bluetooth_set_baud_rate+0xa2>
    1800:	47 c0       	rjmp	.+142    	; 0x1890 <_bluetooth_set_baud_rate+0x130>
    1802:	32 c0       	rjmp	.+100    	; 0x1868 <_bluetooth_set_baud_rate+0x108>
    1804:	8d 2d       	mov	r24, r13
    1806:	83 33       	cpi	r24, 0x33	; 51
    1808:	99 f0       	breq	.+38     	; 0x1830 <_bluetooth_set_baud_rate+0xd0>
    180a:	84 33       	cpi	r24, 0x34	; 52
    180c:	28 f4       	brcc	.+10     	; 0x1818 <_bluetooth_set_baud_rate+0xb8>
    180e:	80 31       	cpi	r24, 0x10	; 16
    1810:	b1 f0       	breq	.+44     	; 0x183e <_bluetooth_set_baud_rate+0xde>
    1812:	89 31       	cpi	r24, 0x19	; 25
    1814:	e9 f5       	brne	.+122    	; 0x1890 <_bluetooth_set_baud_rate+0x130>
    1816:	0e c0       	rjmp	.+28     	; 0x1834 <_bluetooth_set_baud_rate+0xd4>
    1818:	9d 2d       	mov	r25, r13
    181a:	97 36       	cpi	r25, 0x67	; 103
    181c:	39 f0       	breq	.+14     	; 0x182c <_bluetooth_set_baud_rate+0xcc>
    181e:	9f 3c       	cpi	r25, 0xCF	; 207
    1820:	b9 f5       	brne	.+110    	; 0x1890 <_bluetooth_set_baud_rate+0x130>
			case ATMEGA_BAUD_2400:
				_bluetooth_transmit_uart0_byte('2');
    1822:	82 e3       	ldi	r24, 0x32	; 50
    1824:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
				_bluetooth_transmit_uart0_byte('4');
    1828:	84 e3       	ldi	r24, 0x34	; 52
    182a:	36 c0       	rjmp	.+108    	; 0x1898 <_bluetooth_set_baud_rate+0x138>
				break;
			case ATMEGA_BAUD_4800:
				_bluetooth_transmit_uart0_byte('4');
    182c:	84 e3       	ldi	r24, 0x34	; 52
    182e:	31 c0       	rjmp	.+98     	; 0x1892 <_bluetooth_set_baud_rate+0x132>
				_bluetooth_transmit_uart0_byte('8');
				break;
			case ATMEGA_BAUD_9600:
				_bluetooth_transmit_uart0_byte('9');
    1830:	89 e3       	ldi	r24, 0x39	; 57
    1832:	2a c0       	rjmp	.+84     	; 0x1888 <_bluetooth_set_baud_rate+0x128>
				_bluetooth_transmit_uart0_byte('6');
				break;
			case ATMEGA_BAUD_19200:
				_bluetooth_transmit_uart0_byte('1');
    1834:	81 e3       	ldi	r24, 0x31	; 49
    1836:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
				_bluetooth_transmit_uart0_byte('9');
    183a:	89 e3       	ldi	r24, 0x39	; 57
    183c:	2d c0       	rjmp	.+90     	; 0x1898 <_bluetooth_set_baud_rate+0x138>
				break;
			case ATMEGA_BAUD_28800:
				_bluetooth_transmit_uart0_byte('2');
    183e:	82 e3       	ldi	r24, 0x32	; 50
    1840:	28 c0       	rjmp	.+80     	; 0x1892 <_bluetooth_set_baud_rate+0x132>
				_bluetooth_transmit_uart0_byte('8');
				break;
			case ATMEGA_BAUD_38400:
				_bluetooth_transmit_uart0_byte('3');
    1842:	83 e3       	ldi	r24, 0x33	; 51
    1844:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    1848:	8f e0       	ldi	r24, 0x0F	; 15
    184a:	97 e2       	ldi	r25, 0x27	; 39
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <_bluetooth_set_baud_rate+0xec>
    1850:	00 c0       	rjmp	.+0      	; 0x1852 <_bluetooth_set_baud_rate+0xf2>
    1852:	00 00       	nop
				_delay_ms(5);
				_bluetooth_transmit_uart0_byte('8');
    1854:	88 e3       	ldi	r24, 0x38	; 56
    1856:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    185a:	8f e0       	ldi	r24, 0x0F	; 15
    185c:	97 e2       	ldi	r25, 0x27	; 39
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <_bluetooth_set_baud_rate+0xfe>
    1862:	00 c0       	rjmp	.+0      	; 0x1864 <_bluetooth_set_baud_rate+0x104>
    1864:	00 00       	nop
    1866:	1a c0       	rjmp	.+52     	; 0x189c <_bluetooth_set_baud_rate+0x13c>
				_delay_ms(5);
				break;
			case ATMEGA_BAUD_57600:
				_bluetooth_transmit_uart0_byte('5');
    1868:	85 e3       	ldi	r24, 0x35	; 53
    186a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
				_bluetooth_transmit_uart0_byte('7');
    186e:	87 e3       	ldi	r24, 0x37	; 55
    1870:	13 c0       	rjmp	.+38     	; 0x1898 <_bluetooth_set_baud_rate+0x138>
				break;
			case ATMEGA_BAUD_115200:
				_bluetooth_transmit_uart0_byte('1');
    1872:	81 e3       	ldi	r24, 0x31	; 49
    1874:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
				_bluetooth_transmit_uart0_byte('1');
    1878:	81 e3       	ldi	r24, 0x31	; 49
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <_bluetooth_set_baud_rate+0x138>
				break;
			case ATMEGA_BAUD_230000:
				_bluetooth_transmit_uart0_byte('2');
    187c:	82 e3       	ldi	r24, 0x32	; 50
    187e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
				_bluetooth_transmit_uart0_byte('3');
    1882:	83 e3       	ldi	r24, 0x33	; 51
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <_bluetooth_set_baud_rate+0x138>
				break;
			case ATMEGA_BAUD_460000:
				_bluetooth_transmit_uart0_byte('4');
    1886:	84 e3       	ldi	r24, 0x34	; 52
    1888:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
				_bluetooth_transmit_uart0_byte('6');
    188c:	86 e3       	ldi	r24, 0x36	; 54
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <_bluetooth_set_baud_rate+0x138>
				break;
			default:
			_bluetooth_transmit_uart0_byte('3');
    1890:	83 e3       	ldi	r24, 0x33	; 51
    1892:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
			_bluetooth_transmit_uart0_byte('8');
    1896:	88 e3       	ldi	r24, 0x38	; 56
    1898:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
		}

		_bluetooth_transmit_uart0_byte(13);
    189c:	8d e0       	ldi	r24, 0x0D	; 13
    189e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    18a2:	8f e0       	ldi	r24, 0x0F	; 15
    18a4:	97 e2       	ldi	r25, 0x27	; 39
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <_bluetooth_set_baud_rate+0x146>
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <_bluetooth_set_baud_rate+0x14c>
    18ac:	00 00       	nop
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(13);
    18ae:	8d e0       	ldi	r24, 0x0D	; 13
    18b0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    18b4:	8f e0       	ldi	r24, 0x0F	; 15
    18b6:	97 e2       	ldi	r25, 0x27	; 39
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <_bluetooth_set_baud_rate+0x158>
    18bc:	00 c0       	rjmp	.+0      	; 0x18be <_bluetooth_set_baud_rate+0x15e>
    18be:	00 00       	nop
		_delay_ms(5);

		attempts++;
		if (_bluetooth_receive_uart0_byte(&aByte))
    18c0:	c7 01       	movw	r24, r14
    18c2:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_bluetooth_receive_uart0_byte>
    18c6:	88 23       	and	r24, r24
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <_bluetooth_set_baud_rate+0x170>
		{
			if (aByte=='A')			
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	81 34       	cpi	r24, 0x41	; 65
    18ce:	39 f0       	breq	.+14     	; 0x18de <_bluetooth_set_baud_rate+0x17e>
		_bluetooth_transmit_uart0_byte(13);
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte(13);
		_delay_ms(5);

		attempts++;
    18d0:	c3 94       	inc	r12
		if (_bluetooth_receive_uart0_byte(&aByte))
		{
			if (aByte=='A')			
				return 1;					
		}
		if (attempts>=255)
    18d2:	9c 2d       	mov	r25, r12
    18d4:	9f 3f       	cpi	r25, 0xFF	; 255
    18d6:	09 f0       	breq	.+2      	; 0x18da <_bluetooth_set_baud_rate+0x17a>
    18d8:	55 cf       	rjmp	.-342    	; 0x1784 <_bluetooth_set_baud_rate+0x24>
			break;
	}
	
	// succeeded in entering command mode

	return 0;
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <_bluetooth_set_baud_rate+0x180>

		attempts++;
		if (_bluetooth_receive_uart0_byte(&aByte))
		{
			if (aByte=='A')			
				return 1;					
    18de:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	// succeeded in entering command mode

	return 0;
}
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	08 95       	ret

000018f4 <_bluetooth_exit_command_mode>:
	return 0;
}

/* Exit Command mode of Bluetooth*/
unsigned char _bluetooth_exit_command_mode(void)
{
    18f4:	ff 92       	push	r15
    18f6:	0f 93       	push	r16
    18f8:	1f 93       	push	r17
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	0f 92       	push	r0
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
	unsigned char attempts=0;
	unsigned char aByte=0;
    1904:	19 82       	std	Y+1, r1	; 0x01
}

/* Exit Command mode of Bluetooth*/
unsigned char _bluetooth_exit_command_mode(void)
{
	unsigned char attempts=0;
    1906:	ff 24       	eor	r15, r15
				
		_bluetooth_transmit_uart0_byte(13);
		_bluetooth_transmit_uart0_byte(13);
		attempts++;

 		if ((attempts>=255) || (_bluetooth_receive_uart0_byte(&aByte)==0))
    1908:	8e 01       	movw	r16, r28
    190a:	0f 5f       	subi	r16, 0xFF	; 255
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char attempts=0;
	unsigned char aByte=0;

	while(1)  
	{           
		_bluetooth_transmit_uart0_byte('-');		
    190e:	8d e2       	ldi	r24, 0x2D	; 45
    1910:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    1914:	8f e0       	ldi	r24, 0x0F	; 15
    1916:	97 e2       	ldi	r25, 0x27	; 39
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <_bluetooth_exit_command_mode+0x24>
    191c:	00 c0       	rjmp	.+0      	; 0x191e <_bluetooth_exit_command_mode+0x2a>
    191e:	00 00       	nop
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte('-');		
    1920:	8d e2       	ldi	r24, 0x2D	; 45
    1922:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    1926:	8f e0       	ldi	r24, 0x0F	; 15
    1928:	97 e2       	ldi	r25, 0x27	; 39
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <_bluetooth_exit_command_mode+0x36>
    192e:	00 c0       	rjmp	.+0      	; 0x1930 <_bluetooth_exit_command_mode+0x3c>
    1930:	00 00       	nop
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte('-');		
    1932:	8d e2       	ldi	r24, 0x2D	; 45
    1934:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    1938:	8f e0       	ldi	r24, 0x0F	; 15
    193a:	97 e2       	ldi	r25, 0x27	; 39
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <_bluetooth_exit_command_mode+0x48>
    1940:	00 c0       	rjmp	.+0      	; 0x1942 <_bluetooth_exit_command_mode+0x4e>
    1942:	00 00       	nop
		_delay_ms(5);
				
		_bluetooth_transmit_uart0_byte(13);
    1944:	8d e0       	ldi	r24, 0x0D	; 13
    1946:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
		_bluetooth_transmit_uart0_byte(13);
    194a:	8d e0       	ldi	r24, 0x0D	; 13
    194c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
		attempts++;
    1950:	f3 94       	inc	r15

 		if ((attempts>=255) || (_bluetooth_receive_uart0_byte(&aByte)==0))
    1952:	9f 2d       	mov	r25, r15
    1954:	9f 3f       	cpi	r25, 0xFF	; 255
    1956:	39 f0       	breq	.+14     	; 0x1966 <_bluetooth_exit_command_mode+0x72>
    1958:	c8 01       	movw	r24, r16
    195a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_bluetooth_receive_uart0_byte>
    195e:	88 23       	and	r24, r24
    1960:	b1 f6       	brne	.-84     	; 0x190e <_bluetooth_exit_command_mode+0x1a>
			break;				
	}

	// succeeded in entering command mode
	if (attempts<255)
		return 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <_bluetooth_exit_command_mode+0x74>
	
	return 0;
    1966:	80 e0       	ldi	r24, 0x00	; 0
}
    1968:	0f 90       	pop	r0
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	08 95       	ret

00001976 <_bluetooth_enter_command_mode>:


/* Bluetooth Functions */

unsigned char _bluetooth_enter_command_mode(void)
{
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <_bluetooth_enter_command_mode+0xa>
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	unsigned char attempts=0;
	unsigned char aByte=0;
    1984:	19 82       	std	Y+1, r1	; 0x01

/* Bluetooth Functions */

unsigned char _bluetooth_enter_command_mode(void)
{
	unsigned char attempts=0;
    1986:	20 e0       	ldi	r18, 0x00	; 0
		_bluetooth_transmit_uart0_byte(13);
		_bluetooth_transmit_uart0_byte(13);*/

		attempts++;

		if (_bluetooth_receive_uart0_byte(&aByte))
    1988:	8e 01       	movw	r16, r28
    198a:	0f 5f       	subi	r16, 0xFF	; 255
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char count=0;

	while(1)  
	{   
		//for (int i=0;(i<255);i++)        
		_bluetooth_transmit_uart0_byte('$');	
    198e:	84 e2       	ldi	r24, 0x24	; 36
    1990:	2a 83       	std	Y+2, r18	; 0x02
    1992:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    1996:	8f e0       	ldi	r24, 0x0F	; 15
    1998:	97 e2       	ldi	r25, 0x27	; 39
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <_bluetooth_enter_command_mode+0x24>
    199e:	00 c0       	rjmp	.+0      	; 0x19a0 <_bluetooth_enter_command_mode+0x2a>
    19a0:	00 00       	nop
		_delay_ms(5);	
		_bluetooth_transmit_uart0_byte('$');		
    19a2:	84 e2       	ldi	r24, 0x24	; 36
    19a4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    19a8:	8f e0       	ldi	r24, 0x0F	; 15
    19aa:	97 e2       	ldi	r25, 0x27	; 39
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <_bluetooth_enter_command_mode+0x36>
    19b0:	00 c0       	rjmp	.+0      	; 0x19b2 <_bluetooth_enter_command_mode+0x3c>
    19b2:	00 00       	nop
		_delay_ms(5);
		_bluetooth_transmit_uart0_byte('$');		
    19b4:	84 e2       	ldi	r24, 0x24	; 36
    19b6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    19ba:	8f e0       	ldi	r24, 0x0F	; 15
    19bc:	97 e2       	ldi	r25, 0x27	; 39
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <_bluetooth_enter_command_mode+0x48>
    19c2:	00 c0       	rjmp	.+0      	; 0x19c4 <_bluetooth_enter_command_mode+0x4e>
    19c4:	00 00       	nop
		//_bluetooth_transmit_uart0_byte('$');		
		
		//for (int i=0;(i<10);i++)        		
		
		
		_bluetooth_transmit_uart0_byte(13);	//	RETURN or NEWLINE Character for RN-41
    19c6:	8d e0       	ldi	r24, 0x0D	; 13
    19c8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
		_bluetooth_transmit_uart0_byte(13);	//	RETURN or NEWLINE Character for RN-41
    19cc:	8d e0       	ldi	r24, 0x0D	; 13
    19ce:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
		_bluetooth_transmit_uart0_byte(13);
		_bluetooth_transmit_uart0_byte(13);*/

		attempts++;

		if (_bluetooth_receive_uart0_byte(&aByte))
    19d2:	c8 01       	movw	r24, r16
    19d4:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_bluetooth_receive_uart0_byte>
    19d8:	2a 81       	ldd	r18, Y+2	; 0x02
    19da:	88 23       	and	r24, r24
    19dc:	81 f0       	breq	.+32     	; 0x19fe <_bluetooth_enter_command_mode+0x88>
		{			
				if (aByte=='C'){			// RN-41 returns CMD when it enters command mode
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	83 34       	cpi	r24, 0x43	; 67
    19e2:	69 f4       	brne	.+26     	; 0x19fe <_bluetooth_enter_command_mode+0x88>
					_bluetooth_transmit_uart0_byte(13);						
    19e4:	8d e0       	ldi	r24, 0x0D	; 13
    19e6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    19ea:	0a e0       	ldi	r16, 0x0A	; 10
    19ec:	10 e0       	ldi	r17, 0x00	; 0
					for (int i=0;(i<10);i++)        		
						_bluetooth_transmit_uart0_byte(13);
    19ee:	8d e0       	ldi	r24, 0x0D	; 13
    19f0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    19f4:	01 50       	subi	r16, 0x01	; 1
    19f6:	10 40       	sbci	r17, 0x00	; 0

		if (_bluetooth_receive_uart0_byte(&aByte))
		{			
				if (aByte=='C'){			// RN-41 returns CMD when it enters command mode
					_bluetooth_transmit_uart0_byte(13);						
					for (int i=0;(i<10);i++)        		
    19f8:	d1 f7       	brne	.-12     	; 0x19ee <_bluetooth_enter_command_mode+0x78>
						_bluetooth_transmit_uart0_byte(13);
					return 1;	
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	04 c0       	rjmp	.+8      	; 0x1a06 <_bluetooth_enter_command_mode+0x90>
		_bluetooth_transmit_uart0_byte(13);	//	RETURN or NEWLINE Character for RN-41
		/*_bluetooth_transmit_uart0_byte(13);
		_bluetooth_transmit_uart0_byte(13);
		_bluetooth_transmit_uart0_byte(13);*/

		attempts++;
    19fe:	2f 5f       	subi	r18, 0xFF	; 255
						_bluetooth_transmit_uart0_byte(13);
					return 1;	
				}
		}

 		if (attempts>=255) 
    1a00:	2f 3f       	cpi	r18, 0xFF	; 255
    1a02:	29 f6       	brne	.-118    	; 0x198e <_bluetooth_enter_command_mode+0x18>
			break;				
	}

	
	return 0;
    1a04:	80 e0       	ldi	r24, 0x00	; 0
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	08 95       	ret

00001a14 <_accelerometer_set_sensitivity>:
/* For version 3 the chose sensitivity is 4G */

unsigned char _accelerometer_set_sensitivity(unsigned char level){

#ifdef _VERSION==3
	if (level==_4G){
    1a14:	88 23       	and	r24, r24
    1a16:	11 f4       	brne	.+4      	; 0x1a1c <_accelerometer_set_sensitivity+0x8>
		cbi(PORTB,OUT_ACCEL_SEL1);
    1a18:	28 98       	cbi	0x05, 0	; 5
		return _4G;
    1a1a:	08 95       	ret
	}else if (level==_12G){
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	11 f4       	brne	.+4      	; 0x1a24 <_accelerometer_set_sensitivity+0x10>
		sbi(PORTB,OUT_ACCEL_SEL1);		
    1a20:	28 9a       	sbi	0x05, 0	; 5
		return _12G;
    1a22:	08 95       	ret
		sbi(PORTB,OUT_ACCEL_SEL1);
		sbi(PORTB,OUT_ACCEL_SEL2);
		return _6G;
	}
#endif
	return 0;
    1a24:	80 e0       	ldi	r24, 0x00	; 0
}
    1a26:	08 95       	ret

00001a28 <_accelerometer_turn_on>:
*/
void _accelerometer_turn_on(void)
{

#ifdef _VERSION 3
	sbi(DDRB,OUT_ACCEL_SEL1);	
    1a28:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB,OUT_ACCEL_SLEEP_N);
    1a2a:	23 9a       	sbi	0x04, 3	; 4
	sbi(PORTB,OUT_ACCEL_SLEEP_N);	 
    1a2c:	2b 9a       	sbi	0x05, 3	; 5
	sbi(DDRB,OUT_ACCEL_SEL2);
	sbi(DDRB,OUT_ACCEL_SLEEP_N);
	sbi(PORTB,OUT_ACCEL_SLEEP_N);
#endif	 			
	// Set the status of the accelerometer to true
	sbi(atmega_status, BIT1_ACCELEROMETER_STATUS);
    1a2e:	80 91 70 38 	lds	r24, 0x3870
    1a32:	82 60       	ori	r24, 0x02	; 2
    1a34:	80 93 70 38 	sts	0x3870, r24
}
    1a38:	08 95       	ret

00001a3a <_atmega_initialize>:
	
*/
void _atmega_initialize(unsigned char timer_prescalar)
{

	unsigned char prev_osccal=OSCCAL;
    1a3a:	80 91 66 00 	lds	r24, 0x0066

	atmega_status=0x00;
    1a3e:	10 92 70 38 	sts	0x3870, r1

	//Disable watchdog timer
	//_atmega_disable_watchdog();

	// Disable JTAG interface
	_atmega_disable_JTAG();
    1a42:	0e 94 91 0a 	call	0x1522	; 0x1522 <_atmega_disable_JTAG>


#ifdef _VERSION==3
	// By default initialize all ports as input to minimize power consumption
	// Setup Port A pins as input to minimize power consumption		
	cbi(DDRA,IN_ACCEL_Z_FILT);
    1a46:	08 98       	cbi	0x01, 0	; 1
	cbi(DDRA,IN_ACCEL_Y_FILT);
    1a48:	09 98       	cbi	0x01, 1	; 1
	cbi(DDRA,IN_ACCEL_X_FILT);
    1a4a:	0a 98       	cbi	0x01, 2	; 1
	cbi(DDRA,IN_DOCK_N);
    1a4c:	0b 98       	cbi	0x01, 3	; 1
	cbi(DDRA,IN_USER_N);
    1a4e:	0d 98       	cbi	0x01, 5	; 1
	cbi(DDRA,IN_BT_DISC);
    1a50:	0e 98       	cbi	0x01, 6	; 1
	cbi(DDRA,IN_VSENSE_BAT);
    1a52:	0f 98       	cbi	0x01, 7	; 1

	// Setup Port B pins as input to minimize power consumption
	cbi(DDRB,OUT_ACCEL_SEL1);	
    1a54:	20 98       	cbi	0x04, 0	; 4
	cbi(DDRB,PB1);
    1a56:	21 98       	cbi	0x04, 1	; 4
	cbi(PORTB,PB2);
    1a58:	2a 98       	cbi	0x05, 2	; 5
	cbi(DDRB,OUT_ACCEL_SLEEP_N);
    1a5a:	23 98       	cbi	0x04, 3	; 4
	cbi(DDRB,OUT_BT_SW_N);	
    1a5c:	24 98       	cbi	0x04, 4	; 4
	cbi(DDRB,IN_CPU_PROG_MOSI);
    1a5e:	25 98       	cbi	0x04, 5	; 4
	cbi(DDRB,OUT_CPU_PROG_MISO);	
    1a60:	26 98       	cbi	0x04, 6	; 4
	cbi(DDRB,IN_CPU_PROG_SCLK);	
    1a62:	27 98       	cbi	0x04, 7	; 4
	
	// Setup Port C pins as input to minimize power consumption
	cbi(DDRC,PC0);	
    1a64:	38 98       	cbi	0x07, 0	; 7
	cbi(DDRC,PC1);	
    1a66:	39 98       	cbi	0x07, 1	; 7
	cbi(DDRC,PC2);	
    1a68:	3a 98       	cbi	0x07, 2	; 7
	cbi(DDRC,OUT_LED_YE);	
    1a6a:	3b 98       	cbi	0x07, 3	; 7
	cbi(DDRC,PC4);	
    1a6c:	3c 98       	cbi	0x07, 4	; 7
	cbi(DDRC,PC5);	
    1a6e:	3d 98       	cbi	0x07, 5	; 7
	cbi(DDRC,PC6);	
    1a70:	3e 98       	cbi	0x07, 6	; 7
	cbi(DDRC,PC7);	
    1a72:	3f 98       	cbi	0x07, 7	; 7

	// Setup Port D pins as input to minimize power consumption
	cbi(DDRD,IN_BT_RXD);	
    1a74:	50 98       	cbi	0x0a, 0	; 10
	cbi(DDRD,OUT_BT_TXD);	
    1a76:	51 98       	cbi	0x0a, 1	; 10
	cbi(DDRD,OUT_BT_RESET_N);	
    1a78:	52 98       	cbi	0x0a, 2	; 10
	cbi(DDRD,OUT_LED_GN);	
    1a7a:	53 98       	cbi	0x0a, 3	; 10
	cbi(DDRD,PD4);	
    1a7c:	54 98       	cbi	0x0a, 4	; 10
	cbi(DDRD,PD5);	
    1a7e:	55 98       	cbi	0x0a, 5	; 10
	cbi(DDRD,PD6);
    1a80:	56 98       	cbi	0x0a, 6	; 10
	cbi(DDRD,PD7);	
    1a82:	57 98       	cbi	0x0a, 7	; 10
	cbi(DDRD,IN_BT_DISC);	
	cbi(DDRD,PD6);
	cbi(DDRD,PD7);	
#endif
	/* Set peripherials to the lowest power states */
	_bluetooth_turn_on();
    1a84:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_bluetooth_turn_on>
	_accelerometer_turn_on();
    1a88:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_accelerometer_turn_on>
	_accelerometer_set_sensitivity(_4G); /* Sensitivity of the accelerometer is set to 4G*/
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_accelerometer_set_sensitivity>
		OSCCAL= prev_osccal;	
	}
	
	_yellowled_turn_off();
	*/
	_atmega_initialize_uart0(ATMEGA_BAUD_38400, TX_RX_UART_MODE);	/* Looks like UART0 is being used 
    1a92:	8c e0       	ldi	r24, 0x0C	; 12
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	62 e0       	ldi	r22, 0x02	; 2
    1a98:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <_atmega_initialize_uart0>
	for the radio connection */


	/* Set ADC for conversion */    
    //Set ADC reference to AVCC
     ADMUX |=(1 << REFS0);
    1a9c:	ec e7       	ldi	r30, 0x7C	; 124
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 64       	ori	r24, 0x40	; 64
    1aa4:	80 83       	st	Z, r24
     //Set the ADC conversion clock prescalar       
     _atmega_set_adc_clock(ADC_PRESCALAR_64);
    1aa6:	85 e0       	ldi	r24, 0x05	; 5
    1aa8:	0e 94 91 09 	call	0x1322	; 0x1322 <_atmega_set_adc_clock>
     //_atmega_adc_turn_on();


	//Turn on ADC conversion_send_data_bufferred
	 _atmega_adc_turn_on();
    1aac:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_atmega_adc_turn_on>

}
    1ab0:	08 95       	ret

00001ab2 <_accelerometer_turn_off>:
	
*/
void _accelerometer_turn_off(void)
{
#ifdef _VERSION==3
	 _accelerometer_set_sensitivity(_4G);
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_accelerometer_set_sensitivity>
	 cbi(DDRB,OUT_ACCEL_SEL1);		 
    1ab8:	20 98       	cbi	0x04, 0	; 4
	 sbi(DDRB,OUT_ACCEL_SLEEP_N); //sleep pin in output mode
    1aba:	23 9a       	sbi	0x04, 3	; 4
	 cbi(PORTB,OUT_ACCEL_SLEEP_N); //clear the pin
    1abc:	2b 98       	cbi	0x05, 3	; 5
	 cbi(PORTB,OUT_ACCEL_SLEEP_N); //clear the pin
#endif
	 
	 
	 // Set the status of the accelerometer to false
	 cbi(atmega_status, BIT1_ACCELEROMETER_STATUS);
    1abe:	80 91 70 38 	lds	r24, 0x3870
    1ac2:	8d 7f       	andi	r24, 0xFD	; 253
    1ac4:	80 93 70 38 	sts	0x3870, r24
}
    1ac8:	08 95       	ret

00001aca <_is_accelerometer_on>:
	
*/

unsigned char _is_accelerometer_on(void)
{
	return ((atmega_status>>BIT1_ACCELEROMETER_STATUS) & 0x01);
    1aca:	80 91 70 38 	lds	r24, 0x3870
    1ace:	86 95       	lsr	r24
}
    1ad0:	81 70       	andi	r24, 0x01	; 1
    1ad2:	08 95       	ret

00001ad4 <_greenled_turn_on>:
*/

void _greenled_turn_on(void)
{
#ifdef _VERSION==3
	sbi(DDRD,OUT_LED_GN);
    1ad4:	53 9a       	sbi	0x0a, 3	; 10
	sbi(PORTD,OUT_LED_GN);
    1ad6:	5b 9a       	sbi	0x0b, 3	; 11
	sbi(DDRC,OUT_LED_GN);
	sbi(PORTC,OUT_LED_GN);
#endif
	
	// Set the status of the green led to true
	sbi(atmega_status, BIT2_GREENLED_STATUS); 
    1ad8:	80 91 70 38 	lds	r24, 0x3870
    1adc:	84 60       	ori	r24, 0x04	; 4
    1ade:	80 93 70 38 	sts	0x3870, r24
}
    1ae2:	08 95       	ret

00001ae4 <_greenled_turn_off>:

void _greenled_turn_off(void)
{

#ifdef _VERSION==3
	sbi(DDRD,OUT_LED_GN);
    1ae4:	53 9a       	sbi	0x0a, 3	; 10
	cbi(PORTD,OUT_LED_GN);
    1ae6:	5b 98       	cbi	0x0b, 3	; 11
	cbi(DDRD,OUT_LED_GN);
    1ae8:	53 98       	cbi	0x0a, 3	; 10
	cbi(PORTC,OUT_LED_GN);
	cbi(DDRC,OUT_LED_GN);
#endif
	
	// Set the status of the green led to false
	cbi(atmega_status, BIT2_GREENLED_STATUS);
    1aea:	80 91 70 38 	lds	r24, 0x3870
    1aee:	8b 7f       	andi	r24, 0xFB	; 251
    1af0:	80 93 70 38 	sts	0x3870, r24

}
    1af4:	08 95       	ret

00001af6 <_is_greenled_on>:
	Description: Tests if the green led is on
	
*/
unsigned char _is_greenled_on(void)
{
	return ((atmega_status>>BIT2_GREENLED_STATUS) & 0x01);
    1af6:	80 91 70 38 	lds	r24, 0x3870
    1afa:	86 95       	lsr	r24
    1afc:	86 95       	lsr	r24
}
    1afe:	81 70       	andi	r24, 0x01	; 1
    1b00:	08 95       	ret

00001b02 <_yellowled_turn_on>:
	Description: This function turns on the yellow led
	
*/
void _yellowled_turn_on(void)
{
	sbi(DDRC,OUT_LED_YE);
    1b02:	3b 9a       	sbi	0x07, 3	; 7
	sbi(PORTC,OUT_LED_YE);
    1b04:	43 9a       	sbi	0x08, 3	; 8

	// Set the status of the yellow led to true
	sbi(atmega_status, BIT3_YELLOWLED_STATUS);
    1b06:	80 91 70 38 	lds	r24, 0x3870
    1b0a:	88 60       	ori	r24, 0x08	; 8
    1b0c:	80 93 70 38 	sts	0x3870, r24
}
    1b10:	08 95       	ret

00001b12 <_yellowled_turn_off>:
	
*/
void _yellowled_turn_off(void)
{

	sbi(DDRC,OUT_LED_YE);
    1b12:	3b 9a       	sbi	0x07, 3	; 7
	cbi(PORTC,OUT_LED_YE);
    1b14:	43 98       	cbi	0x08, 3	; 8
	cbi(DDRC,OUT_LED_YE);	
    1b16:	3b 98       	cbi	0x07, 3	; 7
	
	// Set the status of the yellow led to false
	cbi(atmega_status, BIT3_YELLOWLED_STATUS);
    1b18:	80 91 70 38 	lds	r24, 0x3870
    1b1c:	87 7f       	andi	r24, 0xF7	; 247
    1b1e:	80 93 70 38 	sts	0x3870, r24
}
    1b22:	08 95       	ret

00001b24 <_atmega_finalize>:
	
*/
void _atmega_finalize(void)
{
	//cli();
	_bluetooth_turn_off();
    1b24:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_bluetooth_turn_off>
//	_accelerometer_turn_off();
	_greenled_turn_off();
    1b28:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_greenled_turn_off>
	_yellowled_turn_off();
    1b2c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <_yellowled_turn_off>

	//Set all ports as inputs
	DDRA=0x00;
    1b30:	11 b8       	out	0x01, r1	; 1
	DDRB=0x00;
    1b32:	14 b8       	out	0x04, r1	; 4
	DDRC=0x00;
    1b34:	17 b8       	out	0x07, r1	; 7
	DDRD=0x00;
    1b36:	1a b8       	out	0x0a, r1	; 10

	PORTA=0x00;
    1b38:	12 b8       	out	0x02, r1	; 2
	PORTB=0x00;
    1b3a:	15 b8       	out	0x05, r1	; 5
	PORTC=0x00;
    1b3c:	18 b8       	out	0x08, r1	; 8
	PORTD=0x00;
    1b3e:	1b b8       	out	0x0b, r1	; 11

	// Disable timer
	_atmega_disable_timer2();
    1b40:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_atmega_disable_timer2>

	//Disable watchdog
	wdt_disable();
    1b44:	88 e1       	ldi	r24, 0x18	; 24
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	80 93 60 00 	sts	0x0060, r24
    1b4e:	10 92 60 00 	sts	0x0060, r1
    1b52:	0f be       	out	0x3f, r0	; 63

	//Disable ADC Conversion
//
	_atmega_adc_turn_off();
    1b54:	0e 94 de 09 	call	0x13bc	; 0x13bc <_atmega_adc_turn_off>


	// Disable pull-ups
  	MCUCR |= (1u << PUD); 
    1b58:	85 b7       	in	r24, 0x35	; 53
    1b5a:	80 61       	ori	r24, 0x10	; 16
    1b5c:	85 bf       	out	0x35, r24	; 53
	// Disable Analog comparitor
  	ACSR &= ~(1<<ACIE);   // Disable analog comparator interrupt
    1b5e:	80 b7       	in	r24, 0x30	; 48
    1b60:	87 7f       	andi	r24, 0xF7	; 247
    1b62:	80 bf       	out	0x30, r24	; 48
  	ACSR |= (1<<ACD);     // Disable analog comparitor 
    1b64:	80 b7       	in	r24, 0x30	; 48
    1b66:	80 68       	ori	r24, 0x80	; 128
    1b68:	80 bf       	out	0x30, r24	; 48
	// Power Reduction Register, everything off;
  	//PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTWI)); 

	//Power down the MCU

	sleep_enable();
    1b6a:	83 b7       	in	r24, 0x33	; 51
    1b6c:	81 60       	ori	r24, 0x01	; 1
    1b6e:	83 bf       	out	0x33, r24	; 51
    //sleep_bod_disable();
    sei();	
    1b70:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1b72:	83 b7       	in	r24, 0x33	; 51
    1b74:	81 7f       	andi	r24, 0xF1	; 241
    1b76:	84 60       	ori	r24, 0x04	; 4
    1b78:	83 bf       	out	0x33, r24	; 51
	sleep_cpu();
    1b7a:	88 95       	sleep
    sleep_disable();
    1b7c:	83 b7       	in	r24, 0x33	; 51
    1b7e:	8e 7f       	andi	r24, 0xFE	; 254
    1b80:	83 bf       	out	0x33, r24	; 51

}
    1b82:	08 95       	ret

00001b84 <_wocket_reset>:


void _wocket_reset(void)
{
	_atmega_initialize(CPU_CLK_PRESCALAR_1024);
    1b84:	86 e0       	ldi	r24, 0x06	; 6
    1b86:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_atmega_initialize>
	_atmega_finalize();
    1b8a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_atmega_finalize>
}
    1b8e:	08 95       	ret

00001b90 <_is_yellowled_on>:
	Description: Tests if the yellow led is on
	
*/
unsigned char _is_yellowled_on(void)
{
	return ((atmega_status>>BIT3_YELLOWLED_STATUS) & 0x01);
    1b90:	80 91 70 38 	lds	r24, 0x3870
    1b94:	86 95       	lsr	r24
    1b96:	86 95       	lsr	r24
    1b98:	86 95       	lsr	r24
}
    1b9a:	81 70       	andi	r24, 0x01	; 1
    1b9c:	08 95       	ret

00001b9e <_is_docked>:
	Description: Tests if the wocket is docked
	
*/
unsigned char _is_docked(void)
{	
	return (!( 0x01 & (PINA>>IN_DOCK_N)));
    1b9e:	90 b1       	in	r25, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	93 fd       	sbrc	r25, 3
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
}
    1ba6:	08 95       	ret

00001ba8 <_wocket_initialize_timer2_interrupt>:
	 to increase every 1024 cycles: (8000000/1024= 7812.5). So, the counter need to overflow with ticks=7812.5/_SAMPLING_RATE. When the counter overflows, an overflow interrupt gets invoked to show the approximate sampling time
	 for the accelerometer.	
*/
void _wocket_initialize_timer2_interrupt(void)
{
	unsigned short ticks = (unsigned short) ((F_CPU / 1024) / _SAMPLING_RATE); 	
    1ba8:	20 91 06 01 	lds	r18, 0x0106
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	64 e8       	ldi	r22, 0x84	; 132
    1bb4:	7e e1       	ldi	r23, 0x1E	; 30
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__divmodsi4>
    1bbe:	82 2f       	mov	r24, r18
    1bc0:	80 95       	com	r24

	if (ticks > 256)
    1bc2:	91 e0       	ldi	r25, 0x01	; 1
    1bc4:	21 30       	cpi	r18, 0x01	; 1
    1bc6:	39 07       	cpc	r19, r25
    1bc8:	28 f0       	brcs	.+10     	; 0x1bd4 <_wocket_initialize_timer2_interrupt+0x2c>
	{
		_wTCNT2 = 0;
    1bca:	10 92 4c 01 	sts	0x014C, r1
		_wTCNT2_reps = (ticks / 256);
    1bce:	30 93 07 01 	sts	0x0107, r19
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <_wocket_initialize_timer2_interrupt+0x36>
		_wTCNT2_last = 255 - (ticks % 256);
	}else
	{
		_wTCNT2= 255 - ticks;
    1bd4:	80 93 4c 01 	sts	0x014C, r24
		_wTCNT2_reps = 0;
    1bd8:	10 92 07 01 	sts	0x0107, r1
		_wTCNT2_last = 255;
    1bdc:	8f ef       	ldi	r24, 0xFF	; 255
    1bde:	80 93 4d 01 	sts	0x014D, r24
    1be2:	08 95       	ret

00001be4 <_wocket_initialize>:
}

//-------------------------------------------	

void _wocket_initialize(void) //This function initializes the wocket
{
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
	// Disable the watchdog timer. It has to be done at the beginning of the program.
	_atmega_disable_watchdog();
    1bec:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_atmega_disable_watchdog>
	_atmega_initialize(CPU_CLK_PRESCALAR_1024);
    1bf0:	86 e0       	ldi	r24, 0x06	; 6
    1bf2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_atmega_initialize>
	num_skipped_timer_interrupts = 10;//(F_CPU/1024)/PERFECT_SAMPLING_FREQUENCY;
    1bf6:	8a e0       	ldi	r24, 0x0A	; 10
    1bf8:	80 93 72 38 	sts	0x3872, r24
	
	unsigned short battery = _atmega_a2dConvert10bit(IN_VSENSE_BAT);
    1bfc:	87 e0       	ldi	r24, 0x07	; 7
    1bfe:	0e 94 4e 0a 	call	0x149c	; 0x149c <_atmega_a2dConvert10bit>
    1c02:	ec 01       	movw	r28, r24
	if (battery < 700)
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	cc 3b       	cpi	r28, 0xBC	; 188
    1c08:	d8 07       	cpc	r29, r24
    1c0a:	00 f5       	brcc	.+64     	; 0x1c4c <_wocket_initialize+0x68>
    1c0c:	03 e0       	ldi	r16, 0x03	; 3
    1c0e:	10 e0       	ldi	r17, 0x00	; 0
	{// Blink yellow 3times for 5 seconds if the battery is not fully charged 
		for (int i = 0; (i < 3); i++){
			_yellowled_turn_on();		
    1c10:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_yellowled_turn_on>
    1c14:	88 ec       	ldi	r24, 0xC8	; 200
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	af e0       	ldi	r26, 0x0F	; 15
    1c1a:	b7 e2       	ldi	r27, 0x27	; 39
    1c1c:	11 97       	sbiw	r26, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <_wocket_initialize+0x38>
    1c20:	00 c0       	rjmp	.+0      	; 0x1c22 <_wocket_initialize+0x3e>
    1c22:	00 00       	nop
    1c24:	01 97       	sbiw	r24, 0x01	; 1
			for (int j = 0; (j < 200); j++)
    1c26:	c1 f7       	brne	.-16     	; 0x1c18 <_wocket_initialize+0x34>
				_delay_ms(5);
			_yellowled_turn_off();
    1c28:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <_yellowled_turn_off>
    1c2c:	88 ec       	ldi	r24, 0xC8	; 200
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	ef e0       	ldi	r30, 0x0F	; 15
    1c32:	f7 e2       	ldi	r31, 0x27	; 39
    1c34:	31 97       	sbiw	r30, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <_wocket_initialize+0x50>
    1c38:	00 c0       	rjmp	.+0      	; 0x1c3a <_wocket_initialize+0x56>
    1c3a:	00 00       	nop
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
			for (int j = 0; (j < 200); j++)
    1c3e:	c1 f7       	brne	.-16     	; 0x1c30 <_wocket_initialize+0x4c>
    1c40:	01 50       	subi	r16, 0x01	; 1
    1c42:	10 40       	sbci	r17, 0x00	; 0
	num_skipped_timer_interrupts = 10;//(F_CPU/1024)/PERFECT_SAMPLING_FREQUENCY;
	
	unsigned short battery = _atmega_a2dConvert10bit(IN_VSENSE_BAT);
	if (battery < 700)
	{// Blink yellow 3times for 5 seconds if the battery is not fully charged 
		for (int i = 0; (i < 3); i++){
    1c44:	29 f7       	brne	.-54     	; 0x1c10 <_wocket_initialize+0x2c>
			for (int j = 0; (j < 200); j++)
				_delay_ms(5);
		}
	}
	
	if (battery > 100)
    1c46:	c5 36       	cpi	r28, 0x65	; 101
    1c48:	d1 05       	cpc	r29, r1
    1c4a:	50 f0       	brcs	.+20     	; 0x1c60 <_wocket_initialize+0x7c>
	{//Load the status byte from the EEPROM  
		_INITIALIZED = eeprom_read_byte(&_NV_INITIALIZED);		
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0e 94 95 18 	call	0x312a	; 0x312a <__eerd_byte_m1284p>
    1c54:	80 93 4a 01 	sts	0x014A, r24
		_atmega_finalize();
		return;
	}
	
	// If the wocket has been initialized before, read the parameters from EEPROM and blinks green once	
	if (_INITIALIZED == _WOCKET_INITIALIZED)
    1c58:	85 32       	cpi	r24, 0x25	; 37
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <_wocket_initialize+0x7a>
    1c5c:	b3 c0       	rjmp	.+358    	; 0x1dc4 <_wocket_initialize+0x1e0>
    1c5e:	1a c0       	rjmp	.+52     	; 0x1c94 <_wocket_initialize+0xb0>
	{//Load the status byte from the EEPROM  
		_INITIALIZED = eeprom_read_byte(&_NV_INITIALIZED);		
	}
	else
	{ //turn on the yellow led for 5 seconds then shutdown 
		_yellowled_turn_on();		
    1c60:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_yellowled_turn_on>
    1c64:	88 ee       	ldi	r24, 0xE8	; 232
    1c66:	93 e0       	ldi	r25, 0x03	; 3
    1c68:	af e0       	ldi	r26, 0x0F	; 15
    1c6a:	b7 e2       	ldi	r27, 0x27	; 39
    1c6c:	11 97       	sbiw	r26, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <_wocket_initialize+0x88>
    1c70:	00 c0       	rjmp	.+0      	; 0x1c72 <_wocket_initialize+0x8e>
    1c72:	00 00       	nop
    1c74:	01 97       	sbiw	r24, 0x01	; 1
		for(int  i = 0; (i < 1000); i++)
    1c76:	c1 f7       	brne	.-16     	; 0x1c68 <_wocket_initialize+0x84>
			_delay_ms(5);
		_yellowled_turn_off();
    1c78:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <_yellowled_turn_off>
    1c7c:	8f ef       	ldi	r24, 0xFF	; 255
    1c7e:	94 e3       	ldi	r25, 0x34	; 52
    1c80:	ac e0       	ldi	r26, 0x0C	; 12
    1c82:	81 50       	subi	r24, 0x01	; 1
    1c84:	90 40       	sbci	r25, 0x00	; 0
    1c86:	a0 40       	sbci	r26, 0x00	; 0
    1c88:	e1 f7       	brne	.-8      	; 0x1c82 <_wocket_initialize+0x9e>
    1c8a:	00 c0       	rjmp	.+0      	; 0x1c8c <_wocket_initialize+0xa8>
    1c8c:	00 00       	nop
		_delay_ms(500);
		_atmega_finalize();
    1c8e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_atmega_finalize>
		return;
    1c92:	da c1       	rjmp	.+948    	; 0x2048 <_wocket_initialize+0x464>
	}
	
	// If the wocket has been initialized before, read the parameters from EEPROM and blinks green once	
	if (_INITIALIZED == _WOCKET_INITIALIZED)
	{		
		if (battery > 300)
    1c94:	91 e0       	ldi	r25, 0x01	; 1
    1c96:	cd 32       	cpi	r28, 0x2D	; 45
    1c98:	d9 07       	cpc	r29, r25
    1c9a:	08 f4       	brcc	.+2      	; 0x1c9e <_wocket_initialize+0xba>
    1c9c:	b0 c1       	rjmp	.+864    	; 0x1ffe <_wocket_initialize+0x41a>
		{
			_SAMPLING_RATE = eeprom_read_byte(&_NV_SAMPLING_RATE);
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0e 94 95 18 	call	0x312a	; 0x312a <__eerd_byte_m1284p>
    1ca6:	80 93 06 01 	sts	0x0106, r24
			_wTM = eeprom_read_byte(&_NV_WTM);
    1caa:	87 e0       	ldi	r24, 0x07	; 7
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 95 18 	call	0x312a	; 0x312a <__eerd_byte_m1284p>
    1cb2:	80 93 4e 01 	sts	0x014E, r24

			_wTCNT2 = eeprom_read_byte(&_NV_TCT);
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 95 18 	call	0x312a	; 0x312a <__eerd_byte_m1284p>
    1cbe:	80 93 4c 01 	sts	0x014C, r24
			_wTCNT2_reps = eeprom_read_byte(&_NV_TCTREPS);
    1cc2:	84 e0       	ldi	r24, 0x04	; 4
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	0e 94 95 18 	call	0x312a	; 0x312a <__eerd_byte_m1284p>
    1cca:	80 93 07 01 	sts	0x0107, r24
			_wTCNT2_last = eeprom_read_byte(&_NV_TCTLAST);
    1cce:	85 e0       	ldi	r24, 0x05	; 5
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 95 18 	call	0x312a	; 0x312a <__eerd_byte_m1284p>
    1cd6:	80 93 4d 01 	sts	0x014D, r24

			_wBTCAL100 = eeprom_read_word(&_NV_BTCAL100);
    1cda:	89 e0       	ldi	r24, 0x09	; 9
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1ce2:	90 93 7c 38 	sts	0x387C, r25
    1ce6:	80 93 7b 38 	sts	0x387B, r24
			_wBTCAL80  = eeprom_read_word(&_NV_BTCAL80);
    1cea:	8b e0       	ldi	r24, 0x0B	; 11
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1cf2:	90 93 8b 38 	sts	0x388B, r25
    1cf6:	80 93 8a 38 	sts	0x388A, r24
			_wBTCAL60  = eeprom_read_word(&_NV_BTCAL60);
    1cfa:	8d e0       	ldi	r24, 0x0D	; 13
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1d02:	90 93 84 38 	sts	0x3884, r25
    1d06:	80 93 83 38 	sts	0x3883, r24
			_wBTCAL40  = eeprom_read_word(&_NV_BTCAL40);
    1d0a:	8f e0       	ldi	r24, 0x0F	; 15
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1d12:	90 93 82 38 	sts	0x3882, r25
    1d16:	80 93 81 38 	sts	0x3881, r24
			_wBTCAL20  = eeprom_read_word(&_NV_BTCAL20);
    1d1a:	81 e1       	ldi	r24, 0x11	; 17
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1d22:	90 93 78 38 	sts	0x3878, r25
    1d26:	80 93 77 38 	sts	0x3877, r24
			_wBTCAL10  = eeprom_read_word(&_NV_BTCAL10);
    1d2a:	83 e1       	ldi	r24, 0x13	; 19
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1d32:	90 93 88 38 	sts	0x3888, r25
    1d36:	80 93 87 38 	sts	0x3887, r24

			_wX1G_CAL  = eeprom_read_word(&_NV_X1G_CAL);
    1d3a:	85 e1       	ldi	r24, 0x15	; 21
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1d42:	90 93 74 38 	sts	0x3874, r25
    1d46:	80 93 73 38 	sts	0x3873, r24
			_wXN1G_CAL = eeprom_read_word(&_NV_XN1G_CAL);
    1d4a:	87 e1       	ldi	r24, 0x17	; 23
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1d52:	90 93 76 38 	sts	0x3876, r25
    1d56:	80 93 75 38 	sts	0x3875, r24
			_wY1G_CAL  = eeprom_read_word(&_NV_Y1G_CAL);
    1d5a:	89 e1       	ldi	r24, 0x19	; 25
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1d62:	90 93 8e 38 	sts	0x388E, r25
    1d66:	80 93 8d 38 	sts	0x388D, r24
			_wYN1G_CAL = eeprom_read_word(&_NV_YN1G_CAL);
    1d6a:	8b e1       	ldi	r24, 0x1B	; 27
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1d72:	90 93 7a 38 	sts	0x387A, r25
    1d76:	80 93 79 38 	sts	0x3879, r24
			_wZ1G_CAL  = eeprom_read_word(&_NV_Z1G_CAL);
    1d7a:	8d e1       	ldi	r24, 0x1D	; 29
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1d82:	90 93 80 38 	sts	0x3880, r25
    1d86:	80 93 7f 38 	sts	0x387F, r24
			_wZN1G_CAL = eeprom_read_word(&_NV_ZN1G_CAL);
    1d8a:	8f e1       	ldi	r24, 0x1F	; 31
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 9d 18 	call	0x313a	; 0x313a <__eerd_word_m1284p>
    1d92:	90 93 7e 38 	sts	0x387E, r25
    1d96:	80 93 7d 38 	sts	0x387D, r24

			_wPDT = eeprom_read_byte(&_NV_PDT);
    1d9a:	81 e2       	ldi	r24, 0x21	; 33
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	0e 94 95 18 	call	0x312a	; 0x312a <__eerd_byte_m1284p>
    1da2:	80 93 85 38 	sts	0x3885, r24

			_greenled_turn_on();		
    1da6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_greenled_turn_on>
    1daa:	88 ec       	ldi	r24, 0xC8	; 200
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	af e1       	ldi	r26, 0x1F	; 31
    1db0:	be e4       	ldi	r27, 0x4E	; 78
    1db2:	11 97       	sbiw	r26, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <_wocket_initialize+0x1ce>
    1db6:	00 c0       	rjmp	.+0      	; 0x1db8 <_wocket_initialize+0x1d4>
    1db8:	00 00       	nop
    1dba:	01 97       	sbiw	r24, 0x01	; 1
			for(int i = 0; (i < 200); i++)
    1dbc:	c1 f7       	brne	.-16     	; 0x1dae <_wocket_initialize+0x1ca>
				_delay_ms(10);
			_greenled_turn_off();
    1dbe:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_greenled_turn_off>
    1dc2:	1d c1       	rjmp	.+570    	; 0x1ffe <_wocket_initialize+0x41a>

		
	// If the wocket has never been initialized, write the default settings and blink green 3 times 
	else
	{ 
		_SAMPLING_RATE = 40; 
    1dc4:	08 e2       	ldi	r16, 0x28	; 40
    1dc6:	00 93 06 01 	sts	0x0106, r16
		_wTM = _WTM_Continuous;
    1dca:	10 92 4e 01 	sts	0x014E, r1
		//_wTM = _WTM_Burst_60;

		// Calculate the timer variables used to sample at the right frequency
		_wocket_initialize_timer2_interrupt();
    1dce:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_wocket_initialize_timer2_interrupt>
		
		// Set the overflow interrupt timer 		
		switch(_wTM)
    1dd2:	80 91 4e 01 	lds	r24, 0x014E
    1dd6:	82 30       	cpi	r24, 0x02	; 2
    1dd8:	81 f0       	breq	.+32     	; 0x1dfa <_wocket_initialize+0x216>
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	28 f4       	brcc	.+10     	; 0x1de8 <_wocket_initialize+0x204>
    1dde:	88 23       	and	r24, r24
    1de0:	41 f0       	breq	.+16     	; 0x1df2 <_wocket_initialize+0x20e>
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	91 f4       	brne	.+36     	; 0x1e0a <_wocket_initialize+0x226>
    1de6:	07 c0       	rjmp	.+14     	; 0x1df6 <_wocket_initialize+0x212>
    1de8:	83 30       	cpi	r24, 0x03	; 3
    1dea:	51 f0       	breq	.+20     	; 0x1e00 <_wocket_initialize+0x21c>
    1dec:	84 30       	cpi	r24, 0x04	; 4
    1dee:	69 f4       	brne	.+26     	; 0x1e0a <_wocket_initialize+0x226>
    1df0:	09 c0       	rjmp	.+18     	; 0x1e04 <_wocket_initialize+0x220>
		{
			case _WTM_Continuous:	
				_MAX_SAMPLING_RATE = 126; //This limitation is due to the definition of SEND_SR  and GET_SR commands
    1df2:	8e e7       	ldi	r24, 0x7E	; 126
    1df4:	08 c0       	rjmp	.+16     	; 0x1e06 <_wocket_initialize+0x222>
				break;					  // The MCU provided in wocket able to sample at higher rates 								
			case _WTM_Burst_30:    	//a transfer mode that send the burst every 30 secs
				_MAX_SAMPLING_RATE = 80;		
    1df6:	80 e5       	ldi	r24, 0x50	; 80
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <_wocket_initialize+0x222>
				break;
			case _WTM_Burst_60:		//a transfer mode that send the burst every 60 secs
				_MAX_SAMPLING_RATE = 40;		
    1dfa:	00 93 5f 01 	sts	0x015F, r16
				break;
    1dfe:	05 c0       	rjmp	.+10     	; 0x1e0a <_wocket_initialize+0x226>
			case _WTM_Burst_90:		//a transfer mode that send the burst every 90 secs
				_MAX_SAMPLING_RATE = 30;		
    1e00:	8e e1       	ldi	r24, 0x1E	; 30
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <_wocket_initialize+0x222>
				break;
			case _WTM_Burst_120:		//a transfer mode that send the burst every 120 secs
				_MAX_SAMPLING_RATE = 20;		
    1e04:	84 e1       	ldi	r24, 0x14	; 20
    1e06:	80 93 5f 01 	sts	0x015F, r24
				break;
			default:
				break;
		}
		
		if (_SAMPLING_RATE > _MAX_SAMPLING_RATE)
    1e0a:	80 91 5f 01 	lds	r24, 0x015F
    1e0e:	90 91 06 01 	lds	r25, 0x0106
    1e12:	89 17       	cp	r24, r25
    1e14:	10 f4       	brcc	.+4      	; 0x1e1a <_wocket_initialize+0x236>
		{
			_SAMPLING_RATE = _MAX_SAMPLING_RATE;
    1e16:	80 93 06 01 	sts	0x0106, r24
		
		}
		if (_SAMPLING_RATE < _MIN_SAMPLING_RATE)
    1e1a:	80 91 0b 01 	lds	r24, 0x010B
    1e1e:	90 91 06 01 	lds	r25, 0x0106
    1e22:	98 17       	cp	r25, r24
    1e24:	10 f4       	brcc	.+4      	; 0x1e2a <_wocket_initialize+0x246>
		{
			_SAMPLING_RATE = _MIN_SAMPLING_RATE;		
    1e26:	80 93 06 01 	sts	0x0106, r24
		}
			
		
		if (battery > 300)
    1e2a:	b1 e0       	ldi	r27, 0x01	; 1
    1e2c:	cd 32       	cpi	r28, 0x2D	; 45
    1e2e:	db 07       	cpc	r29, r27
    1e30:	08 f4       	brcc	.+2      	; 0x1e34 <_wocket_initialize+0x250>
    1e32:	c1 c0       	rjmp	.+386    	; 0x1fb6 <_wocket_initialize+0x3d2>
		{	
			// Write the parameters to the EEPROM
			eeprom_write_byte(&_NV_SAMPLING_RATE,_SAMPLING_RATE);
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	60 91 06 01 	lds	r22, 0x0106
    1e3c:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
				
			eeprom_write_byte(&_NV_TCT,_wTCNT2);
    1e40:	83 e0       	ldi	r24, 0x03	; 3
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	60 91 4c 01 	lds	r22, 0x014C
    1e48:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
			eeprom_write_byte(&_NV_TCTREPS,_wTCNT2_reps);
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	60 91 07 01 	lds	r22, 0x0107
    1e54:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
			eeprom_write_byte(&_NV_TCTLAST,_wTCNT2_last);			
    1e58:	85 e0       	ldi	r24, 0x05	; 5
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	60 91 4d 01 	lds	r22, 0x014D
    1e60:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>

			eeprom_write_byte(&_NV_WTM,_wTM);
    1e64:	87 e0       	ldi	r24, 0x07	; 7
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	60 91 4e 01 	lds	r22, 0x014E
    1e6c:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
			eeprom_write_byte(&_NV_STATUS_BYTE,0x00);
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
			eeprom_write_byte(&_NV_SENS,_wSENS);
    1e7a:	88 e0       	ldi	r24, 0x08	; 8
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	60 91 08 01 	lds	r22, 0x0108
    1e82:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>

			//Set default battery calibration values
			eeprom_write_word(&_NV_BTCAL100,_DEFAULTBTCAL100);
    1e86:	89 e0       	ldi	r24, 0x09	; 9
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	65 ed       	ldi	r22, 0xD5	; 213
    1e8c:	72 e0       	ldi	r23, 0x02	; 2
    1e8e:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_BTCAL80, _DEFAULTBTCAL80);
    1e92:	8b e0       	ldi	r24, 0x0B	; 11
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	68 ea       	ldi	r22, 0xA8	; 168
    1e98:	72 e0       	ldi	r23, 0x02	; 2
    1e9a:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_BTCAL60, _DEFAULTBTCAL60);
    1e9e:	8d e0       	ldi	r24, 0x0D	; 13
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	60 e8       	ldi	r22, 0x80	; 128
    1ea4:	72 e0       	ldi	r23, 0x02	; 2
    1ea6:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_BTCAL40, _DEFAULTBTCAL40);
    1eaa:	8f e0       	ldi	r24, 0x0F	; 15
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	68 e5       	ldi	r22, 0x58	; 88
    1eb0:	72 e0       	ldi	r23, 0x02	; 2
    1eb2:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_BTCAL20, _DEFAULTBTCAL20);
    1eb6:	81 e1       	ldi	r24, 0x11	; 17
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	60 e3       	ldi	r22, 0x30	; 48
    1ebc:	72 e0       	ldi	r23, 0x02	; 2
    1ebe:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_BTCAL10, _DEFAULTBTCAL10);
    1ec2:	83 e1       	ldi	r24, 0x13	; 19
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	6c e1       	ldi	r22, 0x1C	; 28
    1ec8:	72 e0       	ldi	r23, 0x02	; 2
    1eca:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>

			_wBTCAL100 = _DEFAULTBTCAL100;
    1ece:	85 ed       	ldi	r24, 0xD5	; 213
    1ed0:	92 e0       	ldi	r25, 0x02	; 2
    1ed2:	90 93 7c 38 	sts	0x387C, r25
    1ed6:	80 93 7b 38 	sts	0x387B, r24
			_wBTCAL80  = _DEFAULTBTCAL80;
    1eda:	88 ea       	ldi	r24, 0xA8	; 168
    1edc:	92 e0       	ldi	r25, 0x02	; 2
    1ede:	90 93 8b 38 	sts	0x388B, r25
    1ee2:	80 93 8a 38 	sts	0x388A, r24
			_wBTCAL60  = _DEFAULTBTCAL60;
    1ee6:	80 e8       	ldi	r24, 0x80	; 128
    1ee8:	92 e0       	ldi	r25, 0x02	; 2
    1eea:	90 93 84 38 	sts	0x3884, r25
    1eee:	80 93 83 38 	sts	0x3883, r24
			_wBTCAL40  = _DEFAULTBTCAL40;
    1ef2:	88 e5       	ldi	r24, 0x58	; 88
    1ef4:	92 e0       	ldi	r25, 0x02	; 2
    1ef6:	90 93 82 38 	sts	0x3882, r25
    1efa:	80 93 81 38 	sts	0x3881, r24
			_wBTCAL20  = _DEFAULTBTCAL20;
    1efe:	80 e3       	ldi	r24, 0x30	; 48
    1f00:	92 e0       	ldi	r25, 0x02	; 2
    1f02:	90 93 78 38 	sts	0x3878, r25
    1f06:	80 93 77 38 	sts	0x3877, r24
			_wBTCAL10  = _DEFAULTBTCAL10;
    1f0a:	8c e1       	ldi	r24, 0x1C	; 28
    1f0c:	92 e0       	ldi	r25, 0x02	; 2
    1f0e:	90 93 88 38 	sts	0x3888, r25
    1f12:	80 93 87 38 	sts	0x3887, r24

			//Set default Accelerometer calibration values
			eeprom_write_word(&_NV_X1G_CAL, _DEFAULT_X1G_CAL);
    1f16:	85 e1       	ldi	r24, 0x15	; 21
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	64 ef       	ldi	r22, 0xF4	; 244
    1f1c:	71 e0       	ldi	r23, 0x01	; 1
    1f1e:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_XN1G_CAL,_DEFAULT_XN1G_CAL);
    1f22:	87 e1       	ldi	r24, 0x17	; 23
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	65 ef       	ldi	r22, 0xF5	; 245
    1f28:	71 e0       	ldi	r23, 0x01	; 1
    1f2a:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_Y1G_CAL, _DEFAULT_Y1G_CAL);
    1f2e:	89 e1       	ldi	r24, 0x19	; 25
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	66 ef       	ldi	r22, 0xF6	; 246
    1f34:	71 e0       	ldi	r23, 0x01	; 1
    1f36:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_YN1G_CAL,_DEFAULT_YN1G_CAL);
    1f3a:	8b e1       	ldi	r24, 0x1B	; 27
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	67 ef       	ldi	r22, 0xF7	; 247
    1f40:	71 e0       	ldi	r23, 0x01	; 1
    1f42:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_Z1G_CAL, _DEFAULT_Z1G_CAL);
    1f46:	8d e1       	ldi	r24, 0x1D	; 29
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	68 ef       	ldi	r22, 0xF8	; 248
    1f4c:	71 e0       	ldi	r23, 0x01	; 1
    1f4e:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
			eeprom_write_word(&_NV_ZN1G_CAL,_DEFAULT_ZN1G_CAL);
    1f52:	8f e1       	ldi	r24, 0x1F	; 31
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	69 ef       	ldi	r22, 0xF9	; 249
    1f58:	71 e0       	ldi	r23, 0x01	; 1
    1f5a:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>

			_wX1G_CAL  = _DEFAULT_X1G_CAL;
    1f5e:	84 ef       	ldi	r24, 0xF4	; 244
    1f60:	91 e0       	ldi	r25, 0x01	; 1
    1f62:	90 93 74 38 	sts	0x3874, r25
    1f66:	80 93 73 38 	sts	0x3873, r24
			_wXN1G_CAL = _DEFAULT_XN1G_CAL;
    1f6a:	85 ef       	ldi	r24, 0xF5	; 245
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	90 93 76 38 	sts	0x3876, r25
    1f72:	80 93 75 38 	sts	0x3875, r24
			_wY1G_CAL  = _DEFAULT_Y1G_CAL;
    1f76:	86 ef       	ldi	r24, 0xF6	; 246
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	90 93 8e 38 	sts	0x388E, r25
    1f7e:	80 93 8d 38 	sts	0x388D, r24
			_wYN1G_CAL = _DEFAULT_YN1G_CAL;
    1f82:	87 ef       	ldi	r24, 0xF7	; 247
    1f84:	91 e0       	ldi	r25, 0x01	; 1
    1f86:	90 93 7a 38 	sts	0x387A, r25
    1f8a:	80 93 79 38 	sts	0x3879, r24
			_wZ1G_CAL  = _DEFAULT_Z1G_CAL;
    1f8e:	88 ef       	ldi	r24, 0xF8	; 248
    1f90:	91 e0       	ldi	r25, 0x01	; 1
    1f92:	90 93 80 38 	sts	0x3880, r25
    1f96:	80 93 7f 38 	sts	0x387F, r24
			_wZN1G_CAL = _DEFAULT_ZN1G_CAL;
    1f9a:	89 ef       	ldi	r24, 0xF9	; 249
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	90 93 7e 38 	sts	0x387E, r25
    1fa2:	80 93 7d 38 	sts	0x387D, r24

			_wPDT = _DEFAULT_PDT;
    1fa6:	8f e7       	ldi	r24, 0x7F	; 127
    1fa8:	80 93 85 38 	sts	0x3885, r24
			eeprom_write_byte(&_NV_PDT, _wPDT);
    1fac:	81 e2       	ldi	r24, 0x21	; 33
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	6f e7       	ldi	r22, 0x7F	; 127
    1fb2:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
		}

		// Set the initialized flag in the status byte
		_INITIALIZED = _WOCKET_INITIALIZED;
    1fb6:	85 e2       	ldi	r24, 0x25	; 37
    1fb8:	80 93 4a 01 	sts	0x014A, r24

		// Write the status byte to the EEPROM		
		eeprom_write_byte(&_NV_INITIALIZED,_INITIALIZED);
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	65 e2       	ldi	r22, 0x25	; 37
    1fc2:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
    1fc6:	c3 e0       	ldi	r28, 0x03	; 3
    1fc8:	d0 e0       	ldi	r29, 0x00	; 0
				
		// Blink green for 5 seconds	
		for (int i = 0; (i < 3); i++){
			_greenled_turn_on();		
    1fca:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_greenled_turn_on>
    1fce:	88 ec       	ldi	r24, 0xC8	; 200
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	ef e0       	ldi	r30, 0x0F	; 15
    1fd4:	f7 e2       	ldi	r31, 0x27	; 39
    1fd6:	31 97       	sbiw	r30, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <_wocket_initialize+0x3f2>
    1fda:	00 c0       	rjmp	.+0      	; 0x1fdc <_wocket_initialize+0x3f8>
    1fdc:	00 00       	nop
    1fde:	01 97       	sbiw	r24, 0x01	; 1
			for(int j = 0;(j < 200); j++)
    1fe0:	c1 f7       	brne	.-16     	; 0x1fd2 <_wocket_initialize+0x3ee>
				_delay_ms(5);
			_greenled_turn_off();
    1fe2:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_greenled_turn_off>
    1fe6:	88 ec       	ldi	r24, 0xC8	; 200
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	af e0       	ldi	r26, 0x0F	; 15
    1fec:	b7 e2       	ldi	r27, 0x27	; 39
    1fee:	11 97       	sbiw	r26, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <_wocket_initialize+0x40a>
    1ff2:	00 c0       	rjmp	.+0      	; 0x1ff4 <_wocket_initialize+0x410>
    1ff4:	00 00       	nop
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
			for(int j = 0; (j < 200); j++)
    1ff8:	c1 f7       	brne	.-16     	; 0x1fea <_wocket_initialize+0x406>
    1ffa:	21 97       	sbiw	r28, 0x01	; 1

		// Write the status byte to the EEPROM		
		eeprom_write_byte(&_NV_INITIALIZED,_INITIALIZED);
				
		// Blink green for 5 seconds	
		for (int i = 0; (i < 3); i++){
    1ffc:	31 f7       	brne	.-52     	; 0x1fca <_wocket_initialize+0x3e6>
			for(int j = 0; (j < 200); j++)
				_delay_ms(5);
		}		
	}

	_DEFAULT_SHUTDOWN = (unsigned long)_wPDT * (unsigned long)_SAMPLING_RATE * (unsigned long)60;
    1ffe:	60 91 85 38 	lds	r22, 0x3885
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	20 91 06 01 	lds	r18, 0x0106
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	50 e0       	ldi	r21, 0x00	; 0
    2012:	0e 94 25 18 	call	0x304a	; 0x304a <__mulsi3>
    2016:	2c e3       	ldi	r18, 0x3C	; 60
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	0e 94 25 18 	call	0x304a	; 0x304a <__mulsi3>
    2022:	60 93 5b 01 	sts	0x015B, r22
    2026:	70 93 5c 01 	sts	0x015C, r23
    202a:	80 93 5d 01 	sts	0x015D, r24
    202e:	90 93 5e 01 	sts	0x015E, r25
	_wShutdownTimer = _DEFAULT_SHUTDOWN;
    2032:	60 93 57 01 	sts	0x0157, r22
    2036:	70 93 58 01 	sts	0x0158, r23
    203a:	80 93 59 01 	sts	0x0159, r24
    203e:	90 93 5a 01 	sts	0x015A, r25
	
    // Enable Timer 2 
    _atmega_enable_timer2(CPU_CLK_PRESCALAR_1024); 
    2042:	86 e0       	ldi	r24, 0x06	; 6
    2044:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_atmega_enable_timer2>
}
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	08 95       	ret

00002052 <_wocket_set_flag>:

//-------------------------------------------
void _wocket_set_flag(unsigned char flag)
{
	sbi(_STATUS_BYTE, flag);
    2052:	21 e0       	ldi	r18, 0x01	; 1
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	02 c0       	rjmp	.+4      	; 0x205c <_wocket_set_flag+0xa>
    2058:	22 0f       	add	r18, r18
    205a:	33 1f       	adc	r19, r19
    205c:	8a 95       	dec	r24
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <_wocket_set_flag+0x6>
    2060:	80 91 4b 01 	lds	r24, 0x014B
    2064:	82 2b       	or	r24, r18
    2066:	80 93 4b 01 	sts	0x014B, r24
}
    206a:	08 95       	ret

0000206c <_wocket_reset_flag>:

//-------------------------------------------
void _wocket_reset_flag(unsigned char flag)
{
	cbi(_STATUS_BYTE, flag);
    206c:	21 e0       	ldi	r18, 0x01	; 1
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <_wocket_reset_flag+0xa>
    2072:	22 0f       	add	r18, r18
    2074:	33 1f       	adc	r19, r19
    2076:	8a 95       	dec	r24
    2078:	e2 f7       	brpl	.-8      	; 0x2072 <_wocket_reset_flag+0x6>
    207a:	20 95       	com	r18
    207c:	80 91 4b 01 	lds	r24, 0x014B
    2080:	82 23       	and	r24, r18
    2082:	80 93 4b 01 	sts	0x014B, r24
}
    2086:	08 95       	ret

00002088 <_wocket_is_flag_set>:

//-------------------------------------------
unsigned char _wocket_is_flag_set(unsigned char flag)
{	
	return ((_STATUS_BYTE >> flag) & 0x01);
    2088:	20 91 4b 01 	lds	r18, 0x014B
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <_wocket_is_flag_set+0xc>
    2090:	35 95       	asr	r19
    2092:	27 95       	ror	r18
    2094:	8a 95       	dec	r24
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <_wocket_is_flag_set+0x8>
}
    2098:	82 2f       	mov	r24, r18
    209a:	81 70       	andi	r24, 0x01	; 1
    209c:	08 95       	ret

0000209e <_send_uncompressed_pdu>:

//-------------------------------------------
// sends uncompressed data via bluetooth (in both Continuous and Burst modes)
void _send_uncompressed_pdu(unsigned short x, unsigned short y, unsigned short z)
{
    209e:	cf 92       	push	r12
    20a0:	df 92       	push	r13
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	ec 01       	movw	r28, r24
    20b0:	8b 01       	movw	r16, r22
    20b2:	7a 01       	movw	r14, r20
	aBuffer[0] = 0x80 | ((x >> 8) & 0x03);
    20b4:	6c 01       	movw	r12, r24
    20b6:	8d 2d       	mov	r24, r13
    20b8:	83 70       	andi	r24, 0x03	; 3
    20ba:	80 68       	ori	r24, 0x80	; 128
    20bc:	80 93 99 38 	sts	0x3899, r24
	_bluetooth_transmit_uart0_byte(aBuffer[0]);
    20c0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
	aBuffer[1] = ((unsigned char) ((x >> 1) & 0x7f));
    20c4:	ce 01       	movw	r24, r28
    20c6:	96 95       	lsr	r25
    20c8:	87 95       	ror	r24
    20ca:	8f 77       	andi	r24, 0x7F	; 127
    20cc:	80 93 9a 38 	sts	0x389A, r24
	_bluetooth_transmit_uart0_byte(aBuffer[1]);
    20d0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
	aBuffer[2] = ((unsigned char) ((x << 6) & 0x40)) | ((unsigned char) ((y >> 4) & 0x3f));
    20d4:	c8 01       	movw	r24, r16
    20d6:	34 e0       	ldi	r19, 0x04	; 4
    20d8:	96 95       	lsr	r25
    20da:	87 95       	ror	r24
    20dc:	3a 95       	dec	r19
    20de:	e1 f7       	brne	.-8      	; 0x20d8 <_send_uncompressed_pdu+0x3a>
    20e0:	8f 73       	andi	r24, 0x3F	; 63
    20e2:	9e 01       	movw	r18, r28
    20e4:	22 95       	swap	r18
    20e6:	22 0f       	add	r18, r18
    20e8:	22 0f       	add	r18, r18
    20ea:	20 7c       	andi	r18, 0xC0	; 192
    20ec:	92 2f       	mov	r25, r18
    20ee:	90 74       	andi	r25, 0x40	; 64
    20f0:	89 2b       	or	r24, r25
    20f2:	80 93 9b 38 	sts	0x389B, r24
	_bluetooth_transmit_uart0_byte(aBuffer[2]);
    20f6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
	aBuffer[3] = ((unsigned char) ((y << 3) & 0x78)) | ((unsigned char) ((z >> 7) & 0x07));
    20fa:	c7 01       	movw	r24, r14
    20fc:	88 0f       	add	r24, r24
    20fe:	89 2f       	mov	r24, r25
    2100:	88 1f       	adc	r24, r24
    2102:	99 0b       	sbc	r25, r25
    2104:	91 95       	neg	r25
    2106:	87 70       	andi	r24, 0x07	; 7
    2108:	00 0f       	add	r16, r16
    210a:	00 0f       	add	r16, r16
    210c:	00 0f       	add	r16, r16
    210e:	08 77       	andi	r16, 0x78	; 120
    2110:	80 2b       	or	r24, r16
    2112:	80 93 9c 38 	sts	0x389C, r24
	_bluetooth_transmit_uart0_byte(aBuffer[3]);
    2116:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
	aBuffer[4] = ((unsigned char) (z & 0x7f));
    211a:	8e 2d       	mov	r24, r14
    211c:	8f 77       	andi	r24, 0x7F	; 127
    211e:	80 93 9d 38 	sts	0x389D, r24
	_bluetooth_transmit_uart0_byte(aBuffer[4]);
    2122:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
}
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	1f 91       	pop	r17
    212c:	0f 91       	pop	r16
    212e:	ff 90       	pop	r15
    2130:	ef 90       	pop	r14
    2132:	df 90       	pop	r13
    2134:	cf 90       	pop	r12
    2136:	08 95       	ret

00002138 <_send_compressed_pdu>:

//-------------------------------------------
// 	sends compressed data via bluetooth(in both Continuous and Burst modes)
void _send_compressed_pdu(unsigned char x, unsigned char y, unsigned char z)
{
    2138:	1f 93       	push	r17
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <_send_compressed_pdu+0x8>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	18 2f       	mov	r17, r24
	aBuffer[0] = 0xe0| ((x >> 1) & 0x1f);
    2146:	86 95       	lsr	r24
    2148:	80 6e       	ori	r24, 0xE0	; 224
    214a:	80 93 99 38 	sts	0x3899, r24
	_bluetooth_transmit_uart0_byte(aBuffer[0]);
    214e:	4a 83       	std	Y+2, r20	; 0x02
    2150:	69 83       	std	Y+1, r22	; 0x01
    2152:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
	aBuffer[1] = ((x & 0x01) << 6) | (y & 0x3f);
    2156:	21 2f       	mov	r18, r17
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	21 70       	andi	r18, 0x01	; 1
    215c:	30 70       	andi	r19, 0x00	; 0
    215e:	56 e0       	ldi	r21, 0x06	; 6
    2160:	22 0f       	add	r18, r18
    2162:	33 1f       	adc	r19, r19
    2164:	5a 95       	dec	r21
    2166:	e1 f7       	brne	.-8      	; 0x2160 <_send_compressed_pdu+0x28>
    2168:	69 81       	ldd	r22, Y+1	; 0x01
    216a:	86 2f       	mov	r24, r22
    216c:	8f 73       	andi	r24, 0x3F	; 63
    216e:	82 2b       	or	r24, r18
    2170:	80 93 9a 38 	sts	0x389A, r24
	_bluetooth_transmit_uart0_byte(aBuffer[1]);
    2174:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
	aBuffer[2] = (z << 1) & 0x7e;
    2178:	4a 81       	ldd	r20, Y+2	; 0x02
    217a:	84 2f       	mov	r24, r20
    217c:	88 0f       	add	r24, r24
    217e:	8e 77       	andi	r24, 0x7E	; 126
    2180:	80 93 9b 38 	sts	0x389B, r24
	_bluetooth_transmit_uart0_byte(aBuffer[2]);	
    2184:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
}
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	1f 91       	pop	r17
    2192:	08 95       	ret

00002194 <_send_batch_count>:

//-------------------------------------------
//	sends the number of stored raw data 
void _send_batch_count(unsigned short count)
{
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    aBuffer[0] = m_BC_RSP_BYTE0;
    2198:	2c ec       	ldi	r18, 0xCC	; 204
    219a:	20 93 99 38 	sts	0x3899, r18
    aBuffer[1] = m_BC_RSP_BYTE1(count);
    219e:	29 2f       	mov	r18, r25
    21a0:	26 95       	lsr	r18
    21a2:	20 93 9a 38 	sts	0x389A, r18
    aBuffer[2] = m_BC_RSP_BYTE2(count);
    21a6:	9c 01       	movw	r18, r24
    21a8:	36 95       	lsr	r19
    21aa:	27 95       	ror	r18
    21ac:	36 95       	lsr	r19
    21ae:	27 95       	ror	r18
    21b0:	2f 77       	andi	r18, 0x7F	; 127
    21b2:	20 93 9b 38 	sts	0x389B, r18
	aBuffer[3] = m_BC_RSP_BYTE3(count);
    21b6:	83 70       	andi	r24, 0x03	; 3
    21b8:	82 95       	swap	r24
    21ba:	88 0f       	add	r24, r24
    21bc:	80 7e       	andi	r24, 0xE0	; 224
    21be:	80 93 9c 38 	sts	0x389C, r24
    21c2:	c9 e9       	ldi	r28, 0x99	; 153
    21c4:	d8 e3       	ldi	r29, 0x38	; 56
	for (int i = 0; (i < 4); i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]);  
    21c6:	89 91       	ld	r24, Y+
    21c8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
{
    aBuffer[0] = m_BC_RSP_BYTE0;
    aBuffer[1] = m_BC_RSP_BYTE1(count);
    aBuffer[2] = m_BC_RSP_BYTE2(count);
	aBuffer[3] = m_BC_RSP_BYTE3(count);
	for (int i = 0; (i < 4); i++)                                                                                       
    21cc:	88 e3       	ldi	r24, 0x38	; 56
    21ce:	cd 39       	cpi	r28, 0x9D	; 157
    21d0:	d8 07       	cpc	r29, r24
    21d2:	c9 f7       	brne	.-14     	; 0x21c6 <_send_batch_count+0x32>
       	_bluetooth_transmit_uart0_byte(aBuffer[i]);  
}
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	08 95       	ret

000021da <_send_ac_count>:

//-------------------------------------------
// 	sends the number of activity counts 
void _send_ac_count(unsigned short count)
{ 
    aBuffer[0] = m_ACC_RSP_BYTE0;
    21da:	2f ec       	ldi	r18, 0xCF	; 207
    21dc:	20 93 99 38 	sts	0x3899, r18
    aBuffer[1] = m_ACC_RSP_BYTE1(count);
    21e0:	9c 01       	movw	r18, r24
    21e2:	22 0f       	add	r18, r18
    21e4:	23 2f       	mov	r18, r19
    21e6:	22 1f       	adc	r18, r18
    21e8:	33 0b       	sbc	r19, r19
    21ea:	31 95       	neg	r19
    21ec:	2f 77       	andi	r18, 0x7F	; 127
    21ee:	20 93 9a 38 	sts	0x389A, r18
    aBuffer[2] = m_ACC_RSP_BYTE2(count);
    21f2:	8f 77       	andi	r24, 0x7F	; 127
    21f4:	80 93 9b 38 	sts	0x389B, r24
	for (int i = 0; (i < 3); i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]);  
    21f8:	8f ec       	ldi	r24, 0xCF	; 207
    21fa:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    21fe:	80 91 9a 38 	lds	r24, 0x389A
    2202:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    2206:	80 91 9b 38 	lds	r24, 0x389B
    220a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
}
    220e:	08 95       	ret

00002210 <_send_ac_offset>:

//-------------------------------------------
//	Activity count offset 
void _send_ac_offset(unsigned short offset)
{
    aBuffer[0] = m_OFT_RSP_BYTE0;
    2210:	20 ed       	ldi	r18, 0xD0	; 208
    2212:	20 93 99 38 	sts	0x3899, r18
    aBuffer[1] = m_OFT_RSP_BYTE1(offset);
    2216:	9c 01       	movw	r18, r24
    2218:	22 0f       	add	r18, r18
    221a:	23 2f       	mov	r18, r19
    221c:	22 1f       	adc	r18, r18
    221e:	33 0b       	sbc	r19, r19
    2220:	31 95       	neg	r19
    2222:	2f 77       	andi	r18, 0x7F	; 127
    2224:	20 93 9a 38 	sts	0x389A, r18
    aBuffer[2] = m_OFT_RSP_BYTE2(offset);
    2228:	8f 77       	andi	r24, 0x7F	; 127
    222a:	80 93 9b 38 	sts	0x389B, r24
	for (int i = 0; (i < 3); i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
    222e:	80 ed       	ldi	r24, 0xD0	; 208
    2230:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    2234:	80 91 9a 38 	lds	r24, 0x389A
    2238:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    223c:	80 91 9b 38 	lds	r24, 0x389B
    2240:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
}
    2244:	08 95       	ret

00002246 <_send_fv>:

//-------------------------------------------
//	sends the firmware version 
void _send_fv()
{
    aBuffer[0] = m_FV_RSP_BYTE0;
    2246:	8b ec       	ldi	r24, 0xCB	; 203
    2248:	80 93 99 38 	sts	0x3899, r24
    aBuffer[1] = m_FV_RSP_BYTE1(_FVERSION);    
    224c:	86 e0       	ldi	r24, 0x06	; 6
    224e:	80 93 9a 38 	sts	0x389A, r24
	for (int i = 0; (i < 2); i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
    2252:	8b ec       	ldi	r24, 0xCB	; 203
    2254:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    2258:	80 91 9a 38 	lds	r24, 0x389A
    225c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
}
    2260:	08 95       	ret

00002262 <_send_hv>:

//-------------------------------------------
// 	sends the hardware version
void _send_hv()
{
    aBuffer[0] = m_HV_RSP_BYTE0;
    2262:	8a ec       	ldi	r24, 0xCA	; 202
    2264:	80 93 99 38 	sts	0x3899, r24
    aBuffer[1] = m_HV_RSP_BYTE1(_VERSION);    
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	80 93 9a 38 	sts	0x389A, r24
	for (int i = 0; (i < 2); i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
    226e:	8a ec       	ldi	r24, 0xCA	; 202
    2270:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    2274:	80 91 9a 38 	lds	r24, 0x389A
    2278:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
}
    227c:	08 95       	ret

0000227e <_send_bl>:

//-------------------------------------------
// 	sends the battery level
void _send_bl(unsigned short level)
{
   aBuffer[0] = m_BL_RSP_BYTE0;
    227e:	20 ec       	ldi	r18, 0xC0	; 192
    2280:	20 93 99 38 	sts	0x3899, r18
   aBuffer[1] = m_BL_RSP_BYTE1(level);
    2284:	9c 01       	movw	r18, r24
    2286:	f3 e0       	ldi	r31, 0x03	; 3
    2288:	36 95       	lsr	r19
    228a:	27 95       	ror	r18
    228c:	fa 95       	dec	r31
    228e:	e1 f7       	brne	.-8      	; 0x2288 <_send_bl+0xa>
    2290:	20 93 9a 38 	sts	0x389A, r18
   aBuffer[2] = m_BL_RSP_BYTE2(level);
    2294:	87 70       	andi	r24, 0x07	; 7
    2296:	82 95       	swap	r24
    2298:	80 7f       	andi	r24, 0xF0	; 240
    229a:	80 93 9b 38 	sts	0x389B, r24
   for (int i = 0; (i < 3); i++)
       _bluetooth_transmit_uart0_byte(aBuffer[i]);
    229e:	80 ec       	ldi	r24, 0xC0	; 192
    22a0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    22a4:	80 91 9a 38 	lds	r24, 0x389A
    22a8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    22ac:	80 91 9b 38 	lds	r24, 0x389B
    22b0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
}
    22b4:	08 95       	ret

000022b6 <_send_end_batch>:

//-------------------------------------------
// sends confirmation of end of batch data for bursty mode
void _send_end_batch()
{
	aBuffer[0] = m_END_BATCH_BYTE0;    	
    22b6:	82 ed       	ldi	r24, 0xD2	; 210
    22b8:	80 93 99 38 	sts	0x3899, r24
    _bluetooth_transmit_uart0_byte(aBuffer[0]); 
    22bc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
}
    22c0:	08 95       	ret

000022c2 <_send_sr>:

//-------------------------------------------
// sends sampling rate
void _send_sr()
{
	aBuffer[0] = m_SR_RSP_BYTE0;
    22c2:	85 ec       	ldi	r24, 0xC5	; 197
    22c4:	80 93 99 38 	sts	0x3899, r24
    aBuffer[1] = m_SR_RSP_BYTE1(_SAMPLING_RATE);
    22c8:	80 91 06 01 	lds	r24, 0x0106
    22cc:	8f 77       	andi	r24, 0x7F	; 127
    22ce:	80 93 9a 38 	sts	0x389A, r24
	for (int i = 0; (i < 2); i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
    22d2:	85 ec       	ldi	r24, 0xC5	; 197
    22d4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    22d8:	80 91 9a 38 	lds	r24, 0x389A
    22dc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
}
    22e0:	08 95       	ret

000022e2 <_send_wtm>:

//-------------------------------------------
//	sends wocket transmission mode 
void _send_wtm()
{ 
	aBuffer[0] = m_WTM_RSP_BYTE0;
    22e2:	88 ec       	ldi	r24, 0xC8	; 200
    22e4:	80 93 99 38 	sts	0x3899, r24
    aBuffer[1] = m_WTM_RSP_BYTE1(_wTM);
    22e8:	80 91 4e 01 	lds	r24, 0x014E
    22ec:	87 70       	andi	r24, 0x07	; 7
    22ee:	82 95       	swap	r24
    22f0:	80 7f       	andi	r24, 0xF0	; 240
    22f2:	80 93 9a 38 	sts	0x389A, r24
	for (int i = 0; (i < 2); i++)                                                                                       
       	_bluetooth_transmit_uart0_byte(aBuffer[i]); 
    22f6:	88 ec       	ldi	r24, 0xC8	; 200
    22f8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    22fc:	80 91 9a 38 	lds	r24, 0x389A
    2300:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
}
    2304:	08 95       	ret

00002306 <_receive_data>:

//-------------------------------------------
// 	Receive commands from the phone	
void _receive_data(void)
{
    2306:	ef 92       	push	r14
    2308:	ff 92       	push	r15
    230a:	0f 93       	push	r16
    230c:	1f 93       	push	r17
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	0f 92       	push	r0
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62

	// Attempt to receive a byte only if no command is being received or a partial command has been received
	// This line was replaced with results from Harshit experiments
	// if ( ((command_counter==0)||(command_counter<command_length))  && (_bluetooth_receive_uart0_byte(&aByte)) )
    
	if(_bluetooth_receive_uart0_byte(&aByte))
    2318:	ce 01       	movw	r24, r28
    231a:	01 96       	adiw	r24, 0x01	; 1
    231c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_bluetooth_receive_uart0_byte>
    2320:	88 23       	and	r24, r24
    2322:	e1 f1       	breq	.+120    	; 0x239c <_receive_data+0x96>
	{
		rBuffer[command_counter++] = aByte;
    2324:	80 91 37 01 	lds	r24, 0x0137
    2328:	e9 81       	ldd	r30, Y+1	; 0x01
    232a:	a8 2f       	mov	r26, r24
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	a1 57       	subi	r26, 0x71	; 113
    2330:	b7 4c       	sbci	r27, 0xC7	; 199
    2332:	ec 93       	st	X, r30
    2334:	8f 5f       	subi	r24, 0xFF	; 255
    2336:	80 93 37 01 	sts	0x0137, r24
				
		if ((aByte >> 5) == COMMAND_PREFIX)
    233a:	8e 2f       	mov	r24, r30
    233c:	82 95       	swap	r24
    233e:	86 95       	lsr	r24
    2340:	87 70       	andi	r24, 0x07	; 7
    2342:	85 30       	cpi	r24, 0x05	; 5
    2344:	59 f5       	brne	.+86     	; 0x239c <_receive_data+0x96>
    	{
        	opcode = aByte & 0x1f;                                              
    2346:	ef 71       	andi	r30, 0x1F	; 31
    2348:	e0 93 86 38 	sts	0x3886, r30
        	switch (opcode)
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	ef 31       	cpi	r30, 0x1F	; 31
    2350:	f1 05       	cpc	r31, r1
    2352:	98 f4       	brcc	.+38     	; 0x237a <_receive_data+0x74>
    2354:	ea 5b       	subi	r30, 0xBA	; 186
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	05 90       	lpm	r0, Z+
    235e:	f4 91       	lpm	r31, Z+
    2360:	e0 2d       	mov	r30, r0
    2362:	09 94       	ijmp
				case (unsigned char)GetBatteryCalibration:
				case (unsigned char)GetHardwareVersion:
				case (unsigned char)GetFirmwareVersion:				
				case (unsigned char)GetTCT:
				case (unsigned char)ShutdownWocket:
                	command_length = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	07 c0       	rjmp	.+14     	; 0x2376 <_receive_data+0x70>
                case (unsigned char)SetAliveTimer:
                case (unsigned char)SetPowerDownTimer:
                case (unsigned char)SetRadioTransmissionMode:                
				case (unsigned char)SetWocketTransmissionMode:  
				case (unsigned char)SetLED:
                     command_length = 2;
    2368:	82 e0       	ldi	r24, 0x02	; 2
    236a:	05 c0       	rjmp	.+10     	; 0x2376 <_receive_data+0x70>
                     break;
     			case (unsigned char)ACK:
					 command_length = 4;
    236c:	84 e0       	ldi	r24, 0x04	; 4
    236e:	03 c0       	rjmp	.+6      	; 0x2376 <_receive_data+0x70>
                     break;
				case (unsigned char)SetTCT:                
                     command_length = 5;
    2370:	85 e0       	ldi	r24, 0x05	; 5
    2372:	01 c0       	rjmp	.+2      	; 0x2376 <_receive_data+0x70>
                     break;
                case (unsigned char)SetCalibrationValues:
				case (unsigned char)SetBatteryCalibration:
                      command_length = 10;                                                              
    2374:	8a e0       	ldi	r24, 0x0A	; 10
    2376:	80 93 38 01 	sts	0x0138, r24
                      break;                                                          
    		}
    		command_counter = 1;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	80 93 37 01 	sts	0x0137, r24
    		command_timer = 0;
    2380:	10 92 3a 01 	sts	0x013A, r1
    2384:	10 92 39 01 	sts	0x0139, r1
    		processed_counter = 0;                                            
    2388:	10 92 3b 01 	sts	0x013B, r1
    		address = 0xffff;
    238c:	8f ef       	ldi	r24, 0xFF	; 255
    238e:	9f ef       	ldi	r25, 0xFF	; 255
    2390:	90 93 05 01 	sts	0x0105, r25
    2394:	80 93 04 01 	sts	0x0104, r24
    		response_length = 0;
    2398:	10 92 3c 01 	sts	0x013C, r1
		}
	}

	// increment timer as long as the command is still being received
    if (command_counter > 0)
    239c:	60 91 37 01 	lds	r22, 0x0137
    23a0:	66 23       	and	r22, r22
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <_receive_data+0xa0>
    23a4:	b5 c5       	rjmp	.+2922   	; 0x2f10 <_receive_data+0xc0a>
		command_timer++;
    23a6:	80 91 39 01 	lds	r24, 0x0139
    23aa:	90 91 3a 01 	lds	r25, 0x013A
    23ae:	01 96       	adiw	r24, 0x01	; 1
    23b0:	90 93 3a 01 	sts	0x013A, r25
    23b4:	80 93 39 01 	sts	0x0139, r24

 	//if all command is received, start processing it
    if ((command_counter > 0) && (command_counter == command_length))
    23b8:	80 91 38 01 	lds	r24, 0x0138
    23bc:	68 17       	cp	r22, r24
    23be:	09 f0       	breq	.+2      	; 0x23c2 <_receive_data+0xbc>
    23c0:	a7 c5       	rjmp	.+2894   	; 0x2f10 <_receive_data+0xc0a>
    {                                       
            switch (opcode)
    23c2:	e0 91 86 38 	lds	r30, 0x3886
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	ef 31       	cpi	r30, 0x1F	; 31
    23ca:	f1 05       	cpc	r31, r1
    23cc:	08 f0       	brcs	.+2      	; 0x23d0 <_receive_data+0xca>
    23ce:	85 c5       	rjmp	.+2826   	; 0x2eda <_receive_data+0xbd4>
    23d0:	eb 59       	subi	r30, 0x9B	; 155
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	ee 0f       	add	r30, r30
    23d6:	ff 1f       	adc	r31, r31
    23d8:	05 90       	lpm	r0, Z+
    23da:	f4 91       	lpm	r31, Z+
    23dc:	e0 2d       	mov	r30, r0
    23de:	09 94       	ijmp
            {
				case (unsigned char) ACK:																
					kseq = rBuffer[1] & 0x7f;
    23e0:	80 91 90 38 	lds	r24, 0x3890
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	8f 77       	andi	r24, 0x7F	; 127
    23e8:	90 70       	andi	r25, 0x00	; 0
					kseq = kseq << 7 | (rBuffer[2] & 0x7f);
    23ea:	96 95       	lsr	r25
    23ec:	98 2f       	mov	r25, r24
    23ee:	88 27       	eor	r24, r24
    23f0:	97 95       	ror	r25
    23f2:	87 95       	ror	r24
    23f4:	20 91 91 38 	lds	r18, 0x3891
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	2f 77       	andi	r18, 0x7F	; 127
    23fc:	30 70       	andi	r19, 0x00	; 0
    23fe:	82 2b       	or	r24, r18
    2400:	93 2b       	or	r25, r19
					kseq = kseq << 2 | ((rBuffer[3] >> 5) & 0x03);
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	88 0f       	add	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	20 91 92 38 	lds	r18, 0x3892
    240e:	22 95       	swap	r18
    2410:	26 95       	lsr	r18
    2412:	27 70       	andi	r18, 0x07	; 7
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	23 70       	andi	r18, 0x03	; 3
    2418:	30 70       	andi	r19, 0x00	; 0
    241a:	82 2b       	or	r24, r18
    241c:	93 2b       	or	r25, r19
					kseq ++;
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	90 93 1c 01 	sts	0x011C, r25
    2424:	80 93 1b 01 	sts	0x011B, r24
					if ( (kseq <= cseq) && ((kseq - sseq) < AC_BUFFER_SIZE) && ((kseq - sseq) > 0) ) {					
    2428:	20 91 17 01 	lds	r18, 0x0117
    242c:	30 91 18 01 	lds	r19, 0x0118
    2430:	28 17       	cp	r18, r24
    2432:	39 07       	cpc	r19, r25
    2434:	08 f4       	brcc	.+2      	; 0x2438 <_receive_data+0x132>
    2436:	75 c0       	rjmp	.+234    	; 0x2522 <_receive_data+0x21c>
    2438:	40 91 19 01 	lds	r20, 0x0119
    243c:	50 91 1a 01 	lds	r21, 0x011A
    2440:	fc 01       	movw	r30, r24
    2442:	e4 1b       	sub	r30, r20
    2444:	f5 0b       	sbc	r31, r21
    2446:	73 e0       	ldi	r23, 0x03	; 3
    2448:	e0 3c       	cpi	r30, 0xC0	; 192
    244a:	f7 07       	cpc	r31, r23
    244c:	08 f0       	brcs	.+2      	; 0x2450 <_receive_data+0x14a>
    244e:	69 c0       	rjmp	.+210    	; 0x2522 <_receive_data+0x21c>
    2450:	84 17       	cp	r24, r20
    2452:	95 07       	cpc	r25, r21
    2454:	09 f4       	brne	.+2      	; 0x2458 <_receive_data+0x152>
    2456:	65 c0       	rjmp	.+202    	; 0x2522 <_receive_data+0x21c>
						sseq = kseq;						
    2458:	90 93 1a 01 	sts	0x011A, r25
    245c:	80 93 19 01 	sts	0x0119, r24
						dseq = cseq - kseq;
    2460:	28 1b       	sub	r18, r24
    2462:	39 0b       	sbc	r19, r25
    2464:	30 93 1e 01 	sts	0x011E, r19
    2468:	20 93 1d 01 	sts	0x011D, r18
						if (dseq >= 0)
							si = ci - dseq;
    246c:	80 91 1f 01 	lds	r24, 0x011F
    2470:	90 91 20 01 	lds	r25, 0x0120
    2474:	82 1b       	sub	r24, r18
    2476:	93 0b       	sbc	r25, r19
    2478:	90 93 22 01 	sts	0x0122, r25
    247c:	80 93 21 01 	sts	0x0121, r24
    2480:	50 c0       	rjmp	.+160    	; 0x2522 <_receive_data+0x21c>
					break;	

		        //This command calibrates the wocket sampling rate by determining how much off it is from the 
				//_SAMPLING_RATE by counting timer interrupts and using that value to adjust the sampling rate.
			    case (unsigned char) SetTCT:  
			   		_wTCNT2 = m_SET_TCT (rBuffer[1], rBuffer[2]);
    2482:	20 91 91 38 	lds	r18, 0x3891
    2486:	62 2f       	mov	r22, r18
    2488:	62 95       	swap	r22
    248a:	66 95       	lsr	r22
    248c:	66 95       	lsr	r22
    248e:	61 70       	andi	r22, 0x01	; 1
    2490:	80 91 90 38 	lds	r24, 0x3890
    2494:	88 0f       	add	r24, r24
    2496:	68 2b       	or	r22, r24
    2498:	60 93 4c 01 	sts	0x014C, r22
					_wTCNT2_reps = m_SET_TCTREPS (rBuffer[2], rBuffer[3]);
    249c:	90 91 92 38 	lds	r25, 0x3892
    24a0:	89 2f       	mov	r24, r25
    24a2:	82 95       	swap	r24
    24a4:	86 95       	lsr	r24
    24a6:	83 70       	andi	r24, 0x03	; 3
    24a8:	22 0f       	add	r18, r18
    24aa:	22 0f       	add	r18, r18
    24ac:	82 2b       	or	r24, r18
    24ae:	80 93 07 01 	sts	0x0107, r24
					_wTCNT2_last = m_SET_TCTLAST (rBuffer[3], rBuffer[4]);
    24b2:	80 91 93 38 	lds	r24, 0x3893
    24b6:	82 95       	swap	r24
    24b8:	87 70       	andi	r24, 0x07	; 7
    24ba:	99 0f       	add	r25, r25
    24bc:	99 0f       	add	r25, r25
    24be:	99 0f       	add	r25, r25
    24c0:	89 2b       	or	r24, r25
    24c2:	80 93 4d 01 	sts	0x014D, r24
					eeprom_write_byte (&_NV_TCT, _wTCNT2);
    24c6:	83 e0       	ldi	r24, 0x03	; 3
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
					eeprom_write_byte (&_NV_TCTREPS, _wTCNT2_reps);
    24ce:	84 e0       	ldi	r24, 0x04	; 4
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	60 91 07 01 	lds	r22, 0x0107
    24d6:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
					eeprom_write_byte (&_NV_TCTLAST, _wTCNT2_last);
    24da:	85 e0       	ldi	r24, 0x05	; 5
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	60 91 4d 01 	lds	r22, 0x014D
    24e2:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
					processed_counter = command_counter;
    24e6:	80 91 37 01 	lds	r24, 0x0137
    24ea:	80 93 3b 01 	sts	0x013B, r24
					_yellowled_turn_on();	
    24ee:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_yellowled_turn_on>
    24f2:	8f ef       	ldi	r24, 0xFF	; 255
    24f4:	94 e3       	ldi	r25, 0x34	; 52
    24f6:	ac e0       	ldi	r26, 0x0C	; 12
    24f8:	81 50       	subi	r24, 0x01	; 1
    24fa:	90 40       	sbci	r25, 0x00	; 0
    24fc:	a0 40       	sbci	r26, 0x00	; 0
    24fe:	e1 f7       	brne	.-8      	; 0x24f8 <_receive_data+0x1f2>
    2500:	00 c0       	rjmp	.+0      	; 0x2502 <_receive_data+0x1fc>
    2502:	00 00       	nop
					_delay_ms(500);						
					_yellowled_turn_off(); 
    2504:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <_yellowled_turn_off>
    2508:	8f ef       	ldi	r24, 0xFF	; 255
    250a:	94 e3       	ldi	r25, 0x34	; 52
    250c:	ac e0       	ldi	r26, 0x0C	; 12
    250e:	81 50       	subi	r24, 0x01	; 1
    2510:	90 40       	sbci	r25, 0x00	; 0
    2512:	a0 40       	sbci	r26, 0x00	; 0
    2514:	e1 f7       	brne	.-8      	; 0x250e <_receive_data+0x208>
    2516:	00 c0       	rjmp	.+0      	; 0x2518 <_receive_data+0x212>
    2518:	00 00       	nop
    251a:	df c4       	rjmp	.+2494   	; 0x2eda <_receive_data+0xbd4>
					_delay_ms(500);
					break;

                case (unsigned char)PausePacket:                                                      
                    paused = 1;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	80 93 3d 01 	sts	0x013D, r24
                    processed_counter = command_counter;                                                      
    2522:	60 93 3b 01 	sts	0x013B, r22
                    break;
    2526:	d9 c4       	rjmp	.+2482   	; 0x2eda <_receive_data+0xbd4>

                case (unsigned char)ResumePacket:                                                     
                    paused = 0;
    2528:	10 92 3d 01 	sts	0x013D, r1
    252c:	fa cf       	rjmp	.-12     	; 0x2522 <_receive_data+0x21c>
                    processed_counter = command_counter;                                                      
                    break;

                //reset alive timer if it is alive
                case (unsigned char)Alive:                                                      
                    alive_timer = 0;
    252e:	10 92 3f 01 	sts	0x013F, r1
    2532:	10 92 3e 01 	sts	0x013E, r1
    2536:	f5 cf       	rjmp	.-22     	; 0x2522 <_receive_data+0x21c>
                    processed_counter = command_counter;		
                    break;

            	case (unsigned char) GetBatteryLevel: 
                    word = _atmega_a2dConvert10bit(ADC7);
    2538:	87 e0       	ldi	r24, 0x07	; 7
    253a:	0e 94 4e 0a 	call	0x149c	; 0x149c <_atmega_a2dConvert10bit>
    253e:	90 93 41 01 	sts	0x0141, r25
    2542:	80 93 40 01 	sts	0x0140, r24
                    aBuffer[0] = m_BL_RSP_BYTE0;
    2546:	20 ec       	ldi	r18, 0xC0	; 192
    2548:	20 93 99 38 	sts	0x3899, r18
                    aBuffer[1] = m_BL_RSP_BYTE1(word);
    254c:	9c 01       	movw	r18, r24
    254e:	13 e0       	ldi	r17, 0x03	; 3
    2550:	36 95       	lsr	r19
    2552:	27 95       	ror	r18
    2554:	1a 95       	dec	r17
    2556:	e1 f7       	brne	.-8      	; 0x2550 <_receive_data+0x24a>
    2558:	20 93 9a 38 	sts	0x389A, r18
                    aBuffer[2] = m_BL_RSP_BYTE2(word);
    255c:	87 70       	andi	r24, 0x07	; 7
    255e:	82 95       	swap	r24
    2560:	80 7f       	andi	r24, 0xF0	; 240
    2562:	80 93 9b 38 	sts	0x389B, r24
                    processed_counter = command_counter;
    2566:	80 91 37 01 	lds	r24, 0x0137
    256a:	80 93 3b 01 	sts	0x013B, r24
                    response_length = 3;		                                                                          
    256e:	83 e0       	ldi	r24, 0x03	; 3
    2570:	a4 c4       	rjmp	.+2376   	; 0x2eba <_receive_data+0xbb4>
                    break;	
						
            	case (unsigned char) GetSensorSentivity:           			  
                    aBuffer[0] = m_SENS_RSP_BYTE0;
    2572:	83 ec       	ldi	r24, 0xC3	; 195
    2574:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_SENS_RSP_BYTE1(_wSENS);                       
    2578:	80 91 08 01 	lds	r24, 0x0108
    257c:	41 c1       	rjmp	.+642    	; 0x2800 <_receive_data+0x4fa>
                    processed_counter = command_counter;
                    response_length = 2;		                                                                          
                    break;
						
				case (unsigned char) SetSensorSentivity:           			  
                    _wSENS = m_SET_SEN(rBuffer[1]);
    257e:	60 91 90 38 	lds	r22, 0x3890
    2582:	66 95       	lsr	r22
    2584:	66 95       	lsr	r22
    2586:	66 95       	lsr	r22
    2588:	67 70       	andi	r22, 0x07	; 7
    258a:	60 93 08 01 	sts	0x0108, r22
					eeprom_write_byte(&_NV_SENS, _wSENS);                       
    258e:	88 e0       	ldi	r24, 0x08	; 8
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9d c4       	rjmp	.+2362   	; 0x2ece <_receive_data+0xbc8>
                    processed_counter = command_counter;                                                                 
                    break;

            	case (unsigned char) GetBatteryPercent: 				
                    word = _atmega_a2dConvert10bit(ADC7);								  
    2594:	87 e0       	ldi	r24, 0x07	; 7
    2596:	0e 94 4e 0a 	call	0x149c	; 0x149c <_atmega_a2dConvert10bit>
					if (word > _wBTCAL100) // Calculate the battery percent
    259a:	60 91 7b 38 	lds	r22, 0x387B
    259e:	70 91 7c 38 	lds	r23, 0x387C
    25a2:	68 17       	cp	r22, r24
    25a4:	79 07       	cpc	r23, r25
    25a6:	38 f4       	brcc	.+14     	; 0x25b6 <_receive_data+0x2b0>
						word = 100;
    25a8:	84 e6       	ldi	r24, 0x64	; 100
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	90 93 41 01 	sts	0x0141, r25
    25b0:	80 93 40 01 	sts	0x0140, r24
    25b4:	8f c0       	rjmp	.+286    	; 0x26d4 <_receive_data+0x3ce>
					else if (word > _wBTCAL80)
    25b6:	40 91 8a 38 	lds	r20, 0x388A
    25ba:	50 91 8b 38 	lds	r21, 0x388B
    25be:	48 17       	cp	r20, r24
    25c0:	59 07       	cpc	r21, r25
    25c2:	98 f4       	brcc	.+38     	; 0x25ea <_receive_data+0x2e4>
						word = 80 + ((word - _wBTCAL80) * 20) / (_wBTCAL100 - _wBTCAL80);
    25c4:	fc 01       	movw	r30, r24
    25c6:	e4 1b       	sub	r30, r20
    25c8:	f5 0b       	sbc	r31, r21
    25ca:	24 e1       	ldi	r18, 0x14	; 20
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	e2 9f       	mul	r30, r18
    25d0:	c0 01       	movw	r24, r0
    25d2:	e3 9f       	mul	r30, r19
    25d4:	90 0d       	add	r25, r0
    25d6:	f2 9f       	mul	r31, r18
    25d8:	90 0d       	add	r25, r0
    25da:	11 24       	eor	r1, r1
    25dc:	64 1b       	sub	r22, r20
    25de:	75 0b       	sbc	r23, r21
    25e0:	0e 94 44 18 	call	0x3088	; 0x3088 <__udivmodhi4>
    25e4:	60 5b       	subi	r22, 0xB0	; 176
    25e6:	7f 4f       	sbci	r23, 0xFF	; 255
    25e8:	1a c0       	rjmp	.+52     	; 0x261e <_receive_data+0x318>
					else if (word > _wBTCAL60)
    25ea:	20 91 83 38 	lds	r18, 0x3883
    25ee:	30 91 84 38 	lds	r19, 0x3884
    25f2:	28 17       	cp	r18, r24
    25f4:	39 07       	cpc	r19, r25
    25f6:	c0 f4       	brcc	.+48     	; 0x2628 <_receive_data+0x322>
						word = 60 + ((word - _wBTCAL60) * 20) / (_wBTCAL80  - _wBTCAL60);
    25f8:	fc 01       	movw	r30, r24
    25fa:	e2 1b       	sub	r30, r18
    25fc:	f3 0b       	sbc	r31, r19
    25fe:	64 e1       	ldi	r22, 0x14	; 20
    2600:	70 e0       	ldi	r23, 0x00	; 0
    2602:	e6 9f       	mul	r30, r22
    2604:	c0 01       	movw	r24, r0
    2606:	e7 9f       	mul	r30, r23
    2608:	90 0d       	add	r25, r0
    260a:	f6 9f       	mul	r31, r22
    260c:	90 0d       	add	r25, r0
    260e:	11 24       	eor	r1, r1
    2610:	ba 01       	movw	r22, r20
    2612:	62 1b       	sub	r22, r18
    2614:	73 0b       	sbc	r23, r19
    2616:	0e 94 44 18 	call	0x3088	; 0x3088 <__udivmodhi4>
    261a:	64 5c       	subi	r22, 0xC4	; 196
    261c:	7f 4f       	sbci	r23, 0xFF	; 255
    261e:	70 93 41 01 	sts	0x0141, r23
    2622:	60 93 40 01 	sts	0x0140, r22
    2626:	56 c0       	rjmp	.+172    	; 0x26d4 <_receive_data+0x3ce>
					else if (word > _wBTCAL40)
    2628:	40 91 81 38 	lds	r20, 0x3881
    262c:	50 91 82 38 	lds	r21, 0x3882
    2630:	48 17       	cp	r20, r24
    2632:	59 07       	cpc	r21, r25
    2634:	a0 f4       	brcc	.+40     	; 0x265e <_receive_data+0x358>
						word = 40 + ((word - _wBTCAL40) * 20) / (_wBTCAL60  - _wBTCAL40);
    2636:	fc 01       	movw	r30, r24
    2638:	e4 1b       	sub	r30, r20
    263a:	f5 0b       	sbc	r31, r21
    263c:	64 e1       	ldi	r22, 0x14	; 20
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	e6 9f       	mul	r30, r22
    2642:	c0 01       	movw	r24, r0
    2644:	e7 9f       	mul	r30, r23
    2646:	90 0d       	add	r25, r0
    2648:	f6 9f       	mul	r31, r22
    264a:	90 0d       	add	r25, r0
    264c:	11 24       	eor	r1, r1
    264e:	b9 01       	movw	r22, r18
    2650:	64 1b       	sub	r22, r20
    2652:	75 0b       	sbc	r23, r21
    2654:	0e 94 44 18 	call	0x3088	; 0x3088 <__udivmodhi4>
    2658:	68 5d       	subi	r22, 0xD8	; 216
    265a:	7f 4f       	sbci	r23, 0xFF	; 255
    265c:	e0 cf       	rjmp	.-64     	; 0x261e <_receive_data+0x318>
					else if (word > _wBTCAL20)
    265e:	20 91 77 38 	lds	r18, 0x3877
    2662:	30 91 78 38 	lds	r19, 0x3878
    2666:	28 17       	cp	r18, r24
    2668:	39 07       	cpc	r19, r25
    266a:	a0 f4       	brcc	.+40     	; 0x2694 <_receive_data+0x38e>
						word = 20 + ((word - _wBTCAL20) * 20) / (_wBTCAL40  - _wBTCAL20);
    266c:	fc 01       	movw	r30, r24
    266e:	e2 1b       	sub	r30, r18
    2670:	f3 0b       	sbc	r31, r19
    2672:	64 e1       	ldi	r22, 0x14	; 20
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	e6 9f       	mul	r30, r22
    2678:	c0 01       	movw	r24, r0
    267a:	e7 9f       	mul	r30, r23
    267c:	90 0d       	add	r25, r0
    267e:	f6 9f       	mul	r31, r22
    2680:	90 0d       	add	r25, r0
    2682:	11 24       	eor	r1, r1
    2684:	ba 01       	movw	r22, r20
    2686:	62 1b       	sub	r22, r18
    2688:	73 0b       	sbc	r23, r19
    268a:	0e 94 44 18 	call	0x3088	; 0x3088 <__udivmodhi4>
    268e:	6c 5e       	subi	r22, 0xEC	; 236
    2690:	7f 4f       	sbci	r23, 0xFF	; 255
    2692:	c5 cf       	rjmp	.-118    	; 0x261e <_receive_data+0x318>
					else if (word > _wBTCAL10)
    2694:	40 91 87 38 	lds	r20, 0x3887
    2698:	50 91 88 38 	lds	r21, 0x3888
    269c:	48 17       	cp	r20, r24
    269e:	59 07       	cpc	r21, r25
    26a0:	a8 f4       	brcc	.+42     	; 0x26cc <_receive_data+0x3c6>
						word = 10 + ((word - _wBTCAL10) * 10) / (_wBTCAL20  - _wBTCAL10);
    26a2:	bc 01       	movw	r22, r24
    26a4:	64 1b       	sub	r22, r20
    26a6:	75 0b       	sbc	r23, r21
    26a8:	cb 01       	movw	r24, r22
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	a3 e0       	ldi	r26, 0x03	; 3
    26b0:	66 0f       	add	r22, r22
    26b2:	77 1f       	adc	r23, r23
    26b4:	aa 95       	dec	r26
    26b6:	e1 f7       	brne	.-8      	; 0x26b0 <_receive_data+0x3aa>
    26b8:	86 0f       	add	r24, r22
    26ba:	97 1f       	adc	r25, r23
    26bc:	b9 01       	movw	r22, r18
    26be:	64 1b       	sub	r22, r20
    26c0:	75 0b       	sbc	r23, r21
    26c2:	0e 94 44 18 	call	0x3088	; 0x3088 <__udivmodhi4>
    26c6:	66 5f       	subi	r22, 0xF6	; 246
    26c8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ca:	a9 cf       	rjmp	.-174    	; 0x261e <_receive_data+0x318>
					else
						word = 0;
    26cc:	10 92 41 01 	sts	0x0141, r1
    26d0:	10 92 40 01 	sts	0x0140, r1

                    aBuffer[0] = m_BP_RSP_BYTE0;
    26d4:	81 ec       	ldi	r24, 0xC1	; 193
    26d6:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_BP_RSP_BYTE1(word);
    26da:	80 91 40 01 	lds	r24, 0x0140
    26de:	8f 77       	andi	r24, 0x7F	; 127
    26e0:	80 93 9a 38 	sts	0x389A, r24
                    processed_counter = command_counter;
    26e4:	80 91 37 01 	lds	r24, 0x0137
    26e8:	80 93 3b 01 	sts	0x013B, r24
    26ec:	e5 c3       	rjmp	.+1994   	; 0x2eb8 <_receive_data+0xbb2>
                    response_length = 2;		                                                                          
                    break;
			   
			   case (unsigned char) GetPowerDownTimer:  
			   		aBuffer[0] = m_PDT_RSP_BYTE0;
    26ee:	87 ec       	ldi	r24, 0xC7	; 199
    26f0:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_PDT_RSP_BYTE1(_wPDT);
    26f4:	80 91 85 38 	lds	r24, 0x3885
    26f8:	da c3       	rjmp	.+1972   	; 0x2eae <_receive_data+0xba8>
					processed_counter = command_counter;
					response_length = 2;
					break;	
							
               case (unsigned char) SetPowerDownTimer:  
			   		_wPDT = m_SET_PDT(rBuffer[1]);
    26fa:	60 91 90 38 	lds	r22, 0x3890
    26fe:	6f 77       	andi	r22, 0x7F	; 127
    2700:	60 93 85 38 	sts	0x3885, r22
					eeprom_write_byte(&_NV_PDT, _wPDT);
    2704:	81 e2       	ldi	r24, 0x21	; 33
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	e2 c3       	rjmp	.+1988   	; 0x2ece <_receive_data+0xbc8>
					processed_counter = command_counter;
					break;
																									
               case (unsigned char) GetSamplingRate:  
			   		aBuffer[0] = m_SR_RSP_BYTE0;
    270a:	85 ec       	ldi	r24, 0xC5	; 197
    270c:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_SR_RSP_BYTE1(_SAMPLING_RATE);
    2710:	80 91 06 01 	lds	r24, 0x0106
    2714:	cc c3       	rjmp	.+1944   	; 0x2eae <_receive_data+0xba8>
					processed_counter = command_counter;
					response_length = 2;
					break;

               case (unsigned char) GetPacketCount:  
			   		aBuffer[0] = m_PC_RSP_BYTE0;
    2716:	82 ec       	ldi	r24, 0xC2	; 194
    2718:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_PC_RSP_BYTE1(_wPC);
    271c:	80 91 4f 01 	lds	r24, 0x014F
    2720:	90 91 50 01 	lds	r25, 0x0150
    2724:	a0 91 51 01 	lds	r26, 0x0151
    2728:	b0 91 52 01 	lds	r27, 0x0152
    272c:	9c 01       	movw	r18, r24
    272e:	ad 01       	movw	r20, r26
    2730:	f9 e1       	ldi	r31, 0x19	; 25
    2732:	56 95       	lsr	r21
    2734:	47 95       	ror	r20
    2736:	37 95       	ror	r19
    2738:	27 95       	ror	r18
    273a:	fa 95       	dec	r31
    273c:	d1 f7       	brne	.-12     	; 0x2732 <_receive_data+0x42c>
    273e:	20 93 9a 38 	sts	0x389A, r18
					aBuffer[2] = m_PC_RSP_BYTE2(_wPC);
    2742:	9c 01       	movw	r18, r24
    2744:	ad 01       	movw	r20, r26
    2746:	e2 e1       	ldi	r30, 0x12	; 18
    2748:	56 95       	lsr	r21
    274a:	47 95       	ror	r20
    274c:	37 95       	ror	r19
    274e:	27 95       	ror	r18
    2750:	ea 95       	dec	r30
    2752:	d1 f7       	brne	.-12     	; 0x2748 <_receive_data+0x442>
    2754:	2f 77       	andi	r18, 0x7F	; 127
    2756:	20 93 9b 38 	sts	0x389B, r18
                    aBuffer[3] = m_PC_RSP_BYTE3(_wPC);
    275a:	9c 01       	movw	r18, r24
    275c:	ad 01       	movw	r20, r26
    275e:	7b e0       	ldi	r23, 0x0B	; 11
    2760:	56 95       	lsr	r21
    2762:	47 95       	ror	r20
    2764:	37 95       	ror	r19
    2766:	27 95       	ror	r18
    2768:	7a 95       	dec	r23
    276a:	d1 f7       	brne	.-12     	; 0x2760 <_receive_data+0x45a>
    276c:	2f 77       	andi	r18, 0x7F	; 127
    276e:	20 93 9c 38 	sts	0x389C, r18
					aBuffer[4] = m_PC_RSP_BYTE4(_wPC);
    2772:	9c 01       	movw	r18, r24
    2774:	ad 01       	movw	r20, r26
    2776:	04 e0       	ldi	r16, 0x04	; 4
    2778:	56 95       	lsr	r21
    277a:	47 95       	ror	r20
    277c:	37 95       	ror	r19
    277e:	27 95       	ror	r18
    2780:	0a 95       	dec	r16
    2782:	d1 f7       	brne	.-12     	; 0x2778 <_receive_data+0x472>
    2784:	2f 77       	andi	r18, 0x7F	; 127
    2786:	20 93 9d 38 	sts	0x389D, r18
                    aBuffer[5] = m_PC_RSP_BYTE5(_wPC);
    278a:	8f 70       	andi	r24, 0x0F	; 15
    278c:	88 0f       	add	r24, r24
    278e:	88 0f       	add	r24, r24
    2790:	88 0f       	add	r24, r24
    2792:	80 93 9e 38 	sts	0x389E, r24
					processed_counter = command_counter;
    2796:	60 93 3b 01 	sts	0x013B, r22
					response_length = 6;
    279a:	86 e0       	ldi	r24, 0x06	; 6
    279c:	8e c3       	rjmp	.+1820   	; 0x2eba <_receive_data+0xbb4>
					break;

               case (unsigned char) SetSamplingRate:  
			   		_SAMPLING_RATE = m_SET_SR(rBuffer[1]);
    279e:	80 91 90 38 	lds	r24, 0x3890
    27a2:	8f 77       	andi	r24, 0x7F	; 127
    27a4:	80 93 06 01 	sts	0x0106, r24
					if (_SAMPLING_RATE > _MAX_SAMPLING_RATE)
    27a8:	90 91 5f 01 	lds	r25, 0x015F
    27ac:	98 17       	cp	r25, r24
    27ae:	10 f4       	brcc	.+4      	; 0x27b4 <_receive_data+0x4ae>
					{
						_SAMPLING_RATE = _MAX_SAMPLING_RATE;		
    27b0:	90 93 06 01 	sts	0x0106, r25
					}
					if (_SAMPLING_RATE < _MIN_SAMPLING_RATE)
    27b4:	80 91 0b 01 	lds	r24, 0x010B
    27b8:	90 91 06 01 	lds	r25, 0x0106
    27bc:	98 17       	cp	r25, r24
    27be:	10 f4       	brcc	.+4      	; 0x27c4 <_receive_data+0x4be>
					{
						_SAMPLING_RATE = _MIN_SAMPLING_RATE;		
    27c0:	80 93 06 01 	sts	0x0106, r24
					}
					_wocket_initialize_timer2_interrupt();
    27c4:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_wocket_initialize_timer2_interrupt>
					eeprom_write_byte(&_NV_SAMPLING_RATE, _SAMPLING_RATE);
    27c8:	82 e0       	ldi	r24, 0x02	; 2
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	60 91 06 01 	lds	r22, 0x0106
    27d0:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
					eeprom_write_byte(&_NV_TCT, _wTCNT2);
    27d4:	83 e0       	ldi	r24, 0x03	; 3
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	60 91 4c 01 	lds	r22, 0x014C
    27dc:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
					eeprom_write_byte(&_NV_TCTREPS, _wTCNT2_reps);
    27e0:	84 e0       	ldi	r24, 0x04	; 4
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	60 91 07 01 	lds	r22, 0x0107
    27e8:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
					eeprom_write_byte(&_NV_TCTLAST, _wTCNT2_last);
    27ec:	85 e0       	ldi	r24, 0x05	; 5
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	60 91 4d 01 	lds	r22, 0x014D
    27f4:	6c c3       	rjmp	.+1752   	; 0x2ece <_receive_data+0xbc8>
					processed_counter = command_counter;
					break;

 			   case (unsigned char) GetRadioTransmissionMode:  
			   		aBuffer[0] = m_TM_RSP_BYTE0;
    27f6:	81 ed       	ldi	r24, 0xD1	; 209
    27f8:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_TM_RSP_BYTE1(_TM);
    27fc:	80 91 8c 38 	lds	r24, 0x388C
    2800:	87 70       	andi	r24, 0x07	; 7
    2802:	82 95       	swap	r24
    2804:	80 7f       	andi	r24, 0xF0	; 240
    2806:	54 c3       	rjmp	.+1704   	; 0x2eb0 <_receive_data+0xbaa>
					processed_counter = command_counter;
					response_length = 2;
					break;

               case (unsigned char) SetRadioTransmissionMode:  
			   		_TM = m_SET_TM(rBuffer[1]);
    2808:	60 91 90 38 	lds	r22, 0x3890
    280c:	62 95       	swap	r22
    280e:	67 70       	andi	r22, 0x07	; 7
    2810:	60 93 8c 38 	sts	0x388C, r22
					eeprom_write_byte(&_NV_TM, _TM);
    2814:	86 e0       	ldi	r24, 0x06	; 6
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	5a c3       	rjmp	.+1716   	; 0x2ece <_receive_data+0xbc8>
					processed_counter = command_counter;
					break;

			   case (unsigned char) GetWocketTransmissionMode:  
			   		aBuffer[0] = m_WTM_RSP_BYTE0;
    281a:	88 ec       	ldi	r24, 0xC8	; 200
    281c:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_WTM_RSP_BYTE1(_wTM);
    2820:	80 91 4e 01 	lds	r24, 0x014E
    2824:	ed cf       	rjmp	.-38     	; 0x2800 <_receive_data+0x4fa>
					processed_counter = command_counter;
					response_length = 2;
					break;

               case (unsigned char) SetWocketTransmissionMode:  
			   		_wTM = m_SET_WTM(rBuffer[1]);
    2826:	60 91 90 38 	lds	r22, 0x3890
    282a:	62 95       	swap	r22
    282c:	67 70       	andi	r22, 0x07	; 7
    282e:	60 93 4e 01 	sts	0x014E, r22
					eeprom_write_byte(&_NV_WTM, _wTM);
    2832:	87 e0       	ldi	r24, 0x07	; 7
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
					switch(_wTM)
    283a:	80 91 4e 01 	lds	r24, 0x014E
    283e:	82 30       	cpi	r24, 0x02	; 2
    2840:	91 f0       	breq	.+36     	; 0x2866 <_receive_data+0x560>
    2842:	83 30       	cpi	r24, 0x03	; 3
    2844:	30 f4       	brcc	.+12     	; 0x2852 <_receive_data+0x54c>
    2846:	88 23       	and	r24, r24
    2848:	51 f0       	breq	.+20     	; 0x285e <_receive_data+0x558>
    284a:	81 30       	cpi	r24, 0x01	; 1
    284c:	09 f0       	breq	.+2      	; 0x2850 <_receive_data+0x54a>
    284e:	41 c3       	rjmp	.+1666   	; 0x2ed2 <_receive_data+0xbcc>
    2850:	08 c0       	rjmp	.+16     	; 0x2862 <_receive_data+0x55c>
    2852:	83 30       	cpi	r24, 0x03	; 3
    2854:	51 f0       	breq	.+20     	; 0x286a <_receive_data+0x564>
    2856:	84 30       	cpi	r24, 0x04	; 4
    2858:	09 f0       	breq	.+2      	; 0x285c <_receive_data+0x556>
    285a:	3b c3       	rjmp	.+1654   	; 0x2ed2 <_receive_data+0xbcc>
    285c:	08 c0       	rjmp	.+16     	; 0x286e <_receive_data+0x568>
					{
						case _WTM_Continuous:	
							_MAX_SAMPLING_RATE = 126; //This limitation is due to the definition of SEND_SR  and GET_SR commands
    285e:	8e e7       	ldi	r24, 0x7E	; 126
    2860:	07 c0       	rjmp	.+14     	; 0x2870 <_receive_data+0x56a>
							break;					  // The MCU provided in wocket able to sample at higher rates 							
						case _WTM_Burst_30:    	//a transfer mode that send the burst every 30 secs
							_MAX_SAMPLING_RATE = 80;		
    2862:	80 e5       	ldi	r24, 0x50	; 80
    2864:	05 c0       	rjmp	.+10     	; 0x2870 <_receive_data+0x56a>
							break;
						case _WTM_Burst_60:		//a transfer mode that send the burst every 60 secs
							_MAX_SAMPLING_RATE = 40;		
    2866:	88 e2       	ldi	r24, 0x28	; 40
    2868:	03 c0       	rjmp	.+6      	; 0x2870 <_receive_data+0x56a>
							break;
						case _WTM_Burst_90:		//a transfer mode that send the burst every 90 secs
							_MAX_SAMPLING_RATE = 30;		
    286a:	8e e1       	ldi	r24, 0x1E	; 30
    286c:	01 c0       	rjmp	.+2      	; 0x2870 <_receive_data+0x56a>
							break;
						case _WTM_Burst_120:	//a transfer mode that send the burst every 120 secs
							_MAX_SAMPLING_RATE = 20;		
    286e:	84 e1       	ldi	r24, 0x14	; 20
    2870:	80 93 5f 01 	sts	0x015F, r24
    2874:	2e c3       	rjmp	.+1628   	; 0x2ed2 <_receive_data+0xbcc>
					}						
					processed_counter = command_counter;
					break;

               case (unsigned char) SetCalibrationValues:                                                                    
                    if (eeprom_is_ready())
    2876:	f9 99       	sbic	0x1f, 1	; 31
    2878:	30 c3       	rjmp	.+1632   	; 0x2eda <_receive_data+0xbd4>
                    {                                    
                        if (_atmega_a2dConvert10bit(ADC7) < 600)
    287a:	87 e0       	ldi	r24, 0x07	; 7
    287c:	0e 94 4e 0a 	call	0x149c	; 0x149c <_atmega_a2dConvert10bit>
    2880:	a2 e0       	ldi	r26, 0x02	; 2
    2882:	88 35       	cpi	r24, 0x58	; 88
    2884:	9a 07       	cpc	r25, r26
    2886:	08 f4       	brcc	.+2      	; 0x288a <_receive_data+0x584>
    2888:	28 c3       	rjmp	.+1616   	; 0x2eda <_receive_data+0xbd4>
                                break;
                        else
                        {   
							_wX1G_CAL  = m_SET_CAL_x1g(rBuffer[1], rBuffer[2]);
    288a:	60 91 91 38 	lds	r22, 0x3891
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	60 77       	andi	r22, 0x70	; 112
    2892:	70 70       	andi	r23, 0x00	; 0
    2894:	14 e0       	ldi	r17, 0x04	; 4
    2896:	76 95       	lsr	r23
    2898:	67 95       	ror	r22
    289a:	1a 95       	dec	r17
    289c:	e1 f7       	brne	.-8      	; 0x2896 <_receive_data+0x590>
    289e:	80 91 90 38 	lds	r24, 0x3890
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	8f 77       	andi	r24, 0x7F	; 127
    28a6:	90 70       	andi	r25, 0x00	; 0
    28a8:	b3 e0       	ldi	r27, 0x03	; 3
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	ba 95       	dec	r27
    28b0:	e1 f7       	brne	.-8      	; 0x28aa <_receive_data+0x5a4>
    28b2:	68 2b       	or	r22, r24
    28b4:	79 2b       	or	r23, r25
    28b6:	70 93 74 38 	sts	0x3874, r23
    28ba:	60 93 73 38 	sts	0x3873, r22
							eeprom_write_word(&_NV_X1G_CAL,_wX1G_CAL);
    28be:	85 e1       	ldi	r24, 0x15	; 21
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
							_wXN1G_CAL = m_SET_CAL_xn1g(rBuffer[2], rBuffer[3]);
    28c6:	60 91 92 38 	lds	r22, 0x3892
    28ca:	70 e0       	ldi	r23, 0x00	; 0
    28cc:	6e 77       	andi	r22, 0x7E	; 126
    28ce:	70 70       	andi	r23, 0x00	; 0
    28d0:	76 95       	lsr	r23
    28d2:	67 95       	ror	r22
    28d4:	80 91 91 38 	lds	r24, 0x3891
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	8f 70       	andi	r24, 0x0F	; 15
    28dc:	90 70       	andi	r25, 0x00	; 0
    28de:	f6 e0       	ldi	r31, 0x06	; 6
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	fa 95       	dec	r31
    28e6:	e1 f7       	brne	.-8      	; 0x28e0 <_receive_data+0x5da>
    28e8:	68 2b       	or	r22, r24
    28ea:	79 2b       	or	r23, r25
    28ec:	70 93 76 38 	sts	0x3876, r23
    28f0:	60 93 75 38 	sts	0x3875, r22
							eeprom_write_word(&_NV_XN1G_CAL,_wXN1G_CAL);
    28f4:	87 e1       	ldi	r24, 0x17	; 23
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
							_wY1G_CAL  = m_SET_CAL_y1g(rBuffer[3], rBuffer[4], rBuffer[5]);
    28fc:	60 91 93 38 	lds	r22, 0x3893
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	6f 77       	andi	r22, 0x7F	; 127
    2904:	70 70       	andi	r23, 0x00	; 0
    2906:	66 0f       	add	r22, r22
    2908:	77 1f       	adc	r23, r23
    290a:	66 0f       	add	r22, r22
    290c:	77 1f       	adc	r23, r23
    290e:	80 91 92 38 	lds	r24, 0x3892
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	81 70       	andi	r24, 0x01	; 1
    2916:	90 70       	andi	r25, 0x00	; 0
    2918:	98 2f       	mov	r25, r24
    291a:	88 27       	eor	r24, r24
    291c:	99 0f       	add	r25, r25
    291e:	68 2b       	or	r22, r24
    2920:	79 2b       	or	r23, r25
    2922:	80 91 94 38 	lds	r24, 0x3894
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	80 76       	andi	r24, 0x60	; 96
    292a:	90 70       	andi	r25, 0x00	; 0
    292c:	45 e0       	ldi	r20, 0x05	; 5
    292e:	96 95       	lsr	r25
    2930:	87 95       	ror	r24
    2932:	4a 95       	dec	r20
    2934:	e1 f7       	brne	.-8      	; 0x292e <_receive_data+0x628>
    2936:	68 2b       	or	r22, r24
    2938:	79 2b       	or	r23, r25
    293a:	70 93 8e 38 	sts	0x388E, r23
    293e:	60 93 8d 38 	sts	0x388D, r22
							eeprom_write_word(&_NV_Y1G_CAL,_wY1G_CAL);
    2942:	89 e1       	ldi	r24, 0x19	; 25
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
							_wYN1G_CAL = m_SET_CAL_yn1g(rBuffer[5], rBuffer[6]);
    294a:	60 91 95 38 	lds	r22, 0x3895
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	6c 77       	andi	r22, 0x7C	; 124
    2952:	70 70       	andi	r23, 0x00	; 0
    2954:	76 95       	lsr	r23
    2956:	67 95       	ror	r22
    2958:	76 95       	lsr	r23
    295a:	67 95       	ror	r22
    295c:	80 91 94 38 	lds	r24, 0x3894
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	8f 71       	andi	r24, 0x1F	; 31
    2964:	90 70       	andi	r25, 0x00	; 0
    2966:	25 e0       	ldi	r18, 0x05	; 5
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	2a 95       	dec	r18
    296e:	e1 f7       	brne	.-8      	; 0x2968 <_receive_data+0x662>
    2970:	68 2b       	or	r22, r24
    2972:	79 2b       	or	r23, r25
    2974:	70 93 7a 38 	sts	0x387A, r23
    2978:	60 93 79 38 	sts	0x3879, r22
							eeprom_write_word(&_NV_YN1G_CAL, _wYN1G_CAL);
    297c:	8b e1       	ldi	r24, 0x1B	; 27
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
							_wZ1G_CAL  = m_SET_CAL_z1g(rBuffer[6], rBuffer[7], rBuffer[8]);
    2984:	60 91 96 38 	lds	r22, 0x3896
    2988:	70 e0       	ldi	r23, 0x00	; 0
    298a:	66 0f       	add	r22, r22
    298c:	77 1f       	adc	r23, r23
    298e:	70 70       	andi	r23, 0x00	; 0
    2990:	80 91 95 38 	lds	r24, 0x3895
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	83 70       	andi	r24, 0x03	; 3
    2998:	90 70       	andi	r25, 0x00	; 0
    299a:	98 2f       	mov	r25, r24
    299c:	88 27       	eor	r24, r24
    299e:	68 2b       	or	r22, r24
    29a0:	79 2b       	or	r23, r25
    29a2:	80 91 97 38 	lds	r24, 0x3897
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	80 74       	andi	r24, 0x40	; 64
    29aa:	90 70       	andi	r25, 0x00	; 0
    29ac:	b6 e0       	ldi	r27, 0x06	; 6
    29ae:	96 95       	lsr	r25
    29b0:	87 95       	ror	r24
    29b2:	ba 95       	dec	r27
    29b4:	e1 f7       	brne	.-8      	; 0x29ae <_receive_data+0x6a8>
    29b6:	68 2b       	or	r22, r24
    29b8:	79 2b       	or	r23, r25
    29ba:	70 93 80 38 	sts	0x3880, r23
    29be:	60 93 7f 38 	sts	0x387F, r22
							eeprom_write_word(&_NV_Z1G_CAL, _wZ1G_CAL);
    29c2:	8d e1       	ldi	r24, 0x1D	; 29
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
							_wZN1G_CAL = m_SET_CAL_zn1g(rBuffer[8], rBuffer[8]);
    29ca:	80 91 97 38 	lds	r24, 0x3897
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	bc 01       	movw	r22, r24
    29d2:	68 77       	andi	r22, 0x78	; 120
    29d4:	70 70       	andi	r23, 0x00	; 0
    29d6:	a3 e0       	ldi	r26, 0x03	; 3
    29d8:	76 95       	lsr	r23
    29da:	67 95       	ror	r22
    29dc:	aa 95       	dec	r26
    29de:	e1 f7       	brne	.-8      	; 0x29d8 <_receive_data+0x6d2>
    29e0:	8f 73       	andi	r24, 0x3F	; 63
    29e2:	90 70       	andi	r25, 0x00	; 0
    29e4:	f4 e0       	ldi	r31, 0x04	; 4
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	fa 95       	dec	r31
    29ec:	e1 f7       	brne	.-8      	; 0x29e6 <_receive_data+0x6e0>
    29ee:	68 2b       	or	r22, r24
    29f0:	79 2b       	or	r23, r25
    29f2:	70 93 7e 38 	sts	0x387E, r23
    29f6:	60 93 7d 38 	sts	0x387D, r22
							eeprom_write_word(&_NV_ZN1G_CAL, _wZN1G_CAL);
    29fa:	8f e1       	ldi	r24, 0x1F	; 31
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	a7 c1       	rjmp	.+846    	; 0x2d4e <_receive_data+0xa48>
                    }                                                                                                                       
                    //enable global interrupts
                    break;

                case (unsigned char) GetCalibrationValues:							                                                              
					aBuffer[0] = m_CAL_RSP_BYTE0;
    2a00:	84 ec       	ldi	r24, 0xC4	; 196
    2a02:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_CAL_RSP_BYTE1_x1g(_wX1G_CAL);                                                                   
    2a06:	80 91 73 38 	lds	r24, 0x3873
    2a0a:	90 91 74 38 	lds	r25, 0x3874
    2a0e:	9c 01       	movw	r18, r24
    2a10:	e3 e0       	ldi	r30, 0x03	; 3
    2a12:	36 95       	lsr	r19
    2a14:	27 95       	ror	r18
    2a16:	ea 95       	dec	r30
    2a18:	e1 f7       	brne	.-8      	; 0x2a12 <_receive_data+0x70c>
    2a1a:	2f 77       	andi	r18, 0x7F	; 127
    2a1c:	20 93 9a 38 	sts	0x389A, r18
                    aBuffer[2] = m_CAL_RSP_BYTE2_x1g(_wX1G_CAL);
					aBuffer[2]|= m_CAL_RSP_BYTE2_xn1g(_wXN1G_CAL);
    2a20:	20 91 75 38 	lds	r18, 0x3875
    2a24:	30 91 76 38 	lds	r19, 0x3876
    2a28:	a9 01       	movw	r20, r18
    2a2a:	76 e0       	ldi	r23, 0x06	; 6
    2a2c:	56 95       	lsr	r21
    2a2e:	47 95       	ror	r20
    2a30:	7a 95       	dec	r23
    2a32:	e1 f7       	brne	.-8      	; 0x2a2c <_receive_data+0x726>
    2a34:	4f 70       	andi	r20, 0x0F	; 15
                    break;

                case (unsigned char) GetCalibrationValues:							                                                              
					aBuffer[0] = m_CAL_RSP_BYTE0;
                    aBuffer[1] = m_CAL_RSP_BYTE1_x1g(_wX1G_CAL);                                                                   
                    aBuffer[2] = m_CAL_RSP_BYTE2_x1g(_wX1G_CAL);
    2a36:	82 95       	swap	r24
    2a38:	80 77       	andi	r24, 0x70	; 112
					aBuffer[2]|= m_CAL_RSP_BYTE2_xn1g(_wXN1G_CAL);
    2a3a:	48 2b       	or	r20, r24
    2a3c:	40 93 9b 38 	sts	0x389B, r20
                    aBuffer[3] = m_CAL_RSP_BYTE3_xn1g(_wXN1G_CAL);
					aBuffer[3]|= m_CAL_RSP_BYTE3_y1g(_wY1G_CAL);
    2a40:	80 91 8d 38 	lds	r24, 0x388D
    2a44:	90 91 8e 38 	lds	r25, 0x388E
    2a48:	49 2f       	mov	r20, r25
    2a4a:	46 95       	lsr	r20
    2a4c:	41 70       	andi	r20, 0x01	; 1
                case (unsigned char) GetCalibrationValues:							                                                              
					aBuffer[0] = m_CAL_RSP_BYTE0;
                    aBuffer[1] = m_CAL_RSP_BYTE1_x1g(_wX1G_CAL);                                                                   
                    aBuffer[2] = m_CAL_RSP_BYTE2_x1g(_wX1G_CAL);
					aBuffer[2]|= m_CAL_RSP_BYTE2_xn1g(_wXN1G_CAL);
                    aBuffer[3] = m_CAL_RSP_BYTE3_xn1g(_wXN1G_CAL);
    2a4e:	22 0f       	add	r18, r18
    2a50:	2e 77       	andi	r18, 0x7E	; 126
					aBuffer[3]|= m_CAL_RSP_BYTE3_y1g(_wY1G_CAL);
    2a52:	42 2b       	or	r20, r18
    2a54:	40 93 9c 38 	sts	0x389C, r20
                    aBuffer[4] = m_CAL_RSP_BYTE4_y1g(_wY1G_CAL);
    2a58:	9c 01       	movw	r18, r24
    2a5a:	36 95       	lsr	r19
    2a5c:	27 95       	ror	r18
    2a5e:	36 95       	lsr	r19
    2a60:	27 95       	ror	r18
    2a62:	2f 77       	andi	r18, 0x7F	; 127
    2a64:	20 93 9d 38 	sts	0x389D, r18
                    aBuffer[5] = m_CAL_RSP_BYTE5_y1g(_wY1G_CAL);
                    aBuffer[5]|= m_CAL_RSP_BYTE5_yn1g(_wYN1G_CAL);
    2a68:	20 91 79 38 	lds	r18, 0x3879
    2a6c:	30 91 7a 38 	lds	r19, 0x387A
    2a70:	a9 01       	movw	r20, r18
    2a72:	35 e0       	ldi	r19, 0x05	; 5
    2a74:	56 95       	lsr	r21
    2a76:	47 95       	ror	r20
    2a78:	3a 95       	dec	r19
    2a7a:	e1 f7       	brne	.-8      	; 0x2a74 <_receive_data+0x76e>
    2a7c:	4f 71       	andi	r20, 0x1F	; 31
                    aBuffer[2] = m_CAL_RSP_BYTE2_x1g(_wX1G_CAL);
					aBuffer[2]|= m_CAL_RSP_BYTE2_xn1g(_wXN1G_CAL);
                    aBuffer[3] = m_CAL_RSP_BYTE3_xn1g(_wXN1G_CAL);
					aBuffer[3]|= m_CAL_RSP_BYTE3_y1g(_wY1G_CAL);
                    aBuffer[4] = m_CAL_RSP_BYTE4_y1g(_wY1G_CAL);
                    aBuffer[5] = m_CAL_RSP_BYTE5_y1g(_wY1G_CAL);
    2a7e:	82 95       	swap	r24
    2a80:	88 0f       	add	r24, r24
    2a82:	80 76       	andi	r24, 0x60	; 96
                    aBuffer[5]|= m_CAL_RSP_BYTE5_yn1g(_wYN1G_CAL);
    2a84:	48 2b       	or	r20, r24
    2a86:	40 93 9e 38 	sts	0x389E, r20
                    aBuffer[6] = m_CAL_RSP_BYTE6_yn1g(_wYN1G_CAL);
					aBuffer[6]|= m_CAL_RSP_BYTE6_z1g(_wZ1G_CAL);
    2a8a:	80 91 7f 38 	lds	r24, 0x387F
    2a8e:	90 91 80 38 	lds	r25, 0x3880
    2a92:	49 2f       	mov	r20, r25
    2a94:	43 70       	andi	r20, 0x03	; 3
                    aBuffer[3] = m_CAL_RSP_BYTE3_xn1g(_wXN1G_CAL);
					aBuffer[3]|= m_CAL_RSP_BYTE3_y1g(_wY1G_CAL);
                    aBuffer[4] = m_CAL_RSP_BYTE4_y1g(_wY1G_CAL);
                    aBuffer[5] = m_CAL_RSP_BYTE5_y1g(_wY1G_CAL);
                    aBuffer[5]|= m_CAL_RSP_BYTE5_yn1g(_wYN1G_CAL);
                    aBuffer[6] = m_CAL_RSP_BYTE6_yn1g(_wYN1G_CAL);
    2a96:	22 0f       	add	r18, r18
    2a98:	22 0f       	add	r18, r18
    2a9a:	2c 77       	andi	r18, 0x7C	; 124
					aBuffer[6]|= m_CAL_RSP_BYTE6_z1g(_wZ1G_CAL);
    2a9c:	42 2b       	or	r20, r18
    2a9e:	40 93 9f 38 	sts	0x389F, r20
                    aBuffer[7] = m_CAL_RSP_BYTE7_z1g(_wZ1G_CAL);
    2aa2:	9c 01       	movw	r18, r24
    2aa4:	36 95       	lsr	r19
    2aa6:	27 95       	ror	r18
    2aa8:	2f 77       	andi	r18, 0x7F	; 127
    2aaa:	20 93 a0 38 	sts	0x38A0, r18
                    aBuffer[8] = m_CAL_RSP_BYTE8_z1g(_wZ1G_CAL);
					aBuffer[8]|= m_CAL_RSP_BYTE8_zn1g(_wZN1G_CAL);
    2aae:	20 91 7d 38 	lds	r18, 0x387D
    2ab2:	30 91 7e 38 	lds	r19, 0x387E
    2ab6:	a9 01       	movw	r20, r18
    2ab8:	04 e0       	ldi	r16, 0x04	; 4
    2aba:	56 95       	lsr	r21
    2abc:	47 95       	ror	r20
    2abe:	0a 95       	dec	r16
    2ac0:	e1 f7       	brne	.-8      	; 0x2aba <_receive_data+0x7b4>
    2ac2:	4f 73       	andi	r20, 0x3F	; 63
                    aBuffer[5] = m_CAL_RSP_BYTE5_y1g(_wY1G_CAL);
                    aBuffer[5]|= m_CAL_RSP_BYTE5_yn1g(_wYN1G_CAL);
                    aBuffer[6] = m_CAL_RSP_BYTE6_yn1g(_wYN1G_CAL);
					aBuffer[6]|= m_CAL_RSP_BYTE6_z1g(_wZ1G_CAL);
                    aBuffer[7] = m_CAL_RSP_BYTE7_z1g(_wZ1G_CAL);
                    aBuffer[8] = m_CAL_RSP_BYTE8_z1g(_wZ1G_CAL);
    2ac4:	82 95       	swap	r24
    2ac6:	88 0f       	add	r24, r24
    2ac8:	88 0f       	add	r24, r24
    2aca:	80 74       	andi	r24, 0x40	; 64
					aBuffer[8]|= m_CAL_RSP_BYTE8_zn1g(_wZN1G_CAL);
    2acc:	48 2b       	or	r20, r24
    2ace:	40 93 a1 38 	sts	0x38A1, r20
                    aBuffer[9] = m_CAL_RSP_BYTE9_zn1g(_wZN1G_CAL);
    2ad2:	22 0f       	add	r18, r18
    2ad4:	22 0f       	add	r18, r18
    2ad6:	22 0f       	add	r18, r18
    2ad8:	28 77       	andi	r18, 0x78	; 120
    2ada:	20 93 a2 38 	sts	0x38A2, r18
    2ade:	6f c0       	rjmp	.+222    	; 0x2bbe <_receive_data+0x8b8>
					processed_counter = command_counter;
                    response_length = 10;                                                                               
                    break;    

                case (unsigned char) GetBatteryCalibration:							                                                              
					aBuffer[0] = m_BTCAL_RSP_BYTE0;
    2ae0:	89 ec       	ldi	r24, 0xC9	; 201
    2ae2:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_BTCAL_RSP_BYTE1_100(_wBTCAL100);                                                                   
    2ae6:	80 91 7b 38 	lds	r24, 0x387B
    2aea:	90 91 7c 38 	lds	r25, 0x387C
    2aee:	9c 01       	movw	r18, r24
    2af0:	13 e0       	ldi	r17, 0x03	; 3
    2af2:	36 95       	lsr	r19
    2af4:	27 95       	ror	r18
    2af6:	1a 95       	dec	r17
    2af8:	e1 f7       	brne	.-8      	; 0x2af2 <_receive_data+0x7ec>
    2afa:	2f 77       	andi	r18, 0x7F	; 127
    2afc:	20 93 9a 38 	sts	0x389A, r18
                    aBuffer[2] = m_BTCAL_RSP_BYTE2_100(_wBTCAL100);
					aBuffer[2]|= m_BTCAL_RSP_BYTE2_80(_wBTCAL80);
    2b00:	20 91 8a 38 	lds	r18, 0x388A
    2b04:	30 91 8b 38 	lds	r19, 0x388B
    2b08:	a9 01       	movw	r20, r18
    2b0a:	b6 e0       	ldi	r27, 0x06	; 6
    2b0c:	56 95       	lsr	r21
    2b0e:	47 95       	ror	r20
    2b10:	ba 95       	dec	r27
    2b12:	e1 f7       	brne	.-8      	; 0x2b0c <_receive_data+0x806>
    2b14:	4f 70       	andi	r20, 0x0F	; 15
                    break;    

                case (unsigned char) GetBatteryCalibration:							                                                              
					aBuffer[0] = m_BTCAL_RSP_BYTE0;
                    aBuffer[1] = m_BTCAL_RSP_BYTE1_100(_wBTCAL100);                                                                   
                    aBuffer[2] = m_BTCAL_RSP_BYTE2_100(_wBTCAL100);
    2b16:	82 95       	swap	r24
    2b18:	80 77       	andi	r24, 0x70	; 112
					aBuffer[2]|= m_BTCAL_RSP_BYTE2_80(_wBTCAL80);
    2b1a:	48 2b       	or	r20, r24
    2b1c:	40 93 9b 38 	sts	0x389B, r20
                    aBuffer[3] = m_BTCAL_RSP_BYTE3_80(_wBTCAL80);
					aBuffer[3]|= m_BTCAL_RSP_BYTE3_60(_wBTCAL60);
    2b20:	80 91 83 38 	lds	r24, 0x3883
    2b24:	90 91 84 38 	lds	r25, 0x3884
    2b28:	49 2f       	mov	r20, r25
    2b2a:	46 95       	lsr	r20
    2b2c:	41 70       	andi	r20, 0x01	; 1
                case (unsigned char) GetBatteryCalibration:							                                                              
					aBuffer[0] = m_BTCAL_RSP_BYTE0;
                    aBuffer[1] = m_BTCAL_RSP_BYTE1_100(_wBTCAL100);                                                                   
                    aBuffer[2] = m_BTCAL_RSP_BYTE2_100(_wBTCAL100);
					aBuffer[2]|= m_BTCAL_RSP_BYTE2_80(_wBTCAL80);
                    aBuffer[3] = m_BTCAL_RSP_BYTE3_80(_wBTCAL80);
    2b2e:	22 0f       	add	r18, r18
    2b30:	2e 77       	andi	r18, 0x7E	; 126
					aBuffer[3]|= m_BTCAL_RSP_BYTE3_60(_wBTCAL60);
    2b32:	42 2b       	or	r20, r18
    2b34:	40 93 9c 38 	sts	0x389C, r20
                    aBuffer[4] = m_BTCAL_RSP_BYTE4_60(_wBTCAL60);
    2b38:	9c 01       	movw	r18, r24
    2b3a:	36 95       	lsr	r19
    2b3c:	27 95       	ror	r18
    2b3e:	36 95       	lsr	r19
    2b40:	27 95       	ror	r18
    2b42:	2f 77       	andi	r18, 0x7F	; 127
    2b44:	20 93 9d 38 	sts	0x389D, r18
                    aBuffer[5] = m_BTCAL_RSP_BYTE5_60(_wBTCAL60);
                    aBuffer[5]|= m_BTCAL_RSP_BYTE5_40(_wBTCAL40);
    2b48:	20 91 81 38 	lds	r18, 0x3881
    2b4c:	30 91 82 38 	lds	r19, 0x3882
    2b50:	a9 01       	movw	r20, r18
    2b52:	f5 e0       	ldi	r31, 0x05	; 5
    2b54:	56 95       	lsr	r21
    2b56:	47 95       	ror	r20
    2b58:	fa 95       	dec	r31
    2b5a:	e1 f7       	brne	.-8      	; 0x2b54 <_receive_data+0x84e>
    2b5c:	4f 71       	andi	r20, 0x1F	; 31
                    aBuffer[2] = m_BTCAL_RSP_BYTE2_100(_wBTCAL100);
					aBuffer[2]|= m_BTCAL_RSP_BYTE2_80(_wBTCAL80);
                    aBuffer[3] = m_BTCAL_RSP_BYTE3_80(_wBTCAL80);
					aBuffer[3]|= m_BTCAL_RSP_BYTE3_60(_wBTCAL60);
                    aBuffer[4] = m_BTCAL_RSP_BYTE4_60(_wBTCAL60);
                    aBuffer[5] = m_BTCAL_RSP_BYTE5_60(_wBTCAL60);
    2b5e:	82 95       	swap	r24
    2b60:	88 0f       	add	r24, r24
    2b62:	80 76       	andi	r24, 0x60	; 96
                    aBuffer[5]|= m_BTCAL_RSP_BYTE5_40(_wBTCAL40);
    2b64:	48 2b       	or	r20, r24
    2b66:	40 93 9e 38 	sts	0x389E, r20
                    aBuffer[6] = m_BTCAL_RSP_BYTE6_40(_wBTCAL40);
					aBuffer[6]|= m_BTCAL_RSP_BYTE6_20(_wBTCAL20);
    2b6a:	80 91 77 38 	lds	r24, 0x3877
    2b6e:	90 91 78 38 	lds	r25, 0x3878
    2b72:	49 2f       	mov	r20, r25
    2b74:	43 70       	andi	r20, 0x03	; 3
                    aBuffer[3] = m_BTCAL_RSP_BYTE3_80(_wBTCAL80);
					aBuffer[3]|= m_BTCAL_RSP_BYTE3_60(_wBTCAL60);
                    aBuffer[4] = m_BTCAL_RSP_BYTE4_60(_wBTCAL60);
                    aBuffer[5] = m_BTCAL_RSP_BYTE5_60(_wBTCAL60);
                    aBuffer[5]|= m_BTCAL_RSP_BYTE5_40(_wBTCAL40);
                    aBuffer[6] = m_BTCAL_RSP_BYTE6_40(_wBTCAL40);
    2b76:	22 0f       	add	r18, r18
    2b78:	22 0f       	add	r18, r18
    2b7a:	2c 77       	andi	r18, 0x7C	; 124
					aBuffer[6]|= m_BTCAL_RSP_BYTE6_20(_wBTCAL20);
    2b7c:	42 2b       	or	r20, r18
    2b7e:	40 93 9f 38 	sts	0x389F, r20
                    aBuffer[7] = m_BTCAL_RSP_BYTE7_20(_wBTCAL20);
    2b82:	9c 01       	movw	r18, r24
    2b84:	36 95       	lsr	r19
    2b86:	27 95       	ror	r18
    2b88:	2f 77       	andi	r18, 0x7F	; 127
    2b8a:	20 93 a0 38 	sts	0x38A0, r18
                    aBuffer[8] = m_BTCAL_RSP_BYTE8_20(_wBTCAL20);
					aBuffer[8]|= m_BTCAL_RSP_BYTE8_10(_wBTCAL10);
    2b8e:	20 91 87 38 	lds	r18, 0x3887
    2b92:	30 91 88 38 	lds	r19, 0x3888
    2b96:	a9 01       	movw	r20, r18
    2b98:	74 e0       	ldi	r23, 0x04	; 4
    2b9a:	56 95       	lsr	r21
    2b9c:	47 95       	ror	r20
    2b9e:	7a 95       	dec	r23
    2ba0:	e1 f7       	brne	.-8      	; 0x2b9a <_receive_data+0x894>
    2ba2:	4f 73       	andi	r20, 0x3F	; 63
                    aBuffer[5] = m_BTCAL_RSP_BYTE5_60(_wBTCAL60);
                    aBuffer[5]|= m_BTCAL_RSP_BYTE5_40(_wBTCAL40);
                    aBuffer[6] = m_BTCAL_RSP_BYTE6_40(_wBTCAL40);
					aBuffer[6]|= m_BTCAL_RSP_BYTE6_20(_wBTCAL20);
                    aBuffer[7] = m_BTCAL_RSP_BYTE7_20(_wBTCAL20);
                    aBuffer[8] = m_BTCAL_RSP_BYTE8_20(_wBTCAL20);
    2ba4:	82 95       	swap	r24
    2ba6:	88 0f       	add	r24, r24
    2ba8:	88 0f       	add	r24, r24
    2baa:	80 74       	andi	r24, 0x40	; 64
					aBuffer[8]|= m_BTCAL_RSP_BYTE8_10(_wBTCAL10);
    2bac:	48 2b       	or	r20, r24
    2bae:	40 93 a1 38 	sts	0x38A1, r20
                    rBuffer[9] = m_BTCAL_RSP_BYTE9_10(_wBTCAL10);
    2bb2:	22 0f       	add	r18, r18
    2bb4:	22 0f       	add	r18, r18
    2bb6:	22 0f       	add	r18, r18
    2bb8:	28 77       	andi	r18, 0x78	; 120
    2bba:	20 93 98 38 	sts	0x3898, r18
					processed_counter = command_counter;
    2bbe:	60 93 3b 01 	sts	0x013B, r22
                    response_length = 10;                                                                               
    2bc2:	8a e0       	ldi	r24, 0x0A	; 10
    2bc4:	7a c1       	rjmp	.+756    	; 0x2eba <_receive_data+0xbb4>

				case (unsigned char) SetBatteryCalibration:
				/*All of the read/write functions first make sure the EEPROM is ready to be accessed. 
				Since this may cause long delays if a write operation is still pending, timecritical 
				applications should first poll the EEPROM e. g. using eeprom_is_ready()	*/
                    if (eeprom_is_ready())
    2bc6:	f9 99       	sbic	0x1f, 1	; 31
    2bc8:	88 c1       	rjmp	.+784    	; 0x2eda <_receive_data+0xbd4>
                    {                                    
                        if (_atmega_a2dConvert10bit(ADC7) < 600) 
    2bca:	87 e0       	ldi	r24, 0x07	; 7
    2bcc:	0e 94 4e 0a 	call	0x149c	; 0x149c <_atmega_a2dConvert10bit>
    2bd0:	b2 e0       	ldi	r27, 0x02	; 2
    2bd2:	88 35       	cpi	r24, 0x58	; 88
    2bd4:	9b 07       	cpc	r25, r27
    2bd6:	08 f4       	brcc	.+2      	; 0x2bda <_receive_data+0x8d4>
    2bd8:	80 c1       	rjmp	.+768    	; 0x2eda <_receive_data+0xbd4>
                	        break;
                        else
                        {   
							_wBTCAL100 = m_SET_BTCAL_100(rBuffer[1], rBuffer[2]);
    2bda:	60 91 91 38 	lds	r22, 0x3891
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	60 77       	andi	r22, 0x70	; 112
    2be2:	70 70       	andi	r23, 0x00	; 0
    2be4:	54 e0       	ldi	r21, 0x04	; 4
    2be6:	76 95       	lsr	r23
    2be8:	67 95       	ror	r22
    2bea:	5a 95       	dec	r21
    2bec:	e1 f7       	brne	.-8      	; 0x2be6 <_receive_data+0x8e0>
    2bee:	80 91 90 38 	lds	r24, 0x3890
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	8f 77       	andi	r24, 0x7F	; 127
    2bf6:	90 70       	andi	r25, 0x00	; 0
    2bf8:	43 e0       	ldi	r20, 0x03	; 3
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	4a 95       	dec	r20
    2c00:	e1 f7       	brne	.-8      	; 0x2bfa <_receive_data+0x8f4>
    2c02:	68 2b       	or	r22, r24
    2c04:	79 2b       	or	r23, r25
    2c06:	70 93 7c 38 	sts	0x387C, r23
    2c0a:	60 93 7b 38 	sts	0x387B, r22
							eeprom_write_word(&_NV_BTCAL100, _wBTCAL100);
    2c0e:	89 e0       	ldi	r24, 0x09	; 9
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
							_wBTCAL80  = m_SET_BTCAL_80(rBuffer[2], rBuffer[3]);
    2c16:	60 91 92 38 	lds	r22, 0x3892
    2c1a:	70 e0       	ldi	r23, 0x00	; 0
    2c1c:	6e 77       	andi	r22, 0x7E	; 126
    2c1e:	70 70       	andi	r23, 0x00	; 0
    2c20:	76 95       	lsr	r23
    2c22:	67 95       	ror	r22
    2c24:	80 91 91 38 	lds	r24, 0x3891
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	8f 70       	andi	r24, 0x0F	; 15
    2c2c:	90 70       	andi	r25, 0x00	; 0
    2c2e:	26 e0       	ldi	r18, 0x06	; 6
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	2a 95       	dec	r18
    2c36:	e1 f7       	brne	.-8      	; 0x2c30 <_receive_data+0x92a>
    2c38:	68 2b       	or	r22, r24
    2c3a:	79 2b       	or	r23, r25
    2c3c:	70 93 8b 38 	sts	0x388B, r23
    2c40:	60 93 8a 38 	sts	0x388A, r22
							eeprom_write_word(&_NV_BTCAL80, _wBTCAL80);
    2c44:	8b e0       	ldi	r24, 0x0B	; 11
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
							_wBTCAL60  = m_SET_BTCAL_60(rBuffer[3], rBuffer[4], rBuffer[5]);
    2c4c:	60 91 93 38 	lds	r22, 0x3893
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	6f 77       	andi	r22, 0x7F	; 127
    2c54:	70 70       	andi	r23, 0x00	; 0
    2c56:	66 0f       	add	r22, r22
    2c58:	77 1f       	adc	r23, r23
    2c5a:	66 0f       	add	r22, r22
    2c5c:	77 1f       	adc	r23, r23
    2c5e:	80 91 92 38 	lds	r24, 0x3892
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	81 70       	andi	r24, 0x01	; 1
    2c66:	90 70       	andi	r25, 0x00	; 0
    2c68:	98 2f       	mov	r25, r24
    2c6a:	88 27       	eor	r24, r24
    2c6c:	99 0f       	add	r25, r25
    2c6e:	68 2b       	or	r22, r24
    2c70:	79 2b       	or	r23, r25
    2c72:	80 91 94 38 	lds	r24, 0x3894
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	80 76       	andi	r24, 0x60	; 96
    2c7a:	90 70       	andi	r25, 0x00	; 0
    2c7c:	b5 e0       	ldi	r27, 0x05	; 5
    2c7e:	96 95       	lsr	r25
    2c80:	87 95       	ror	r24
    2c82:	ba 95       	dec	r27
    2c84:	e1 f7       	brne	.-8      	; 0x2c7e <_receive_data+0x978>
    2c86:	68 2b       	or	r22, r24
    2c88:	79 2b       	or	r23, r25
    2c8a:	70 93 84 38 	sts	0x3884, r23
    2c8e:	60 93 83 38 	sts	0x3883, r22
							eeprom_write_word(&_NV_BTCAL60, _wBTCAL60);
    2c92:	8d e0       	ldi	r24, 0x0D	; 13
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
							_wBTCAL40  = m_SET_BTCAL_40(rBuffer[5], rBuffer[6]);
    2c9a:	60 91 95 38 	lds	r22, 0x3895
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    2ca0:	6c 77       	andi	r22, 0x7C	; 124
    2ca2:	70 70       	andi	r23, 0x00	; 0
    2ca4:	76 95       	lsr	r23
    2ca6:	67 95       	ror	r22
    2ca8:	76 95       	lsr	r23
    2caa:	67 95       	ror	r22
    2cac:	80 91 94 38 	lds	r24, 0x3894
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	8f 71       	andi	r24, 0x1F	; 31
    2cb4:	90 70       	andi	r25, 0x00	; 0
    2cb6:	f5 e0       	ldi	r31, 0x05	; 5
    2cb8:	88 0f       	add	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	fa 95       	dec	r31
    2cbe:	e1 f7       	brne	.-8      	; 0x2cb8 <_receive_data+0x9b2>
    2cc0:	68 2b       	or	r22, r24
    2cc2:	79 2b       	or	r23, r25
    2cc4:	70 93 82 38 	sts	0x3882, r23
    2cc8:	60 93 81 38 	sts	0x3881, r22
							eeprom_write_word(&_NV_BTCAL40, _wBTCAL40);
    2ccc:	8f e0       	ldi	r24, 0x0F	; 15
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
							_wBTCAL20  = m_SET_BTCAL_20(rBuffer[6], rBuffer[7], rBuffer[8]);
    2cd4:	60 91 96 38 	lds	r22, 0x3896
    2cd8:	70 e0       	ldi	r23, 0x00	; 0
    2cda:	66 0f       	add	r22, r22
    2cdc:	77 1f       	adc	r23, r23
    2cde:	70 70       	andi	r23, 0x00	; 0
    2ce0:	80 91 95 38 	lds	r24, 0x3895
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	83 70       	andi	r24, 0x03	; 3
    2ce8:	90 70       	andi	r25, 0x00	; 0
    2cea:	98 2f       	mov	r25, r24
    2cec:	88 27       	eor	r24, r24
    2cee:	68 2b       	or	r22, r24
    2cf0:	79 2b       	or	r23, r25
    2cf2:	80 91 97 38 	lds	r24, 0x3897
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	80 74       	andi	r24, 0x40	; 64
    2cfa:	90 70       	andi	r25, 0x00	; 0
    2cfc:	46 e0       	ldi	r20, 0x06	; 6
    2cfe:	96 95       	lsr	r25
    2d00:	87 95       	ror	r24
    2d02:	4a 95       	dec	r20
    2d04:	e1 f7       	brne	.-8      	; 0x2cfe <_receive_data+0x9f8>
    2d06:	68 2b       	or	r22, r24
    2d08:	79 2b       	or	r23, r25
    2d0a:	70 93 78 38 	sts	0x3878, r23
    2d0e:	60 93 77 38 	sts	0x3877, r22
							eeprom_write_word(&_NV_BTCAL20, _wBTCAL20);
    2d12:	81 e1       	ldi	r24, 0x11	; 17
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
							_wBTCAL10  = m_SET_BTCAL_10(rBuffer[8], rBuffer[8]);
    2d1a:	80 91 97 38 	lds	r24, 0x3897
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	bc 01       	movw	r22, r24
    2d22:	68 77       	andi	r22, 0x78	; 120
    2d24:	70 70       	andi	r23, 0x00	; 0
    2d26:	33 e0       	ldi	r19, 0x03	; 3
    2d28:	76 95       	lsr	r23
    2d2a:	67 95       	ror	r22
    2d2c:	3a 95       	dec	r19
    2d2e:	e1 f7       	brne	.-8      	; 0x2d28 <_receive_data+0xa22>
    2d30:	8f 73       	andi	r24, 0x3F	; 63
    2d32:	90 70       	andi	r25, 0x00	; 0
    2d34:	24 e0       	ldi	r18, 0x04	; 4
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	2a 95       	dec	r18
    2d3c:	e1 f7       	brne	.-8      	; 0x2d36 <_receive_data+0xa30>
    2d3e:	68 2b       	or	r22, r24
    2d40:	79 2b       	or	r23, r25
    2d42:	70 93 88 38 	sts	0x3888, r23
    2d46:	60 93 87 38 	sts	0x3887, r22
							eeprom_write_word(&_NV_BTCAL10, _wBTCAL10);
    2d4a:	83 e1       	ldi	r24, 0x13	; 19
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	0e 94 b1 18 	call	0x3162	; 0x3162 <__eewr_word_m1284p>
    2d52:	bf c0       	rjmp	.+382    	; 0x2ed2 <_receive_data+0xbcc>
                        }                                                                                               
                    }
                    break;
						
   				case (unsigned char) GetHardwareVersion:  
			   		aBuffer[0] = m_HV_RSP_BYTE0;
    2d54:	8a ec       	ldi	r24, 0xCA	; 202
    2d56:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_HV_RSP_BYTE1(_VERSION);
    2d5a:	83 e0       	ldi	r24, 0x03	; 3
    2d5c:	a9 c0       	rjmp	.+338    	; 0x2eb0 <_receive_data+0xbaa>
					processed_counter = command_counter;		
					response_length = 2;
					break;				
			
				case (unsigned char) GetFirmwareVersion:  
			   		aBuffer[0] = m_FV_RSP_BYTE0;
    2d5e:	8b ec       	ldi	r24, 0xCB	; 203
    2d60:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_FV_RSP_BYTE1(_FVERSION);
    2d64:	86 e0       	ldi	r24, 0x06	; 6
    2d66:	a4 c0       	rjmp	.+328    	; 0x2eb0 <_receive_data+0xbaa>
					processed_counter = command_counter;
					response_length=2;
					break;	
			
				case (unsigned char) GetTCT:  
			      	aBuffer[0] = m_TCT_RSP_BYTE0;
    2d68:	8e ec       	ldi	r24, 0xCE	; 206
    2d6a:	80 93 99 38 	sts	0x3899, r24
					aBuffer[1] = m_TCT_RSP_BYTE1(_wTCNT2);
    2d6e:	20 91 4c 01 	lds	r18, 0x014C
    2d72:	82 2f       	mov	r24, r18
    2d74:	86 95       	lsr	r24
    2d76:	80 93 9a 38 	sts	0x389A, r24
					aBuffer[2] = m_TCT_RSP_BYTE2(_wTCNT2, _wTCNT2_reps);
    2d7a:	80 91 07 01 	lds	r24, 0x0107
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	21 70       	andi	r18, 0x01	; 1
    2d82:	30 70       	andi	r19, 0x00	; 0
    2d84:	06 e0       	ldi	r16, 0x06	; 6
    2d86:	22 0f       	add	r18, r18
    2d88:	33 1f       	adc	r19, r19
    2d8a:	0a 95       	dec	r16
    2d8c:	e1 f7       	brne	.-8      	; 0x2d86 <_receive_data+0xa80>
    2d8e:	98 2f       	mov	r25, r24
    2d90:	96 95       	lsr	r25
    2d92:	96 95       	lsr	r25
    2d94:	92 2b       	or	r25, r18
    2d96:	90 93 9b 38 	sts	0x389B, r25
					aBuffer[3] = m_TCT_RSP_BYTE3(_wTCNT2_reps, _wTCNT2_last);
    2d9a:	30 91 4d 01 	lds	r19, 0x014D
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	83 70       	andi	r24, 0x03	; 3
    2da2:	90 70       	andi	r25, 0x00	; 0
    2da4:	15 e0       	ldi	r17, 0x05	; 5
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	1a 95       	dec	r17
    2dac:	e1 f7       	brne	.-8      	; 0x2da6 <_receive_data+0xaa0>
    2dae:	23 2f       	mov	r18, r19
    2db0:	26 95       	lsr	r18
    2db2:	26 95       	lsr	r18
    2db4:	26 95       	lsr	r18
    2db6:	28 2b       	or	r18, r24
    2db8:	20 93 9c 38 	sts	0x389C, r18
					aBuffer[4] = m_TCT_RSP_BYTE4(_wTCNT2_last);
    2dbc:	83 2f       	mov	r24, r19
    2dbe:	87 70       	andi	r24, 0x07	; 7
    2dc0:	82 95       	swap	r24
    2dc2:	80 7f       	andi	r24, 0xF0	; 240
    2dc4:	80 93 9d 38 	sts	0x389D, r24
					processed_counter = command_counter;				
    2dc8:	60 93 3b 01 	sts	0x013B, r22
					response_length = 5;
    2dcc:	85 e0       	ldi	r24, 0x05	; 5
    2dce:	75 c0       	rjmp	.+234    	; 0x2eba <_receive_data+0xbb4>
					break;
			
				case (unsigned char) SetLED:  
			      	_LED_COLOR = m_SET_LED_COLOR(rBuffer[1]);
    2dd0:	20 91 90 38 	lds	r18, 0x3890
    2dd4:	82 2f       	mov	r24, r18
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	80 74       	andi	r24, 0x40	; 64
    2dda:	90 70       	andi	r25, 0x00	; 0
    2ddc:	b6 e0       	ldi	r27, 0x06	; 6
    2dde:	95 95       	asr	r25
    2de0:	87 95       	ror	r24
    2de2:	ba 95       	dec	r27
    2de4:	e1 f7       	brne	.-8      	; 0x2dde <_receive_data+0xad8>
    2de6:	80 93 0a 01 	sts	0x010A, r24
					_LED_TIME = m_SET_LED_TIME(rBuffer[1]);
    2dea:	2f 73       	andi	r18, 0x3F	; 63
    2dec:	20 93 09 01 	sts	0x0109, r18
					if (_LED_COLOR == 0){						
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	09 f5       	brne	.+66     	; 0x2e36 <_receive_data+0xb30>
    2df4:	00 e0       	ldi	r16, 0x00	; 0
    2df6:	10 e0       	ldi	r17, 0x00	; 0
    2df8:	18 c0       	rjmp	.+48     	; 0x2e2a <_receive_data+0xb24>
						for (int j=0; j<(_LED_TIME); j++){
							_yellowled_turn_on();	
    2dfa:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_yellowled_turn_on>
    2dfe:	8f ef       	ldi	r24, 0xFF	; 255
    2e00:	94 e3       	ldi	r25, 0x34	; 52
    2e02:	ac e0       	ldi	r26, 0x0C	; 12
    2e04:	81 50       	subi	r24, 0x01	; 1
    2e06:	90 40       	sbci	r25, 0x00	; 0
    2e08:	a0 40       	sbci	r26, 0x00	; 0
    2e0a:	e1 f7       	brne	.-8      	; 0x2e04 <_receive_data+0xafe>
    2e0c:	00 c0       	rjmp	.+0      	; 0x2e0e <_receive_data+0xb08>
    2e0e:	00 00       	nop
							_delay_ms(500);						
							_yellowled_turn_off(); 
    2e10:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <_yellowled_turn_off>
    2e14:	8f ef       	ldi	r24, 0xFF	; 255
    2e16:	94 e3       	ldi	r25, 0x34	; 52
    2e18:	ac e0       	ldi	r26, 0x0C	; 12
    2e1a:	81 50       	subi	r24, 0x01	; 1
    2e1c:	90 40       	sbci	r25, 0x00	; 0
    2e1e:	a0 40       	sbci	r26, 0x00	; 0
    2e20:	e1 f7       	brne	.-8      	; 0x2e1a <_receive_data+0xb14>
    2e22:	00 c0       	rjmp	.+0      	; 0x2e24 <_receive_data+0xb1e>
    2e24:	00 00       	nop
			
				case (unsigned char) SetLED:  
			      	_LED_COLOR = m_SET_LED_COLOR(rBuffer[1]);
					_LED_TIME = m_SET_LED_TIME(rBuffer[1]);
					if (_LED_COLOR == 0){						
						for (int j=0; j<(_LED_TIME); j++){
    2e26:	0f 5f       	subi	r16, 0xFF	; 255
    2e28:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2a:	80 91 09 01 	lds	r24, 0x0109
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	08 17       	cp	r16, r24
    2e32:	19 07       	cpc	r17, r25
    2e34:	14 f3       	brlt	.-60     	; 0x2dfa <_receive_data+0xaf4>
							_yellowled_turn_on();	
							_delay_ms(500);						
							_yellowled_turn_off(); 
							_delay_ms(500);
						}
					} if (_LED_COLOR == 1){
    2e36:	80 91 0a 01 	lds	r24, 0x010A
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <_receive_data+0xb3a>
    2e3e:	49 c0       	rjmp	.+146    	; 0x2ed2 <_receive_data+0xbcc>
    2e40:	00 e0       	ldi	r16, 0x00	; 0
    2e42:	10 e0       	ldi	r17, 0x00	; 0
    2e44:	18 c0       	rjmp	.+48     	; 0x2e76 <_receive_data+0xb70>
						for (int j=0; j<(_LED_TIME); j++){
							_greenled_turn_on();	
    2e46:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_greenled_turn_on>
    2e4a:	8f ef       	ldi	r24, 0xFF	; 255
    2e4c:	94 e3       	ldi	r25, 0x34	; 52
    2e4e:	ac e0       	ldi	r26, 0x0C	; 12
    2e50:	81 50       	subi	r24, 0x01	; 1
    2e52:	90 40       	sbci	r25, 0x00	; 0
    2e54:	a0 40       	sbci	r26, 0x00	; 0
    2e56:	e1 f7       	brne	.-8      	; 0x2e50 <_receive_data+0xb4a>
    2e58:	00 c0       	rjmp	.+0      	; 0x2e5a <_receive_data+0xb54>
    2e5a:	00 00       	nop
							_delay_ms(500);						
							_greenled_turn_off(); 
    2e5c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_greenled_turn_off>
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
    2e62:	94 e3       	ldi	r25, 0x34	; 52
    2e64:	ac e0       	ldi	r26, 0x0C	; 12
    2e66:	81 50       	subi	r24, 0x01	; 1
    2e68:	90 40       	sbci	r25, 0x00	; 0
    2e6a:	a0 40       	sbci	r26, 0x00	; 0
    2e6c:	e1 f7       	brne	.-8      	; 0x2e66 <_receive_data+0xb60>
    2e6e:	00 c0       	rjmp	.+0      	; 0x2e70 <_receive_data+0xb6a>
    2e70:	00 00       	nop
							_delay_ms(500);						
							_yellowled_turn_off(); 
							_delay_ms(500);
						}
					} if (_LED_COLOR == 1){
						for (int j=0; j<(_LED_TIME); j++){
    2e72:	0f 5f       	subi	r16, 0xFF	; 255
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
    2e76:	80 91 09 01 	lds	r24, 0x0109
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	08 17       	cp	r16, r24
    2e7e:	19 07       	cpc	r17, r25
    2e80:	14 f3       	brlt	.-60     	; 0x2e46 <_receive_data+0xb40>
    2e82:	27 c0       	rjmp	.+78     	; 0x2ed2 <_receive_data+0xbcc>
					} 
					processed_counter = command_counter;
					break;
			
				case (unsigned char) ShutdownWocket:  
					shutdown_flag = 1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	80 93 32 01 	sts	0x0132, r24
					_bluetooth_turn_off();
    2e8a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_bluetooth_turn_off>
					_greenled_turn_off();
    2e8e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_greenled_turn_off>
					_yellowled_turn_off();			      	
    2e92:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <_yellowled_turn_off>
    2e96:	1d c0       	rjmp	.+58     	; 0x2ed2 <_receive_data+0xbcc>
					processed_counter = command_counter;
					break;
				
				case (unsigned char) ResetBluetooth:  
			      	_bluetooth_reset();
    2e98:	0e 94 06 0b 	call	0x160c	; 0x160c <_bluetooth_reset>
    2e9c:	1a c0       	rjmp	.+52     	; 0x2ed2 <_receive_data+0xbcc>
				case (unsigned char) ResetWocket:  
			      	//_wocket_reset();
					/*_atmega_finalize();
					for (int j = 0; (j < 1000); j++)
						_delay_ms(5);*/
					_wocket_initialize();
    2e9e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_wocket_initialize>
    2ea2:	17 c0       	rjmp	.+46     	; 0x2ed2 <_receive_data+0xbcc>
					processed_counter = command_counter;
					break;

				case (unsigned char) GetAliveTimer:  
			   		aBuffer[0] = m_ALT_RSP_BYTE0;
    2ea4:	86 ec       	ldi	r24, 0xC6	; 198
    2ea6:	80 93 99 38 	sts	0x3899, r24
                    aBuffer[1] = m_ALT_RSP_BYTE1(_wALT);
    2eaa:	80 91 89 38 	lds	r24, 0x3889
    2eae:	8f 77       	andi	r24, 0x7F	; 127
    2eb0:	80 93 9a 38 	sts	0x389A, r24
					processed_counter = command_counter;
    2eb4:	60 93 3b 01 	sts	0x013B, r22
					response_length = 2;
    2eb8:	82 e0       	ldi	r24, 0x02	; 2
    2eba:	80 93 3c 01 	sts	0x013C, r24
					break;	
    2ebe:	0d c0       	rjmp	.+26     	; 0x2eda <_receive_data+0xbd4>
							
                case (unsigned char) SetAliveTimer:  
			   		_wALT = m_SET_ALT(rBuffer[1]);
    2ec0:	60 91 90 38 	lds	r22, 0x3890
    2ec4:	6f 77       	andi	r22, 0x7F	; 127
    2ec6:	60 93 89 38 	sts	0x3889, r22
					eeprom_write_byte(&_NV_ALT, _wALT);
    2eca:	82 e2       	ldi	r24, 0x22	; 34
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
					processed_counter = command_counter;
    2ed2:	80 91 37 01 	lds	r24, 0x0137
    2ed6:	80 93 3b 01 	sts	0x013B, r24
																					 							                              
                default:        
                    break;
            }

            if (processed_counter == command_counter)
    2eda:	90 91 3b 01 	lds	r25, 0x013B
    2ede:	80 91 37 01 	lds	r24, 0x0137
    2ee2:	98 17       	cp	r25, r24
    2ee4:	71 f5       	brne	.+92     	; 0x2f42 <_receive_data+0xc3c>
    2ee6:	a9 e9       	ldi	r26, 0x99	; 153
    2ee8:	ea 2e       	mov	r14, r26
    2eea:	a8 e3       	ldi	r26, 0x38	; 56
    2eec:	fa 2e       	mov	r15, r26
    2eee:	00 e0       	ldi	r16, 0x00	; 0
    2ef0:	10 e0       	ldi	r17, 0x00	; 0
    2ef2:	07 c0       	rjmp	.+14     	; 0x2f02 <_receive_data+0xbfc>
			{                              
                    for (int i = 0; (i < response_length); i++)                                                                                       
                     	_bluetooth_transmit_uart0_byte(aBuffer[i]);                                                                                                                                                   
    2ef4:	d7 01       	movw	r26, r14
    2ef6:	8d 91       	ld	r24, X+
    2ef8:	7d 01       	movw	r14, r26
    2efa:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
                    break;
            }

            if (processed_counter == command_counter)
			{                              
                    for (int i = 0; (i < response_length); i++)                                                                                       
    2efe:	0f 5f       	subi	r16, 0xFF	; 255
    2f00:	1f 4f       	sbci	r17, 0xFF	; 255
    2f02:	80 91 3c 01 	lds	r24, 0x013C
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	08 17       	cp	r16, r24
    2f0a:	19 07       	cpc	r17, r25
    2f0c:	9c f3       	brlt	.-26     	; 0x2ef4 <_receive_data+0xbee>
    2f0e:	07 c0       	rjmp	.+14     	; 0x2f1e <_receive_data+0xc18>
                    processed_counter = 0;                                            
                    address = 0xffff;
                    response_length = 0;                    
            }
    } //if command timed out
    else if ((command_timer >= MAX_COMMAND_TIMER))
    2f10:	80 91 39 01 	lds	r24, 0x0139
    2f14:	90 91 3a 01 	lds	r25, 0x013A
    2f18:	8f 3f       	cpi	r24, 0xFF	; 255
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	90 f0       	brcs	.+36     	; 0x2f42 <_receive_data+0xc3c>
    {                            
        command_length = 0;
    2f1e:	10 92 38 01 	sts	0x0138, r1
        command_counter = 0;
    2f22:	10 92 37 01 	sts	0x0137, r1
        command_timer = 0;
    2f26:	10 92 3a 01 	sts	0x013A, r1
    2f2a:	10 92 39 01 	sts	0x0139, r1
        processed_counter = 0;                            
    2f2e:	10 92 3b 01 	sts	0x013B, r1
        address=0xffff;
    2f32:	8f ef       	ldi	r24, 0xFF	; 255
    2f34:	9f ef       	ldi	r25, 0xFF	; 255
    2f36:	90 93 05 01 	sts	0x0105, r25
    2f3a:	80 93 04 01 	sts	0x0104, r24
        response_length = 0;
    2f3e:	10 92 3c 01 	sts	0x013C, r1
    }
}
    2f42:	0f 90       	pop	r0
    2f44:	cf 91       	pop	r28
    2f46:	df 91       	pop	r29
    2f48:	1f 91       	pop	r17
    2f4a:	0f 91       	pop	r16
    2f4c:	ff 90       	pop	r15
    2f4e:	ef 90       	pop	r14
    2f50:	08 95       	ret

00002f52 <_send_acs>:
}

//-------------------------------------------
// sends the Activity counts
void _send_acs()
{
    2f52:	df 92       	push	r13
    2f54:	ef 92       	push	r14
    2f56:	ff 92       	push	r15
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
	unsigned short count   = 0;
	unsigned short seq_num = sseq;
    2f60:	00 91 19 01 	lds	r16, 0x0119
    2f64:	10 91 1a 01 	lds	r17, 0x011A
		num_acs = ci - si;
	else
		num_acs = ci + (AC_BUFFER_SIZE - si);
	
	//send AC offset accumulated within the minute & the overall AC sequence number
	_send_ac_offset(AC_NUMS - summary_count); 
    2f68:	80 91 15 01 	lds	r24, 0x0115
    2f6c:	90 91 16 01 	lds	r25, 0x0116
    2f70:	20 91 67 0c 	lds	r18, 0x0C67
    2f74:	30 91 68 0c 	lds	r19, 0x0C68
    2f78:	82 1b       	sub	r24, r18
    2f7a:	93 0b       	sbc	r25, r19
    2f7c:	0e 94 08 11 	call	0x2210	; 0x2210 <_send_ac_offset>
	_send_ac_count(cseq);		
    2f80:	80 91 17 01 	lds	r24, 0x0117
    2f84:	90 91 18 01 	lds	r25, 0x0118
    2f88:	0e 94 ed 10 	call	0x21da	; 0x21da <_send_ac_count>

    //send the acs from start to current ac index
	for (int i = si;(i != ci);)
    2f8c:	c0 91 21 01 	lds	r28, 0x0121
    2f90:	d0 91 22 01 	lds	r29, 0x0122
	{		
		count = acount[i];
		aBuffer[0] = m_AC_RSP_BYTE0;
    2f94:	7d ec       	ldi	r23, 0xCD	; 205
    2f96:	d7 2e       	mov	r13, r23
	//send AC offset accumulated within the minute & the overall AC sequence number
	_send_ac_offset(AC_NUMS - summary_count); 
	_send_ac_count(cseq);		

    //send the acs from start to current ac index
	for (int i = si;(i != ci);)
    2f98:	46 c0       	rjmp	.+140    	; 0x3026 <_send_acs+0xd4>
	{		
		count = acount[i];
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	ee 0f       	add	r30, r30
    2f9e:	ff 1f       	adc	r31, r31
    2fa0:	e0 5a       	subi	r30, 0xA0	; 160
    2fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa4:	80 81       	ld	r24, Z
    2fa6:	91 81       	ldd	r25, Z+1	; 0x01
		aBuffer[0] = m_AC_RSP_BYTE0;
    2fa8:	d0 92 99 38 	sts	0x3899, r13
    	aBuffer[1] = m_AC_RSP_BYTE1(seq_num);
    2fac:	21 2f       	mov	r18, r17
    2fae:	26 95       	lsr	r18
    2fb0:	20 93 9a 38 	sts	0x389A, r18
    	aBuffer[2] = m_AC_RSP_BYTE2(seq_num);
    2fb4:	98 01       	movw	r18, r16
    2fb6:	36 95       	lsr	r19
    2fb8:	27 95       	ror	r18
    2fba:	36 95       	lsr	r19
    2fbc:	27 95       	ror	r18
    2fbe:	2f 77       	andi	r18, 0x7F	; 127
    2fc0:	20 93 9b 38 	sts	0x389B, r18
		aBuffer[3] = m_AC_RSP_BYTE3(seq_num,count);
    2fc4:	20 2f       	mov	r18, r16
    2fc6:	23 70       	andi	r18, 0x03	; 3
    2fc8:	22 95       	swap	r18
    2fca:	22 0f       	add	r18, r18
    2fcc:	20 7e       	andi	r18, 0xE0	; 224
    2fce:	39 2f       	mov	r19, r25
    2fd0:	36 95       	lsr	r19
    2fd2:	36 95       	lsr	r19
    2fd4:	36 95       	lsr	r19
    2fd6:	23 2b       	or	r18, r19
    2fd8:	20 93 9c 38 	sts	0x389C, r18
		aBuffer[4] = m_AC_RSP_BYTE4(count);
    2fdc:	9c 01       	movw	r18, r24
    2fde:	44 e0       	ldi	r20, 0x04	; 4
    2fe0:	36 95       	lsr	r19
    2fe2:	27 95       	ror	r18
    2fe4:	4a 95       	dec	r20
    2fe6:	e1 f7       	brne	.-8      	; 0x2fe0 <_send_acs+0x8e>
    2fe8:	2f 77       	andi	r18, 0x7F	; 127
    2fea:	20 93 9d 38 	sts	0x389D, r18
		aBuffer[5] = m_AC_RSP_BYTE5(count);
    2fee:	8f 70       	andi	r24, 0x0F	; 15
    2ff0:	88 0f       	add	r24, r24
    2ff2:	88 0f       	add	r24, r24
    2ff4:	80 93 9e 38 	sts	0x389E, r24
    2ff8:	39 e9       	ldi	r19, 0x99	; 153
    2ffa:	e3 2e       	mov	r14, r19
    2ffc:	38 e3       	ldi	r19, 0x38	; 56
    2ffe:	f3 2e       	mov	r15, r19

		for (int j = 0; (j < 6); j++)                                                                                       
       		_bluetooth_transmit_uart0_byte(aBuffer[j]);
    3000:	f7 01       	movw	r30, r14
    3002:	81 91       	ld	r24, Z+
    3004:	7f 01       	movw	r14, r30
    3006:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_bluetooth_transmit_uart0_byte>
    	aBuffer[2] = m_AC_RSP_BYTE2(seq_num);
		aBuffer[3] = m_AC_RSP_BYTE3(seq_num,count);
		aBuffer[4] = m_AC_RSP_BYTE4(count);
		aBuffer[5] = m_AC_RSP_BYTE5(count);

		for (int j = 0; (j < 6); j++)                                                                                       
    300a:	ff e9       	ldi	r31, 0x9F	; 159
    300c:	ef 16       	cp	r14, r31
    300e:	f8 e3       	ldi	r31, 0x38	; 56
    3010:	ff 06       	cpc	r15, r31
    3012:	b1 f7       	brne	.-20     	; 0x3000 <_send_acs+0xae>
       		_bluetooth_transmit_uart0_byte(aBuffer[j]);
			 
		i++;
    3014:	21 96       	adiw	r28, 0x01	; 1
		if (i == AC_BUFFER_SIZE)
    3016:	83 e0       	ldi	r24, 0x03	; 3
    3018:	c0 3c       	cpi	r28, 0xC0	; 192
    301a:	d8 07       	cpc	r29, r24
    301c:	11 f4       	brne	.+4      	; 0x3022 <_send_acs+0xd0>
			i = 0;
    301e:	c0 e0       	ldi	r28, 0x00	; 0
    3020:	d0 e0       	ldi	r29, 0x00	; 0
		seq_num++;
    3022:	0f 5f       	subi	r16, 0xFF	; 255
    3024:	1f 4f       	sbci	r17, 0xFF	; 255
	//send AC offset accumulated within the minute & the overall AC sequence number
	_send_ac_offset(AC_NUMS - summary_count); 
	_send_ac_count(cseq);		

    //send the acs from start to current ac index
	for (int i = si;(i != ci);)
    3026:	80 91 1f 01 	lds	r24, 0x011F
    302a:	90 91 20 01 	lds	r25, 0x0120
    302e:	c8 17       	cp	r28, r24
    3030:	d9 07       	cpc	r29, r25
    3032:	09 f0       	breq	.+2      	; 0x3036 <_send_acs+0xe4>
    3034:	b2 cf       	rjmp	.-156    	; 0x2f9a <_send_acs+0x48>
			counter++;
			if (counter == 10)
				return;
		}*/
	}
	_receive_data();
    3036:	0e 94 83 11 	call	0x2306	; 0x2306 <_receive_data>
}
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	1f 91       	pop	r17
    3040:	0f 91       	pop	r16
    3042:	ff 90       	pop	r15
    3044:	ef 90       	pop	r14
    3046:	df 90       	pop	r13
    3048:	08 95       	ret

0000304a <__mulsi3>:
    304a:	62 9f       	mul	r22, r18
    304c:	d0 01       	movw	r26, r0
    304e:	73 9f       	mul	r23, r19
    3050:	f0 01       	movw	r30, r0
    3052:	82 9f       	mul	r24, r18
    3054:	e0 0d       	add	r30, r0
    3056:	f1 1d       	adc	r31, r1
    3058:	64 9f       	mul	r22, r20
    305a:	e0 0d       	add	r30, r0
    305c:	f1 1d       	adc	r31, r1
    305e:	92 9f       	mul	r25, r18
    3060:	f0 0d       	add	r31, r0
    3062:	83 9f       	mul	r24, r19
    3064:	f0 0d       	add	r31, r0
    3066:	74 9f       	mul	r23, r20
    3068:	f0 0d       	add	r31, r0
    306a:	65 9f       	mul	r22, r21
    306c:	f0 0d       	add	r31, r0
    306e:	99 27       	eor	r25, r25
    3070:	72 9f       	mul	r23, r18
    3072:	b0 0d       	add	r27, r0
    3074:	e1 1d       	adc	r30, r1
    3076:	f9 1f       	adc	r31, r25
    3078:	63 9f       	mul	r22, r19
    307a:	b0 0d       	add	r27, r0
    307c:	e1 1d       	adc	r30, r1
    307e:	f9 1f       	adc	r31, r25
    3080:	bd 01       	movw	r22, r26
    3082:	cf 01       	movw	r24, r30
    3084:	11 24       	eor	r1, r1
    3086:	08 95       	ret

00003088 <__udivmodhi4>:
    3088:	aa 1b       	sub	r26, r26
    308a:	bb 1b       	sub	r27, r27
    308c:	51 e1       	ldi	r21, 0x11	; 17
    308e:	07 c0       	rjmp	.+14     	; 0x309e <__udivmodhi4_ep>

00003090 <__udivmodhi4_loop>:
    3090:	aa 1f       	adc	r26, r26
    3092:	bb 1f       	adc	r27, r27
    3094:	a6 17       	cp	r26, r22
    3096:	b7 07       	cpc	r27, r23
    3098:	10 f0       	brcs	.+4      	; 0x309e <__udivmodhi4_ep>
    309a:	a6 1b       	sub	r26, r22
    309c:	b7 0b       	sbc	r27, r23

0000309e <__udivmodhi4_ep>:
    309e:	88 1f       	adc	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	5a 95       	dec	r21
    30a4:	a9 f7       	brne	.-22     	; 0x3090 <__udivmodhi4_loop>
    30a6:	80 95       	com	r24
    30a8:	90 95       	com	r25
    30aa:	bc 01       	movw	r22, r24
    30ac:	cd 01       	movw	r24, r26
    30ae:	08 95       	ret

000030b0 <__udivmodsi4>:
    30b0:	a1 e2       	ldi	r26, 0x21	; 33
    30b2:	1a 2e       	mov	r1, r26
    30b4:	aa 1b       	sub	r26, r26
    30b6:	bb 1b       	sub	r27, r27
    30b8:	fd 01       	movw	r30, r26
    30ba:	0d c0       	rjmp	.+26     	; 0x30d6 <__udivmodsi4_ep>

000030bc <__udivmodsi4_loop>:
    30bc:	aa 1f       	adc	r26, r26
    30be:	bb 1f       	adc	r27, r27
    30c0:	ee 1f       	adc	r30, r30
    30c2:	ff 1f       	adc	r31, r31
    30c4:	a2 17       	cp	r26, r18
    30c6:	b3 07       	cpc	r27, r19
    30c8:	e4 07       	cpc	r30, r20
    30ca:	f5 07       	cpc	r31, r21
    30cc:	20 f0       	brcs	.+8      	; 0x30d6 <__udivmodsi4_ep>
    30ce:	a2 1b       	sub	r26, r18
    30d0:	b3 0b       	sbc	r27, r19
    30d2:	e4 0b       	sbc	r30, r20
    30d4:	f5 0b       	sbc	r31, r21

000030d6 <__udivmodsi4_ep>:
    30d6:	66 1f       	adc	r22, r22
    30d8:	77 1f       	adc	r23, r23
    30da:	88 1f       	adc	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	1a 94       	dec	r1
    30e0:	69 f7       	brne	.-38     	; 0x30bc <__udivmodsi4_loop>
    30e2:	60 95       	com	r22
    30e4:	70 95       	com	r23
    30e6:	80 95       	com	r24
    30e8:	90 95       	com	r25
    30ea:	9b 01       	movw	r18, r22
    30ec:	ac 01       	movw	r20, r24
    30ee:	bd 01       	movw	r22, r26
    30f0:	cf 01       	movw	r24, r30
    30f2:	08 95       	ret

000030f4 <__divmodsi4>:
    30f4:	97 fb       	bst	r25, 7
    30f6:	09 2e       	mov	r0, r25
    30f8:	05 26       	eor	r0, r21
    30fa:	0e d0       	rcall	.+28     	; 0x3118 <__divmodsi4_neg1>
    30fc:	57 fd       	sbrc	r21, 7
    30fe:	04 d0       	rcall	.+8      	; 0x3108 <__divmodsi4_neg2>
    3100:	d7 df       	rcall	.-82     	; 0x30b0 <__udivmodsi4>
    3102:	0a d0       	rcall	.+20     	; 0x3118 <__divmodsi4_neg1>
    3104:	00 1c       	adc	r0, r0
    3106:	38 f4       	brcc	.+14     	; 0x3116 <__divmodsi4_exit>

00003108 <__divmodsi4_neg2>:
    3108:	50 95       	com	r21
    310a:	40 95       	com	r20
    310c:	30 95       	com	r19
    310e:	21 95       	neg	r18
    3110:	3f 4f       	sbci	r19, 0xFF	; 255
    3112:	4f 4f       	sbci	r20, 0xFF	; 255
    3114:	5f 4f       	sbci	r21, 0xFF	; 255

00003116 <__divmodsi4_exit>:
    3116:	08 95       	ret

00003118 <__divmodsi4_neg1>:
    3118:	f6 f7       	brtc	.-4      	; 0x3116 <__divmodsi4_exit>
    311a:	90 95       	com	r25
    311c:	80 95       	com	r24
    311e:	70 95       	com	r23
    3120:	61 95       	neg	r22
    3122:	7f 4f       	sbci	r23, 0xFF	; 255
    3124:	8f 4f       	sbci	r24, 0xFF	; 255
    3126:	9f 4f       	sbci	r25, 0xFF	; 255
    3128:	08 95       	ret

0000312a <__eerd_byte_m1284p>:
    312a:	f9 99       	sbic	0x1f, 1	; 31
    312c:	fe cf       	rjmp	.-4      	; 0x312a <__eerd_byte_m1284p>
    312e:	92 bd       	out	0x22, r25	; 34
    3130:	81 bd       	out	0x21, r24	; 33
    3132:	f8 9a       	sbi	0x1f, 0	; 31
    3134:	99 27       	eor	r25, r25
    3136:	80 b5       	in	r24, 0x20	; 32
    3138:	08 95       	ret

0000313a <__eerd_word_m1284p>:
    313a:	a8 e1       	ldi	r26, 0x18	; 24
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	42 e0       	ldi	r20, 0x02	; 2
    3140:	50 e0       	ldi	r21, 0x00	; 0
    3142:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <__eerd_blraw_m1284p>

00003146 <__eewr_byte_m1284p>:
    3146:	26 2f       	mov	r18, r22

00003148 <__eewr_r18_m1284p>:
    3148:	f9 99       	sbic	0x1f, 1	; 31
    314a:	fe cf       	rjmp	.-4      	; 0x3148 <__eewr_r18_m1284p>
    314c:	1f ba       	out	0x1f, r1	; 31
    314e:	92 bd       	out	0x22, r25	; 34
    3150:	81 bd       	out	0x21, r24	; 33
    3152:	20 bd       	out	0x20, r18	; 32
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	f8 94       	cli
    3158:	fa 9a       	sbi	0x1f, 2	; 31
    315a:	f9 9a       	sbi	0x1f, 1	; 31
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	01 96       	adiw	r24, 0x01	; 1
    3160:	08 95       	ret

00003162 <__eewr_word_m1284p>:
    3162:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eewr_byte_m1284p>
    3166:	27 2f       	mov	r18, r23
    3168:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <__eewr_r18_m1284p>

0000316c <__eerd_block_m1284p>:
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22

00003170 <__eerd_blraw_m1284p>:
    3170:	fc 01       	movw	r30, r24
    3172:	f9 99       	sbic	0x1f, 1	; 31
    3174:	fe cf       	rjmp	.-4      	; 0x3172 <__eerd_blraw_m1284p+0x2>
    3176:	06 c0       	rjmp	.+12     	; 0x3184 <__eerd_blraw_m1284p+0x14>
    3178:	f2 bd       	out	0x22, r31	; 34
    317a:	e1 bd       	out	0x21, r30	; 33
    317c:	f8 9a       	sbi	0x1f, 0	; 31
    317e:	31 96       	adiw	r30, 0x01	; 1
    3180:	00 b4       	in	r0, 0x20	; 32
    3182:	0d 92       	st	X+, r0
    3184:	41 50       	subi	r20, 0x01	; 1
    3186:	50 40       	sbci	r21, 0x00	; 0
    3188:	b8 f7       	brcc	.-18     	; 0x3178 <__eerd_blraw_m1284p+0x8>
    318a:	08 95       	ret

0000318c <_exit>:
    318c:	f8 94       	cli

0000318e <__stop_program>:
    318e:	ff cf       	rjmp	.-2      	; 0x318e <__stop_program>
