/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import bluetooth.CalibrationValues;
import bluetooth.PcClient;
import java.awt.CardLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.bluetooth.RemoteDevice;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.microedition.io.StreamConnection;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Aida
 */
public class ConnectPanel extends javax.swing.JPanel {

    JPanel userProcessContainer; 
    Vector btDevices;
    PcClient btConnect;
    int index = 0;
    CalibrationValues calibrationValues;
    
    public ConnectPanel(JPanel upc, Vector btDevices) {
        initComponents();        
        
        this.btDevices = btDevices;
        userProcessContainer = upc;
        refresh();  
        calibrationValues = new CalibrationValues();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        wocketsTable = new javax.swing.JTable();
        connectjButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        wocketsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Index", "Wocket Name", "Wocket Address"
            }
        ));
        jScrollPane1.setViewportView(wocketsTable);

        connectjButton.setText("Connect");
        connectjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectjButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Select the Wocket you want to calibrate. Then click Conncet:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("PC-Wocket Application");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Connecting to Wocket");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Available Wockets:");

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        messageLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        messageLabel.setText("   ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)))
                        .addGap(129, 129, 129))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(251, 251, 251)
                                .addComponent(refreshButton)
                                .addGap(16, 16, 16))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(125, 125, 125)
                                            .addComponent(connectjButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshButton)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(connectjButton)
                .addGap(26, 26, 26)
                .addComponent(messageLabel)
                .addContainerGap(51, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void refresh(){
        int rowCount = wocketsTable.getRowCount();
        int i;

        for ( i= rowCount-1; i>= 0; i--){
        ((DefaultTableModel)wocketsTable.getModel()).removeRow(i);   
        }

        ArrayList <String> itemList = new ArrayList <String>();
        int btSize = btDevices.size();
        int cnt = 0;
        for (int k=0; k<btSize; k++){
            RemoteDevice remoteDevice=(RemoteDevice)btDevices.elementAt(k);
            String adr= remoteDevice.getBluetoothAddress();            
            if (adr.contains("0006660")){
                cnt++;
                Object[]new_row = new Object[3];
                new_row[0] = cnt;
                new_row[1] = "Wocket-"+adr.substring(8);
                new_row[2] = remoteDevice.getBluetoothAddress();
                ((DefaultTableModel)wocketsTable.getModel()).addRow(new_row);            
            }else{
                btDevices.removeElementAt(k);
                k--;
                btSize--;
            }
        }
    }
    
    private void connectjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectjButtonActionPerformed
        int temp = wocketsTable.getSelectedRow();
        if (temp == -1){
            JOptionPane.showMessageDialog(null, "Please select the Wocket(s) you want to calibrate...");
            return;
        }
        connectjButton.setVisible(false);
        refreshButton.setVisible(false);
        messageLabel.setText("Connecting to Wocket...It may take a while...");
        
        index = (Integer) wocketsTable.getValueAt(wocketsTable.getSelectedRow(), 0);;        
        Runnable connectRunnable = new Runnable() {
            public void run() { 
                try {                    
                    StreamConnection streamConnection = btConnect.connect(index-1);
                    RemoteDevice remoteDevice=(RemoteDevice)btDevices.elementAt(index-1);
                    calibrationValues.setSensorID("Wocket-"+remoteDevice.getBluetoothAddress().substring(8));
                    JPanel srPanel = new SetSamplingRatePanel(userProcessContainer, streamConnection, calibrationValues);
                    userProcessContainer.add("srPanel",srPanel);
                    CardLayout c1 = (CardLayout)userProcessContainer.getLayout();
                    c1.next(userProcessContainer);
                } catch (IOException ex) {
                    Logger.getLogger(ConnectPanel.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("Error in Connecting to Wocket! "+ex);
                }
            }            
        };
        SwingUtilities.invokeLater(connectRunnable); 
    }//GEN-LAST:event_connectjButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        try {
            PcClient.findDevices();
        } catch (IOException ex) {
            Logger.getLogger(ConnectPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        btDevices = PcClient.vecDevices;
        refresh();
    }//GEN-LAST:event_refreshButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable wocketsTable;
    // End of variables declaration//GEN-END:variables
}
